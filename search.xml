<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>csp-j1知识点总结</title>
      <link href="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、这为本人总结内容，主观性比较强，可以部分借鉴但不建议完全效仿；</li><li>2、如有使用或转载请注明出处；</li><li>3、如有不足，欢迎批评指正；</li></ul><hr><h1>CSP-J 第一轮知识点总结</h1><hr><h2 id="题目类型整理">* 题目类型整理</h2><table><thead><tr><th><strong>题型</strong></th><th><strong>知识点类型</strong></th><th><strong>题目</strong>数量</th></tr></thead><tbody><tr><td>单选</td><td>信息学史&amp;基本知识</td><td>8-10</td></tr><tr><td>单选</td><td>C++语法知识点</td><td>2-3</td></tr><tr><td>单选</td><td>数据结构&amp;算法</td><td>3-4</td></tr><tr><td>单选</td><td>数学&amp;逻辑学&amp;运筹学</td><td>3-4</td></tr><tr><td>单选</td><td>比赛相关知识</td><td>1-2</td></tr><tr><td>问题求解</td><td>数学</td><td>1</td></tr><tr><td>问题求解</td><td>数据结构</td><td>1</td></tr><tr><td>模拟程序运行</td><td>C++语法&amp;算法</td><td>4</td></tr><tr><td>完善程序</td><td>C++语法&amp;算法</td><td>2</td></tr></tbody></table><hr><h2 id="一、信息学及计算机史">一、信息学及计算机史</h2><ul><li><strong>计算机的顶级奖项</strong>：图灵奖、冯·诺依曼奖</li></ul><p>图灵奖：由ACM（美国计算机协会）设立于1966年。是“计算机界的诺贝尔奖”。</p><p>冯·诺依曼奖：由IEEE设立。</p><ul><li><strong>对信息科学做出突出贡献的大神</strong>：图灵（所以才有个奖），冯 · 诺伊曼</li><li><strong>中国获图灵奖的大神</strong>：姚期智（清华就有姚班，就是以他的名字命名的）</li><li><strong>世界第一台电子计算机</strong>：埃尼阿克（𝐸𝑁𝐼𝐴𝐶），于1946年2月14日在美国宾夕法尼亚大学诞生。又被叫做电子管计算机。</li></ul><hr><h2 id="二、关于编程">二、关于编程</h2><ul><li><strong>编程语言</strong>：</li></ul><p>分两类：面向对象和面向过程。</p><ul><li><strong>高级语言和低级语言的区别</strong>：</li></ul><p>高级语言需要编译运行，常数较大，运行速度慢。而低级语言常数极小，运行速度快。此外，高级语言更容易移植。</p><ul><li><strong>常见低级语言</strong>：</li></ul><p>汇编</p><ul><li><strong>面向对象的高级语言</strong>：</li></ul><p>C++，Java，EIFFEL，Simula 67等。</p><ul><li><strong>面向过程的高级语言</strong>：</li></ul><p>C，Fortran语言。</p><ul><li><strong>递归编程</strong>：</li></ul><p>递归是指一种通过重复将问题分解为同类的子问题而解决问题的方法。递归式方法可以被用于解决很多的计算机科学问题。简单来讲，就是“自身调用自身”（在函数中）。</p><ul><li><strong>P类/NP类/NPC类问题</strong>：</li></ul><p>1、P类问题：如果一个问题能找到一个在多项式时间内解决它的算法，那么这个问题就是P问题。</p><p>2、NP类问题：注意：NP问题<strong>不是非P类问题</strong>，而是在多项式时间内验证一个解的问题。或者，我们可以将其理解为在多项式时间内猜出一个解的问题。</p><p>3、NPC类问题：定义如下：如果一个问题是NP问题，而且所有的NP问题都可以约化到它。那么它就是NPC类问题。再来介绍一下关于约化的定义：如果一个问题A可以约化为问题B，含义就是这个问题A可以用问题B的解法来解决。</p><h3 id="NOIP-CSP等的历史、大事件、参赛要求（每年都考）">*NOIP / CSP等的历史、大事件、参赛要求（每年都考）</h3><ul><li><p>NOI：中国计算机学会于1984年（当年，*提出计算机要从娃娃抓起）创办全国青少年计算机程序设计竞赛，即全国青少年信息学奥林匹克竞赛，是国内包括港澳在内的省级代表队最高水平的大赛。</p></li><li><p>NOIP：中国计算机学会于1995年创办全国青少年信息学奥林匹克联赛。NOIP在同一时间、不同地点以各省市为单位由特派员组织。全国统一大纲、统一试卷，初、高中或其他中等专业学校的学生可报名参加。联赛分初赛和复赛，初赛考察通用和实用的计算机科学知识，以笔试为主。复赛为程序设计，须在计算机上调试完成。参加初赛者须达到一定分数线后才有资格参加复赛。联赛分普及组和提高组两个组别，难度不同，分别面向初中和高中阶段的学生。</p></li><li><p>从2005年开始，NOIP不再支持Basic；从2022年开始，不再支持Pascal。</p></li><li><p>选手进入考场时，只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，NOI各省特派员可直接取消违规选手的参赛资格。</p></li><li><p>CCSP：大学生计算机系统与程序设计竞赛，由中国计算机学会(CCF)于2016年发起的一个面向大学生的竞赛，每年举办一次，考察的是算法、编程以及计算机系统设计能力，旨在进一步提高计算机教育质量，使学生通过竞赛进一步学习和掌握计算机系统知识，同时对高校计算机教育产生引领作用。</p></li><li><p>CSP：中国计算机学会于2014年推出CCF计算机软件能力认证，该项认证重点考察软件开发者实际编程能力，由中国计算机学会统一命题、统一评测，委托各地设立的考试机构进行认证考试。该项认证每年大约3、9、12月各举办一次。认证者不限年龄，不限学历，不限报考次数，不限国籍 ，在报名官网注册账户后均可报名参加认证。语言：C/C++(Dev-CPP 5.4.0 (Min GW 4.7.2))，Java(Eclipse (Java SDK 1.7.0_15))，Python(3.6.5) 浏览器：Chrome</p><blockquote><p>CSP认证考试可以带纸质资料进入考场，不过只能是常用语言的程序设计基础书、数据结构的相关书籍。不允许U盘、手机等电子设备进入考场。</p><p>CSP-S/J：认证开始15分钟后，认证者不能再进入认证点。如有认证者提前离开认证点，除身体特别原因外，须在认证进行2小时后方可准予离开。在第一轮认证期间，任何人不得将试卷携带出考场。认证者进入考场时，监考检查认证者携带物品。认证者只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，CSP-J/S认证总负责人可直接取消违规认证者的参加资格。</p></blockquote></li></ul><hr><h2 id="三、关于计算机">三、关于计算机</h2><p>先上张大图：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/1.png" alt></p><ul><li><p><strong>重要设备</strong>：</p><p>硬件组成：</p><ol><li>控制器(Control):是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。</li><li>运算器(Datapath):运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。</li><li>存储器(Memory):存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。</li><li>输入设备(Input system):输入设备是计算机的重要组成部分，输入设备与输出设备合称为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。</li><li>输出设备(Output system):输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。</li></ol></li><li><p><strong>CPU及存储</strong>：</p></li></ul><p>CPU（中央处理器）=运算器+控制器+寄存器</p><p>运算器=算术逻辑运算单元（ALU）及浮点运算单元（FPU）</p><p>存储器=内存储器+外存储器</p><p>BIOS是英文&quot;Basic Input Output System&quot;的缩略语，直译过来后中文名称就是&quot;基本输入输出系统&quot;。其实，它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、系统设置信息、开机后自检程序和系统自启动程序。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。</p><p>随机存储器RAM的“随机”指“随时访问”</p><p>所以，我们记下来以下知识点：</p><p><strong>断电后可以保存数据：硬盘，ROM</strong></p><p><strong>断电后不可以保存数据：显存（显卡内存），RAM，CPU</strong></p><ul><li><strong>计算机各存储单位及进位关系</strong>：</li></ul><p>计算机的存储单位有以下几种：<br>$$<br>𝑇𝐵/𝐺𝐵/𝑀𝐵/𝐾𝐵/𝐵<br>$$<br>他们之间的进位关系为 $1024$</p><p>特殊地，$1B=8(bit)$ ，这里的 $𝑏𝑖𝑡$ 是二进制下的一位内存。</p><h3 id="机内代码及其运算">* 机内代码及其运算</h3><p>原码：设X，若为非负数，则符号位为0，其余各位取值不变，否则符号位为1。如：</p><p>X=+1110001，则[X]原=01110001；X=-1110001，则[X]原=11110001。</p><p>反码：设X，若为非负数，则与原码相同，否则符号位为1，其余各位取值求反。如：</p><p>X=+1110001，则[X]反=01110001；X=-1110001，则[X]反=10001110。</p><p>补码：设X，若为非负数，则与原码相同，若为负数，则为反码加1。如：</p><p>X=+1110001，则[X]补=01110001；X=-1110001，则[X]补=10001111。</p><p>负补：对补码（包括符号位）的每一位求反，且最低位加1。如：</p><p>X=+1110001，[-X]补=10001111。</p><p>[X+Y]补=[X]补+[Y]补，[X-Y]补=[X]补-[Y]补=[X]补+[-Y]补（最高位产生的进位要丢掉）</p><hr><h2 id="四、进制及进制转化">四、进制及进制转化</h2><h4 id="十进制转任意进制">十进制转任意进制</h4><p>将十进制转换成N𝑁进制，只需把十进制数每次除N𝑁求余数，然后把余数逆序写出来。</p><p>看不懂就看图：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/2.png" alt></p><p>这是二进制的图，其他进制就类比推一下就可以了。如果这个看不懂的话就不要参加初赛了，50块钱买点啥不好…</p><h4 id="任意进制转十进制">任意进制转十进制</h4><p>简单说就是：按位转，第i𝑖位的数字乘以要转换的进制的𝑛−1次幂即可。</p><p>还是上图：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/3.png" alt></p><h4 id="任意进制互相转化">任意进制互相转化</h4><p>这里考虑用十进制做中转，先把A𝐴进制转十进制，再把十进制转B𝐵进制。</p><h4 id="关于小数的进制转换">关于小数的进制转换</h4><p>十进制转任意进制的小数不进行除法运算，而进行乘法运算后取整，取整后从前向后排列。</p><p>任意进制转十进制的小数只需要乘上负指数，最后算出来即可。</p><h4 id="各进制的字母表达">各进制的字母表达</h4><p>$𝐻(𝐻𝑒𝑥𝑎𝑑𝑒𝑐𝑖𝑚𝑎𝑙)——16进制$</p><p>$𝐷(𝐷𝑒𝑐𝑖𝑚𝑎𝑙)——10进制$</p><p>$𝑂(𝑂𝑐𝑡𝑜𝑛𝑎𝑟𝑦)——8进制$</p><p>$𝐵(𝐵𝑖𝑛𝑎𝑟𝑦)——2进制$</p><h4 id="二进制的相关知识">二进制的相关知识</h4><p>二进制是计算机进行计算所使用的工具，自然也是非常常考的要点。二进制的相关知识有许多，甚至算法中的位运算也是二进制的相关内容，但为了过第一轮初赛，我们只介绍一些理论知识。关于位运算的相关知识请有兴趣的同学自己学习。</p><ul><li><strong>1、原码</strong></li></ul><p>顾名思义，原码就是十进制数直接转换成二进制之后直接形成的二进制编码。</p><ul><li><strong>2、补码</strong></li></ul><p>正数的补码是本身，负数的补码是其<strong>反码加一</strong>。</p><ul><li><strong>3、反码</strong></li></ul><p>顾名思义：正数的反码是本身，负数的反码是其除符号位之外的所有位按位取反的结果。</p><h4 id="附：ASCII码">附：ASCII码</h4><p>ASCII（American Standard Code for Information Interchange，美国标准信息交流码）码是目前微型计算机中使用最广泛的一种字符编码，用7位二进制数来编码（占一个字节），可表示128个字符，最高位为0或作奇偶校验用。</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/10.jpg" alt></p><hr><h2 id="五、位运算">五、位运算</h2><p>位运算不仅在初赛中是一个知识点分类，在复赛（即真正的程序设计与运用）的时候也有很大的一个应用。而且，位运算的相关知识是计算机运算的灵魂，更是每个程序猿应该理解的一种基本操作。</p><h3 id="1、与-运算">1、与(&amp;)运算</h3><h4 id="1-运算法则">(1)运算法则</h4><p>两个二进制数进行与&amp;运算，如果对应位都为1则结果为1，否则为0.</p><h4 id="2-技巧及用途">(2)技巧及用途</h4><p>**与运算常常用于二进制下的取位操作。**想要知道二进制下的某位是否是1，就&amp;上这个位数对应的十进制数。假如返回的是这个十进制数本身，则这个位的确是1，反之就是0.</p><p>比如：</p><p>我们要取第三位是否为1，我们只需要与&amp;上第三位（二进制表示为100）对应的二进制数4，如果返回值为4，就代表第三位为1，反之就是0.</p><p>最常用的是取二进制下的最末位，即a&amp;1。这样的技巧可以用于<strong>判断奇偶</strong>，根据二进制常识，尾数为1则为奇数，反之为偶数。</p><h3 id="2、或-运算">2、或(|)运算</h3><h4 id="1-运算法则-2">(1)运算法则</h4><p>两个二进制数进行或|运算，如果对应位有一个为1，结果就为1.只有在两个数的对应位置都是0的时候，结果才为0.</p><h4 id="2-技巧及用途-2">(2)技巧及用途</h4><p><strong>或运算常用于二进制特定位的赋值</strong>。想把哪个位强行变成1，就用这个数|上这个位数对应的二进制数。</p><p>还是上面那个例子，我们想让00000的第三位变成1.即十进制变4，我们直接|上4就可以。</p><p>当然，不同于&amp;运算，我们很少用|运算进行任意位赋值。通常来讲，我们只使用a|1把a的最后一位强行变成1，其实质意义是<strong>把原数加一</strong>。或者使用a|1-1再把它变为0.这个技巧通常用于<strong>把它变成它最接近的偶数</strong>。</p><h3 id="3、异或-xor-运算">3、异或(^)(xor)运算</h3><h4 id="1-运算法则-3">(1)运算法则</h4><p>两个二进制数进行异或(^)运算，如果对应位相同，不管是0或者是1，都返回1，反之返回0.</p><h4 id="2-技巧及用途-3">(2)技巧及用途</h4><p>其实没啥用途…</p><p>好吧，我介绍一个性质：一个数经过两次异或之后等于原数。</p><p>（很好理解）</p><h3 id="4、非-运算">4、非(~)运算</h3><h4 id="1-运算法则-4">(1)运算法则</h4><p>把给定二进制数全部取反。</p><h4 id="2-技巧及用途-4">(2)技巧及用途</h4><p>其实没什么运算上的用途，本蒟蒻曾看见一些大佬用这个运算判断输入是否为0…</p><p>大约长这个样子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))</span><br></pre></td></tr></table></figure><h3 id="5、左移-运算">5、左移(&lt;&lt;)运算</h3><h4 id="1-运算法则-5">(1)运算法则</h4><p>a&lt;&lt;b表示把a的二进制位向左移动b位，低位用0补上。</p><h4 id="2-技巧及用途-5">(2)技巧及用途</h4><p>根据二进制的常识，我们会发现，二进制第k位上的数就等于2k2𝑘。（从0开始计位）</p><p>比如，二进制下的100就是2k=2=42𝑘=2=4。</p><p>所以我们发现，左移运算a&lt;&lt;b的实质就是a×2b𝑎×2𝑏。</p><p>左移运算最常用的技巧就是用来代替×2的整数次幂的乘法运算。因为我们普遍认为，位运算是要比四则运算加减乘除及模运算更快一些的运算。</p><h3 id="6、右移-运算">6、右移(&gt;&gt;)运算</h3><h4 id="1-运算法则-6">(1)运算法则</h4><p>a&gt;&gt;b就是把a的二进制位向右移动b位，溢出的舍去。</p><h4 id="2-技巧及用途-6">(2)技巧及用途</h4><p>类比于左移运算，我们发现右移运算就是把a除以2的整数次幂。这就是右移运算的用途——优化除法运算。</p><p>这里需要特殊说明的是，右移算法可以用在数学知识中的求最大公约数的程序块上。因为mod运算的效率慢的出奇，所以我们可以用右移运算来进行除以2的操作。据说可以提高百分之60的效率。</p><h3 id="7、位运算优先级">7、位运算优先级</h3><p>位运算的优先级是我们在处理位运算的时候常常要考虑的问题，诚然，我们可以用括号强制位运算的顺序，但是，我们还是应该学会位运算的优先级（这应该是常识）。</p><p>位运算的优先级如下：</p><p><strong>按位反（~）&gt;位移运算（&lt;&lt;,&gt;&gt;）&gt;按位与（&amp;）&gt;按位异或（^）&gt;按位或（|）</strong></p><h3 id="附：位运算在状压DP的用法">附：位运算在状压DP的用法</h3><p>众所周知，状压DP就是把状态压缩成一个01串（其实就是一个二进制数），用以减少DP数组的维数。但是我们在DP的时候就要按照01串来进行状态的转移。所以位运算是状压DP的基础知识和必备知识。所以我在本篇随笔的末尾还附上了状压DP中比较常用的操作及其二进制实现的方式。</p><p>正文：（本文中的a表示十进制下的整数）</p><p><strong>1、获得第i位的数字</strong>：(a&gt;&gt;i)&amp;1 或者 a&amp;(1&lt;&lt;i)</p><p>很好理解，我们知道可以用&amp;1来提取最后一位的数，那么我们现在要提取第i位数，就直接把第i位数变成最后一位即可（直接右移）。或者，我们可以直接&amp;上1左移i位，也能达到我们的目的。</p><p><strong>2、设置第i位为1</strong>：a=a|(1&lt;&lt;i)</p><p>我们知道强制赋值用|运算，所以就直接强制|上第i位即可。</p><p><strong>3、设置第i位为0</strong>：a=a&amp;(~(1&lt;&lt;i))</p><p>这里比较难以理解。其实很简单，我们知道非~运算是按位取反，(1&lt;&lt;i)非一下就变成了第i为是0，其它全是1的二进制串。这样再一与原数进行&amp;运算，原数的第i位无论是什么都会变成0，而其他位不会改变（实在不明白的可以用纸笔进行推演）。</p><p><strong>4、把第i位取反</strong>：a=a^(1&lt;&lt;i)</p><p>1左移i位之后再进行异或，我们就会发现，如果原数第i位是0，一异或就变成1，否则变成0。</p><p><strong>5、取出一个数的最后一个1</strong>：a&amp;(-a)</p><p>学过树状数组的同学会发现，这就是树状数组的lowbit。事实上，这和树状数组的原理是一样的。我想，不需要我多解释。</p><p>为了应对初赛的笔试题，建议读者在阅读完这篇博客之后至少应该掌握：<strong>各种位运算的运算法则以及位运算优先级</strong>。</p><h4 id="另外，对于位运算的优先级，本蒟蒻在后面的逻辑运算部分还会有详细的解析。">另外，对于位运算的优先级，本蒟蒻在后面的逻辑运算部分还会有详细的解析。</h4><h3 id="逻辑运算">逻辑运算</h3><h4 id="逻辑运算-2">逻辑运算</h4><p>逻辑运算一共有三种，每种都有两种写法：</p><p><strong>逻辑非</strong>：！或 ┐</p><p><strong>逻辑与</strong>：&amp;&amp; 或 ∧</p><p><strong>逻辑或</strong>：|| 或 ∨</p><h4 id="逻辑运算的优先级">逻辑运算的优先级</h4><p>非&gt;&gt;与&gt;&gt;或</p><h4 id="位运算-逻辑运算的优先级">位运算+逻辑运算的优先级</h4><p><strong>逻辑非（！，┐）=按位反（~）&gt;位移运算（&lt;&lt;,&gt;&gt;）&gt;不等号（&gt;=,&lt;=）&gt;等号（==,!=）&gt;按位与（&amp;）&gt;按位异或（^）&gt;按位或（|）&gt;逻辑与（&amp;&amp;，∧）&gt;逻辑或（||，∨）</strong></p><h4 id="逻辑表达式">逻辑表达式</h4><p>由逻辑运算复合而成，只有两种结果：𝑡𝑟𝑢𝑒和𝑓𝑎𝑙𝑠𝑒，在C/C++中，返回的值以0表示假，以1表示真。</p><h4 id="条件表达式">条件表达式</h4><p>条件表达式的基本形式如下：</p><p>&lt;表达式1&gt;？&lt;表达式2&gt;：&lt;表达式3&gt;</p><p>其表达意义是：如果表达式1成立，则执行表达式2，否则执行表达式3。其实也等价于𝑖𝑓−𝑒𝑙𝑠𝑒条件语句。例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Min(a,b) a&lt;b?a:b</span></span><br></pre></td></tr></table></figure><p>**注意：**如果条件表达式有多个进行复合，那么在执行的时候需要从由往左依次判断最后得出一个结果。即：<strong>右结合性</strong>。</p><p>比如：</p><p>&lt;表达式1&gt;？&lt;表达式2&gt;：&lt;表达式3&gt;？&lt;表达式4&gt;：&lt;表达式5&gt;</p><p>那么，在执行的时候是从3开始判断是否为真，然后执行某一个表达式，依次向上回溯。</p><hr><h2 id="六、简单数据结构基本理论">六、简单数据结构基本理论</h2><h3 id="1、链表">1、链表</h3><p>本篇随笔就数据结构——链表进行讲解。链表是一种特别实用的数据结构，我把它理解为<strong>数组的升级版</strong>，也就是在数组的基础上，它能做到在任意位置添加或者删除元素，而不影响其他元素。链表还是我们进行图论学习时，图的常用存储方式——邻接表（链式前向星）的实现基础。学习链表需要读者具有一定的语法基础，最好会一点点指针。（不会也没关系，我们主要讲解数组模拟链表）</p><h4 id="什么是链表">什么是链表</h4><p>链表，顾名思义，就是带链的表。我已经说过，链表属于数组的加强版。那我们可以借助数组来理解链表：如果说数组是一长排连在一起的“方块”的话，那么链表就是把这些方块“拉开“，每个方块还有两个箭头，分别指向这个方块前面的方块和后面的方块。</p><p>这样我们就可以理解，为什么链表可以支持随机插入和删除了。从某种意义上来说，这里的每一个方块都是离散的，我们在某两点插入的时候，只需要把要插入的元素，这个元素目标位置前面的元素、后面的元素的箭头改一下，就做到了插入的操作。删除同理。</p><h4 id="链表的实现原理">链表的实现原理</h4><p>根据刚才的理解，我们可以发现，我们可以用一个结构体来模拟每一个方块，结构体中存一个元素和两个指针，指针分别指向上一个元素的位置和下一个元素的位置。但是蒟蒻不会指针指针的实现比较麻烦，而且在调试的时候也不是很理想。所以我们来想指针的本质就是告诉你一个位置，那么针对于”加强数组“链表来讲，这个位置可以用什么来表示呢？</p><p><strong>对，数组下标。</strong></p><p>所以我们刚才的结构体就可以简化，变成存一个元素和两个int变量（存储数组下标）。这样，我们就可以用结构体数组模拟链表的实现。</p><h3 id="2、栈">2、栈</h3><p>想象一个桶，你从上面往里扔砖，然后你想把某一块砖拿出来，你需要先拿出来你后扔进去的砖。这就是栈。栈的基本原则是：后进先出</p><p>来一发图示？</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/7.png" alt></p><h4 id="浅谈前、中、后缀表达式">浅谈前、中、后缀表达式</h4><p>前、中、后缀表达式是信息学奥林匹克竞赛中比较鸡肋的知识点。但是知识点在考纲范围内，而且中缀表达式转后缀表达式是比较有用的知识。所以在这里为大家简单介绍一下。</p><h4 id="前缀表达式（少用）">前缀表达式（少用）</h4><p>又称波兰式（Polish Notation），操作符以前缀形式位于两个运算数前（如：3+2的前缀表达形式就是+ 3 2）。</p><h4 id="中缀表达式">中缀表达式</h4><p>操作符以中缀形式位于运算数中间（如：3+2），是我们日常通用的算术和逻辑公式表示方法。</p><p>例子：<br>$$<br>6×12+9−14。<br>$$</p><h4 id="后缀表达式">后缀表达式</h4><p>又称逆波兰式（Reverse Polish Notation - RPN），操作符以后缀形式位于两个运算数后（如：3+2的后缀表达形式就是3 2 +）。</p><p>例子：（注意！正常写是没有逗号的，这里方便区分）<br>$$<br>6 ，12 ，× ，9 ，+ ，14 ，-<br>$$</p><h4 id="后缀表达式转中缀表达式的实现：">后缀表达式转中缀表达式的实现：</h4><p>从左至右依次遍历后缀表达式各个字符（需要准备一个运算数栈存储运算数和操作结果）</p><p>1、字符为 运算数 ：</p><p>直接入栈（注：需要先分析出完整的运算数并将其转换为对应的数据类型）</p><p>2、字符为 操作符 ：</p><p>连续出栈两次，使用出栈的两个数据进行相应计算，并将计算结果入栈</p><p>注意：第一个出栈的运算数为 a ，第二个出栈的运算数为 b ，此时的操作符为 - ，则计算 b-a  （注：a和b顺序不能反），并将结果入栈。</p><p>3、重复以上步骤直至遍历完成后缀表达式，最后栈中的数据就是中缀表达式的计算结果。</p><p>还拿上面的例子：</p><p>$$<br>6 ，12 ，× ，9 ，+ ，14 ，-<br>$$</p><p>上面的式子就可以写成如下的中缀表达式：</p><p>$$<br>6×12+9−14。<br>$$</p><ul><li>特别注意：针对一个确定的中缀表达式，其所对应的后缀表达式不唯一；而针对一个确定的后缀表达式，其对应的中缀表达式是唯一的。</li></ul><h3 id="3、队列">3、队列</h3><p>想象你在排队买票，这个队伍中的人都非常有素质，都自觉排队而且不会提前离开队伍。这样就只能从队首买完票再离开，从队尾进入队伍。队列的基本原则是：先进先出。</p><p>再来一发图示：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/8.png" alt></p><h3 id="4、字符串">4、字符串</h3><p>字符串子串的概念：字符串是一串字符（废话），它的子串被定义为：字符串中<strong>任意个连续的字符组成的子序列</strong>。</p><p>字符串子串个数的计算公式：<br>$$<br>\frac{n×(n+1)}{2}+1<br>$$</p><p>（就是字符串长度等差数列）</p><p>如果是非空子串，就把那个一减去即可（子串个数的公式加一就是考虑空子串的情况）。</p><h3 id="5-树">5.树</h3><p>emmm…直观来讲，就是一张长得像树的图。定义是任意两点之间的简单路径有且只有一条。树是一棵连通且无环的图。它的边数是𝑛−1。</p><h4 id="二叉树的遍历">二叉树的遍历</h4><p>二叉树有不同的遍历方式，一般来讲，我们将其分成三类：先序遍历（也叫先根遍历）、中序遍历（中根遍历）以及后序遍历（后根遍历）。</p><ul><li><strong>先序遍历</strong>：遍历方式如下：根—左儿子—右儿子</li><li><strong>中序遍历</strong>：遍历方式如下：左儿子—根—右儿子</li><li><strong>后序遍历</strong>：遍历方式如下：左儿子—右儿子—根</li></ul><p>我们用一张图来理解一下这几种遍历方式。</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/4.png" alt></p><p>这张图的先序遍历：1245367</p><p>中序遍历：4251637</p><p>后序遍历：4526731</p><ul><li><p><strong>一个推论</strong>：</p><p>先序遍历+中序遍历=一棵确定的二叉树</p><p>后序遍历+中序遍历=一棵确定的二叉树</p><p>先序遍历+后序遍历=啥也不是</p></li></ul><h4 id="特殊二叉树及其性质">特殊二叉树及其性质</h4><ul><li><strong>完全二叉树</strong>：只有最后一层不是满的，且最后一层的所有节点均集中在左侧。</li></ul><p>图例如下：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/5.png" alt></p><ul><li><strong>满二叉树</strong>：节点个数已满。</li></ul><p>图例如下：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/6.png" alt></p><ul><li><strong>特殊二叉树的性质</strong>：</li></ul><p>1、对于一棵完全二叉树来讲，它的叶子节点为 $𝑛$，则节点总数为 $2×𝑛−1$。此结论可逆。</p><p>2、对于一棵满二叉树来讲，它的层数（深度）为 $𝑘$，则它的节点总数为 $2×𝑘−1$。此结论可逆。</p><h4 id="拓扑排序（这个先不讲）">拓扑排序（这个先不讲）</h4><h3 id="6-图论">6.图论</h3><p>图（Graph）是图论中的一个重要概念，用于描述由节点（顶点）和连接这些节点的边（或弧）组成的非线性数据结构。</p><h4 id="图的基本概念：">图的基本概念：</h4><ul><li><p>顶点（Vertex）：图中的基本单位，通常用于表示实体或节点。</p></li><li><p>边（Edge）：连接图中两个顶点的关系。边可以是有向的（有方向性，称为弧）或无向的（无方向性）。</p></li><li><p>路径（Path）：顶点序列，其中每两个相邻的顶点通过一条边连接。</p></li><li><p>环（Cycle）：路径中第一个顶点等于最后一个顶点的路径。</p></li><li><p><strong>连通图</strong>：顾名思义，连通图就是连通的图，即任意两点都能<strong>直接或间接</strong>到达，这就区别于完全图必须直接用边到达的定义。</p></li><li><p><strong>完全图</strong>：任意两点都有边相连，我们很容易推出来，一张完全图的边数为（𝑛为节点个数）</p></li></ul><p>$$<br>\frac{n×(n−1)}{2}<br>$$</p><ul><li><p>无向图（Undirected Graph）：所有边没有方向的图。</p></li><li><p>有向图（Directed Graph）：图中的边有方向性的图。</p></li><li><p>权重（Weight）：边或弧上关联的数值，通常用于表示边的成本或距离。</p></li></ul><h4 id="图的邻接矩阵存储：">图的邻接矩阵存储：</h4><p>邻接矩阵是用二维数组表示图的一种常见方法，其中数组元素表示顶点之间的连接关系。</p><p>定义：对于一个有n个顶点的图，邻接矩阵是一个n x n的矩阵，其中元素 a[i][j] 表示顶点 i 和顶点 j 之间是否有边或弧。如果是无向图，通常用1表示连接，0表示没有连接；如果是有向图，可以用1表示有边，0表示没有边，或者用权值表示边的权重。</p><p>优点：</p><ul><li>简单直观，易于理解和实现。</li><li>方便查找任意两个顶点之间是否有边。</li></ul><p>缺点：</p><ul><li>浪费空间：对于稀疏图（边数量远少于顶点数量），大部分矩阵元素为0，造成空间浪费。</li><li>不适合大规模图：当顶点数量非常大时，邻接矩阵的空间消耗会很大。</li></ul><h4 id="图的邻接表存储：">图的邻接表存储：</h4><p>邻接表是用链表或者类似的数据结构表示图的另一种常见方法，适合表示稀疏图。</p><p>定义：使用数组和链表的结合来表示图。数组的每个元素对应一个顶点，每个元素存储与该顶点相邻的所有顶点（即与其有边直接连接的顶点）的链表或者列表。</p><p>优点：</p><ul><li>省空间：对于稀疏图，只存储存在的边，节省了空间。</li><li>插入和删除效率高：对于边的插入和删除操作，相较于邻接矩阵更加高效。</li></ul><p>缺点：</p><ul><li><p>不便于查找任意两个顶点之间的关系：需要遍历链表来确定两个顶点是否相连，效率低于邻接矩阵。</p></li><li><p>需要额外空间来存储链表或列表。</p></li></ul><h4 id="在实际应用中，选择邻接矩阵还是邻接表取决于图的稀疏程度和需要的操作类型。稠密图适合用邻接矩阵表示，而稀疏图通常用邻接表表示。">在实际应用中，选择邻接矩阵还是邻接表取决于图的稀疏程度和需要的操作类型。稠密图适合用邻接矩阵表示，而稀疏图通常用邻接表表示。</h4><hr><h2 id="七、时空复杂度的计算">七、时空复杂度的计算</h2><ul><li><strong>时间复杂度</strong>：渐进时间复杂度用符号 $𝑂$  表示。一个程序的语句执行次数可以用一个代数式表示，那么我们取这个代数式的最高次项且忽略此项系数作为时间复杂度。如果一个程序的语句执行次数为 $2𝑛^3+3𝑛^2+𝑛+7$，那么这个程序的渐进时间复杂度为 $𝑂(𝑛^3)$ 。</li><li><strong>计算非递归程序的时间复杂度</strong>：简单粗暴，数循环。</li><li><strong>常数</strong>：常数即为我们忽略掉的𝑂中最高次项的系数与低次项所带来的时间消耗。</li><li><strong>空间复杂度</strong>：类比时间复杂度。看开空间开了多大。</li><li><strong>计算空间占用量</strong>：根据我们以上说过的计算机存储单位的知识：一个𝑖𝑛𝑡占用的内存是4𝐵，所以我们把开的𝑖𝑛𝑡乘上4，再除以1024就是𝐾𝐵，同理，再除1024就是𝑀𝐵。</li></ul><p>公式：𝑛为元素个数，𝑀为最终答案（以𝑀𝐵为单位）</p><p>$$<br>M=\frac{4𝑛}{1024×1024}<br>$$<br>$PS:一般来讲，比赛中所给的 256𝑀𝐵 内存可以开 6×10^7 个 𝑖𝑛𝑡 类型的变量。另外，大数组必须开全局变量。如果扔在主函数里极容易爆栈。$</p><hr><h2 id="八、数学、逻辑学及运筹学知识">八、数学、逻辑学及运筹学知识</h2><h3 id="1、排列和组合的定义">1、排列和组合的定义</h3><h4 id="1-排列的定义">(1)排列的定义</h4><p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素按照一定顺序排成一列，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个排列。</p><h4 id="2-排列数的定义">(2)排列数的定义</h4><p>从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有排列的个数，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的排列数。</p><h4 id="3-全排列的定义">(3)全排列的定义</h4><p>当 $𝑛=𝑚$ 时所有的排列情况叫做<strong>全排列</strong>。</p><h4 id="4-组合的定义">(4)组合的定义</h4><p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素并成一组，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个组合。</p><h4 id="5-组合数的定义">(5)组合数的定义</h4><p>从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有组合的个数，叫做从 $𝑛$ 个不同元素中取出 $m$ 个元素的组合数。</p><h4 id="6-排列-组合的区别">(6)排列&amp;组合的区别</h4><p>通俗地说，组合不分顺序，而排列分顺序，也就是说，对于数列 $1，2$ ，有以下两种排列：$1，2$ 和 $2，1$ ，但是仅有一种组合 $1，2$ 或 $2，1$ 。</p><h3 id="2、排列-组合的公式">2、排列&amp;组合的公式</h3><h4 id="1-关于排列的公式">(1)关于排列的公式</h4><p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的排列数，数学表示为：$𝐴_{𝑛}^𝑚$.</p><p>计算公式如下：</p><p>$$<br>𝐴_{𝑛}^𝑚=𝑛(𝑛−1)(𝑛−2)⋯(𝑛−𝑚+1)=\frac{𝑛!}{(𝑛−𝑚)!}<br>$$</p><h4 id="2-关于组合的公式">(2)关于组合的公式</h4><p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的组合数，数学表示为：$𝐶_{𝑛}^𝑚$.</p><p>计算公式如下：</p><p>$$<br>𝐶_{𝑛}^𝑚=\frac{𝐴_{𝑛}^𝑚}{𝑚!}=\frac{𝑛!}{𝑚!(𝑛−𝑚)!}<br>$$</p><h4 id="3-关于全排列的公式">(3)关于全排列的公式</h4><p>某个数列的全排列数 $𝑓(𝑛)$，计算公式如下：</p><p>$$<br>𝑓(𝑛)=𝑛!<br>$$</p><h3 id="3、全排列的求法">3、全排列的求法</h3><p>例题：生成全排列（深搜基础题）</p><p><a href="https://neooj.com/oldoj/problem.php?id=1742">题目链接</a></p><p>给定 $𝑛$ ,生成 $1−𝑛$ 的全排列。</p><p>我们考虑用递归来解决全排列问题：</p><p>递归出口是当 $x==n+1$ 地时候，绝对不能仅仅等于 $n！$</p><p>我们的递归部分使用标记数组和数列数组实现，具体实现方法可以参照下图：<br><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/9.jpg" alt></p><hr><h2 id="九、算法">九、算法</h2><h3 id="1-算法的基本概念">1.算法的基本概念</h3><p>算法的特征：有穷性，确切性，至少一个输出，可行性</p><p>表示方法：自然语言法，程序流程图法（顺序结构，选择结构，循环结构），程序法</p><h3 id="2-排序">2.排序</h3><ul><li>$选择排序：对待排序的记录序列进行n-1遍的处理。第一遍处理是将L[1…n]中最小者与L[1]交换位置，第二遍处理是将L[2…n]中最小者与L[2]交换位置，以此类推，时间复杂度为O(n^{2}) )。选择排序是稳定排序。$</li><li>$插入排序：经过i-1遍处理后，L[1…i-1]已排好序。第i遍处理仅将L[i]插入L[1…i-1]的适当位置p，原来p后的元素一一向右移动一个位置，使得L[1…i]又是排好序的序列，时间复杂度为O(n^2 )。插入排序是稳定排序。$</li><li>$冒泡排序：又称交换排序。对待排序的记录的关键字进行两两比较，如果发现是反序的，则进行交换，时间复杂度为O( n^2 )。冒泡排序是稳定排序。$</li><li>$希尔排序：先将待排序列进行预排序，使待排序列接近有序，然后再对该序列进行一次插入排序，此时插入排序的时间复杂度为O(n)，$</li><li>$快速排序：先从数据序列中选一个元素，并将序列中所有比该元素小的元素都放在它的一边，再对左右两边分别用同样的方法处理，直到每一个待处理的序列长度为1，处理结束。时间复杂度下限为O(nlogn)，上限为O( n^2 )。快速排序是不稳定排序，基于分治思想。$</li><li>$归并排序：归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。时间复杂度为O(nlogn)$</li></ul><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/11.png" alt></p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/12.png" alt></p><h3 id="考试用到的其他基础算法板子将在我另外一篇博客里。">考试用到的其他基础算法板子将在我另外一篇博客里。</h3><hr><h2 id="十、程序阅读">十、程序阅读</h2><h3 id="阅读程序及完善程序题答题方法">阅读程序及完善程序题答题方法</h3><h3 id="（1）阅读程序和完善程序两个大题在CSP考试当中占据70分，也就是一多半。所以，前面的选择题全对也只能得个30分。这种题不要求必须全对，但是想进入普及组复赛，必须保证拿到70-80-（约合49-56分）的分值">（1）阅读程序和完善程序两个大题在CSP考试当中占据70分，也就是一多半。所以，前面的选择题全对也只能得个30分。这种题不要求必须全对，但是想进入普及组复赛，必须保证拿到70%~80%（约合49~56分）的分值</h3><h3 id="（2）题型：">（2）题型：</h3><p>① 阅读程序先给一个完整的程序，再给2~3个判断题和1~2个选择题，类似于阅读理解。除特殊说明外，判断题一个1.5分，选择题一个3分。<br>②完善程序先给一个有残缺部分的程序，再把合适的代码依次填入空中，均为选择题（一个题3分）。类似于完形填空</p><h3 id="（3）答题技巧">（3）答题技巧</h3><p>① 拿到卷子不用先看代码，先看题，在根据题干有目的地阅读代码的相应片段<br>② 不要一上来就先看第一题，第一题不会就死磕。先找突破口，就是那种非常好填的空，先填上后再加分析，推出其他题的答案。有的代码前后有关联，可以根据前后联系推出答案<br>③ 碰到特别长的程序千万不要惊慌。出一条长代码可能有这几点原因：1.这个程序所涉及的算法确实需要很长的代码；2.故意的，写一个特别长的代码纯粹就是一个考验，看看哪些人遇到这样的题不会慌张。也就是，有的长代码就是个纸老虎，静下心好好分析，不难。<br>④ 这种题也要看平时的积累以及扎实程度。多背一些算法的模板代码及例题，这种题拿五十多分也并非难事</p><hr>]]></content>
      
      
      <categories>
          
          <category> CSP-J/S </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces 题解</title>
      <link href="/2024/06/06/Codeforces%20%E9%A2%98%E8%A7%A3/"/>
      <url>/2024/06/06/Codeforces%20%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、题解为本人原作，如有使用注明出处。</li><li>2、如有改进地方欢迎批评指正~</li></ul><hr><h2 id="题目一：Problem-1925D-Codeforces">题目一：<a href="https://codeforces.com/problemset/problem/1925/D">Problem - 1925D - Codeforces</a></h2><h4 id="介绍一种二项式组合数方法：">介绍一种二项式组合数方法：</h4><p>众所周知，$期望 = 概率 * 值$。<br>我们设期望为 $E$，总概率为 $p$，总值为 $sum$。则：<br>$$<br>E=p\times sum<br>$$</p><p>由于 $k$ 的次数是固定的，则设<br>$$<br>s=\sum_{i=1}^m{f_i}<br>$$</p><p>且 $s$ 每回合每个固定增加 $1$ （类似于等差数列求和的过程），则有：<br>$$<br>sum\gets s+sum<br>$$<br>$$<br>s\gets s+m<br>$$</p><p>解决完 $sum$ 后，我们还剩下 $p$ 没有搞定，那么总概率 $p$ 怎么求呢？</p><p>因为每一个个体选中的概率是相等的，且都为<br>$$<br>\frac{1}{C_{n}^{2}}=\frac{2}{n(n-1)}<br>$$</p><p>所以我们可以先设选中的概率为 $x$，没被选中的概率为 $y$。</p><p>根据二项式定理得：<br>$$<br>p=\sum_{i=1}^k{C_{k}^{i}}x^iy^{k-i}<br>$$</p><p>$$<br>x=\frac{2}{n(n-1)},y=1-x<br>$$</p><p>因为事件是独立的，每个值对应着对应的概率，则总式为：</p><p>$$<br>sum_i\gets s+sum_{i-1}<br>$$</p><p>$$<br>\sum_{i=1}^k{E} \gets C_{k}^{i}x^iy^{k-i}\times sum_i<br>$$</p><p>$$<br>s\gets s+m<br>$$</p><p>最后我们把公式实现一下就搞定了，时间复杂度为：<br>$$<br>O(m+k\log mod)<br>$$</p><p>注意：有数据点当 $n$ 为 100000 时，数据会爆 longlong，所以算 $x$ 时先取模（我就是因为这个而 wa6 了 ~T_T~）。</p><h3 id="MainCode：">MainCode：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;f[i];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) s=(s+f[i])%mod;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>,res=<span class="number">0</span>,p=(n<span class="number">-1</span>)*n/<span class="number">2</span>%mod;   <span class="comment">//p记得取模</span></span><br><span class="line">    <span class="type">int</span> x=<span class="built_in">qmi</span>(p,mod<span class="number">-2</span>),y=(<span class="number">1</span>-x+mod)%mod;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        sum=(s+sum)%mod;</span><br><span class="line">        res=(res+<span class="built_in">C</span>(k,i)*<span class="built_in">qmi</span>(x,i)%mod*<span class="built_in">qmi</span>(y,k-i)%mod*sum%mod)%mod;</span><br><span class="line">        s=(s+m)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="题目二：Problem-2020E-Codeforces">题目二：<a href="https://codeforces.com/contest/2020/problem/E">Problem - 2020E - Codeforces</a></h2><p>题目大意：给定序列 $a$ 和概率序列 $p$，求和在 $a$ 序列中选取的集合总数异或和的平方。</p><h3 id="解题分析：">解题分析：</h3><p>一、首先集合总数为 $2^n$，每个集合都代表着每个元素选和不选两种情况，并且观察数据量，$a$ 序列中的元素很小，只有 1-1023，由此考虑用 $dp$ 背包思想来考虑此题，时间复杂度 $O(2^{10}n)$。</p><p>二、$dp[i][j]$ 代表在选取前 $i$ 个元素的集合里，异或和为 $j$ 的概率。因为 $a$ 序列元素的范围是 1-1023，所以异或和也不会超过 1023，$dp$ 数组开 $dp[N][2^{10}]$。</p><p>三、设上一个状态为 $t$，当前状态为 $j$，即：</p><p>$$<br>j = a[i] \oplus t<br>$$</p><p>已知 $j$，由异或的性质移项得：</p><p>$$<br>t = a[i] \oplus j<br>$$</p><p>四、转移方程：</p><ul><li>不选的情况：</li></ul><p>$$<br>dp_{i,j} = dp_{i-1,j} \times (1-p[i])<br>$$</p><ul><li>选的情况：</li></ul><p>$$<br>dp_{i,j} = dp_{i,j} + dp_{i-1,t} \times p[i]<br>$$</p><p>最后 $(f(S))^2$ 即把 0-1023 平方求和，并且把转移方程实现下就 ok 啦 <strong>（记得取模）</strong>。</p><h3 id="交了第一发-mle">交了第一发 mle</h3><p>$code$：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;p[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++) dp[i][j]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;     <span class="comment">// 什么都不选概率为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">        <span class="type">int</span> t=a[i]^j;</span><br><span class="line">        dp[i][j]=dp[i<span class="number">-1</span>][j]*(<span class="number">1</span>-p[i]*<span class="built_in">qmi</span>(<span class="number">10000</span>,mod<span class="number">-2</span>)%mod+mod)%mod;</span><br><span class="line">        dp[i][j]=(dp[i][j]+dp[i<span class="number">-1</span>][t]*p[i]%mod*<span class="built_in">qmi</span>(<span class="number">10000</span>,mod<span class="number">-2</span>)%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;i++) sum=(sum+dp[n][i]*i%mod*i%mod)%mod;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>第一发一交，发现 mle 了，把 define int long long 换了也不行，因此我意识到还得优化空间。</p><p>稍微思考了一下，发现这个就是经典滚动数组优化，可以优化掉一维，但是前一个状态得另外用一个数组 pre 来记录，因为异或会改变原来的状态，并且不是有序的。</p><h3 id="交了第二发-tle2">交了第二发 tle2</h3><p>$code$：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;p[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;i++) dp[i]=pre[i]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">pre[<span class="number">0</span>]=<span class="number">1</span>;     <span class="comment">// 什么都不选概率为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">        <span class="type">int</span> t=a[i]^j;</span><br><span class="line">        dp[j]=pre[j]*(<span class="number">1</span>-p[i]*<span class="built_in">qmi</span>(<span class="number">10000</span>,mod<span class="number">-2</span>)%mod+mod)%mod;</span><br><span class="line">        dp[j]=(dp[j]+pre[t]*p[i]%mod*<span class="built_in">qmi</span>(<span class="number">10000</span>,mod<span class="number">-2</span>)%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++) pre[j]=dp[j];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;i++) sum=(sum+(ll)dp[i]*i%mod*i%mod)%mod;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;<span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure><p>交了第二发 tle2，那就是把我 log 复杂度也卡了，赶紧先预处理一下 $p$ 序列先。。。。</p><h3 id="交了第三发tle13">交了第三发tle13</h3><p>b 溃了，居然还会 t，不会卡我 define int long long 了吧，我将信将疑改了再交一发。</p><h3 id="交了第四发-AC">交了第四发 AC</h3><p>$code$：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;p[i],p[i]=p[i]*<span class="built_in">qmi</span>(<span class="number">10000</span>,mod<span class="number">-2</span>)%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;i++) dp[i]=pre[i]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">pre[<span class="number">0</span>]=<span class="number">1</span>;     <span class="comment">// 什么都不选概率为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">        <span class="type">int</span> t=a[i]^j;</span><br><span class="line">        dp[j]=(ll)pre[j]*(<span class="number">1</span>-p[i]+mod)%mod;</span><br><span class="line">        dp[j]=(dp[j]+(ll)pre[t]*p[i]%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++) pre[j]=dp[j];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;i++) sum=(sum+(ll)dp[i]*i%mod*i%mod)%mod;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>布什戈门，3890ms 通过，这个题还会卡常？也许我这个还不是正解，恰巧被我冲过去了。</p><p>$ps$：交 c++20 能够冲到 890ms，很神秘。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Pytorch框架的深度学习语言对话模型</title>
      <link href="/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/"/>
      <url>/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、脚本为本人总结，如有使用注明出处。</li><li>2、模型基于Pytorch框架实现及训练。</li><li>3、脚本内有注释。</li></ul><hr><h2 id="运行过程：">运行过程：</h2><p><img src="/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/1.png" alt></p><p><img src="/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/2.png" alt></p><p><img src="/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/3.png" alt></p><h2 id="对话截图：">对话截图：</h2><p><img src="/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/4.png" alt></p><h2 id="Seq2Seq模型源码：">Seq2Seq模型源码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> unicodedata</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> <span class="built_in">open</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USE_CUDA = torch.cuda.is_available()</span><br><span class="line">device = <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">corpus_name = <span class="string">&quot;cornell movie-dialogs corpus&quot;</span></span><br><span class="line">corpus = os.path.join(<span class="string">&quot;./&quot;</span>, corpus_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printLines</span>(<span class="params">file, n=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> datafile:</span><br><span class="line">        lines = datafile.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines[:n]:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">printLines(os.path.join(corpus, <span class="string">&quot;movie_lines.txt&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把每一行都parse成一个dict，key是lineID、characterID、movieID、character和text</span></span><br><span class="line"><span class="comment"># 分别代表这一行的ID、人物ID、电影ID，人物名称和文本。</span></span><br><span class="line"><span class="comment"># 最终输出一个dict，key是lineID，value是一个dict。</span></span><br><span class="line"><span class="comment"># value这个dict的key是lineID、characterID、movieID、character和text</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loadLines</span>(<span class="params">fileName, fields</span>):</span><br><span class="line">    lines = &#123;&#125;</span><br><span class="line">    <span class="built_in">print</span>(os.path.join(corpus, <span class="string">&quot;movie_lines.txt&quot;</span>))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;iso-8859-1&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            values = line.split(<span class="string">&quot; +++$+++ &quot;</span>)</span><br><span class="line">            <span class="comment"># 抽取fields</span></span><br><span class="line">            lineObj = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> i, field <span class="keyword">in</span> <span class="built_in">enumerate</span>(fields):</span><br><span class="line">                lineObj[field] = values[i]</span><br><span class="line">            lines[lineObj[<span class="string">&#x27;lineID&#x27;</span>]] = lineObj</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据movie_conversations.txt文件和上输出的lines，把utterance组成对话。</span></span><br><span class="line"><span class="comment"># 最终输出一个list，这个list的每一个元素都是一个dict，</span></span><br><span class="line"><span class="comment"># key分别是character1ID、character2ID、movieID和utteranceIDs。</span></span><br><span class="line"><span class="comment"># 分别表示这对话的第一个人物的ID，第二个的ID，电影的ID以及它包含的utteranceIDs</span></span><br><span class="line"><span class="comment"># 最后根据lines，还给每一行的dict增加一个key为lines，其value是个list，</span></span><br><span class="line"><span class="comment"># 包含所有utterance(上面得到的lines的value)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loadConversations</span>(<span class="params">fileName, lines, fields</span>):</span><br><span class="line">    conversations = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;iso-8859-1&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            values = line.split(<span class="string">&quot; +++$+++ &quot;</span>)</span><br><span class="line">            <span class="comment"># 抽取fields</span></span><br><span class="line">            convObj = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> i, field <span class="keyword">in</span> <span class="built_in">enumerate</span>(fields):</span><br><span class="line">                convObj[field] = values[i]</span><br><span class="line">            <span class="comment"># convObj[&quot;utteranceIDs&quot;]是一个字符串，形如[&#x27;L198&#x27;, &#x27;L199&#x27;]</span></span><br><span class="line">            <span class="comment"># 我们用eval把这个字符串变成一个字符串的list。</span></span><br><span class="line">            lineIds = <span class="built_in">eval</span>(convObj[<span class="string">&quot;utteranceIDs&quot;</span>])</span><br><span class="line">            <span class="comment"># 根据lineIds构造一个数组，根据lineId去lines里检索出存储utterance对象。</span></span><br><span class="line">            convObj[<span class="string">&quot;lines&quot;</span>] = []</span><br><span class="line">            <span class="keyword">for</span> lineId <span class="keyword">in</span> lineIds:</span><br><span class="line">                convObj[<span class="string">&quot;lines&quot;</span>].append(lines[lineId])</span><br><span class="line">            conversations.append(convObj)</span><br><span class="line">    <span class="keyword">return</span> conversations</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从对话中抽取句对</span></span><br><span class="line"><span class="comment"># 假设一段对话包含s1,s2,s3,s4这4个utterance</span></span><br><span class="line"><span class="comment"># 那么会返回3个句对：s1-s2,s2-s3和s3-s4。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extractSentencePairs</span>(<span class="params">conversations</span>):</span><br><span class="line">    qa_pairs = []</span><br><span class="line">    <span class="keyword">for</span> conversation <span class="keyword">in</span> conversations:</span><br><span class="line">        <span class="comment"># 遍历对话中的每一个句子，忽略最后一个句子，因为没有答案。</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(conversation[<span class="string">&quot;lines&quot;</span>]) - <span class="number">1</span>):</span><br><span class="line">            inputLine = conversation[<span class="string">&quot;lines&quot;</span>][i][<span class="string">&quot;text&quot;</span>].strip()</span><br><span class="line">            targetLine = conversation[<span class="string">&quot;lines&quot;</span>][i+<span class="number">1</span>][<span class="string">&quot;text&quot;</span>].strip()</span><br><span class="line">            <span class="comment"># 如果有空的句子就去掉</span></span><br><span class="line">            <span class="keyword">if</span> inputLine <span class="keyword">and</span> targetLine:</span><br><span class="line">                qa_pairs.append([inputLine, targetLine])</span><br><span class="line">    <span class="keyword">return</span> qa_pairs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义新的文件</span></span><br><span class="line">datafile = os.path.join(corpus, <span class="string">&quot;formatted_movie_lines.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">delimiter = <span class="string">&#x27;\t&#x27;</span></span><br><span class="line"><span class="comment"># 对分隔符delimiter进行decode，这里对tab进行decode结果并没有变</span></span><br><span class="line">delimiter = <span class="built_in">str</span>(codecs.decode(delimiter, <span class="string">&quot;unicode_escape&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化dict lines，list conversations以及前面我们介绍过的field的id数组。</span></span><br><span class="line">lines = &#123;&#125;</span><br><span class="line">conversations = []</span><br><span class="line">MOVIE_LINES_FIELDS = [<span class="string">&quot;lineID&quot;</span>, <span class="string">&quot;characterID&quot;</span>, <span class="string">&quot;movieID&quot;</span>, <span class="string">&quot;character&quot;</span>, <span class="string">&quot;text&quot;</span>]</span><br><span class="line">MOVIE_CONVERSATIONS_FIELDS = [<span class="string">&quot;character1ID&quot;</span>, <span class="string">&quot;character2ID&quot;</span>, <span class="string">&quot;movieID&quot;</span>, <span class="string">&quot;utteranceIDs&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先使用loadLines函数处理movie_lines.txt</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nProcessing corpus...&quot;</span>)</span><br><span class="line">lines = loadLines(os.path.join(corpus, <span class="string">&quot;movie_lines.txt&quot;</span>), MOVIE_LINES_FIELDS)</span><br><span class="line"><span class="comment"># 接着使用loadConversations处理上一步的结果，得到conversations</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nLoading conversations...&quot;</span>)</span><br><span class="line">conversations = loadConversations(os.path.join(corpus, <span class="string">&quot;movie_conversations.txt&quot;</span>),</span><br><span class="line">                                  lines, MOVIE_CONVERSATIONS_FIELDS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出到一个新的csv文件</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nWriting newly formatted file...&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(datafile, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> outputfile:</span><br><span class="line">    writer = csv.writer(outputfile, delimiter=delimiter, lineterminator=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># 使用extractSentencePairs从conversations里抽取句对。</span></span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> extractSentencePairs(conversations):</span><br><span class="line">        writer.writerow(pair)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出一些行用于检查</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nSample lines from file:&quot;</span>)</span><br><span class="line">printLines(datafile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预定义的token</span></span><br><span class="line">PAD_token = <span class="number">0</span>  <span class="comment"># 表示padding</span></span><br><span class="line">SOS_token = <span class="number">1</span>  <span class="comment"># 句子的开始</span></span><br><span class="line">EOS_token = <span class="number">2</span>  <span class="comment"># 句子的结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Voc</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.trimmed = <span class="literal">False</span></span><br><span class="line">        self.word2index = &#123;&#125;</span><br><span class="line">        self.word2count = &#123;&#125;</span><br><span class="line">        self.index2word = &#123;PAD_token: <span class="string">&quot;PAD&quot;</span>, SOS_token: <span class="string">&quot;SOS&quot;</span>, EOS_token: <span class="string">&quot;EOS&quot;</span>&#125;</span><br><span class="line">        self.num_words = <span class="number">3</span>  <span class="comment"># 目前有SOS, EOS, PAD这3个token。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addSentence</span>(<span class="params">self, sentence</span>):</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> sentence.split(<span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            self.addWord(word)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addWord</span>(<span class="params">self, word</span>):</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> self.word2index:</span><br><span class="line">            self.word2index[word] = self.num_words</span><br><span class="line">            self.word2count[word] = <span class="number">1</span></span><br><span class="line">            self.index2word[self.num_words] = word</span><br><span class="line">            self.num_words += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.word2count[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除频次小于min_count的token</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trim</span>(<span class="params">self, min_count</span>):</span><br><span class="line">        <span class="keyword">if</span> self.trimmed:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.trimmed = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        keep_words = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.word2count.items():</span><br><span class="line">            <span class="keyword">if</span> v &gt;= min_count:</span><br><span class="line">                keep_words.append(k)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;keep_words &#123;&#125; / &#123;&#125; = &#123;:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            <span class="built_in">len</span>(keep_words), <span class="built_in">len</span>(self.word2index), <span class="built_in">len</span>(keep_words) / <span class="built_in">len</span>(self.word2index)</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新构造词典</span></span><br><span class="line">        self.word2index = &#123;&#125;</span><br><span class="line">        self.word2count = &#123;&#125;</span><br><span class="line">        self.index2word = &#123;PAD_token: <span class="string">&quot;PAD&quot;</span>, SOS_token: <span class="string">&quot;SOS&quot;</span>, EOS_token: <span class="string">&quot;EOS&quot;</span>&#125;</span><br><span class="line">        self.num_words = <span class="number">3</span>  <span class="comment"># Count default tokens</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新构造后词频就没有意义了(都是1)</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> keep_words:</span><br><span class="line">            self.addWord(word)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MAX_LENGTH = <span class="number">10</span>  <span class="comment"># 句子最大长度是10个词(包括EOS等特殊词)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把Unicode字符串变成ASCII</span></span><br><span class="line"><span class="comment"># 参考https://stackoverflow.com/a/518232/2809427</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unicodeToAscii</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(</span><br><span class="line">        c <span class="keyword">for</span> c <span class="keyword">in</span> unicodedata.normalize(<span class="string">&#x27;NFD&#x27;</span>, s)</span><br><span class="line">        <span class="keyword">if</span> unicodedata.category(c) != <span class="string">&#x27;Mn&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normalizeString</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># 变成小写、去掉前后空格，然后unicode变成ascii</span></span><br><span class="line">    s = unicodeToAscii(s.lower().strip())</span><br><span class="line">    <span class="comment"># 在标点前增加空格，这样把标点当成一个词</span></span><br><span class="line">    s = re.sub(<span class="string">r&quot;([.!?])&quot;</span>, <span class="string">r&quot; \1&quot;</span>, s)</span><br><span class="line">    <span class="comment"># 字母和标点之外的字符都变成空格</span></span><br><span class="line">    s = re.sub(<span class="string">r&quot;[^a-zA-Z.!?]+&quot;</span>, <span class="string">r&quot; &quot;</span>, s)</span><br><span class="line">    <span class="comment"># 因为把不用的字符都变成空格，所以可能存在多个连续空格</span></span><br><span class="line">    <span class="comment"># 下面的正则替换把多个空格变成一个空格，最后去掉前后空格</span></span><br><span class="line">    s = re.sub(<span class="string">r&quot;\s+&quot;</span>, <span class="string">r&quot; &quot;</span>, s).strip()</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取问答句对并且返回Voc词典对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readVocs</span>(<span class="params">datafile, corpus_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Reading lines...&quot;</span>)</span><br><span class="line">    <span class="comment"># 文件每行读取到list lines中。</span></span><br><span class="line">    lines = <span class="built_in">open</span>(datafile, encoding=<span class="string">&#x27;utf-8&#x27;</span>). \</span><br><span class="line">        read().strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># 每行用tab切分成问答两个句子，然后调用normalizeString函数进行处理。</span></span><br><span class="line">    pairs = [[normalizeString(s) <span class="keyword">for</span> s <span class="keyword">in</span> l.split(<span class="string">&#x27;\t&#x27;</span>)] <span class="keyword">for</span> l <span class="keyword">in</span> lines]</span><br><span class="line">    voc = Voc(corpus_name)</span><br><span class="line">    <span class="keyword">return</span> voc, pairs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filterPair</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)) &lt; MAX_LENGTH <span class="keyword">and</span> <span class="built_in">len</span>(p[<span class="number">1</span>].split(<span class="string">&#x27; &#x27;</span>)) &lt; MAX_LENGTH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤太长的句对</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filterPairs</span>(<span class="params">pairs</span>):</span><br><span class="line">    <span class="keyword">return</span> [pair <span class="keyword">for</span> pair <span class="keyword">in</span> pairs <span class="keyword">if</span> filterPair(pair)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用上面的函数进行处理，返回Voc对象和句对的list</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loadPrepareData</span>(<span class="params">corpus, corpus_name, datafile</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start preparing training data ...&quot;</span>)</span><br><span class="line">    voc, pairs = readVocs(datafile, corpus_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Read &#123;!s&#125; sentence pairs&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(pairs)))</span><br><span class="line">    pairs = filterPairs(pairs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Trimmed to &#123;!s&#125; sentence pairs&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(pairs)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Counting words...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> pairs:</span><br><span class="line">        voc.addSentence(pair[<span class="number">0</span>])</span><br><span class="line">        voc.addSentence(pair[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Counted words:&quot;</span>, voc.num_words)</span><br><span class="line">    <span class="keyword">return</span> voc, pairs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load/Assemble voc and pairs</span></span><br><span class="line"><span class="comment"># save_dir = os.path.join(&quot;data&quot;, &quot;save&quot;)</span></span><br><span class="line">voc, pairs = loadPrepareData(corpus, corpus_name, datafile)</span><br><span class="line"><span class="comment"># 输出一些句对</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\npairs:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> pair <span class="keyword">in</span> pairs[:<span class="number">10</span>]:</span><br><span class="line">    <span class="built_in">print</span>(pair)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MIN_COUNT = <span class="number">3</span>    <span class="comment"># 阈值为3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trimRareWords</span>(<span class="params">voc, pairs, MIN_COUNT</span>):</span><br><span class="line">    <span class="comment"># 去掉voc中频次小于3的词</span></span><br><span class="line">    voc.trim(MIN_COUNT)</span><br><span class="line">    <span class="comment"># 保留的句对</span></span><br><span class="line">    keep_pairs = []</span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> pairs:</span><br><span class="line">        input_sentence = pair[<span class="number">0</span>]</span><br><span class="line">        output_sentence = pair[<span class="number">1</span>]</span><br><span class="line">        keep_input = <span class="literal">True</span></span><br><span class="line">        keep_output = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 检查问题</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> input_sentence.split(<span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> voc.word2index:</span><br><span class="line">                keep_input = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 检查答案</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> output_sentence.split(<span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> voc.word2index:</span><br><span class="line">                keep_output = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果问题和答案都只包含高频词，我们才保留这个句对</span></span><br><span class="line">        <span class="keyword">if</span> keep_input <span class="keyword">and</span> keep_output:</span><br><span class="line">            keep_pairs.append(pair)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Trimmed from &#123;&#125; pairs to &#123;&#125;, &#123;:.4f&#125; of total&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(pairs),</span><br><span class="line"><span class="built_in">len</span>(keep_pairs), <span class="built_in">len</span>(keep_pairs) / <span class="built_in">len</span>(pairs)))</span><br><span class="line">    <span class="keyword">return</span> keep_pairs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际进行处理</span></span><br><span class="line">pairs = trimRareWords(voc, pairs, MIN_COUNT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把句子的词变成ID</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">indexesFromSentence</span>(<span class="params">voc, sentence</span>):</span><br><span class="line">    <span class="keyword">return</span> [voc.word2index[word] <span class="keyword">for</span> word <span class="keyword">in</span> sentence.split(<span class="string">&#x27; &#x27;</span>)] + [EOS_token]</span><br><span class="line"></span><br><span class="line"><span class="comment"># l是多个长度不同句子(list)，使用zip_longest padding成定长，长度为最长句子的长度。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zeroPadding</span>(<span class="params">l, fillvalue=PAD_token</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(itertools.zip_longest(*l, fillvalue=fillvalue))</span><br><span class="line"></span><br><span class="line"><span class="comment"># l是二维的padding后的list</span></span><br><span class="line"><span class="comment"># 返回m和l的大小一样，如果某个位置是padding，那么值为0，否则为1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binaryMatrix</span>(<span class="params">l, value=PAD_token</span>):</span><br><span class="line">    m = []</span><br><span class="line">    <span class="keyword">for</span> i, seq <span class="keyword">in</span> <span class="built_in">enumerate</span>(l):</span><br><span class="line">        m.append([])</span><br><span class="line">        <span class="keyword">for</span> token <span class="keyword">in</span> seq:</span><br><span class="line">            <span class="keyword">if</span> token == PAD_token:</span><br><span class="line">                m[i].append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m[i].append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把输入句子变成ID，然后再padding，同时返回lengths这个list，标识实际长度。</span></span><br><span class="line"><span class="comment"># 返回的padVar是一个LongTensor，shape是(batch, max_length)，</span></span><br><span class="line"><span class="comment"># lengths是一个list，长度为(batch,)，表示每个句子的实际长度。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inputVar</span>(<span class="params">l, voc</span>):</span><br><span class="line">    indexes_batch = [indexesFromSentence(voc, sentence) <span class="keyword">for</span> sentence <span class="keyword">in</span> l]</span><br><span class="line">    lengths = torch.tensor([<span class="built_in">len</span>(indexes) <span class="keyword">for</span> indexes <span class="keyword">in</span> indexes_batch])</span><br><span class="line">    padList = zeroPadding(indexes_batch)</span><br><span class="line">    padVar = torch.LongTensor(padList)</span><br><span class="line">    <span class="keyword">return</span> padVar, lengths</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对输出句子进行padding，然后用binaryMatrix得到每个位置是padding(0)还是非padding，</span></span><br><span class="line"><span class="comment"># 同时返回最大最长句子的长度(也就是padding后的长度)</span></span><br><span class="line"><span class="comment"># 返回值padVar是LongTensor，shape是(batch, max_target_length)</span></span><br><span class="line"><span class="comment"># mask是ByteTensor，shape也是(batch, max_target_length)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outputVar</span>(<span class="params">l, voc</span>):</span><br><span class="line">    indexes_batch = [indexesFromSentence(voc, sentence) <span class="keyword">for</span> sentence <span class="keyword">in</span> l]</span><br><span class="line">    max_target_len = <span class="built_in">max</span>([<span class="built_in">len</span>(indexes) <span class="keyword">for</span> indexes <span class="keyword">in</span> indexes_batch])</span><br><span class="line">    padList = zeroPadding(indexes_batch)</span><br><span class="line">    mask = binaryMatrix(padList)</span><br><span class="line">    mask = torch.ByteTensor(mask)</span><br><span class="line">    padVar = torch.LongTensor(padList)</span><br><span class="line">    <span class="keyword">return</span> padVar, mask, max_target_len</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理一个batch的pair句对</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch2TrainData</span>(<span class="params">voc, pair_batch</span>):</span><br><span class="line">    <span class="comment"># 按照句子的长度(词数)排序</span></span><br><span class="line">    pair_batch.sort(key=<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x[<span class="number">0</span>].split(<span class="string">&quot; &quot;</span>)), reverse=<span class="literal">True</span>)</span><br><span class="line">    input_batch, output_batch = [], []</span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> pair_batch:</span><br><span class="line">        input_batch.append(pair[<span class="number">0</span>])</span><br><span class="line">        output_batch.append(pair[<span class="number">1</span>])</span><br><span class="line">    inp, lengths = inputVar(input_batch, voc)</span><br><span class="line">    output, mask, max_target_len = outputVar(output_batch, voc)</span><br><span class="line">    <span class="keyword">return</span> inp, lengths, output, mask, max_target_len</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">small_batch_size = <span class="number">5</span></span><br><span class="line">batches = batch2TrainData(voc, [random.choice(pairs) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(small_batch_size)])</span><br><span class="line">input_variable, lengths, target_variable, mask, max_target_len = batches</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;input_variable:&quot;</span>, input_variable)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lengths:&quot;</span>, lengths)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;target_variable:&quot;</span>, target_variable)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mask:&quot;</span>, mask)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max_target_len:&quot;</span>, max_target_len)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EncoderRNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hidden_size, embedding, n_layers=<span class="number">1</span>, dropout=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(EncoderRNN, self).__init__()</span><br><span class="line">        self.n_layers = n_layers</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.embedding = embedding</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化GRU，这里输入和hidden大小都是hidden_size，这里假设embedding层的输出大小是hidden_size</span></span><br><span class="line">        <span class="comment"># 如果只有一层，那么不进行Dropout，否则使用传入的参数dropout进行GRU的Dropout。</span></span><br><span class="line">        self.gru = nn.GRU(hidden_size, hidden_size, n_layers,</span><br><span class="line">                          dropout=(<span class="number">0</span> <span class="keyword">if</span> n_layers == <span class="number">1</span> <span class="keyword">else</span> dropout), bidirectional=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_seq, input_lengths, hidden=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 输入是(max_length, batch)，Embedding之后变成(max_length, batch, hidden_size)</span></span><br><span class="line">        embedded = self.embedding(input_seq)</span><br><span class="line">        <span class="comment"># Pack padded batch of sequences for RNN module</span></span><br><span class="line">        <span class="comment"># 因为RNN(GRU)要知道实际长度，所以PyTorch提供了函数pack_padded_sequence把输入向量和长度</span></span><br><span class="line">        <span class="comment"># pack到一个对象PackedSequence里，这样便于使用。</span></span><br><span class="line">        packed = torch.nn.utils.rnn.pack_padded_sequence(embedded, input_lengths)</span><br><span class="line">        <span class="comment"># 通过GRU进行forward计算，需要传入输入和隐变量</span></span><br><span class="line">        <span class="comment"># 如果传入的输入是一个Tensor (max_length, batch, hidden_size)</span></span><br><span class="line">        <span class="comment"># 那么输出outputs是(max_length, batch, hidden_size*num_directions)。</span></span><br><span class="line">        <span class="comment"># 第三维是hidden_size和num_directions的混合，它们实际排列顺序是num_directions在前面，</span></span><br><span class="line">        <span class="comment"># 因此我们可以使用outputs.view(seq_len, batch, num_directions, hidden_size)得到4维的向量。</span></span><br><span class="line">        <span class="comment"># 其中第三维是方向，第四位是隐状态。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 而如果输入是PackedSequence对象，那么输出outputs也是一个PackedSequence对象，我们需要用</span></span><br><span class="line">        <span class="comment"># 函数pad_packed_sequence把它变成shape为(max_length, batch, hidden*num_directions)的向量以及</span></span><br><span class="line">        <span class="comment"># 一个list，表示输出的长度，当然这个list和输入的input_lengths完全一样，因此通常我们不需要它。</span></span><br><span class="line">        outputs, hidden = self.gru(packed, hidden)</span><br><span class="line">        <span class="comment"># 参考前面的注释，我们得到outputs为(max_length, batch, hidden*num_directions)</span></span><br><span class="line">        outputs, _ = torch.nn.utils.rnn.pad_packed_sequence(outputs)</span><br><span class="line">        <span class="comment"># 我们需要把输出的num_directions双向的向量加起来</span></span><br><span class="line">        <span class="comment"># 因为outputs的第三维是先放前向的hidden_size个结果，然后再放后向的hidden_size个结果</span></span><br><span class="line">        <span class="comment"># 所以outputs[:, :, :self.hidden_size]得到前向的结果</span></span><br><span class="line">        <span class="comment"># outputs[:, :, self.hidden_size:]是后向的结果</span></span><br><span class="line">        <span class="comment"># 注意，如果bidirectional是False，则outputs第三维的大小就是hidden_size，</span></span><br><span class="line">        <span class="comment"># 这时outputs[:, : ,self.hidden_size:]是不存在的，因此也不会加上去。</span></span><br><span class="line">        <span class="comment"># 对Python slicing不熟的读者可以看看下面的例子：</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; a=[1,2,3]</span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; a[:3]</span></span><br><span class="line">        <span class="comment"># [1, 2, 3]</span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; a[3:]</span></span><br><span class="line">        <span class="comment"># []</span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; a[:3]+a[3:]</span></span><br><span class="line">        <span class="comment"># [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这样就不用写下面的代码了：</span></span><br><span class="line">        <span class="comment"># if bidirectional:</span></span><br><span class="line">        <span class="comment">#     outputs = outputs[:, :, :self.hidden_size] + outputs[:, : ,self.hidden_size:]</span></span><br><span class="line">        outputs = outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]</span><br><span class="line">        <span class="comment"># 返回最终的输出和最后时刻的隐状态。</span></span><br><span class="line">        <span class="keyword">return</span> outputs, hidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Luong 注意力layer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Attn</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, method, hidden_size</span>):</span><br><span class="line">        <span class="built_in">super</span>(Attn, self).__init__()</span><br><span class="line">        self.method = method</span><br><span class="line">        <span class="keyword">if</span> self.method <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;dot&#x27;</span>, <span class="string">&#x27;general&#x27;</span>, <span class="string">&#x27;concat&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(self.method, <span class="string">&quot;is not an appropriate attention method.&quot;</span>)</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        <span class="keyword">if</span> self.method == <span class="string">&#x27;general&#x27;</span>:</span><br><span class="line">            self.attn = torch.nn.Linear(self.hidden_size, hidden_size)</span><br><span class="line">        <span class="keyword">elif</span> self.method == <span class="string">&#x27;concat&#x27;</span>:</span><br><span class="line">            self.attn = torch.nn.Linear(self.hidden_size * <span class="number">2</span>, hidden_size)</span><br><span class="line">            self.v = torch.nn.Parameter(torch.FloatTensor(hidden_size))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dot_score</span>(<span class="params">self, hidden, encoder_output</span>):</span><br><span class="line">        <span class="comment"># 输入hidden的shape是(1, batch=64, hidden_size=500)</span></span><br><span class="line">        <span class="comment"># encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)</span></span><br><span class="line">        <span class="comment"># hidden * encoder_output得到的shape是(10, 64, 500)，然后对第3维求和就可以计算出score。</span></span><br><span class="line">        <span class="keyword">return</span> torch.<span class="built_in">sum</span>(hidden * encoder_output, dim=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">general_score</span>(<span class="params">self, hidden, encoder_output</span>):</span><br><span class="line">        energy = self.attn(encoder_output)</span><br><span class="line">        <span class="keyword">return</span> torch.<span class="built_in">sum</span>(hidden * energy, dim=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">concat_score</span>(<span class="params">self, hidden, encoder_output</span>):</span><br><span class="line">        energy = self.attn(torch.cat((hidden.expand(encoder_output.size(<span class="number">0</span>), -<span class="number">1</span>, -<span class="number">1</span>),</span><br><span class="line">                                      encoder_output), <span class="number">2</span>)).tanh()</span><br><span class="line">        <span class="keyword">return</span> torch.<span class="built_in">sum</span>(self.v * energy, dim=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入是上一个时刻的隐状态hidden和所有时刻的Encoder的输出encoder_outputs</span></span><br><span class="line">    <span class="comment"># 输出是注意力的概率，也就是长度为input_lengths的向量，它的和加起来是1。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, hidden, encoder_outputs</span>):</span><br><span class="line">        <span class="comment"># 计算注意力的score，输入hidden的shape是(1, batch=64, hidden_size=500)，</span></span><br><span class="line">        <span class="comment"># 表示t时刻batch数据的隐状态</span></span><br><span class="line">        <span class="comment"># encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)</span></span><br><span class="line">        <span class="keyword">if</span> self.method == <span class="string">&#x27;general&#x27;</span>:</span><br><span class="line">            attn_energies = self.general_score(hidden, encoder_outputs)</span><br><span class="line">        <span class="keyword">elif</span> self.method == <span class="string">&#x27;concat&#x27;</span>:</span><br><span class="line">            attn_energies = self.concat_score(hidden, encoder_outputs)</span><br><span class="line">        <span class="keyword">elif</span> self.method == <span class="string">&#x27;dot&#x27;</span>:</span><br><span class="line">            <span class="comment"># 计算内积，参考dot_score函数</span></span><br><span class="line">            attn_energies = self.dot_score(hidden, encoder_outputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Transpose max_length and batch_size dimensions</span></span><br><span class="line">        <span class="comment"># 把attn_energies从(max_length=10, batch=64)转置成(64, 10)</span></span><br><span class="line">        attn_energies = attn_energies.t()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用softmax函数把score变成概率，shape仍然是(64, 10)，然后用unsqueeze(1)变成</span></span><br><span class="line">        <span class="comment"># (64, 1, 10)</span></span><br><span class="line">        <span class="keyword">return</span> F.softmax(attn_energies, dim=<span class="number">1</span>).unsqueeze(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LuongAttnDecoderRNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, attn_model, embedding, hidden_size, output_size, n_layers=<span class="number">1</span>, dropout=<span class="number">0.1</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(LuongAttnDecoderRNN, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存到self里，attn_model就是前面定义的Attn类的对象。</span></span><br><span class="line">        self.attn_model = attn_model</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.output_size = output_size</span><br><span class="line">        self.n_layers = n_layers</span><br><span class="line">        self.dropout = dropout</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义Decoder的layers</span></span><br><span class="line">        self.embedding = embedding</span><br><span class="line">        self.embedding_dropout = nn.Dropout(dropout)</span><br><span class="line">        self.gru = nn.GRU(hidden_size, hidden_size, n_layers, dropout=(<span class="number">0</span> <span class="keyword">if</span> n_layers == <span class="number">1</span> <span class="keyword">else</span> dropout))</span><br><span class="line">        self.concat = nn.Linear(hidden_size * <span class="number">2</span>, hidden_size)</span><br><span class="line">        self.out = nn.Linear(hidden_size, output_size)</span><br><span class="line"></span><br><span class="line">        self.attn = Attn(attn_model, hidden_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_step, last_hidden, encoder_outputs</span>):</span><br><span class="line">        <span class="comment"># 注意：decoder每一步只能处理一个时刻的数据，因为t时刻计算完了才能计算t+1时刻。</span></span><br><span class="line">        <span class="comment"># input_step的shape是(1, 64)，64是batch，1是当前输入的词ID(来自上一个时刻的输出)</span></span><br><span class="line">        <span class="comment"># 通过embedding层变成(1, 64, 500)，然后进行dropout，shape不变。</span></span><br><span class="line">        embedded = self.embedding(input_step)</span><br><span class="line">        embedded = self.embedding_dropout(embedded)</span><br><span class="line">        <span class="comment"># 把embedded传入GRU进行forward计算</span></span><br><span class="line">        <span class="comment"># 得到rnn_output的shape是(1, 64, 500)</span></span><br><span class="line">        <span class="comment"># hidden是(2, 64, 500)，因为是两层的GRU，所以第一维是2。</span></span><br><span class="line">        rnn_output, hidden = self.gru(embedded, last_hidden)</span><br><span class="line">        <span class="comment"># 计算注意力权重， 根据前面的分析，attn_weights的shape是(64, 1, 10)</span></span><br><span class="line">        attn_weights = self.attn(rnn_output, encoder_outputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># encoder_outputs是(10, 64, 500)</span></span><br><span class="line">        <span class="comment"># encoder_outputs.transpose(0, 1)后的shape是(64, 10, 500)</span></span><br><span class="line">        <span class="comment"># attn_weights.bmm后是(64, 1, 500)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># bmm是批量的矩阵乘法，第一维是batch，我们可以把attn_weights看成64个(1,10)的矩阵</span></span><br><span class="line">        <span class="comment"># 把encoder_outputs.transpose(0, 1)看成64个(10, 500)的矩阵</span></span><br><span class="line">        <span class="comment"># 那么bmm就是64个(1, 10)矩阵 x (10, 500)矩阵，最终得到(64, 1, 500)</span></span><br><span class="line">        context = attn_weights.bmm(encoder_outputs.transpose(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment"># 把context向量和GRU的输出拼接起来</span></span><br><span class="line">        <span class="comment"># rnn_output从(1, 64, 500)变成(64, 500)</span></span><br><span class="line">        rnn_output = rnn_output.squeeze(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># context从(64, 1, 500)变成(64, 500)</span></span><br><span class="line">        context = context.squeeze(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 拼接得到(64, 1000)</span></span><br><span class="line">        concat_input = torch.cat((rnn_output, context), <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># self.concat是一个矩阵(1000, 500)，</span></span><br><span class="line">        <span class="comment"># self.concat(concat_input)的输出是(64, 500)</span></span><br><span class="line">        <span class="comment"># 然后用tanh把输出返回变成(-1,1)，concat_output的shape是(64, 500)</span></span><br><span class="line">        concat_output = torch.tanh(self.concat(concat_input))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># out是(500, 词典大小=7826)</span></span><br><span class="line">        output = self.out(concat_output)</span><br><span class="line">        <span class="comment"># 用softmax变成概率，表示当前时刻输出每个词的概率。</span></span><br><span class="line">        output = F.softmax(output, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 返回 output和新的隐状态</span></span><br><span class="line">        <span class="keyword">return</span> output, hidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maskNLLLoss</span>(<span class="params">inp, target, mask</span>):</span><br><span class="line">    <span class="comment"># 计算实际的词的个数，因为padding是0，非padding是1，因此sum就可以得到词的个数</span></span><br><span class="line">    nTotal = mask.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    crossEntropy = -torch.log(torch.gather(inp, <span class="number">1</span>, target.view(-<span class="number">1</span>, <span class="number">1</span>)).squeeze(<span class="number">1</span>))</span><br><span class="line">    loss = crossEntropy.masked_select(mask).mean()</span><br><span class="line">    loss = loss.to(device)</span><br><span class="line">    <span class="keyword">return</span> loss, nTotal.item()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">input_variable, lengths, target_variable, mask, max_target_len, encoder, decoder, embedding,</span></span><br><span class="line"><span class="params">          encoder_optimizer, decoder_optimizer, batch_size, clip, max_length=MAX_LENGTH</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 梯度清空</span></span><br><span class="line">    encoder_optimizer.zero_grad()</span><br><span class="line">    decoder_optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置device，从而支持GPU，当然如果没有GPU也能工作。</span></span><br><span class="line">    input_variable = input_variable.to(device)</span><br><span class="line">    lengths = lengths.to(device)</span><br><span class="line">    target_variable = target_variable.to(device)</span><br><span class="line">    mask = mask.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    loss = <span class="number">0</span></span><br><span class="line">    print_losses = []</span><br><span class="line">    n_totals = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># encoder的Forward计算</span></span><br><span class="line">    encoder_outputs, encoder_hidden = encoder(input_variable, lengths)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Decoder的初始输入是SOS，我们需要构造(1, batch)的输入，表示第一个时刻batch个输入。</span></span><br><span class="line">    decoder_input = torch.LongTensor([[SOS_token <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(batch_size)]])</span><br><span class="line">    decoder_input = decoder_input.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意：Encoder是双向的，而Decoder是单向的，因此从下往上取n_layers个</span></span><br><span class="line">    decoder_hidden = encoder_hidden[:decoder.n_layers]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确定是否teacher forcing</span></span><br><span class="line">    use_teacher_forcing = <span class="literal">True</span> <span class="keyword">if</span> random.random() &lt; teacher_forcing_ratio <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一次处理一个时刻</span></span><br><span class="line">    <span class="keyword">if</span> use_teacher_forcing:</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(max_target_len):</span><br><span class="line">            decoder_output, decoder_hidden = decoder(</span><br><span class="line">                decoder_input, decoder_hidden, encoder_outputs</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># Teacher forcing: 下一个时刻的输入是当前正确答案</span></span><br><span class="line">            decoder_input = target_variable[t].view(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 计算累计的loss</span></span><br><span class="line">            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])</span><br><span class="line">            loss += mask_loss</span><br><span class="line">            print_losses.append(mask_loss.item() * nTotal)</span><br><span class="line">            n_totals += nTotal</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(max_target_len):</span><br><span class="line">            decoder_output, decoder_hidden = decoder(</span><br><span class="line">                decoder_input, decoder_hidden, encoder_outputs</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># 不是teacher forcing: 下一个时刻的输入是当前模型预测概率最高的值</span></span><br><span class="line">            _, topi = decoder_output.topk(<span class="number">1</span>)</span><br><span class="line">            decoder_input = torch.LongTensor([[topi[i][<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(batch_size)]])</span><br><span class="line">            decoder_input = decoder_input.to(device)</span><br><span class="line">            <span class="comment"># 计算累计的loss</span></span><br><span class="line">            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])</span><br><span class="line">            loss += mask_loss</span><br><span class="line">            print_losses.append(mask_loss.item() * nTotal)</span><br><span class="line">            n_totals += nTotal</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向计算</span></span><br><span class="line">    loss.backward()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对encoder和decoder进行梯度裁剪</span></span><br><span class="line">    _ = torch.nn.utils.clip_grad_norm_(encoder.parameters(), clip)</span><br><span class="line">    _ = torch.nn.utils.clip_grad_norm_(decoder.parameters(), clip)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    encoder_optimizer.step()</span><br><span class="line">    decoder_optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(print_losses) / n_totals</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trainIters</span>(<span class="params">model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,</span></span><br><span class="line"><span class="params">               embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,</span></span><br><span class="line"><span class="params">               print_every, save_every, clip, corpus_name, loadFilename</span>):</span><br><span class="line">    <span class="comment"># 随机选择n_iteration个batch的数据(pair)</span></span><br><span class="line">    training_batches = [batch2TrainData(voc, [random.choice(pairs) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(batch_size)])</span><br><span class="line">                        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n_iteration)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Initializing ...&#x27;</span>)</span><br><span class="line">    start_iteration = <span class="number">1</span></span><br><span class="line">    print_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> loadFilename:</span><br><span class="line">        start_iteration = checkpoint[<span class="string">&#x27;iteration&#x27;</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Training...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> iteration <span class="keyword">in</span> <span class="built_in">range</span>(start_iteration, n_iteration + <span class="number">1</span>):</span><br><span class="line">        training_batch = training_batches[iteration - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        input_variable, lengths, target_variable, mask, max_target_len = training_batch</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练一个batch的数据</span></span><br><span class="line">        loss = train(input_variable, lengths, target_variable, mask, max_target_len, encoder,</span><br><span class="line">                     decoder, embedding, encoder_optimizer, decoder_optimizer, batch_size, clip)</span><br><span class="line">        print_loss += loss</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进度</span></span><br><span class="line">        <span class="keyword">if</span> iteration % print_every == <span class="number">0</span>:</span><br><span class="line">            print_loss_avg = print_loss / print_every</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Iteration: &#123;&#125;; Percent complete: &#123;:.1f&#125;%; Average loss: &#123;:.4f&#125;&quot;</span></span><br><span class="line">                  .<span class="built_in">format</span>(iteration, iteration / n_iteration * <span class="number">100</span>, print_loss_avg))</span><br><span class="line">            print_loss = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存checkpoint</span></span><br><span class="line">        <span class="keyword">if</span> (iteration % save_every == <span class="number">0</span>):</span><br><span class="line">            directory = os.path.join(save_dir, model_name, corpus_name, <span class="string">&#x27;&#123;&#125;-&#123;&#125;_&#123;&#125;&#x27;</span></span><br><span class="line">                                     .<span class="built_in">format</span>(encoder_n_layers, decoder_n_layers, hidden_size))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">                os.makedirs(directory)</span><br><span class="line">            torch.save(&#123;</span><br><span class="line">                <span class="string">&#x27;iteration&#x27;</span>: iteration,</span><br><span class="line">                <span class="string">&#x27;en&#x27;</span>: encoder.state_dict(),</span><br><span class="line">                <span class="string">&#x27;de&#x27;</span>: decoder.state_dict(),</span><br><span class="line">                <span class="string">&#x27;en_opt&#x27;</span>: encoder_optimizer.state_dict(),</span><br><span class="line">                <span class="string">&#x27;de_opt&#x27;</span>: decoder_optimizer.state_dict(),</span><br><span class="line">                <span class="string">&#x27;loss&#x27;</span>: loss,</span><br><span class="line">                <span class="string">&#x27;voc_dict&#x27;</span>: voc.__dict__,</span><br><span class="line">                <span class="string">&#x27;embedding&#x27;</span>: embedding.state_dict()</span><br><span class="line">            &#125;, os.path.join(directory, <span class="string">&#x27;&#123;&#125;_&#123;&#125;.tar&#x27;</span>.<span class="built_in">format</span>(iteration, <span class="string">&#x27;checkpoint&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreedySearchDecoder</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, encoder, decoder</span>):</span><br><span class="line">        <span class="built_in">super</span>(GreedySearchDecoder, self).__init__()</span><br><span class="line">        self.encoder = encoder</span><br><span class="line">        self.decoder = decoder</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_seq, input_length, max_length</span>):</span><br><span class="line">        <span class="comment"># Encoder的Forward计算</span></span><br><span class="line">        encoder_outputs, encoder_hidden = self.encoder(input_seq, input_length)</span><br><span class="line">        <span class="comment"># 把Encoder最后时刻的隐状态作为Decoder的初始值</span></span><br><span class="line">        decoder_hidden = encoder_hidden[:decoder.n_layers]</span><br><span class="line">        <span class="comment"># 因为我们的函数都是要求(time,batch)，因此即使只有一个数据，也要做出二维的。</span></span><br><span class="line">        <span class="comment"># Decoder的初始输入是SOS</span></span><br><span class="line">        decoder_input = torch.ones(<span class="number">1</span>, <span class="number">1</span>, device=device, dtype=torch.long) * SOS_token</span><br><span class="line">        <span class="comment"># 用于保存解码结果的tensor</span></span><br><span class="line">        all_tokens = torch.zeros([<span class="number">0</span>], device=device, dtype=torch.long)</span><br><span class="line">        all_scores = torch.zeros([<span class="number">0</span>], device=device)</span><br><span class="line">        <span class="comment"># 循环，这里只使用长度限制，后面处理的时候把EOS去掉了。</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_length):</span><br><span class="line">            <span class="comment"># Decoder forward一步</span></span><br><span class="line">            decoder_output, decoder_hidden = self.decoder(decoder_input, decoder_hidden,</span><br><span class="line">encoder_outputs)</span><br><span class="line">            <span class="comment"># decoder_outputs是(batch=1, vob_size)</span></span><br><span class="line">            <span class="comment"># 使用max返回概率最大的词和得分</span></span><br><span class="line">            decoder_scores, decoder_input = torch.<span class="built_in">max</span>(decoder_output, dim=<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 把解码结果保存到all_tokens和all_scores里</span></span><br><span class="line">            all_tokens = torch.cat((all_tokens, decoder_input), dim=<span class="number">0</span>)</span><br><span class="line">            all_scores = torch.cat((all_scores, decoder_scores), dim=<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># decoder_input是当前时刻输出的词的ID，这是个一维的向量，因为max会减少一维。</span></span><br><span class="line">            <span class="comment"># 但是decoder要求有一个batch维度，因此用unsqueeze增加batch维度。</span></span><br><span class="line">            decoder_input = torch.unsqueeze(decoder_input, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 返回所有的词和得分。</span></span><br><span class="line">        <span class="keyword">return</span> all_tokens, all_scores</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">encoder, decoder, searcher, voc, sentence, max_length=MAX_LENGTH</span>):</span><br><span class="line">    <span class="comment">### 把输入的一个batch句子变成id</span></span><br><span class="line">    indexes_batch = [indexesFromSentence(voc, sentence)]</span><br><span class="line">    <span class="comment"># 创建lengths tensor</span></span><br><span class="line">    lengths = torch.tensor([<span class="built_in">len</span>(indexes) <span class="keyword">for</span> indexes <span class="keyword">in</span> indexes_batch])</span><br><span class="line">    <span class="comment"># 转置</span></span><br><span class="line">    input_batch = torch.LongTensor(indexes_batch).transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 放到合适的设备上(比如GPU)</span></span><br><span class="line">    input_batch = input_batch.to(device)</span><br><span class="line">    lengths = lengths.to(device)</span><br><span class="line">    <span class="comment"># 用searcher解码</span></span><br><span class="line">    tokens, scores = searcher(input_batch, lengths, max_length)</span><br><span class="line">    <span class="comment"># ID变成词。</span></span><br><span class="line">    decoded_words = [voc.index2word[token.item()] <span class="keyword">for</span> token <span class="keyword">in</span> tokens]</span><br><span class="line">    <span class="keyword">return</span> decoded_words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluateInput</span>(<span class="params">encoder, decoder, searcher, voc</span>):</span><br><span class="line">    input_sentence = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 得到用户终端的输入</span></span><br><span class="line">            input_sentence = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">            <span class="comment"># 是否退出</span></span><br><span class="line">            <span class="keyword">if</span> input_sentence == <span class="string">&#x27;q&#x27;</span> <span class="keyword">or</span> input_sentence == <span class="string">&#x27;quit&#x27;</span>: <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 句子归一化</span></span><br><span class="line">            input_sentence = normalizeString(input_sentence)</span><br><span class="line">            <span class="comment"># 生成响应Evaluate sentence</span></span><br><span class="line">            output_words = evaluate(encoder, decoder, searcher, voc, input_sentence)</span><br><span class="line">            <span class="comment"># 去掉EOS后面的内容</span></span><br><span class="line">            words = []</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> output_words:</span><br><span class="line">                <span class="keyword">if</span> word == <span class="string">&#x27;EOS&#x27;</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> word != <span class="string">&#x27;PAD&#x27;</span>:</span><br><span class="line">                    words.append(word)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Bot:&#x27;</span>, <span class="string">&#x27; &#x27;</span>.join(words))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error: Encountered unknown word.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置模型</span></span><br><span class="line">model_name = <span class="string">&#x27;cb_model&#x27;</span></span><br><span class="line">attn_model = <span class="string">&#x27;dot&#x27;</span></span><br><span class="line"><span class="comment"># attn_model = &#x27;general&#x27;</span></span><br><span class="line"><span class="comment"># attn_model = &#x27;concat&#x27;</span></span><br><span class="line">hidden_size = <span class="number">500</span></span><br><span class="line">encoder_n_layers = <span class="number">2</span></span><br><span class="line">decoder_n_layers = <span class="number">2</span></span><br><span class="line">dropout = <span class="number">0.1</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从哪个checkpoint恢复，如果是None，那么从头开始训练。</span></span><br><span class="line"><span class="comment"># loadFilename = None</span></span><br><span class="line"></span><br><span class="line">loadFilename = <span class="string">&quot;./model_Seq2seq/cb_model/cornell movie-dialogs corpus/2-2_500/5000_checkpoint.tar&quot;</span></span><br><span class="line">checkpoint_iter = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果loadFilename不空，则从中加载模型</span></span><br><span class="line"><span class="keyword">if</span> loadFilename:</span><br><span class="line">    <span class="comment"># 如果训练和加载是一条机器，那么直接加载</span></span><br><span class="line">    checkpoint = torch.load(loadFilename)</span><br><span class="line">    <span class="comment"># 否则比如checkpoint是在GPU上得到的，但是我们现在又用CPU来训练或者测试，那么注释掉下面的代码</span></span><br><span class="line">    <span class="comment"># checkpoint = torch.load(loadFilename, map_location=torch.device(&#x27;cpu&#x27;))</span></span><br><span class="line">    encoder_sd = checkpoint[<span class="string">&#x27;en&#x27;</span>]</span><br><span class="line">    decoder_sd = checkpoint[<span class="string">&#x27;de&#x27;</span>]</span><br><span class="line">    encoder_optimizer_sd = checkpoint[<span class="string">&#x27;en_opt&#x27;</span>]</span><br><span class="line">    decoder_optimizer_sd = checkpoint[<span class="string">&#x27;de_opt&#x27;</span>]</span><br><span class="line">    embedding_sd = checkpoint[<span class="string">&#x27;embedding&#x27;</span>]</span><br><span class="line">    voc.__dict__ = checkpoint[<span class="string">&#x27;voc_dict&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Building encoder and decoder ...&#x27;</span>)</span><br><span class="line"><span class="comment"># 初始化word embedding</span></span><br><span class="line">embedding = nn.Embedding(voc.num_words, hidden_size)</span><br><span class="line"><span class="keyword">if</span> loadFilename:</span><br><span class="line">    embedding.load_state_dict(embedding_sd)</span><br><span class="line"><span class="comment"># 初始化encoder和decoder模型</span></span><br><span class="line">encoder = EncoderRNN(hidden_size, embedding, encoder_n_layers, dropout)</span><br><span class="line">decoder = LuongAttnDecoderRNN(attn_model, embedding, hidden_size, voc.num_words,</span><br><span class="line">                              decoder_n_layers, dropout)</span><br><span class="line"><span class="keyword">if</span> loadFilename:</span><br><span class="line">    encoder.load_state_dict(encoder_sd)</span><br><span class="line">    decoder.load_state_dict(decoder_sd)</span><br><span class="line"><span class="comment"># 使用合适的设备</span></span><br><span class="line">encoder = encoder.to(device)</span><br><span class="line">decoder = decoder.to(device)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Models built and ready to go!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置训练的超参数和优化器</span></span><br><span class="line">clip = <span class="number">50.0</span></span><br><span class="line">teacher_forcing_ratio = <span class="number">1.0</span></span><br><span class="line">learning_rate = <span class="number">0.0001</span></span><br><span class="line">decoder_learning_ratio = <span class="number">5.0</span></span><br><span class="line">n_iteration = <span class="number">5000</span></span><br><span class="line">print_every = <span class="number">1</span></span><br><span class="line">save_every = <span class="number">1000</span></span><br><span class="line">save_dir = <span class="string">&quot;./model_Seq2seq_1&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置进入训练模式，从而开启dropout</span></span><br><span class="line">encoder.train()</span><br><span class="line">decoder.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化优化器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Building optimizers ...&#x27;</span>)</span><br><span class="line">encoder_optimizer = optim.Adam(encoder.parameters(), lr=learning_rate)</span><br><span class="line">decoder_optimizer = optim.Adam(decoder.parameters(), lr=learning_rate * decoder_learning_ratio)</span><br><span class="line"><span class="keyword">if</span> loadFilename:</span><br><span class="line">    encoder_optimizer.load_state_dict(encoder_optimizer_sd)</span><br><span class="line">    decoder_optimizer.load_state_dict(decoder_optimizer_sd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Starting Training!&quot;</span>)</span><br><span class="line">trainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,</span><br><span class="line">           embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,</span><br><span class="line">           print_every, save_every, clip, corpus_name, loadFilename)</span><br><span class="line"></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入eval模式，从而去掉dropout。</span></span><br><span class="line">encoder.<span class="built_in">eval</span>()</span><br><span class="line">decoder.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造searcher对象</span></span><br><span class="line">searcher = GreedySearchDecoder(encoder, decoder)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">evaluateInput(encoder, decoder, searcher, voc)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deeplearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Pytorch框架的深度学习图像分类模型</title>
      <link href="/2023/03/15/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/"/>
      <url>/2023/03/15/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、脚本为本人总结，如有使用注明出处。</li><li>2、模型基于Pytorch框架实现及训练。</li><li>3、脚本内有注释。</li></ul><hr><h2 id="一、经典图像分类数据集：">一、经典图像分类数据集：</h2><h3 id="注：pytorch官网数据集-Datasets-—-Torchvision-0-15-documentation-pytorch-org">注：pytorch官网数据集 Datasets — Torchvision 0.15 documentation (<a href="http://pytorch.org">pytorch.org</a>)</h3><h3 id="1-CIFAR10">1.CIFAR10</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">384</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">384</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="2-CIFAR100">2.CIFAR100</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR100(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR100(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">128</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">128</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="3-ImageNet-ILSVRC2012">3.ImageNet (ILSVRC2012)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">299</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">299</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.ImageFolder(root=<span class="string">&quot;/训练集的位置&quot;</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.ImageFolder(root=<span class="string">&quot;/测试集的位置&quot;</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">32</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">32</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="二、图像分类经典模型（基于CIFAR10数据集）：">二、图像分类经典模型（基于CIFAR10数据集）：</h2><h3 id="注：硬件配置显存最好有12g，根据显存大小调整batch-size的大小。">注：硬件配置显存最好有12g，根据显存大小调整batch_size的大小。</h3><h3 id="1-AlexNet（自己写的模型）">1.AlexNet（自己写的模型）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> AlexNet <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">384</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">384</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_AlexNet_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = AlexNet()</span><br><span class="line">    model.to(device)</span><br><span class="line">    model.apply(weight_init)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">60</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc: %.6f  val_loss:%.6f \n&quot;</span> %</span><br><span class="line">              ((correct / <span class="built_in">len</span>(test_set)), test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/AlexNet_1.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手搓一个AlexNet模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlexNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AlexNet, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.conv1 = nn.Sequential(</span><br><span class="line">                                   nn.Conv2d(<span class="number">3</span>, <span class="number">96</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.MaxPool2d(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">                                  )</span><br><span class="line"></span><br><span class="line">        self.conv2 = nn.Sequential(</span><br><span class="line">                                   nn.Conv2d(<span class="number">96</span>, <span class="number">256</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.MaxPool2d(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">                                  )</span><br><span class="line"></span><br><span class="line">        self.conv3 = nn.Sequential(</span><br><span class="line">                                   nn.Conv2d(<span class="number">256</span>, <span class="number">384</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Conv2d(<span class="number">384</span>, <span class="number">384</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Conv2d(<span class="number">384</span>, <span class="number">256</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.MaxPool2d(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">                                  )</span><br><span class="line"></span><br><span class="line">        self.fc = nn.Sequential(</span><br><span class="line">                                nn.Linear(<span class="number">256</span> * <span class="number">6</span> * <span class="number">6</span>, <span class="number">4096</span>),</span><br><span class="line">                                nn.ReLU(),</span><br><span class="line">                                nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line">                                nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>),</span><br><span class="line">                                nn.ReLU(),</span><br><span class="line">                                nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line">                                nn.Linear(<span class="number">4096</span>, <span class="number">100</span>),</span><br><span class="line">                               )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = self.conv3(x)</span><br><span class="line">        output = self.fc(x.view(-<span class="number">1</span>, <span class="number">256</span> * <span class="number">6</span> * <span class="number">6</span>))</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-VGG（models-vgg16-）">2.VGG（models.vgg16()）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">        [transforms.ToTensor(),</span><br><span class="line">         transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">         transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_VGG_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = torchvision.models.vgg16()</span><br><span class="line">    model.to(device)</span><br><span class="line">    <span class="comment"># model.apply(weight_init)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc: %.6f  val_loss:%.6f \n&quot;</span> %</span><br><span class="line">              ((correct / <span class="built_in">len</span>(test_set)), test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/VGG_1.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-GoogLeNet">3.GoogLeNet</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">128</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">128</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_GoogLeNet_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = torchvision.models.GoogLeNet()</span><br><span class="line">    model.to(device)</span><br><span class="line">    <span class="comment"># model.apply(weight_init)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            outputs = outputs.logits</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.5f&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc: %.5f  val_loss:%.5f \n&quot;</span> %</span><br><span class="line">              ((correct / <span class="built_in">len</span>(test_set)), test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/GooLeNet_1.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-ResNet（models-resnet101-）">4.ResNet（models.resnet101()）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">        [transforms.ToTensor(),</span><br><span class="line">         transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">         transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_ResNet_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = torchvision.models.resnet101()</span><br><span class="line">    model.to(device)</span><br><span class="line">    <span class="comment"># model.apply(weight_init)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc: %.6f  val_loss:%.6f \n&quot;</span> %</span><br><span class="line">              ((correct / <span class="built_in">len</span>(test_set)), test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/ResNet_1.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-DenseNet（models-densenet121-）">5.DenseNet（models.densenet121()）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">        [transforms.ToTensor(),</span><br><span class="line">         transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">         transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, transform=transform, train=<span class="literal">True</span>)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, transform=transform, train=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_DenseNet_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = torchvision.models.densenet121()</span><br><span class="line">    model.to(device)</span><br><span class="line">    <span class="comment"># model.apply(weight_init)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始  dgsd</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc: %.6f  val_loss:%.6f \n&quot;</span> %</span><br><span class="line">              ((correct / <span class="built_in">len</span>(test_set)), test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/DenseNet_1.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-Train-ImageNet（main-py）">6.Train_ImageNet（<a href="http://main.py">main.py</a>）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.backends.cudnn <span class="keyword">as</span> cudnn</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.parallel</span><br><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torch.utils.data</span><br><span class="line"><span class="keyword">import</span> torch.utils.data.distributed</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets <span class="keyword">as</span> datasets</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.optim.lr_scheduler <span class="keyword">import</span> StepLR</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Subset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_names = <span class="built_in">sorted</span>(name <span class="keyword">for</span> name <span class="keyword">in</span> models.__dict__</span><br><span class="line">                     <span class="keyword">if</span> name.islower() <span class="keyword">and</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>)</span><br><span class="line">                     <span class="keyword">and</span> <span class="built_in">callable</span>(models.__dict__[name]))</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;PyTorch ImageNet Training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;data&#x27;</span>, metavar=<span class="string">&#x27;DIR&#x27;</span>, nargs=<span class="string">&#x27;?&#x27;</span>, default=<span class="string">&#x27;imagenet&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;path to dataset (default: imagenet)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--arch&#x27;</span>, metavar=<span class="string">&#x27;ARCH&#x27;</span>, default=<span class="string">&#x27;resnet34&#x27;</span>,</span><br><span class="line">                    choices=model_names,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;model architecture: &#x27;</span> +</span><br><span class="line">                         <span class="string">&#x27; | &#x27;</span>.join(model_names) +</span><br><span class="line">                         <span class="string">&#x27; (default: resnet34)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-j&#x27;</span>, <span class="string">&#x27;--workers&#x27;</span>, default=<span class="number">4</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of data loading workers (default: 4)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, default=<span class="number">50</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of total epochs to run&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--start-epoch&#x27;</span>, default=<span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;manual epoch number (useful on restarts)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-b&#x27;</span>, <span class="string">&#x27;--batch-size&#x27;</span>, default=<span class="number">192</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;mini-batch size (default: 256), this is the total &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;batch size of all GPUs on the current node when &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;using Data Parallel or Distributed Data Parallel&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>, <span class="string">&#x27;--learning-rate&#x27;</span>, default=<span class="number">0.1</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;LR&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;initial learning rate&#x27;</span>, dest=<span class="string">&#x27;lr&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--momentum&#x27;</span>, default=<span class="number">0.9</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, metavar=<span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;momentum&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--wd&#x27;</span>, <span class="string">&#x27;--weight-decay&#x27;</span>, default=<span class="number">1e-4</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;W&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;weight decay (default: 1e-4)&#x27;</span>,</span><br><span class="line">                    dest=<span class="string">&#x27;weight_decay&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--print-freq&#x27;</span>, default=<span class="number">500</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;N&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;print frequency (default: 500)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--resume&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&#x27;PATH&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;path to latest checkpoint (default: none)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-e&#x27;</span>, <span class="string">&#x27;--evaluate&#x27;</span>, dest=<span class="string">&#x27;evaluate&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;evaluate model on validation set&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--pretrained&#x27;</span>, dest=<span class="string">&#x27;pretrained&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;use pre-trained model&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--world-size&#x27;</span>, default=-<span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of nodes for distributed training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--rank&#x27;</span>, default=-<span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;node rank for distributed training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--dist-url&#x27;</span>, default=<span class="string">&#x27;tcp://224.66.41.62:23456&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;url used to set up distributed training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--dist-backend&#x27;</span>, default=<span class="string">&#x27;nccl&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;distributed backend&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;seed for initializing training. &#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--gpu&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;GPU id to use.&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--multiprocessing-distributed&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;Use multi-processing distributed training to launch &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;N processes per node, which has N GPUs. This is the &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;fastest way to use PyTorch for either single node or &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;multi node data parallel training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--dummy&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;use fake data to benchmark&quot;</span>)</span><br><span class="line"></span><br><span class="line">best_acc1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.seed <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        random.seed(args.seed)</span><br><span class="line">        torch.manual_seed(args.seed)</span><br><span class="line">        cudnn.deterministic = <span class="literal">True</span></span><br><span class="line">        cudnn.benchmark = <span class="literal">False</span></span><br><span class="line">        warnings.warn(<span class="string">&#x27;You have chosen to seed training. &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;This will turn on the CUDNN deterministic setting, &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;which can slow down your training considerably! &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;You may see unexpected behavior when restarting &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;from checkpoints.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        warnings.warn(<span class="string">&#x27;You have chosen a specific GPU. This will completely &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;disable data parallelism.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.dist_url == <span class="string">&quot;env://&quot;</span> <span class="keyword">and</span> args.world_size == -<span class="number">1</span>:</span><br><span class="line">        args.world_size = <span class="built_in">int</span>(os.environ[<span class="string">&quot;WORLD_SIZE&quot;</span>])</span><br><span class="line"></span><br><span class="line">    args.distributed = args.world_size &gt; <span class="number">1</span> <span class="keyword">or</span> args.multiprocessing_distributed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        ngpus_per_node = torch.cuda.device_count()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ngpus_per_node = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> args.multiprocessing_distributed:</span><br><span class="line">        <span class="comment"># Since we have ngpus_per_node processes per node, the total world_size</span></span><br><span class="line">        <span class="comment"># needs to be adjusted accordingly</span></span><br><span class="line">        args.world_size = ngpus_per_node * args.world_size</span><br><span class="line">        <span class="comment"># Use torch.multiprocessing.spawn to launch distributed processes: the</span></span><br><span class="line">        <span class="comment"># main_worker process function</span></span><br><span class="line">        mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Simply call main_worker function</span></span><br><span class="line">        main_worker(args.gpu, ngpus_per_node, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main_worker</span>(<span class="params">gpu, ngpus_per_node, args</span>):</span><br><span class="line">    <span class="keyword">global</span> best_acc1</span><br><span class="line">    args.gpu = gpu</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Use GPU: &#123;&#125; for training&quot;</span>.<span class="built_in">format</span>(args.gpu))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        <span class="keyword">if</span> args.dist_url == <span class="string">&quot;env://&quot;</span> <span class="keyword">and</span> args.rank == -<span class="number">1</span>:</span><br><span class="line">            args.rank = <span class="built_in">int</span>(os.environ[<span class="string">&quot;RANK&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> args.multiprocessing_distributed:</span><br><span class="line">            <span class="comment"># For multiprocessing distributed training, rank needs to be the</span></span><br><span class="line">            <span class="comment"># global rank among all the processes</span></span><br><span class="line">            args.rank = args.rank * ngpus_per_node + gpu</span><br><span class="line">        dist.init_process_group(backend=args.dist_backend, init_method=args.dist_url,</span><br><span class="line">                                world_size=args.world_size, rank=args.rank)</span><br><span class="line">    <span class="comment"># create model</span></span><br><span class="line">    <span class="keyword">if</span> args.pretrained:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&gt; using pre-trained model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.arch))</span><br><span class="line">        model = models.__dict__[args.arch](pretrained=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&gt; creating model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.arch))</span><br><span class="line">        model = models.__dict__[args.arch]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> torch.cuda.is_available() <span class="keyword">and</span> <span class="keyword">not</span> torch.backends.mps.is_available():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;using CPU, this will be slow&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> args.distributed:</span><br><span class="line">        <span class="comment"># For multiprocessing distributed, DistributedDataParallel constructor</span></span><br><span class="line">        <span class="comment"># should always set the single device scope, otherwise,</span></span><br><span class="line">        <span class="comment"># DistributedDataParallel will use all available devices.</span></span><br><span class="line">        <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">            <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                torch.cuda.set_device(args.gpu)</span><br><span class="line">                model.cuda(args.gpu)</span><br><span class="line">                <span class="comment"># When using a single GPU per process and per</span></span><br><span class="line">                <span class="comment"># DistributedDataParallel, we need to divide the batch size</span></span><br><span class="line">                <span class="comment"># ourselves based on the total number of GPUs of the current node.</span></span><br><span class="line">                args.batch_size = <span class="built_in">int</span>(args.batch_size / ngpus_per_node)</span><br><span class="line">                args.workers = <span class="built_in">int</span>((args.workers + ngpus_per_node - <span class="number">1</span>) / ngpus_per_node)</span><br><span class="line">                model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                model.cuda()</span><br><span class="line">                <span class="comment"># DistributedDataParallel will divide and allocate batch_size to all</span></span><br><span class="line">                <span class="comment"># available GPUs if device_ids are not set</span></span><br><span class="line">                model = torch.nn.parallel.DistributedDataParallel(model)</span><br><span class="line">    <span class="keyword">elif</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> torch.cuda.is_available():</span><br><span class="line">        torch.cuda.set_device(args.gpu)</span><br><span class="line">        model = model.cuda(args.gpu)</span><br><span class="line">    <span class="keyword">elif</span> torch.backends.mps.is_available():</span><br><span class="line">        device = torch.device(<span class="string">&quot;mps&quot;</span>)</span><br><span class="line">        model = model.to(device)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># DataParallel will divide and allocate batch_size to all available GPUs</span></span><br><span class="line">        <span class="keyword">if</span> args.arch.startswith(<span class="string">&#x27;alexnet&#x27;</span>) <span class="keyword">or</span> args.arch.startswith(<span class="string">&#x27;vgg&#x27;</span>):</span><br><span class="line">            model.features = torch.nn.DataParallel(model.features)</span><br><span class="line">            model.cuda()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            model = torch.nn.DataParallel(model).cuda()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        <span class="keyword">if</span> args.gpu:</span><br><span class="line">            device = torch.device(<span class="string">&#x27;cuda:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(args.gpu))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            device = torch.device(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> torch.backends.mps.is_available():</span><br><span class="line">        device = torch.device(<span class="string">&quot;mps&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        device = torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    <span class="comment"># define loss function (criterion), optimizer, and learning rate scheduler</span></span><br><span class="line">    criterion = nn.CrossEntropyLoss().to(device)</span><br><span class="line"></span><br><span class="line">    optimizer = torch.optim.SGD(model.parameters(), args.lr,</span><br><span class="line">                                momentum=args.momentum,</span><br><span class="line">                                weight_decay=args.weight_decay)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sets the learning rate to the initial LR decayed by 10 every 30 epochs&quot;&quot;&quot;</span></span><br><span class="line">    scheduler = StepLR(optimizer, step_size=<span class="number">30</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># optionally resume from a checkpoint</span></span><br><span class="line">    <span class="keyword">if</span> args.resume:</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(args.resume):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; loading checkpoint &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line">            <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                checkpoint = torch.load(args.resume)</span><br><span class="line">            <span class="keyword">elif</span> torch.cuda.is_available():</span><br><span class="line">                <span class="comment"># Map model to be loaded to specified single gpu.</span></span><br><span class="line">                loc = <span class="string">&#x27;cuda:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(args.gpu)</span><br><span class="line">                checkpoint = torch.load(args.resume, map_location=loc)</span><br><span class="line">            args.start_epoch = checkpoint[<span class="string">&#x27;epoch&#x27;</span>]</span><br><span class="line">            best_acc1 = checkpoint[<span class="string">&#x27;best_acc1&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># best_acc1 may be from a checkpoint from a different GPU</span></span><br><span class="line">                best_acc1 = best_acc1.to(args.gpu)</span><br><span class="line">            model.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line">            optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line">            scheduler.load_state_dict(checkpoint[<span class="string">&#x27;scheduler&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; loaded checkpoint &#x27;&#123;&#125;&#x27; (epoch &#123;&#125;)&quot;</span></span><br><span class="line">                  .<span class="built_in">format</span>(args.resume, checkpoint[<span class="string">&#x27;epoch&#x27;</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; no checkpoint found at &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Data loading code</span></span><br><span class="line">    <span class="keyword">if</span> args.dummy:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&gt; Dummy data is used!&quot;</span>)</span><br><span class="line">        train_dataset = datasets.FakeData(<span class="number">1281167</span>, (<span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>), <span class="number">1000</span>, transforms.ToTensor())</span><br><span class="line">        val_dataset = datasets.FakeData(<span class="number">50000</span>, (<span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>), <span class="number">1000</span>, transforms.ToTensor())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        normalize = transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                                         std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line"></span><br><span class="line">        train_dataset = datasets.ImageFolder(</span><br><span class="line">            <span class="string">&quot;数据集的路径：&quot;</span>,</span><br><span class="line">            transforms.Compose([</span><br><span class="line">                transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">                transforms.RandomHorizontalFlip(),</span><br><span class="line">                transforms.ToTensor(),</span><br><span class="line">                normalize,</span><br><span class="line">            ]))</span><br><span class="line"></span><br><span class="line">        val_dataset = datasets.ImageFolder(</span><br><span class="line">            <span class="string">&quot;测试集的路径：&quot;</span>,</span><br><span class="line">            transforms.Compose([</span><br><span class="line">                transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                transforms.ToTensor(),</span><br><span class="line">                normalize,</span><br><span class="line">            ]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)</span><br><span class="line">        val_sampler = torch.utils.data.distributed.DistributedSampler(val_dataset, shuffle=<span class="literal">False</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        train_sampler = <span class="literal">None</span></span><br><span class="line">        val_sampler = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(</span><br><span class="line">        train_dataset, batch_size=args.batch_size, shuffle=(train_sampler <span class="keyword">is</span> <span class="literal">None</span>),</span><br><span class="line">        num_workers=args.workers, pin_memory=<span class="literal">True</span>, sampler=train_sampler)</span><br><span class="line"></span><br><span class="line">    val_loader = torch.utils.data.DataLoader(</span><br><span class="line">        val_dataset, batch_size=args.batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">        num_workers=args.workers, pin_memory=<span class="literal">True</span>, sampler=val_sampler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.evaluate:</span><br><span class="line">        validate(val_loader, model, criterion, args)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(args.start_epoch, args.epochs):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> args.distributed:</span><br><span class="line">            train_sampler.set_epoch(epoch)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># train for one epoch</span></span><br><span class="line">        train(train_loader, model, criterion, optimizer, epoch, device, args, end)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># evaluate on validation set</span></span><br><span class="line">        acc1 = validate(val_loader, model, criterion, args, end)</span><br><span class="line"></span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># remember best acc@1 and save checkpoint</span></span><br><span class="line">        is_best = acc1 &gt; best_acc1</span><br><span class="line">        best_acc1 = <span class="built_in">max</span>(acc1, best_acc1)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.multiprocessing_distributed <span class="keyword">or</span> (args.multiprocessing_distributed</span><br><span class="line">                                                    <span class="keyword">and</span> args.rank % ngpus_per_node == <span class="number">0</span>):</span><br><span class="line">            save_checkpoint(&#123;</span><br><span class="line">                <span class="string">&#x27;epoch&#x27;</span>: epoch + <span class="number">1</span>,</span><br><span class="line">                <span class="string">&#x27;arch&#x27;</span>: args.arch,</span><br><span class="line">                <span class="string">&#x27;state_dict&#x27;</span>: model.state_dict(),</span><br><span class="line">                <span class="string">&#x27;best_acc1&#x27;</span>: best_acc1,</span><br><span class="line">                <span class="string">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),</span><br><span class="line">                <span class="string">&#x27;scheduler&#x27;</span>: scheduler.state_dict()</span><br><span class="line">            &#125;, is_best)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">train_loader, model, criterion, optimizer, epoch, device, args, end</span>):</span><br><span class="line">    losses = AverageMeter(<span class="string">&#x27;Loss&#x27;</span>, <span class="string">&#x27;:.4e&#x27;</span>)</span><br><span class="line">    top1 = AverageMeter(<span class="string">&#x27;Acc@1&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    top5 = AverageMeter(<span class="string">&#x27;Acc@5&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    progress = ProgressMeter(</span><br><span class="line">        <span class="built_in">len</span>(train_loader),</span><br><span class="line">        [losses, top1, top5],</span><br><span class="line">        prefix=<span class="string">&quot;Epoch: [&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to train mode</span></span><br><span class="line">    model.train()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, (images, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        <span class="comment"># measure data loading time</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># move data to the same device as model</span></span><br><span class="line">        images = images.to(device, non_blocking=<span class="literal">True</span>)</span><br><span class="line">        target = target.to(device, non_blocking=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute output</span></span><br><span class="line">        output = model(images)</span><br><span class="line">        loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">        acc1, acc5 = accuracy(output, target, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        losses.update(loss.item(), images.size(<span class="number">0</span>))</span><br><span class="line">        top1.update(acc1[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line">        top5.update(acc5[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute gradient and do SGD step</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure elapsed time</span></span><br><span class="line">        <span class="keyword">if</span> i % args.print_freq == <span class="number">0</span>:</span><br><span class="line">            progress.display(i + <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Time: %.2fs&quot;</span> % (time.time() - end))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">val_loader, model, criterion, args, end</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_validate</span>(<span class="params">loader, base_progress=<span class="number">0</span></span>):</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            end = time.time()</span><br><span class="line">            <span class="keyword">for</span> i, (images, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(loader):</span><br><span class="line">                i = base_progress + i</span><br><span class="line">                <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> torch.cuda.is_available():</span><br><span class="line">                    images = images.cuda(args.gpu, non_blocking=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">if</span> torch.backends.mps.is_available():</span><br><span class="line">                    images = images.to(<span class="string">&#x27;mps&#x27;</span>)</span><br><span class="line">                    target = target.to(<span class="string">&#x27;mps&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">                    target = target.cuda(args.gpu, non_blocking=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># compute output</span></span><br><span class="line">                output = model(images)</span><br><span class="line">                loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">                acc1, acc5 = accuracy(output, target, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">                losses.update(loss.item(), images.size(<span class="number">0</span>))</span><br><span class="line">                top1.update(acc1[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line">                top5.update(acc5[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># measure elapsed time</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> i % args.print_freq == <span class="number">0</span>:</span><br><span class="line">                    progress.display(i + <span class="number">1</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (time.time() - end))</span><br><span class="line"></span><br><span class="line">    losses = AverageMeter(<span class="string">&#x27;Loss&#x27;</span>, <span class="string">&#x27;:.4e&#x27;</span>, Summary.NONE)</span><br><span class="line">    top1 = AverageMeter(<span class="string">&#x27;Acc@1&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>, Summary.AVERAGE)</span><br><span class="line">    top5 = AverageMeter(<span class="string">&#x27;Acc@5&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>, Summary.AVERAGE)</span><br><span class="line">    progress = ProgressMeter(</span><br><span class="line">        <span class="built_in">len</span>(val_loader) + (args.distributed <span class="keyword">and</span> (<span class="built_in">len</span>(val_loader.sampler) * args.world_size &lt; <span class="built_in">len</span>(val_loader.dataset))),</span><br><span class="line">        [losses, top1, top5],</span><br><span class="line">        prefix=<span class="string">&#x27;Test: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to evaluate mode</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    run_validate(val_loader)</span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        top1.all_reduce()</span><br><span class="line">        top5.all_reduce()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.distributed <span class="keyword">and</span> (<span class="built_in">len</span>(val_loader.sampler) * args.world_size &lt; <span class="built_in">len</span>(val_loader.dataset)):</span><br><span class="line">        aux_val_dataset = Subset(val_loader.dataset,</span><br><span class="line">                                 <span class="built_in">range</span>(<span class="built_in">len</span>(val_loader.sampler) * args.world_size, <span class="built_in">len</span>(val_loader.dataset)))</span><br><span class="line">        aux_val_loader = torch.utils.data.DataLoader(</span><br><span class="line">            aux_val_dataset, batch_size=args.batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">            num_workers=args.workers, pin_memory=<span class="literal">True</span>)</span><br><span class="line">        run_validate(aux_val_loader, <span class="built_in">len</span>(val_loader))</span><br><span class="line"></span><br><span class="line">    progress.display_summary()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> top1.avg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_checkpoint</span>(<span class="params">state, is_best, filename=<span class="string">&#x27;../models/checkpoint_resnet34.pth.tar&#x27;</span></span>):</span><br><span class="line">    torch.save(state, filename)</span><br><span class="line">    <span class="keyword">if</span> is_best:</span><br><span class="line">        shutil.copyfile(filename, <span class="string">&#x27;../models/model_best_resnet34.pth.tar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Summary</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    NONE = <span class="number">0</span></span><br><span class="line">    AVERAGE = <span class="number">1</span></span><br><span class="line">    SUM = <span class="number">2</span></span><br><span class="line">    COUNT = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AverageMeter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes and stores the average and current value&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, fmt=<span class="string">&#x27;:f&#x27;</span>, summary_type=Summary.AVERAGE</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.fmt = fmt</span><br><span class="line">        self.summary_type = summary_type</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.val = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, val, n=<span class="number">1</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">sum</span> += val * n</span><br><span class="line">        self.count += n</span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all_reduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">            device = torch.device(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> torch.backends.mps.is_available():</span><br><span class="line">            device = torch.device(<span class="string">&quot;mps&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            device = torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">        total = torch.tensor([self.<span class="built_in">sum</span>, self.count], dtype=torch.float32, device=device)</span><br><span class="line">        dist.all_reduce(total, dist.ReduceOp.SUM, async_op=<span class="literal">False</span>)</span><br><span class="line">        self.<span class="built_in">sum</span>, self.count = total.tolist()</span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        fmtstr = <span class="string">&#x27;&#123;name&#125; &#123;val&#x27;</span> + self.fmt + <span class="string">&#x27;&#125; (&#123;avg&#x27;</span> + self.fmt + <span class="string">&#x27;&#125;)&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> fmtstr.<span class="built_in">format</span>(**self.__dict__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">summary</span>(<span class="params">self</span>):</span><br><span class="line">        fmtstr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.summary_type <span class="keyword">is</span> Summary.NONE:</span><br><span class="line">            fmtstr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.summary_type <span class="keyword">is</span> Summary.AVERAGE:</span><br><span class="line">            fmtstr = <span class="string">&#x27;&#123;name&#125; &#123;avg:.3f&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.summary_type <span class="keyword">is</span> Summary.SUM:</span><br><span class="line">            fmtstr = <span class="string">&#x27;&#123;name&#125; &#123;sum:.3f&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.summary_type <span class="keyword">is</span> Summary.COUNT:</span><br><span class="line">            fmtstr = <span class="string">&#x27;&#123;name&#125; &#123;count:.3f&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;invalid summary type %r&#x27;</span> % self.summary_type)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fmtstr.<span class="built_in">format</span>(**self.__dict__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressMeter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_batches, meters, prefix=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        self.batch_fmtstr = self._get_batch_fmtstr(num_batches)</span><br><span class="line">        self.meters = meters</span><br><span class="line">        self.prefix = prefix</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">self, batch</span>):</span><br><span class="line">        entries = [self.prefix + self.batch_fmtstr.<span class="built_in">format</span>(batch)]</span><br><span class="line">        entries += [<span class="built_in">str</span>(meter) <span class="keyword">for</span> meter <span class="keyword">in</span> self.meters]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\t&#x27;</span>.join(entries))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display_summary</span>(<span class="params">self</span>):</span><br><span class="line">        entries = [<span class="string">&quot; *&quot;</span>]</span><br><span class="line">        entries += [meter.summary() <span class="keyword">for</span> meter <span class="keyword">in</span> self.meters]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(entries))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_batch_fmtstr</span>(<span class="params">self, num_batches</span>):</span><br><span class="line">        num_digits = <span class="built_in">len</span>(<span class="built_in">str</span>(num_batches // <span class="number">1</span>))</span><br><span class="line">        fmt = <span class="string">&#x27;&#123;:&#x27;</span> + <span class="built_in">str</span>(num_digits) + <span class="string">&#x27;d&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[&#x27;</span> + fmt + <span class="string">&#x27;/&#x27;</span> + fmt.<span class="built_in">format</span>(num_batches) + <span class="string">&#x27;]&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">output, target, topk=(<span class="params"><span class="number">1</span>,</span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes the accuracy over the k top predictions for the specified values of k&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        maxk = <span class="built_in">max</span>(topk)</span><br><span class="line">        batch_size = target.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        _, pred = output.topk(maxk, <span class="number">1</span>, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">        pred = pred.t()</span><br><span class="line">        correct = pred.eq(target.view(<span class="number">1</span>, -<span class="number">1</span>).expand_as(pred))</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> topk:</span><br><span class="line">            correct_k = correct[:k].reshape(-<span class="number">1</span>).<span class="built_in">float</span>().<span class="built_in">sum</span>(<span class="number">0</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">            res.append(correct_k.mul_(<span class="number">100.0</span> / batch_size))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="三、小实践：可食用蘑菇识别分类模型">三、小实践：可食用蘑菇识别分类模型</h2><h3 id="训练代码：">训练代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抛出错误数据</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFile</span><br><span class="line">ImageFile.LOAD_TRUNCATED_IMAGES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置参量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">299</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.ImageFolder(root=<span class="string">&quot;E:\DeepLearning数据集\\archive (1)\\train&quot;</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.ImageFolder(root=<span class="string">&quot;E:\DeepLearning数据集\\archive (1)\\test&quot;</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_ResNet_mushrooms&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = torchvision.models.resnet18()</span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># model.apply(weight_init)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-3</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.5f\n&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_loss:%.5f&quot;</span> % (test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc:&#123;&#125;%\n&quot;</span>.<span class="built_in">format</span>((correct / <span class="built_in">len</span>(test_set) * <span class="number">100.0</span>), <span class="string">&#x27;.2f&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/ResNet_mushrooms.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试代码：">测试代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFile</span><br><span class="line">ImageFile.LOAD_TRUNCATED_IMAGES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="comment"># 转换输入图像</span></span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">            transforms.Resize(<span class="number">299</span>),</span><br><span class="line">            transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载测试集</span></span><br><span class="line">    test_set = torchvision.datasets.ImageFolder(root=<span class="string">&quot;E:\DeepLearning数据集\\archive (1)\\test&quot;</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建数据加载器</span></span><br><span class="line">    data_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">1</span>, num_workers=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    model = torch.load(<span class="string">&quot;..\models\\ResNet_mushrooms.pth&quot;</span>)</span><br><span class="line">    model.to(device)</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行预测</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="built_in">list</span> = [<span class="string">&#x27;Agaricus&#x27;</span>,<span class="string">&#x27;Amanita&#x27;</span>,<span class="string">&#x27;Boletus&#x27;</span>,<span class="string">&#x27;Cortinarius&#x27;</span>,<span class="string">&#x27;Entoloma&#x27;</span>,<span class="string">&#x27;Hygrocybe&#x27;</span>,<span class="string">&#x27;Lactarius&#x27;</span>,<span class="string">&#x27;Russula&#x27;</span>,<span class="string">&#x27;Suillus&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">            correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">            <span class="keyword">if</span> torch.<span class="built_in">max</span>(outputs) &lt;= <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;drug&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">list</span>[predict])</span><br><span class="line">            correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">            <span class="built_in">print</span>(outputs)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(correct)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_acc:&#123;&#125;%\n&quot;</span>.<span class="built_in">format</span>((correct / <span class="built_in">len</span>(test_set) * <span class="number">100.0</span>), <span class="string">&#x27;.2f&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Success!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Deeplearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Pytorch框架的深度学习入门基础</title>
      <link href="/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、脚本为本人总结，如有使用注明出处。</li><li>2、模型基于Pytorch框架实现及训练。</li><li>3、脚本内有注释。</li></ul><hr><h2 id="一、main-demo">一、main_demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个示例 Python 脚本。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按 Shift+F10 执行或将其替换为您的代码。</span></span><br><span class="line"><span class="comment"># 按 双击 Shift 在所有地方搜索类、文件、工具窗口、操作和设置。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_hi</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 在下面的代码行中使用断点来调试脚本。</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Hi, <span class="subst">&#123;name&#125;</span>&#x27;</span>)  <span class="comment"># 按 Ctrl+F8 切换断点。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按间距中的绿色按钮以运行脚本。</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print_hi(<span class="string">&#x27;PyCharm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 https://www.jetbrains.com/help/pycharm/ 获取 PyCharm 帮助</span></span><br></pre></td></tr></table></figure><h2 id="二、read-data（读取数据）">二、read_data（读取数据）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, label_dir</span>):</span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.label_dir = label_dir</span><br><span class="line">        self.path = os.path.join(self.root_dir, self.label_dir)</span><br><span class="line">        self.img_path = os.listdir(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据集</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_name = self.img_path[idx]</span><br><span class="line">        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_item_path)</span><br><span class="line">        lable = self.label_dir</span><br><span class="line">        <span class="keyword">return</span> img, lable</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取长度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root_dir = <span class="string">&quot;dataset/hymenoptera_data/train&quot;</span></span><br><span class="line"></span><br><span class="line">ants_label_dir = <span class="string">&quot;ants&quot;</span></span><br><span class="line">bees_label_dir = <span class="string">&quot;bees&quot;</span></span><br><span class="line"></span><br><span class="line">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class="line">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class="line"></span><br><span class="line">train_dataset = ants_dataset + bees_dataset</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、test-tb（简单测试）">三、test_tb（简单测试）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">image_path = <span class="string">&quot;dataset/hymenoptera_data/train/bees/16838648_415acd9e3f.jpg&quot;</span></span><br><span class="line">img_PIL = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">img_array = np.array(img_PIL)</span><br><span class="line"><span class="comment"># print(type(img_array))</span></span><br><span class="line"><span class="comment"># print(img_array.shape)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>, img_array, <span class="number">2</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line"><span class="comment"># y = x</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;y=2x&quot;</span>, <span class="number">2</span>*i, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h3 id="可视化页面展示：">可视化页面展示：</h3><p><img src="/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test1.png" alt="test1"></p><h2 id="四、Transforms（数据转换）">四、Transforms（数据转换）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python的用法 -&gt; tensor数据类型</span></span><br><span class="line"><span class="comment"># 通过 transforms.ToTensor看两个问题</span></span><br><span class="line"><span class="comment"># 1. transforms该如何使用？</span></span><br><span class="line"><span class="comment"># 2. 为什么我们需要Tensor数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绝对路径 C:\Users\Administrator\Desktop\编程代码\Python\pytorch深度学习\dataset\hymenoptera_data\train\ants\0013035.jpg</span></span><br><span class="line"><span class="comment"># 相对路径 dataset/hymenoptera_data/train/ants/0013035.jpg</span></span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&quot;dataset/hymenoptera_data/train/ants/0013035.jpg&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"></span><br><span class="line">tensor_trans = transforms.ToTensor()</span><br><span class="line">tensor_img = tensor_trans(img)</span><br><span class="line">writer.add_image(<span class="string">&quot;Tensor_img&quot;</span>, tensor_img)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="五、UseTransforms（使用数据转换）">五、UseTransforms（使用数据转换）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;images/桌面.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TpTensor的使用</span></span><br><span class="line">trans_totensor = transforms.ToTensor()</span><br><span class="line">img_tensor = trans_totensor(img)</span><br><span class="line">writer.add_image(<span class="string">&quot;Totensor&quot;</span>, img_tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Normalize</span></span><br><span class="line"><span class="built_in">print</span>(img_tensor[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">trans_norm = transforms.Normalize([<span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>], [<span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">img_norm = trans_norm(img_tensor)</span><br><span class="line"><span class="built_in">print</span>(img_norm[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">writer.add_image(<span class="string">&quot;Normalize&quot;</span>, img_norm, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Resize</span></span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line">trans_resize = transforms.Resize((<span class="number">512</span>, <span class="number">512</span>))</span><br><span class="line">img_resize = trans_resize(img)</span><br><span class="line">img_resize = trans_totensor(img_resize)</span><br><span class="line">writer.add_image(<span class="string">&quot;Resize&quot;</span>, img_resize, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(img_resize)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compose - resize - 2</span></span><br><span class="line">trans_resize_2 = transforms.Resize(<span class="number">512</span>)</span><br><span class="line">trans_compose = transforms.Compose([trans_resize_2, trans_totensor])</span><br><span class="line">img_resize_2 = trans_compose(img)</span><br><span class="line">writer.add_image(<span class="string">&quot;Resize&quot;</span>, img_resize_2, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># RandomCrop</span></span><br><span class="line">trans_random = transforms.RandomCrop(<span class="number">512</span>)</span><br><span class="line">trans_compose_2 = transforms.Compose([trans_random, trans_totensor])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img_crop = trans_compose_2(img)</span><br><span class="line">    writer.add_image(<span class="string">&quot;RandomCrop&quot;</span>, img_crop, i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="六、dataset-transforms（数据集使用）">六、dataset_transforms（数据集使用）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>, train=<span class="literal">True</span>, transform=dataset_transform, download=<span class="literal">True</span>)</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>, train=<span class="literal">False</span>, transform=dataset_transform, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(test_set[0])</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../p10&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img, target = test_set[i]</span><br><span class="line">    writer.add_image((<span class="string">&quot;test_set&quot;</span>, img, i))</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="七、read-data（读取数据）">七、read_data（读取数据）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, label_dir</span>):</span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.label_dir = label_dir</span><br><span class="line">        self.path = os.path.join(self.root_dir, self.label_dir)</span><br><span class="line">        self.img_path = os.listdir(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据集</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_name = self.img_path[idx]</span><br><span class="line">        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_item_path)</span><br><span class="line">        lable = self.label_dir</span><br><span class="line">        <span class="keyword">return</span> img, lable</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取长度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root_dir = <span class="string">&quot;../dataset/hymenoptera_data/train&quot;</span></span><br><span class="line">ants_label_dir = <span class="string">&quot;ants&quot;</span></span><br><span class="line">bees_label_dir = <span class="string">&quot;bees&quot;</span></span><br><span class="line">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class="line">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class="line"></span><br><span class="line">train_dataset = ants_dataset + bees_dataset</span><br></pre></td></tr></table></figure><h2 id="八、nn-module（模型基础）">八、nn_module（模型基础）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="built_in">input</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line">x = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">output = tudui(x)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><h2 id="九、nn-conv2d（卷积层）">九、nn_conv2d（卷积层）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">        transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.conv1 = Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs&quot;</span>)</span><br><span class="line"></span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    output = tudui(imgs)</span><br><span class="line">    <span class="comment"># print(imgs.shape)</span></span><br><span class="line">    <span class="comment"># print(output.shape)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># torch.Size([64, 3, 32, 32])</span></span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># torch.Size([64, 6, 30, 30]) -&gt; [xxx, 3, 30, 30]</span></span><br><span class="line">    output = torch.reshape(output, (-<span class="number">1</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line"></span><br><span class="line">    step += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="十、nn-maxpool（最大池化）">十、nn_maxpool（最大池化）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维矩阵最大池化</span></span><br><span class="line"><span class="comment"># input = torch.tensor([[1, 2, 0, 3, 1],</span></span><br><span class="line"><span class="comment">#                      [0, 1, 2, 3, 1],</span></span><br><span class="line"><span class="comment">#                      [1, 2, 1, 0, 0],</span></span><br><span class="line"><span class="comment">#                      [5, 2, 3, 1, 1],</span></span><br><span class="line"><span class="comment">#                      [2, 1, 0, 1, 1]], dtype=torch.float32)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># input = torch.reshape(input, (-1, 1, 5, 5))</span></span><br><span class="line"><span class="comment"># print(input.shape)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.maxpool1 = MaxPool2d(kernel_size=<span class="number">3</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = self.maxpool1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_maxpool&quot;</span>)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line">    output = tudui(imgs)</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line">    step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="十一、nn-relu（非线性激活）">十一、nn_relu（非线性激活）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> ReLU, Sigmoid</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>, -<span class="number">0.5</span>],</span><br><span class="line">                       [-<span class="number">1</span>, <span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.relu1 = ReLU()</span><br><span class="line">        self.sigmoid1 = Sigmoid()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = self.sigmoid1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line"><span class="comment"># output = tudui(input)</span></span><br><span class="line"><span class="comment"># print(output)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_relu&quot;</span>)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line">    output = tudui(imgs)</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line">    step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="十二、nn-linear（线性层）">十二、nn_linear（线性层）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.linear1 = Linear(<span class="number">196608</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = self.linear1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    <span class="built_in">print</span>(imgs.shape)</span><br><span class="line">    output = torch.reshape(imgs, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line">    output = tudui(output)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure><h2 id="十三、nn-seq（搭建小实战）">十三、nn_seq（搭建小实战）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.conv1 = Conv2d(3, 32, 5, padding=2)</span></span><br><span class="line">        <span class="comment"># self.maxpool1 = MaxPool2d(2)</span></span><br><span class="line">        <span class="comment"># self.conv2 = Conv2d(32, 32, 5, padding=2)</span></span><br><span class="line">        <span class="comment"># self.maxpool2 = MaxPool2d(2)</span></span><br><span class="line">        <span class="comment"># self.conv3 = Conv2d(32, 64, 5, padding=2)</span></span><br><span class="line">        <span class="comment"># self.maxpool3 = MaxPool2d(2)</span></span><br><span class="line">        <span class="comment"># self.flatten = Flatten()</span></span><br><span class="line">        <span class="comment"># self.linear1 = Linear(1024, 64)</span></span><br><span class="line">        <span class="comment"># self.linear2 = Linear(64, 10)</span></span><br><span class="line"></span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># x = self.conv1(x)</span></span><br><span class="line">        <span class="comment"># x = self.maxpool1(x)</span></span><br><span class="line">        <span class="comment"># x = self.conv2(x)</span></span><br><span class="line">        <span class="comment"># x = self.maxpool2(x)</span></span><br><span class="line">        <span class="comment"># x = self.conv3(x)</span></span><br><span class="line">        <span class="comment"># x = self.maxpool3(x)</span></span><br><span class="line">        <span class="comment"># x = self.flatten(x)</span></span><br><span class="line">        <span class="comment"># x = self.linear1(x)</span></span><br><span class="line">        <span class="comment"># x = self.linear2(x)</span></span><br><span class="line"></span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line"><span class="built_in">print</span>(tudui)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.ones((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">output = tudui(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_seq&quot;</span>)</span><br><span class="line">writer.add_graph(tudui, <span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="十四、损失函数与反向传播">十四、损失函数与反向传播</h2><h3 id="1-nn-loss">1.nn_loss</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inputs = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=torch.float32)</span><br><span class="line">targets = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], dtype=torch.float32)</span><br><span class="line"></span><br><span class="line">inputs = torch.reshape(inputs, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">targets = torch.reshape(targets, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss = L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">result = loss(inputs, targets)</span><br><span class="line"></span><br><span class="line">loss_mse = nn.MSELoss()</span><br><span class="line">result_mse = loss_mse(inputs, targets)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(result_mse)</span><br></pre></td></tr></table></figure><h3 id="2-nn-loss-network">2.nn_loss_network</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">        transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络模板</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算损失</span></span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">tudui = Tudui()</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    outputs = tudui(imgs)</span><br><span class="line">    result_loss = loss(outputs, targets)</span><br><span class="line">    result_loss.backward()</span><br></pre></td></tr></table></figure><h3 id="3-可视化页面展示">3.可视化页面展示</h3><p><img src="/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test2.png" alt="test2"></p><h2 id="十五、nn-optim（优化器）">十五、nn_optim（优化器）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络模板</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算损失、梯度下降</span></span><br><span class="line"></span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">tudui = Tudui()</span><br><span class="line">optim = torch.optim.SGD(tudui.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        outputs = tudui(imgs)</span><br><span class="line">        result_loss = loss(outputs, targets)</span><br><span class="line">        optim.zero_grad()</span><br><span class="line">        result_loss.backward()</span><br><span class="line">        optim.step()</span><br><span class="line">        running_loss += result_loss</span><br><span class="line">    <span class="built_in">print</span>(running_loss)</span><br></pre></td></tr></table></figure><h2 id="十六、model-pretrained（对现有网络模型进行修改-vgg16）">十六、model_pretrained（对现有网络模型进行修改.vgg16）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># train_data = torchvision.datasets.ImageNet(&quot;../data_image_net&quot;, split=&#x27;train&#x27;,</span></span><br><span class="line"><span class="comment">#                                            download=True, transform=torchvision.transforms.ToTensor())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vgg16_false = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">vgg16_true = torchvision.models.vgg16(pretrained=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vgg16_true.classifier.add_module(<span class="string">&#x27;add_linear&#x27;</span>, nn.Linear(<span class="number">1000</span>, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(vgg16_true)</span><br><span class="line"></span><br><span class="line">vgg16_false.classifier[<span class="number">6</span>] = nn.Linear(<span class="number">4096</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_false)</span><br></pre></td></tr></table></figure><h2 id="十七、模型的保存与读取">十七、模型的保存与读取</h2><h3 id="1-model-save">1.model_save</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存方式1:模型结构+模型参数</span></span><br><span class="line">torch.save(vgg16, <span class="string">&quot;vgg16_method1.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存方式2:模型参数（官方推荐）</span></span><br><span class="line">torch.save(vgg16.state_dict(), <span class="string">&quot;vgg16_method2.pth&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-model-load">2.model_load</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1：加载模型</span></span><br><span class="line"><span class="comment"># model = torch.load(&quot;vgg16_method1.pth&quot;)</span></span><br><span class="line"><span class="comment"># print(model)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2：加载模型</span></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">vgg16.load_state_dict(torch.load(<span class="string">&quot;vgg16_method2.pth&quot;</span>))</span><br><span class="line"><span class="comment"># model = torch.load(&quot;vgg16_method2.pth&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(vgg16)</span><br></pre></td></tr></table></figure><h2 id="十八、train（完整模型训练套路）">十八、train（完整模型训练套路）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                           download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                           download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 DataLoader 来加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(train_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络模型</span></span><br><span class="line">tudui = Tudui()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练网络的参数</span></span><br><span class="line"><span class="comment"># 记录训练的次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练的轮数</span></span><br><span class="line">epoch = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_train&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤开始</span></span><br><span class="line">    tudui.train()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        outputs = tudui(imgs)</span><br><span class="line">        loss = loss_fn(outputs,targets)</span><br><span class="line">        <span class="comment"># 优化器优化模型</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="comment"># 显示次数和损失loss</span></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(<span class="string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤开始</span></span><br><span class="line">    tudui.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs, targets = data</span><br><span class="line">            outputs = tudui(imgs)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss.item()</span><br><span class="line">            accuracy = (outputs.argmax(<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy/test_data_size))</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class="line">    total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># torch.save(tudui, &quot;model_classify_&#123;&#125;.pth&quot;.format(i))</span></span><br><span class="line">    <span class="comment"># print(&quot;模型已保存！&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h3 id="可视化页面展示：-2">可视化页面展示：</h3><p><img src="/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test3.png" alt="test3"></p><h2 id="十九、利用GPU训练">十九、利用GPU训练</h2><h3 id="1-train-gpu-1">1.train_gpu_1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                           download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                           download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 DataLoader 来加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(train_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络模型</span></span><br><span class="line">tudui = Tudui()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    tudui = tudui.cuda()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    loss_fn = loss_fn.cuda()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练网络的参数</span></span><br><span class="line"><span class="comment"># 记录训练的次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练的轮数</span></span><br><span class="line">epoch = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_train&quot;</span>)</span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤开始</span></span><br><span class="line">    tudui.train()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">            imgs = imgs.cuda()</span><br><span class="line">            targets = targets.cuda()</span><br><span class="line"></span><br><span class="line">        outputs = tudui(imgs)</span><br><span class="line">        loss = loss_fn(outputs,targets)</span><br><span class="line">        <span class="comment"># 优化器优化模型</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="comment"># 显示次数和损失loss</span></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            <span class="built_in">print</span>(end_time - start_time)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(<span class="string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤开始</span></span><br><span class="line">    tudui.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs, targets = data</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">                imgs = imgs.cuda()</span><br><span class="line">                targets = targets.cuda()</span><br><span class="line"></span><br><span class="line">            outputs = tudui(imgs)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss.item()</span><br><span class="line">            accuracy = (outputs.argmax(<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy/test_data_size))</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class="line">    total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">29</span>:</span><br><span class="line">        torch.save(tudui, <span class="string">&quot;model_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模型已保存！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h3 id="2-train-gpu-2">2.train_gpu_2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义训练设备</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 DataLoader 来加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(train_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络模型</span></span><br><span class="line">tudui = Tudui()</span><br><span class="line">tudui.to(device)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line">loss_fn.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练网络的参数</span></span><br><span class="line"><span class="comment"># 记录训练的次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练的轮数</span></span><br><span class="line">epoch = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_train&quot;</span>)</span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤开始</span></span><br><span class="line">    tudui.train()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line"></span><br><span class="line">        imgs = imgs.to(device)</span><br><span class="line">        targets = targets.to(device)</span><br><span class="line"></span><br><span class="line">        outputs = tudui(imgs)</span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line">        <span class="comment"># 优化器优化模型</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="comment"># 显示次数和损失loss</span></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            writer.add_scalar(<span class="string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤开始</span></span><br><span class="line">    tudui.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs, targets = data</span><br><span class="line"></span><br><span class="line">            imgs = imgs.to(device)</span><br><span class="line">            targets = targets.to(device)</span><br><span class="line"></span><br><span class="line">            outputs = tudui(imgs)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss.item()</span><br><span class="line">            accuracy = (outputs.argmax(<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;time: &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(end_time - start_time))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy/test_data_size))</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class="line">    total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">29</span>:</span><br><span class="line">        torch.save(tudui, <span class="string">&quot;model_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模型已保存！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="二十、test（模型验证）">二十、test（模型验证）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&quot;../images/dog.png&quot;</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line"></span><br><span class="line">transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">                                            torchvision.transforms.ToTensor()])</span><br><span class="line"></span><br><span class="line">image = transform(image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">model = torch.load(<span class="string">&quot;model_30.pth&quot;</span>, map_location=torch.device(<span class="string">&#x27;cpu&#x27;</span>))</span><br><span class="line"></span><br><span class="line">image = torch.reshape(image, (<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    output = model(image)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output.argmax(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Deeplearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE5场景制作</title>
      <link href="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/"/>
      <url>/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、此为本人搭建场景，仅供参考~</li><li>2、如有使用注明出处~</li><li>3、如有不足，欢迎批评指正~</li></ul><hr><h1>一、场景Demo展示</h1><h2 id="1-日落">1.日落</h2><p><img src="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test1.png" alt="test1"></p><h2 id="2-山雾">2.山雾</h2><p><img src="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test2.png" alt="test2"></p><h2 id="3-地形">3.地形</h2><p><img src="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test3.png" alt="test3"></p><h2 id="4-光线">4.光线</h2><p><img src="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test4.jpg" alt="test4"></p><h2 id="5-洞穴">5.洞穴</h2><p><img src="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test5.png" alt="test5"></p><hr>]]></content>
      
      
      <categories>
          
          <category> Gameproduction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>经验or小技巧</title>
      <link href="/2023/02/01/%E7%BB%8F%E9%AA%8C%20or%20%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/02/01/%E7%BB%8F%E9%AA%8C%20or%20%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、这为本人总结内容，主观性比较强，可以部分借鉴但不建议完全效仿；</li><li>2、如有使用或转载请注明出处；</li><li>3、如有不足，欢迎批评指正；</li></ul><hr><h1>时间复杂度 *</h1><p><img src="/2023/02/01/%E7%BB%8F%E9%AA%8C%20or%20%E5%B0%8F%E6%8A%80%E5%B7%A7/test1.png" alt></p><h1>空间复杂度</h1><p><img src="/2023/02/01/%E7%BB%8F%E9%AA%8C%20or%20%E5%B0%8F%E6%8A%80%E5%B7%A7/test2.png" alt></p><h1>小技巧</h1><h2 id="一、初始板子：">一、初始板子：</h2><ul><li>这是我的初始模板，里面的点已经写在注释上了，有需要的可以参考喔！</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span>   <span class="comment">// 万用头文件，所有库都在里面了</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first    <span class="comment">// pair类型为了方便二维平面上表示(x,y)坐标</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long  <span class="comment">// 经典！我是那种比较粗心的会经常忘记开longlong，</span></span></span><br><span class="line">                  <span class="comment">// 所以直接把所有int变为longlong，但是这样有时可能会常数过大从而导致TLE或MLE</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;  <span class="comment">// pair在树和图上经常用到，也经常在二维平面上表示(x,y)坐标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;   <span class="comment">// 可以ll代替longlong类型，少写一些字母</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;  <span class="comment">// 数组开到1e6可以应付绝大部分题目的数据量</span></span><br><span class="line">                     <span class="comment">// 从而保证不会RE和忘记修改数据，但是要注意空间复杂度</span></span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> T,n,m,k;         <span class="comment">// 可以事先列出常用的几个固定变量和数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 此处解题</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span>   <span class="comment">// 如果用了define int long long这里要改成signed</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 关闭同步流固定写法，优化cin和cout的时间，在数据1e6以上就非常需要</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>),cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="comment">// 现在遇到很多题目都是T组数据，写成函数的形式方便把每一组数据区分开</span></span><br><span class="line">    <span class="keyword">while</span>(T--) <span class="built_in">solve</span>();    <span class="comment">// 如果没有T组数据就只写solve()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、常用STL容器：">二、常用STL容器：</h2><h3 id="1、vector">1、vector</h3><p>首先 vector 是一个非常好用的东西，他俗名也叫【变长数组】，那就是说，它是一种空间可以灵活变通的类似于数组的一种数据结构。下面就来介绍几种 vector 的常见用法：</p><ul><li>定义：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一维</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; c;   <span class="comment">// vector&lt;类型名&gt; 变量名;</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(n+<span class="number">1</span>)</span></span>;  <span class="comment">// 固定长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; c[N];  <span class="comment">// vector&lt;类型名&gt; 数组;</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; c;  <span class="comment">// vector&lt;vector&lt;类型名&gt;&gt; 变量名;</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">c</span>(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>));  <span class="comment">// 二维n*m固定长度</span></span><br></pre></td></tr></table></figure><ul><li>基本用法：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; c;    <span class="comment">// 以容器变量为c举例</span></span><br><span class="line">c.<span class="built_in">size</span>()          <span class="comment">// c容器的长度</span></span><br><span class="line">c.<span class="built_in">push_back</span>(x);   <span class="comment">// 从vector后面存进去元素x</span></span><br><span class="line">c.<span class="built_in">pop_back</span>(x);    <span class="comment">// 从vector后面弹出元素x</span></span><br><span class="line">c.<span class="built_in">back</span>();         <span class="comment">// 取出容器最后的元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;c.<span class="built_in">size</span>();i++)  <span class="comment">// 遍历c中所有元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t:c)     <span class="comment">// 遍历vector内所有元素赋值到t里</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [x,y]:c) <span class="comment">// 二维遍历</span></span><br><span class="line"><span class="comment">// 注意：c++11以上才支持auto</span></span><br></pre></td></tr></table></figure><ul><li>因为 vector 可以访问最后的元素 + push进最后的位置 + 弹出最后面的元素，有时候可以利用这一特性用 vector 模拟栈；</li></ul><h3 id="2、string">2、string</h3><p>string 就是字符串，string s 也相当于char s[N]，但是里面有很多关于字符串操作的函数，所以比字符数组好用很多。下面就来介绍几种 string 的常见用法：</p><ul><li>定义：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一维</span></span><br><span class="line">string s;  <span class="comment">// string 变量名;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维</span></span><br><span class="line">string s[N];  <span class="comment">// string 数组;</span></span><br></pre></td></tr></table></figure><ul><li>基本用法：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string s;  <span class="comment">// 以变量名为s举例</span></span><br><span class="line">cin&gt;&gt;s;    <span class="comment">// 输入，遇到空格结束</span></span><br><span class="line"><span class="built_in">getline</span>(cin,s); <span class="comment">// 输入一整行</span></span><br><span class="line"></span><br><span class="line">s.<span class="built_in">size</span>()   <span class="comment">// 求字符串长度</span></span><br><span class="line">s=<span class="string">&#x27; &#x27;</span>+s;   <span class="comment">// 下标整体往后移</span></span><br><span class="line">string s=s1+s2;  <span class="comment">// 字符串相加</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());  <span class="comment">// 翻转字符串</span></span><br><span class="line">s.<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">1</span>);  <span class="comment">// substr是取出字串，用法s.substr(开头下标,字串长度)</span></span><br><span class="line">s1.<span class="built_in">find</span>(s2)!=srting::npos;  <span class="comment">// 在字符串s1里找字符串s2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)  <span class="comment">// 遍历字符串</span></span><br></pre></td></tr></table></figure><h3 id="3、map">3、map</h3><p>map 是一个很好用的东西，它是基于红黑树实现的，可以作为哈希表使用，增删查改的复杂度都是 O(logn)。下面就来介绍几种 map 的常见用法：</p><ul><li>定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;  <span class="comment">// map&lt;原类型，映射类型&gt; 变量名;</span></span><br><span class="line">map&lt;string,<span class="type">char</span>&gt; mp; <span class="comment">// 例：mp[&quot;nb&quot;]=&#x27;6&#x27;;</span></span><br><span class="line">map&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,string&gt; mp; <span class="comment">// 例：mp[&#123;1,1&#125;]=&quot;1025_xp&quot;;</span></span><br></pre></td></tr></table></figure><ul><li>用法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;  <span class="comment">// 以mp为变量名举例</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t:mp) cout&lt;&lt;t.x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;t.y&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;  <span class="comment">// 遍历map，x和y分别代表两维</span></span><br><span class="line">mp[i]++;  mp[i]=x;  mp[a[i]]--;  <span class="comment">// 直接赋值和加减记录</span></span><br></pre></td></tr></table></figure><h4 id="如果大家想了解更多也可以上网搜其他的用法，有很多东西可能很高级但不一一介绍了，思维才是解题里面最重要的，会这些就已经足以应对90-以上的问题了。">如果大家想了解更多也可以上网搜其他的用法，有很多东西可能很高级但不一一介绍了，思维才是解题里面最重要的，会这些就已经足以应对90%以上的问题了。</h4>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法竞赛模板</title>
      <link href="/2023/02/01/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/02/01/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、内容为本人常使用的算法竞赛模板；</li><li>2、如有使用注明出处；</li><li>3、如有改进地方欢迎批评指正；</li></ul><hr><h1>* 常用 ACM 竞赛模板</h1><h2 id="计算几何（常规）：">计算几何（常规）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Geometry</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line">    <span class="comment">// 点与向量</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> x, y;</span><br><span class="line">        <span class="built_in">Point</span>(<span class="type">double</span> x = <span class="number">0</span>, <span class="type">double</span> y = <span class="number">0</span>) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Point a) <span class="type">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">return</span> (<span class="built_in">fabs</span>(x - a.x) &lt;= eps &amp;&amp; <span class="built_in">fabs</span>(y - a.y) &lt;= eps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> Point Vector;</span><br><span class="line">    Vector <span class="keyword">operator</span>+(Vector A, Vector B)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(A.x + B.x, A.y + B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Vector <span class="keyword">operator</span>-(Vector A, Vector B)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(A.x - B.x, A.y - B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Vector <span class="keyword">operator</span>*(Vector A, <span class="type">double</span> p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(A.x * p, A.y * p);</span><br><span class="line">    &#125;</span><br><span class="line">    Vector <span class="keyword">operator</span>/(Vector A, <span class="type">double</span> p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(A.x / p, A.y / p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 符号函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 比较函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; y)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">dot</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 向量点积</span></span><br><span class="line">        <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">cross</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 向量叉积</span></span><br><span class="line">        <span class="keyword">return</span> a.x * b.y - b.x * a.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">get_length</span><span class="params">(Point a)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 求向量模长</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">dot</span>(a, a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">get_angle</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 求A-&gt;B的有向角</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">acos</span>(<span class="built_in">dot</span>(a, b) / <span class="built_in">get_length</span>(a) / <span class="built_in">get_length</span>(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">(Point a, Point b, Point c)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// A为顶点，向量AB与向量AC的叉积，即三角形ABC的面积的2倍（有向）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cross</span>(b - a, c - a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">rotate</span><span class="params">(Point a, <span class="type">double</span> angle)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 将向量A顺时针旋转angle度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(a.x * <span class="built_in">cos</span>(angle) + a.y * <span class="built_in">sin</span>(angle), -a.x * <span class="built_in">sin</span>(angle) + a.y * <span class="built_in">cos</span>(angle));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">get_line_intersection</span><span class="params">(Point p, Vector v, Point q, Vector w)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 两直线的交点</span></span><br><span class="line">        <span class="comment">// 使用前提，直线必须有交点</span></span><br><span class="line">        <span class="comment">// cross(v, w) == 0则两直线平行或者重合</span></span><br><span class="line">        Vector u = p - q;</span><br><span class="line">        <span class="type">double</span> t = <span class="built_in">cross</span>(w, u) / <span class="built_in">cross</span>(v, w);</span><br><span class="line">        <span class="keyword">return</span> p + v * t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">distance_to_line</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 点到直线的距离，直线为AB所在直线</span></span><br><span class="line">        Vector v1 = b - a, v2 = p - a;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">cross</span>(v1, v2) / <span class="built_in">get_length</span>(v1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">distance_to_segment</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 点到线段的距离，线段为线段AB</span></span><br><span class="line">        <span class="keyword">if</span> (a == b)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">get_length</span>(p - a);</span><br><span class="line"></span><br><span class="line">        Vector v1 = b - a, v2 = p - a, v3 = p - b;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sign</span>(<span class="built_in">dot</span>(v1, v2)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">get_length</span>(v2);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sign</span>(<span class="built_in">dot</span>(v1, v3)) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">get_length</span>(v3);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">distance_to_line</span>(p, a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">get_line_projection</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 点在直线上的投影，直线为AB所在直线</span></span><br><span class="line">        Vector v = b - a;</span><br><span class="line">        <span class="keyword">return</span> a + v * (<span class="built_in">dot</span>(v, p - a) / <span class="built_in">dot</span>(v, v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">on_segment</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 点是否在线段上</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sign</span>(<span class="built_in">cross</span>(p - a, p - b)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(<span class="built_in">dot</span>(p - a, p - b)) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">segment_intersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 判断两个线段是否相交</span></span><br><span class="line">        <span class="type">double</span> c1 = <span class="built_in">cross</span>(a2 - a1, b1 - a1), c2 = <span class="built_in">cross</span>(a2 - a1, b2 - a1);</span><br><span class="line">        <span class="type">double</span> c3 = <span class="built_in">cross</span>(b2 - b1, a2 - b1), c4 = <span class="built_in">cross</span>(b2 - b1, a1 - b1);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sign</span>(c1) * <span class="built_in">sign</span>(c2) &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(c3) * <span class="built_in">sign</span>(c4) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 多边形</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">polygon_area</span><span class="params">(Point p[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 求多边形面积</span></span><br><span class="line">        <span class="type">double</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + <span class="number">1</span> &lt; n; i++)</span><br><span class="line">            s += <span class="built_in">cross</span>(p[i] - p[<span class="number">0</span>], p[i + <span class="number">1</span>] - p[i]);</span><br><span class="line">        <span class="keyword">return</span> s / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Geometry;</span><br></pre></td></tr></table></figure><h2 id="计算几何（极角排序）：">计算几何（极角排序）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="type">const</span> db EPS=<span class="number">1e-9</span>,Pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sign</span><span class="params">(db a)</span> </span>&#123; <span class="keyword">return</span> a &lt; -EPS ? <span class="number">-1</span> : a &gt; EPS; &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cmp</span><span class="params">(db a, db b)</span></span>&#123; <span class="keyword">return</span> <span class="built_in">sign</span>(a-b); &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">db x, y;</span><br><span class="line"><span class="built_in">P</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">P</span>(db _x, db _y) : <span class="built_in">x</span>(_x), <span class="built_in">y</span>(_y) &#123;&#125;</span><br><span class="line">P <span class="keyword">operator</span>+(P p) &#123; <span class="keyword">return</span> &#123;x + p.x, y + p.y&#125;; &#125;</span><br><span class="line">P <span class="keyword">operator</span>-(P p) &#123; <span class="keyword">return</span> &#123;x - p.x, y - p.y&#125;; &#125;</span><br><span class="line">P <span class="keyword">operator</span>*(db d) &#123; <span class="keyword">return</span> &#123;x * d, y * d&#125;; &#125;</span><br><span class="line">P <span class="keyword">operator</span>/(db d) &#123; <span class="keyword">return</span> &#123;x / d, y / d&#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(P p) <span class="type">const</span> &#123; </span><br><span class="line"><span class="type">int</span> c = <span class="built_in">cmp</span>(x, p.x);</span><br><span class="line"><span class="keyword">if</span> (c) <span class="keyword">return</span> c == <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cmp</span>(y, p.y) == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(P o) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cmp</span>(x,o.x) == <span class="number">0</span> &amp;&amp; <span class="built_in">cmp</span>(y,o.y) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">db <span class="title">dot</span><span class="params">(P p)</span> </span>&#123; <span class="keyword">return</span> x * p.x + y * p.y; &#125;</span><br><span class="line"><span class="function">db <span class="title">det</span><span class="params">(P p)</span> </span>&#123; <span class="keyword">return</span> x * p.y - y * p.x; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">db <span class="title">distTo</span><span class="params">(P p)</span> </span>&#123; <span class="keyword">return</span> (*<span class="keyword">this</span>-p).<span class="built_in">abs</span>(); &#125;</span><br><span class="line"><span class="function">db <span class="title">alpha</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">atan2</span>(y, x); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123; cin&gt;&gt;x&gt;&gt;y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line"><span class="function">db <span class="title">abs</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">abs2</span>());&#125;</span><br><span class="line"><span class="function">db <span class="title">abs2</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x * x + y * y; &#125;</span><br><span class="line"><span class="function">P <span class="title">rot90</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">P</span>(-y,x);&#125;</span><br><span class="line"><span class="function">P <span class="title">unit</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *<span class="keyword">this</span>/<span class="built_in">abs</span>(); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">quad</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sign</span>(y) == <span class="number">1</span> || (<span class="built_in">sign</span>(y) == <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(x) &gt;= <span class="number">0</span>); &#125;</span><br><span class="line"><span class="function">P <span class="title">rot</span><span class="params">(db an)</span></span>&#123; <span class="keyword">return</span> &#123;x*<span class="built_in">cos</span>(an) - y*<span class="built_in">sin</span>(an),x*<span class="built_in">sin</span>(an) + y*<span class="built_in">cos</span>(an)&#125;; &#125;</span><br><span class="line">&#125;l[N],r[N];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> crossOp(p1,p2,p3) sign(cross(p1,p2,p3))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 直线 p1p2, q1q2 是否恰有一个交点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chkLL</span><span class="params">(P p1, P p2, P q1, P q2)</span> </span>&#123;</span><br><span class="line">db a1 = <span class="built_in">cross</span>(q1, q2, p1), a2 = -<span class="built_in">cross</span>(q1, q2, p2);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sign</span>(a1+a2) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求直线 p1p2, q1q2 的交点</span></span><br><span class="line"><span class="function">P <span class="title">isLL</span><span class="params">(P p1, P p2, P q1, P q2)</span> </span>&#123;</span><br><span class="line">db a1 = <span class="built_in">cross</span>(q1, q2, p1), a2 = -<span class="built_in">cross</span>(q1, q2, p2);</span><br><span class="line"><span class="keyword">return</span> (p1 * a2 + p2 * a1) / (a1 + a2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断区间 [l1, r1], [l2, r2] 是否相交</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">intersect</span><span class="params">(db l1,db r1,db l2,db r2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l1&gt;r1) <span class="built_in">swap</span>(l1,r1); </span><br><span class="line"><span class="keyword">if</span> (l2&gt;r2) <span class="built_in">swap</span>(l2,r2); </span><br><span class="line"><span class="keyword">return</span> !( <span class="built_in">cmp</span>(r1,l2) == <span class="number">-1</span> || <span class="built_in">cmp</span>(r2,l1) == <span class="number">-1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线段 p1p2, q1q2 相交</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSS</span><span class="params">(P p1, P p2, P q1, P q2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">intersect</span>(p1.x,p2.x,q1.x,q2.x) &amp;&amp; <span class="built_in">intersect</span>(p1.y,p2.y,q1.y,q2.y) &amp;&amp; </span><br><span class="line"><span class="built_in">crossOp</span>(p1,p2,q1) * <span class="built_in">crossOp</span>(p1,p2,q2) &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">crossOp</span>(q1,q2,p1)</span><br><span class="line">* <span class="built_in">crossOp</span>(q1,q2,p2) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线段 p1p2, q1q2 严格相交  </span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSS_strict</span><span class="params">(P p1, P p2, P q1, P q2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">crossOp</span>(p1,p2,q1) * <span class="built_in">crossOp</span>(p1,p2,q2) &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">crossOp</span>(q1,q2,p1)</span><br><span class="line">* <span class="built_in">crossOp</span>(q1,q2,p2) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// m 在 a 和 b 之间</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isMiddle</span><span class="params">(db a, db m, db b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sign</span>(a - m) == <span class="number">0</span> || <span class="built_in">sign</span>(b - m) == <span class="number">0</span> || (a &lt; m != b &lt; m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isMiddle</span><span class="params">(P a, P m, P b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">isMiddle</span>(a.x, m.x, b.x) &amp;&amp; <span class="built_in">isMiddle</span>(a.y, m.y, b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点 p 在线段 p1p2 上</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">onSeg</span><span class="params">(P p1, P p2, P q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">crossOp</span>(p1,p2,q) == <span class="number">0</span> &amp;&amp; <span class="built_in">isMiddle</span>(p1, q, p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// q1q2 和 p1p2 的交点 在 p1p2 上？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点 p 严格在 p1p2 上</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">onSeg_strict</span><span class="params">(P p1, P p2, P q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">crossOp</span>(p1,p2,q) == <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>((q-p1).<span class="built_in">dot</span>(p1-p2)) * <span class="built_in">sign</span>((q-p2).<span class="built_in">dot</span>(p1-p2)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 q 到 直线p1p2 的投影（垂足） ⚠️ : p1 != p2</span></span><br><span class="line"><span class="function">P <span class="title">proj</span><span class="params">(P p1, P p2, P q)</span> </span>&#123;</span><br><span class="line">P dir = p2 - p1;</span><br><span class="line"><span class="keyword">return</span> p1 + dir * (dir.<span class="built_in">dot</span>(q - p1) / dir.<span class="built_in">abs2</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 q 以 直线p1p2 为轴的反射</span></span><br><span class="line"><span class="function">P <span class="title">reflect</span><span class="params">(P p1, P p2, P q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">proj</span>(p1,p2,q) * <span class="number">2</span> - q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 q 到 线段p1p2 的最小距离</span></span><br><span class="line"><span class="function">db <span class="title">nearest</span><span class="params">(P p1, P p2, P q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p1 == p2) <span class="keyword">return</span> p1.<span class="built_in">distTo</span>(q);</span><br><span class="line">P h = <span class="built_in">proj</span>(p1,p2,q);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isMiddle</span>(p1,h,p2))</span><br><span class="line"><span class="keyword">return</span> q.<span class="built_in">distTo</span>(h);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(p1.<span class="built_in">distTo</span>(q),p2.<span class="built_in">distTo</span>(q));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 线段p1p2 与 线段q1q2 的距离</span></span><br><span class="line"><span class="function">db <span class="title">disSS</span><span class="params">(P p1, P p2, P q1, P q2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isSS</span>(p1,p2,q1,q2)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">min</span>(<span class="built_in">nearest</span>(p1,p2,q1),<span class="built_in">nearest</span>(p1,p2,q2)), <span class="built_in">min</span>(<span class="built_in">nearest</span>(q1,q2,p1),<span class="built_in">nearest</span>(q1,q2,p2)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求三角形面积</span></span><br><span class="line"><span class="function">db <span class="title">get_s</span><span class="params">(P a,P b,P c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cross</span>(a,b,c)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 极角排序1</span></span><br><span class="line"><span class="comment">// sort(p, p + n, [&amp;](P a, P b) &#123;</span></span><br><span class="line"><span class="comment">// int qa = a.quad(), qb = b.quad();</span></span><br><span class="line"><span class="comment">// if (qa != qb) return qa &lt; qb;</span></span><br><span class="line"><span class="comment">// else return sign(a.det(b)) &gt; 0;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 极角排序2</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cross1</span><span class="params">(P a, P b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">up</span><span class="params">(P a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &gt; <span class="number">0</span> || (a.y == <span class="number">0</span> &amp;&amp; a.x &gt;= <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(p, p + n , [&amp;](P a, P b)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">up</span>(a) != <span class="built_in">up</span>(b)) <span class="keyword">return</span> <span class="built_in">up</span>(a) &gt; <span class="built_in">up</span>(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross1</span>(a, b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="向量叉积：">向量叉积：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义点结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="type">double</span> angle;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> point &amp;t)&#123;</span><br><span class="line">        <span class="keyword">return</span> angle&lt;t.angle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//求叉积</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cross</span><span class="params">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判定线线的位置关系</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(Point a,Point b,Point c,Point d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(a,b,c)*<span class="built_in">cross</span>(a,b,d)&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求两直线的交点</span></span><br><span class="line"><span class="function">Point <span class="title">getNode</span><span class="params">(Point a,Point u,Point b,Point v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> t=(a-b)*v/(v*u);</span><br><span class="line">    <span class="keyword">return</span> a+u*t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求三角形面积</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">get_s</span><span class="params">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(a,b,c)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//极角排序（atan2函数）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">atan2cmp</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.angle==b.angle) <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.angle&lt;a.angle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//极角排序（叉积）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">crosscmp</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> f=<span class="built_in">cross</span>(p[pos],a,b);</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">0</span>) <span class="keyword">return</span> a.x-p[pos].x&lt;b.x-p[pos].x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(f&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="凸包-旋转卡壳：">凸包 + 旋转卡壳：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;p[N],s[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//求叉积</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cross</span><span class="params">(P a,P b,P c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求两点距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(P a,P b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(P a,P b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求凸包的Andrew算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Andrew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求上凸包</span></span><br><span class="line">    <span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;<span class="number">1</span>&amp;&amp;<span class="built_in">cross</span>(s[top<span class="number">-1</span>],s[top],p[i])&lt;=<span class="number">0</span>) top--</span><br><span class="line">        s[++top]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求下凸包</span></span><br><span class="line">    <span class="type">int</span> t=top;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;t&amp;&amp;<span class="built_in">cross</span>(s[top<span class="number">-1</span>],s[top],p[i])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">        s[++top]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n=top<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//旋转卡壳</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rotating_calipers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cross</span>(s[i],s[i+<span class="number">1</span>],s[j])&lt;<span class="built_in">cross</span>(s[i],s[i+<span class="number">1</span>],s[j+<span class="number">1</span>])) j=j%n+<span class="number">1</span>;</span><br><span class="line">        res=<span class="built_in">max</span>(&#123;res,<span class="built_in">dis</span>(s[i],s[j]),<span class="built_in">dis</span>(s[i+<span class="number">1</span>],s[j])&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自适应辛普森积分：">自适应辛普森积分：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="type">double</span> l,r;</span><br><span class="line"></span><br><span class="line"><span class="comment">//积分函数</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x*x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辛普森公式</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">simpson</span><span class="params">(<span class="type">double</span> l,<span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">f</span>(l)+<span class="built_in">f</span>(r)+<span class="number">4</span>*<span class="built_in">f</span>((l+r)/<span class="number">2</span>))*(r-l)/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自适应</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">asr</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b,<span class="type">double</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> m=(l+r)/<span class="number">2</span>,a=<span class="built_in">simpson</span>(l,m),b=<span class="built_in">simpson</span>(m,r);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(a+b-ans)&lt;eps) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">asr</span>(l,m,a)+<span class="built_in">asr</span>(m,r,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合数（常规）：">组合数（常规）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速幂逆元求组合数</span></span><br><span class="line"><span class="type">int</span> fact[N], infact[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fact[a]*infact[a-b]%mod*infact[b]%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fact[a]*infact[a-b]%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆排列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Q</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fact[a]*infact[a-b]%mod*<span class="built_in">qmi</span>(m,mod<span class="number">-2</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错位排列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">D</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">0</span>,f[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++) f[i]=(i<span class="number">-1</span>)*(f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>])%mod;</span><br><span class="line">    <span class="keyword">return</span> f[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//预处理</span></span><br><span class="line">fact[<span class="number">0</span>]=infact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">    fact[i]=fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    infact[i]=infact[i<span class="number">-1</span>]*<span class="built_in">qmi</span>(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合数（优化）：">组合数（优化）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> i64 = <span class="type">int64_t</span>;</span><br><span class="line"><span class="keyword">constexpr</span> i64 mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">i64 <span class="title">fpow</span><span class="params">(i64 x, i64 r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    i64 result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (r &amp; <span class="number">1</span>)result = result * x % mod;</span><br><span class="line">        r &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> binom &#123;</span><br><span class="line">    i64 fac[N], ifac[N];</span><br><span class="line">    <span class="type">int</span> __ = []</span><br><span class="line">    &#123;</span><br><span class="line">        fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N - <span class="number">5</span>; i++)</span><br><span class="line">            fac[i] = fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        ifac[N - <span class="number">5</span>] = <span class="built_in">fpow</span>(fac[N - <span class="number">5</span>], mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">5</span>; i; i--)</span><br><span class="line">            ifac[i - <span class="number">1</span>] = ifac[i] * i % mod;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> i64 <span class="title">C</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> fac[n] * ifac[m] % mod * ifac[n - m] % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> i64 <span class="title">A</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> fac[n] * ifac[n - m] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> binom;</span><br></pre></td></tr></table></figure><h2 id="卡特兰数-C-2n-n-C-2n-n-1-：">卡特兰数  C(2<em>n,n)-C(2</em>n,n-1) ：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分解质因数求组合数（可适用于mod非质数）</span></span><br><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//筛质数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速幂</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分解质因数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=n;j;j/=p) s+=j/p;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分解质因数的方式求组合数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="type">int</span> p=primes[i];</span><br><span class="line">        <span class="type">int</span> s=<span class="built_in">get</span>(a,p)-<span class="built_in">get</span>(b,p)-<span class="built_in">get</span>(a-b,p);</span><br><span class="line">        res=res*<span class="built_in">qmi</span>(p,s)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;mod;</span><br><span class="line">    cout&lt;&lt;(<span class="built_in">C</span>(<span class="number">2</span>*n,n)-<span class="built_in">C</span>(<span class="number">2</span>*n,n+<span class="number">1</span>)+mod)%mod&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="欧拉、莫比乌斯函数-整数分块：">欧拉、莫比乌斯函数 + 整数分块：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="type">int</span> mobius[N],s[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//线性筛求欧拉函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">oula</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            primes[cnt++]=i;</span><br><span class="line">            phi[i]=i<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                phi[i*primes[j]]=phi[i]*primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[i*primes[j]]=phi[i]*(primes[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线性筛求莫比乌斯函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mobius[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            primes[cnt++]=i;</span><br><span class="line">            mobius[i]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                mobius[primes[j]*i]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mobius[primes[j]*i]=mobius[i]*<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="number">-1</span>]+mobius[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除数分块</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,d;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;d;</span><br><span class="line">    a/=d,b/=d;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>,n=<span class="built_in">min</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=<span class="built_in">min</span>(n,<span class="built_in">min</span>(a/(a/l),b/(b/l)));</span><br><span class="line">        res+=(s[r]-s[l<span class="number">-1</span>])*(a/l)*(b/l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;res&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂：">矩阵快速幂：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//矩阵运算</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a[][N],<span class="type">int</span> b[][N],<span class="type">int</span> c[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t[N][N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;N;k++)</span><br><span class="line">                t[i][j]=(t[i][j]+a[i][k]*b[k][j])%m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(c,t,<span class="keyword">sizeof</span> t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造系数矩阵</span></span><br><span class="line">    <span class="type">int</span> f1[N][N]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> a[N][N]=&#123;</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">         &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//快速幂</span></span><br><span class="line">    <span class="type">int</span> k=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span>) <span class="built_in">mul</span>(f1,a,f1);</span><br><span class="line">        <span class="built_in">mul</span>(a,a,a);</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;f1[<span class="number">2</span>]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记忆化搜索求期望：">记忆化搜索求期望：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;PII&gt; c[N];</span><br><span class="line"><span class="type">int</span> d[N],a[N];</span><br><span class="line"><span class="type">double</span> f[N];</span><br><span class="line"><span class="type">int</span> T,n,m,k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[u]&gt;<span class="number">0</span>) <span class="keyword">return</span> f[u];</span><br><span class="line">    <span class="keyword">if</span>(u==<span class="number">0</span>) <span class="keyword">return</span> f[u]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    f[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p:c[u])&#123;</span><br><span class="line">        <span class="type">int</span> i=p.x,j=p.y;</span><br><span class="line">        f[u]+=(<span class="built_in">dfs</span>(i)+j)*<span class="number">1.0</span>/d[u];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> u,v,w;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        c[u].<span class="built_in">push_back</span>(&#123;v,w&#125;);</span><br><span class="line">        d[u]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,<span class="built_in">dfs</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展欧几里得（exgcd）：">扩展欧几里得（exgcd）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展欧几里得</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求解不定方程ax+my==b;</span></span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(a,m,x,y);</span><br><span class="line">    <span class="comment">//求出ax+my==gcd(a,m),判断gcd(a,m)|b?</span></span><br><span class="line">    <span class="keyword">if</span>(b%d==<span class="number">0</span>) cout&lt;&lt;x*b/d%m&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">//求解乘法逆元：</span></span><br><span class="line">    cout&lt;&lt;(x%m+m)%m&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="扩展欧拉定理：">扩展欧拉定理：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求欧拉函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_phi</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m%i==<span class="number">0</span>)&#123;</span><br><span class="line">            res=res/i*(i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">while</span>(m%i==<span class="number">0</span>) m/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;<span class="number">1</span>) res=res*/m*(m<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//降幂</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">depow</span><span class="params">(<span class="type">int</span> phi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;s[i];i++)&#123;</span><br><span class="line">        b=b*<span class="number">10</span>+(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(b&gt;=phi) flag=<span class="literal">true</span>,b%=phi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) b+=phi;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容斥原理：">容斥原理：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n,m,primes[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//位运算求容斥原理，复杂度为 O(2^m)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i++)&#123; </span><br><span class="line">        <span class="type">int</span> t=<span class="number">1</span>,sign=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>&lt;&lt;j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t*primes[j]&gt;n) t=<span class="number">0</span>,<span class="keyword">break</span>;</span><br><span class="line">                t*=primes[j];</span><br><span class="line">                sign=-sign;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t) res+=n/t*sign;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sg-函数：">sg 函数：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sg</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x]!=<span class="number">-1</span>) <span class="keyword">return</span> f[x];</span><br><span class="line"></span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:c[x]) s.<span class="built_in">insert</span>(<span class="built_in">sg</span>(i));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;;i++)</span><br><span class="line">        <span class="keyword">if</span>(!s.<span class="built_in">count</span>(i))</span><br><span class="line">            <span class="keyword">return</span> f[x]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整数三分：">整数三分：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">2e9</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="type">int</span> t=(r-l)/<span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> mid1=l+t;</span><br><span class="line">    <span class="type">int</span> mid2=r-t;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid1)&gt;<span class="built_in">check</span>(mid2)) l=mid1;</span><br><span class="line">    <span class="keyword">else</span> r=mid2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小数三分：">小数三分：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> l=<span class="number">1</span>,r=<span class="number">2e9</span>;</span><br><span class="line"><span class="keyword">while</span>(r-l&gt;eps)&#123;</span><br><span class="line">    <span class="type">double</span> t=(r-l)/<span class="number">3</span>;</span><br><span class="line">    <span class="type">double</span> mid1=l+t;</span><br><span class="line">    <span class="type">double</span> mid2=r-t;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid1)&gt;<span class="built_in">check</span>(mid2)) l=mid1;</span><br><span class="line">    <span class="keyword">else</span> r=mid2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA（最近公共祖先）：">LCA（最近公共祖先）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u]=dep[father]+<span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>]=father;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:c[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v!=father)&#123; </span><br><span class="line">            <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(dep[fa[u][i]]&gt;=dep[v]) u=fa[u][i];</span><br><span class="line">    <span class="keyword">if</span>(u==v) <span class="keyword">return</span> v;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--) </span><br><span class="line">        <span class="keyword">if</span>(fa[u][i]!=fa[v][i]) </span><br><span class="line">            u=fa[u][i],v=fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity游戏控制基础脚本</title>
      <link href="/2023/02/01/Unity%E6%B8%B8%E6%88%8F%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/02/01/Unity%E6%B8%B8%E6%88%8F%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、脚本为本人总结，如有使用注明出处</li><li>2、Unity采用C#编程语言编写脚本。</li><li>3、脚本内有注释。</li></ul><hr><h2 id="一、TimeTest（时间控制测试）">一、TimeTest（时间控制测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> JetBrains.Annotations;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TimeTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> GameObject Prefab;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计时器</span></span><br><span class="line">    <span class="built_in">float</span> timer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//游戏开始到现在所花的时间</span></span><br><span class="line">        Debug.Log(Time.time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//时间缩放值</span></span><br><span class="line">        Debug.Log(Time.timeScale);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//固定时间间隔</span></span><br><span class="line">        Debug.Log(Time.fixedDeltaTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GameObject p;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        timer = timer + Time.deltaTime;</span><br><span class="line">        <span class="comment">//每一帧所有的时间</span></span><br><span class="line">        <span class="comment">//Debug.Log(Time.deltaTime);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timer &gt; <span class="number">3</span>&amp;&amp; t == <span class="number">0</span>) &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;敌人出现了！&quot;</span>);</span><br><span class="line">            p = Instantiate(Prefab, Vector3.one, Quaternion.identity);</span><br><span class="line">            t = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timer &gt; <span class="number">6</span>)&#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;敌人消失了！&quot;</span>);</span><br><span class="line">            Destroy(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、SceneTest（场景测试）">二、SceneTest（场景测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SceneTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//场景类，场景管理类 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取当前场景</span></span><br><span class="line">        Scene scene = SceneManager.GetActiveScene();</span><br><span class="line">        Debug.Log(scene.name);  <span class="comment">//场景名称</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.场景是否已经加载</span></span><br><span class="line">        Debug.Log(scene.isLoaded);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.场景路径</span></span><br><span class="line">        Debug.Log(scene.path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.场景索引</span></span><br><span class="line">        Debug.Log(scene.buildIndex);</span><br><span class="line">        GameObject[] gos = scene.GetRootGameObjects();</span><br><span class="line">        Debug.Log(gos.Length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//场景管理类:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.直接创建一个新场景</span></span><br><span class="line">        Scene newScene = SceneManager.CreateScene(<span class="string">&quot;newScene&quot;</span>);</span><br><span class="line">        <span class="comment">//2.已加载场景个数</span></span><br><span class="line">        Debug.Log(SceneManager.sceneCount);</span><br><span class="line">        <span class="comment">//3.卸载场景</span></span><br><span class="line">        SceneManager.UnloadSceneAsync(newScene);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载场景</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.替换</span></span><br><span class="line">        <span class="comment">//SceneManager.LoadScene(&quot;MyScene&quot;,LoadSceneMode.Single);</span></span><br><span class="line">        <span class="comment">//2.添加（两个场景内容叠加）</span></span><br><span class="line">        SceneManager.LoadScene(<span class="string">&quot;MyScene&quot;</span>, LoadSceneMode.Additive);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、EmptyTest（空测试）">三、EmptyTest（空测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> JetBrains.Annotations;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmptyTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> GameObject Cube;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取预设体</span></span><br><span class="line">    <span class="keyword">public</span> GameObject Prefab;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//GameObject go=this.gameObject;</span></span><br><span class="line">        Debug.Log(gameObject.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//tag标签</span></span><br><span class="line">        Debug.Log(gameObject.tag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//layer图层</span></span><br><span class="line">        Debug.Log(gameObject.layer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//立方体的名称</span></span><br><span class="line">        Debug.Log(Cube.name);</span><br><span class="line">        <span class="comment">//当前真正的激活状态</span></span><br><span class="line">        Debug.Log(Cube.activeInHierarchy);</span><br><span class="line">        <span class="comment">//它自身的激活状态</span></span><br><span class="line">        Debug.Log(Cube.activeSelf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取位置信息</span></span><br><span class="line">        Debug.Log(transform.position);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取其他组件</span></span><br><span class="line">        BoxCollider bc = GetComponent&lt;BoxCollider&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加一个组件</span></span><br><span class="line">        Cube.AddComponent&lt;AudioSource&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过预设体来实例化一个物体</span></span><br><span class="line">        GameObject p = Instantiate(Prefab, Vector3.one, Quaternion.identity);</span><br><span class="line">        Instantiate(Prefab, Vector3.zero, Quaternion.identity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//销毁物体</span></span><br><span class="line">        Destroy(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、ApplicationTest（应用测试）">四、ApplicationTest（应用测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//游戏数据文件夹路径（只读，加密压缩）</span></span><br><span class="line">        Debug.Log(Application.dataPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//持久化文件夹路径</span></span><br><span class="line">        Debug.Log(Application.persistentDataPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//StreamingAssets文件夹路径（只读，配置文件）</span></span><br><span class="line">        Debug.Log(Application.streamingAssetsPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//临时文件夹</span></span><br><span class="line">        Debug.Log(Application.temporaryCachePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//控制是否在后台运行</span></span><br><span class="line">        Debug.Log(Application.runInBackground);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开url（即直接跳转网站）</span></span><br><span class="line">        <span class="comment">//Application.OpenURL(&quot;https://gitee.com/qq2607563994/algorithm-code&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//退出游戏</span></span><br><span class="line">        Application.Quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、TransformTest（坐标测试）">五、TransformTest（坐标测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TransformTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取位置</span></span><br><span class="line">        Debug.Log(transform.position);</span><br><span class="line">        Debug.Log(transform.localPosition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取旋转</span></span><br><span class="line">        Debug.Log(transform.rotation);</span><br><span class="line">        Debug.Log(transform.localRotation);</span><br><span class="line">        Debug.Log(transform.eulerAngles);</span><br><span class="line">        Debug.Log(transform.localEulerAngles);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取缩放</span></span><br><span class="line">        Debug.Log(transform.localScale);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向量</span></span><br><span class="line">        Debug.Log(transform.forward);</span><br><span class="line">        Debug.Log(transform.right);</span><br><span class="line">        Debug.Log(transform.up);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">//父子关系</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取父物体</span></span><br><span class="line">        <span class="comment">//GameObject t = transform.parent.gameObject;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//子物体个数</span></span><br><span class="line">        Debug.Log(transform.childCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解除父子关系</span></span><br><span class="line">        transform.DetachChildren();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取子物体</span></span><br><span class="line">        Transform trans = transform.Find(<span class="string">&quot;Child&quot;</span>);</span><br><span class="line">        trans = transform.GetChild(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断一个物体是不是另外一个物体的子物体</span></span><br><span class="line">        <span class="built_in">bool</span> res = transform.IsChildOf(transform);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//时刻看向原点</span></span><br><span class="line">        transform.LookAt(Vector3.zero);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//旋转</span></span><br><span class="line">        transform.Rotate(Vector3.up, <span class="number">0.5f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绕某个物体旋转</span></span><br><span class="line">        transform.RotateAround(Vector3.zero, Vector3.up, <span class="number">0.2f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动</span></span><br><span class="line">        <span class="comment">//transform.Translate(Vector3.forward * 0.1f);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="六、KeyTest（按键测试）">六、KeyTest（按键测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KeyTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//鼠标点击</span></span><br><span class="line">        <span class="comment">//按下鼠标 0左键 1右键 2滚轮</span></span><br><span class="line">        <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;按下了鼠标左键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//持续按下</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;持续按下了鼠标左键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//抬起按键</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonUp(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;抬起了鼠标左键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘点击</span></span><br><span class="line">        <span class="comment">//按下</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;按下了A&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKey(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;持续按下了A&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyUp(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;抬起了A&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="七、AsyncTest（异步加载测试）">七、AsyncTest（异步加载测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AsyncTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    AsyncOperation operation;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(loadScene());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//协程方法用来异步加载场景</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">loadScene</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        operation = SceneManager.LoadSceneAsync(<span class="string">&quot;MyScene&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载完场景不要自动跳转</span></span><br><span class="line">        operation.allowSceneActivation = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> operation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> timer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(operation.progress);</span><br><span class="line">        timer += Time.deltaTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果大于5秒后跳转</span></span><br><span class="line">        <span class="keyword">if</span>(timer &gt; <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            operation.allowSceneActivation = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Gameproduction </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
