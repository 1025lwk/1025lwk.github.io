<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++竞赛语法基础</title>
      <link href="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、此知识点为课堂总结内容；</li><li>2、如有使用或转载请注明出处；</li><li>3、如有不足，欢迎批评指正；</li></ul><hr><h1>* C++导言.软件</h1><h3 id="1-导言须知">1. 导言须知</h3><ul><li><p><strong>课程方向：</strong></p><ul><li><p>知识点主要面向小学**5年级+**的少儿编程 <strong>C++</strong> 课程，适用于信奥赛选拔；</p></li><li><p>特别注意①：C++ 课程 只有启蒙这一套是 小学阶段适合，后续全部中学；</p></li><li><p>特别注意②：虽然是 C++ 编程课程，但和 C++ 几乎没有关系，如何理解？</p><ul><li>很多学习者在学习时，找那种职业成人的C++课程，咨询学了是否可以打比赛？</li><li>你学习的是信息学奥林匹克竞赛之启蒙阶段，只不过用了官方推荐的 C++ 环境罢了；</li><li>如果官方推荐了别的编程环境，学习的内容区别不大，用不到 C++ 自身的特性；</li><li>比如 C++ 可以做嵌入式开发、客户端服务端开发、音频视频开发、大型游戏开发等；</li><li>上面所说的东西，都不会学到，根本用不到 C++ 的各种能力。</li><li>而我们学习的是通过 C++ 编程环境，去解决计算机思维运算下的数理逻辑题罢了。</li><li>总结：我们的目的是 **答题 **，不是做 **开发 **。说白了就是 <strong>数学应用题考试</strong>。</li></ul></li></ul></li><li><p><strong>知识点规划：</strong></p><ul><li><p>启蒙阶段（本套）：</p><ul><li>语法基础、分支、循环、数组、函数、字符串、结构体；</li><li>其中函数的递归详解或深入、数组中的排序算法、字符串的进制、编码、位运算不包含；</li></ul></li><li><p>后续阶段（非本套）：</p><ul><li>过渡篇：进制转换、编码、位运算、暴力枚举、高精度等；</li><li>排序篇：冒泡、插入、选择、快速、归并、sort 排序等；</li><li>算法篇：递归、递推、模拟、分治、二分、贪心、倍增等；</li><li>搜索篇：深度优先DFS、广度优先BFS、回溯、剪枝等；</li><li>数据结构篇：链表、队列、栈、二叉树、并查集等；</li><li>图论篇：图的存储、最小生成树、最短路、二分图等；</li><li>动态规划篇：背包DP、线性DP、树形DP、区间DP、记忆化搜索等；</li><li>数论篇：筛质数、分解质因数、快速幂、组合数等；</li></ul></li><li><p>详情参考：</p><ul><li>上面只列出了大概知识点，详情参考：<a href="https://oi-wiki.org/contest/roadmap/">学习路线 - OI Wiki (oi-wiki.org)</a></li><li>一般培训机构，大概率只会做到 <strong>CSP-J/S</strong> 入门级的比赛，难度尚可；</li><li>更高级的比如 <strong>NOIP</strong> 或 <strong>同等</strong> 或 <strong>更高</strong>，NOIP 只能教一点，再多就能力不够了；</li></ul></li></ul></li></ul><h3 id="2-软件使用">2. 软件使用</h3><ul><li><p><strong>下载安装：</strong></p><ul><li>官网：<a href="https://sourceforge.net/projects/orwelldevcpp/">DevC++ </a></li><li>安装后推荐皮肤和设置，并根据自己的喜好调整：</li></ul></li><li><p><strong>第一个C++程序：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>程序详解：</p><ul><li><p>真正需要理解的就一行：cout &lt;&lt; “Hello World!”;</p><ul><li><strong>cout</strong> 表示 输出，直白点：运行程序后在窗口显示后面双引号里面的内容；</li><li><strong>&lt;&lt;</strong> 表示 插入运算符，语法表示：在 cout 和 后面输出内容，需要用这个+空格隔开；</li><li>; 表示语句结束，一条输出语句写完后，需要通过分号表示结束；</li></ul></li><li><p>其余的代码部分，全员基本格式，无须理解，做成模板自动即可；</p><ul><li>虽说无须理解，但还是象征性的解释一下：<ul><li><strong>include</strong>：头文件，导入外部库；iostream 表示支持输入输出；</li><li><strong>using…</strong>：命名空间，防止冲突；</li><li><strong>int main</strong>：主函数，程序会从这里执行；</li><li><strong>return 0</strong>：返回0，表示程序在这里结束；</li></ul></li></ul></li></ul></li></ul><hr><h1>一、变量存储.注释</h1><h3 id="1-变量声明">1. 变量声明</h3><ul><li><p>什么是变量？变量就是一个可以存储东西的存储罐，具体特性如下：</p><ul><li>每次存储罐里只能存一次东西，也就是说再次存储时，上一次存储的东西会被<strong>替换</strong>掉；</li><li>声明变量就好比你拿出了一个存储罐，实际上是在内存里开辟了一个空间；</li><li>不管是现实中的存储罐还是内存开一个空间，多了防止混淆就需要贴个标签，<strong>命个名</strong>；</li><li>我们来通过一张图来理解一下，这个声明概念：</li></ul><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2-1.png" style="zoom:75%;margin:0"></li><li><p>那么，如何通过编程来实现变量的声明呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个变量a，类型是整数</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="comment">// 注意1：= 不是等于的意思，是赋值的意思</span></span><br><span class="line"><span class="comment">// 注意2：阅读代码从右边向左边阅读，意为：将数字123赋值给变量a</span></span><br><span class="line">a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 输出变量a</span></span><br><span class="line">cout &lt;&lt; a;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-命名规则">2. 命名规则</h3><ul><li><p>从 <strong>a=123</strong> 的例子中，a是变量名，但变量的名字有什么要求？需要注意哪些规则？能乱起吗？</p><ul><li><p>变量名只能是：a-z、A-Z、0-9以及下划线组成；</p></li><li><p>变量名第一位不可以是数字；</p></li><li><p>变量名不可以是 C++ 关键字：比如  int main 之类的；</p></li><li><p>变量需要定义后才可以使用：int a;  a = 123；</p></li><li><p>变量名区分大小写，A和a不同；</p><ul><li>abc（合法）、a123（合法）、_xyz（合法）、123a（不合法）</li></ul></li></ul></li><li><p>为了让变量名更加的有可读性，比如：你的名字：</p><ul><li>第一种经典命名方式，驼峰式：yourName，或YourName，我比较喜欢前者；</li><li>第二种经典命名方式：蛇形式：your_name，用的也比较多；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个字符串</span></span><br><span class="line">string yourName;</span><br><span class="line"><span class="comment">// 字符串类型，需要双引号包含</span></span><br><span class="line">yourName = <span class="string">&quot;你的名字&quot;</span>;</span><br><span class="line">cout &lt;&lt; yourName;</span><br></pre></td></tr></table></figure></li></ul><hr><h1>二、四则运算.输入</h1><h3 id="1-加减乘除">1. 加减乘除</h3><blockquote><p>虽说叫做四则运算，但其实运算符往往不止加减乘除这四种：</p></blockquote><table><thead><tr><th style="text-align:center">运算</th><th style="text-align:center">符号</th><th style="text-align:center">格式</th></tr></thead><tbody><tr><td style="text-align:center">加</td><td style="text-align:center">+</td><td style="text-align:center">1 + 1</td></tr><tr><td style="text-align:center">减</td><td style="text-align:center">-</td><td style="text-align:center">2 - 1</td></tr><tr><td style="text-align:center">乘</td><td style="text-align:center">*</td><td style="text-align:center">3 * 4</td></tr><tr><td style="text-align:center">除</td><td style="text-align:center">/</td><td style="text-align:center">6 / 2</td></tr><tr><td style="text-align:center">求余</td><td style="text-align:center">%</td><td style="text-align:center">10 % 7</td></tr><tr><td style="text-align:center">累加</td><td style="text-align:center">++</td><td style="text-align:center">i++</td></tr><tr><td style="text-align:center">累减</td><td style="text-align:center">–</td><td style="text-align:center">i–</td></tr></tbody></table><ul><li><p>在编程语法中乘法 <strong>x</strong> 用 ***** 号代替，除法 <strong>÷</strong> 用 <strong>/</strong> 代替。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// endl 表示换行 Ctrl + D复制一行</span></span><br><span class="line">cout &lt;&lt; <span class="number">1</span> + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="number">3</span> - <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="number">4</span> * <span class="number">5</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="number">9</span> / <span class="number">7</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="number">7</span> % <span class="number">3</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-cin-输入">2. cin 输入</h3><blockquote><p>如果想让用户在键盘输入内容，可以使用 <strong>cin</strong> 关键字；</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时声明两个整型变量</span></span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="comment">// 输入两个数，并赋值给a和b</span></span><br><span class="line"><span class="comment">// 注意：同时输入a和b时，中间需要用空格键隔开</span></span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="comment">// 打印a+b的和</span></span><br><span class="line">cout &lt;&lt; a + b;</span><br></pre></td></tr></table></figure><hr><h1>三、学会使用OJ答题</h1><h3 id="1-OJ系统">1. OJ系统</h3><blockquote><p>所谓的OJ系统，即：用于竞赛编程中，海量刷题的工具系统；</p></blockquote><ul><li><p>这里推荐几个刷题的OJ平台：</p><ul><li>Codeforces：<a href="https://codeforces.com/">俄罗斯线上竞赛OJ</a></li><li>Atcoder：<a href="https://atcoder.jp/">日本线上竞赛OJ</a></li><li>Codechef：<a href="https://www.codechef.com/">印度尼西亚线上竞赛OJ</a></li><li>洛谷：<a href="https://www.luogu.com.cn/">常用刷题OJ</a></li><li>牛客网：<a href="https://ac.nowcoder.com/acm/contest/vip-index">常用周赛OJ</a></li></ul></li><li><p>这里摘一段博宜答题须知：</p><ul><li>不要有多余的输入输出；</li><li>输出格式和题目要求要完全一致；</li><li>样例只是其中一个测试点，并非全部；比如：要求输入1和2，输出和3；<ul><li>你不能 输入1和2，输出3</li><li>你应该 输入1和2，输出1+2</li><li>因为其它测试点可能是4和5，要求输出9</li></ul></li></ul></li></ul><h3 id="2-使用洛谷">2. 使用洛谷</h3><ul><li><p>在首页直接输入题号：<strong>B2002</strong>，可直接进入题目页面；题号不区分大小写；</p></li><li><p>或者在右侧，有一个 题单 &gt;&gt; 【入门1】顺序结构 &gt;&gt;  题目列表 &gt;&gt; B2002 Hello,World!</p><ul><li><p>开始<strong>读题</strong></p></li><li><p>在 小熊猫C++ <strong>编写</strong>代码，并运行结果</p></li><li><p>将代码<strong>复制</strong>，回到答题页，选择 <strong>提交答案</strong></p></li><li><p>选择 <strong>C++ 标准</strong> ，最近的就行，<strong>提交测评</strong></p></li><li><p>出现全部都是 <strong>绿色AC</strong>，表示正确</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1>四、数据类型.转换</h1><h3 id="1-数据类型">1. 数据类型</h3><table><thead><tr><th style="text-align:center">类型名</th><th>类型声明</th><th>解释说明</th></tr></thead><tbody><tr><td style="text-align:center">整型</td><td>int</td><td>-2147483648 到 2147483647 的范围的整数</td></tr><tr><td style="text-align:center">长整形</td><td>long long</td><td>比上面大很多很多，这里装不下，具体搜索</td></tr><tr><td style="text-align:center">字符型</td><td>char</td><td>赋值只能是一个字符，比如 ‘A’，必须用单引号，双表示字符串不是字符</td></tr><tr><td style="text-align:center">浮点型</td><td>float</td><td>也叫实型或小数型，38位以内的小数，只保留6为有效数字</td></tr></tbody></table><ul><li><p>其实还有很多类型，暂时先理解这几个，后续用到的再单独讲解；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符型，切记是单引号</span></span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">// 长整形</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b = <span class="number">100000000000000000</span>;</span><br><span class="line"><span class="comment">// 浮点型，只能六位</span></span><br><span class="line"><span class="type">float</span> c = <span class="number">3.1415926</span>;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-类型转换">2. 类型转换</h3><ul><li><p>这里我们只探讨整数和小数之间的转换，其它的放到以后；</p></li><li><p>类型转换分为两种：隐式转换和强制转换；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两边都是整数，结果也是整数：1</span></span><br><span class="line">cout &lt;&lt; <span class="number">8</span> / <span class="number">5</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 两边有一边是浮点，结果是浮点：1.6</span></span><br><span class="line">cout &lt;&lt; <span class="number">8.0</span> / <span class="number">5</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 强制转换浮点，float()是转换函数，将整数转换成浮点数，8叫做参数</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">float</span>(<span class="number">8</span>) / <span class="number">5</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 强制转换整型</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">int</span>(<span class="number">3.14</span> * <span class="number">5.25</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-保留小数点">3. 保留小数点</h3><ul><li><p>首先要引入相关库：<iomanip></iomanip></p></li><li><p>其次使用 <strong>setprecision(n)</strong> 函数 来设置保留小数点的位数；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出保留的小数点</span></span><br><span class="line"><span class="comment">// fixed可以在缺少的位数补零，这样就精确保证2位</span></span><br><span class="line">cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; <span class="number">3.1415926</span>;</span><br></pre></td></tr></table></figure></li></ul><h1>习题一：1029.倒序输出一个四位整数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/a2940373d698eee27b6d23b69611db7c.png" alt="1029.倒序输出一个四位整数"></p><h3 id="代码详解">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入一个四位整数</span></span><br><span class="line"><span class="type">int</span> a, qian, bai, shi, ge;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆位</span></span><br><span class="line">qian = a / <span class="number">1000</span>;</span><br><span class="line">bai  = a / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">shi  = a / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">ge   = a % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒序</span></span><br><span class="line"><span class="comment">// 这里有一个问题：如果 cout &lt;&lt;  ge &lt;&lt; shi &lt;&lt; bai &lt;&lt; qian；</span></span><br><span class="line"><span class="comment">// 会有一个测试点无法通过；因为第二个样例中，1600，会去掉零，所以需要通过加整，而不是连整；</span></span><br><span class="line">cout &lt;&lt; ge * <span class="number">1000</span> + shi * <span class="number">100</span> + bai * <span class="number">10</span> + qian;</span><br></pre></td></tr></table></figure><hr><h1>五、输入输出.格式化</h1><h3 id="1-输出">1. 输出</h3><blockquote><p>对于格式化输出，本节课将学习两个函数 <strong>scanf()</strong> 、 <strong>printf()</strong> 来取代之前的cin和cout方法；</p></blockquote><ul><li>假如，我们要输出一组运算等式：1 + 2 = 3，而1是变量a，2是变量b，3是a+b的运算结果；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// cout</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; a + b;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d&quot;</span>, a, b, a + b);</span><br></pre></td></tr></table></figure><ul><li><p><strong>printf()</strong>  函数极其方便的原因，它可以先按照自己的输出格式，先写出来，不需要头脑翻译；</p></li><li><p>然后把需要替换成变量的部分，用 <strong>%d</strong> 来表示即可，而后续对应的位置换成变量或表达式运算即可；</p></li><li><p><strong>%d</strong> 这里表示占位的内容 是 <strong>整型</strong>，也有各种其它的占位符，这里罗列出常用的几个：</p><table><thead><tr><th style="text-align:center">占位控制符</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">%d</td><td>整数</td></tr><tr><td style="text-align:center">%f</td><td>浮点数（float）</td></tr><tr><td style="text-align:center">%c</td><td>字符</td></tr><tr><td style="text-align:center">%s</td><td>字符串</td></tr></tbody></table></li><li><p>最终的语法结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(格式控制符, 占位替换列表)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-输入">2. 输入</h3><ul><li><p>从上面例子中，我们使用 <strong>scanf()</strong> 函数来控制输入：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="comment">// scanf</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d&quot;</span>, a, b, a + b);</span><br></pre></td></tr></table></figure></li><li><p>先了解下输入参数的格式需求：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(格式控制符, 地址集)</span><br></pre></td></tr></table></figure></li><li><p>暂时没有办法解释这个地址是什么意思？举个并不恰当但好理解的说明：</p><ul><li>快递员给张三寄快递，直接送到张三手上；这是 cin</li><li>快递员给张三家地址寄快递，不管是凤巢、门卫代收还是家人收件，最终会交给张三；这是 scanf()</li><li>所以，a表示张三，&amp;a表示张三家的地址；而sacanf() 参数要求是地址，故在变量前加&amp;；</li><li>而这个知识点叫做 <strong>引用</strong>，是比较靠后的知识点，暂时不用理解；</li><li>后续，自然也会有 <strong>变量本身就是引用</strong>，反而参数不需要 <strong>&amp;</strong> 符号；</li></ul></li></ul><h3 id="3-格式化">3. 格式化</h3><ul><li><p>在使用 <strong>printf()</strong> 时，我们需要输出各种特殊字符，比如百分号，换行，以及场宽精度问题等：</p><table><thead><tr><th style="text-align:center">符号</th><th>说明和示例</th></tr></thead><tbody><tr><td style="text-align:center">\\</td><td>输出一个斜杠，printf(“\\”);</td></tr><tr><td style="text-align:center">\n</td><td>换行，printf(“\n”);</td></tr><tr><td style="text-align:center">%%</td><td>百分号，printf(“%”);</td></tr><tr><td style="text-align:center">数字</td><td>场宽，printf(“%3d%5d”);</td></tr><tr><td style="text-align:center">小数</td><td>精度，printf(“%.2f”, 3.1415926);</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%%\\\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场宽</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3d%5d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, <span class="number">3.1415926</span>);</span><br><span class="line"><span class="comment">// 场宽+精度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%8.2f&quot;</span>, <span class="number">3.1415926</span>);</span><br></pre></td></tr></table></figure></li></ul><h1>习题二：P5705.数字反转</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250312235122266.png" alt="P5705.数字反转"></p><h3 id="代码详解-2">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入一个浮点数，只有一位小数</span></span><br><span class="line"><span class="type">float</span> a;</span><br><span class="line"><span class="type">int</span> b, qian, bai, shi, ge;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各个位进位</span></span><br><span class="line">b = a * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆位</span></span><br><span class="line">qian = b / <span class="number">1000</span>;</span><br><span class="line">bai  = b / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">shi  = b / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">ge   = b % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并输出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d.%d%d%d&quot;</span>, ge, shi, bai, qian);</span><br></pre></td></tr></table></figure><hr><h1>六、运算符表达式.布尔</h1><h3 id="1-关系运算符">1. 关系运算符</h3><blockquote><p>布尔类型的值，是专门用于各种<strong>表达式</strong>的判断，只存在两种值：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔类型，只有两种值：true和false</span></span><br><span class="line"><span class="comment">// true 表示成立， false 表示不成立</span></span><br><span class="line"><span class="comment">// true 输出为1， false 输出为 0</span></span><br><span class="line"><span class="type">bool</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="type">bool</span> b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br></pre></td></tr></table></figure><ul><li>除了直接赋值为 true 或 false，也可以通过关系运算符来返回布尔值的数据：</li></ul><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">关系运算符</th><th>表达式返回值</th></tr></thead><tbody><tr><td style="text-align:center">大于</td><td style="text-align:center">&gt;</td><td>成立返回 true（6 &gt; 5），否则为 false（6 &gt; 7）</td></tr><tr><td style="text-align:center">小于</td><td style="text-align:center">&lt;</td><td>成立返回 true（6 &lt; 8），否则为 false（6 &lt; 5）</td></tr><tr><td style="text-align:center">等于</td><td style="text-align:center">==</td><td>成立返回 true（6 == 6），否则为 false（6 == 7）</td></tr><tr><td style="text-align:center">大于等于</td><td style="text-align:center">&gt;=</td><td>成立返回 true（7 &gt;= 6），否则为 false（7 &gt;= 8）</td></tr><tr><td style="text-align:center">小于等于</td><td style="text-align:center">&lt;=</td><td>成立返回 true（6 &lt;= 6），否则为 false（6 &lt;= 5）</td></tr><tr><td style="text-align:center">不等于</td><td style="text-align:center">!=</td><td>成立返回 true（6 != 5），否则为 false（6 != 6）</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 true(1) 和 false(0)</span></span><br><span class="line">cout &lt;&lt; (<span class="number">6</span> &gt; <span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="number">6</span> &gt; <span class="number">7</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="number">6</span> &lt; <span class="number">7</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="number">6</span> == <span class="number">6</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="number">6</span> == <span class="number">7</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="number">6</span> &gt;= <span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="number">6</span> != <span class="number">6</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="number">6</span> != <span class="number">5</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="2-逻辑运算符">2. 逻辑运算符</h3><blockquote><p>除了关系运算符之外，还有一种叫做逻辑运算符，具体如下：</p></blockquote><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">逻辑运算符</th><th>表达式返回值</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">x &amp;&amp; y</td><td>表示and，x 和 y 同时为 true 时，返回 true，否则返回 false</td></tr><tr><td style="text-align:center">||</td><td style="text-align:center">x || y</td><td>表示or, x 和 y 只要其中之一为 true，返回 true，否则返回 false</td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">!x</td><td>表示not, x 为 true 时，结果为 false，否则为 true</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line">cout &lt;&lt; (<span class="number">5</span> &gt; <span class="number">6</span> &amp;&amp; <span class="number">5</span> &gt; <span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="number">7</span> &gt; <span class="number">6</span> &amp;&amp; <span class="number">5</span> &gt; <span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="number">5</span> &gt; <span class="number">6</span> || <span class="number">5</span> &gt; <span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="number">5</span> &gt; <span class="number">6</span> || <span class="number">5</span> &lt; <span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; !(<span class="number">5</span> &gt; <span class="number">6</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; !true &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h1>习题三：B2040.判断是否为两位数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250312235328014.png" alt="B2040.判断是否为两位数"></p><h3 id="代码详解-3">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入</span></span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="comment">// 条件1：a &gt;= 10</span></span><br><span class="line"><span class="comment">// 条件2：a &lt;= 99</span></span><br><span class="line"><span class="comment">// 整合：a &gt;= 10 &amp;&amp; a &lt;= 99</span></span><br><span class="line"><span class="comment">// 看花眼的话，可以加个括号增加可读性</span></span><br><span class="line"><span class="comment">// 括号加法1：(a &gt;= 10 &amp;&amp; a &lt;= 99)</span></span><br><span class="line"><span class="comment">// 括号加法2：((a &gt;= 10) &amp;&amp; (a &lt;= 99))</span></span><br><span class="line">flag = ((a &gt;= <span class="number">10</span>) &amp;&amp; (a &lt;= <span class="number">99</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">cout &lt;&lt; flag;</span><br></pre></td></tr></table></figure><hr><h1>七、分支语句.条件判断</h1><h3 id="1-if…单一条件">1. if…单一条件</h3><blockquote><p>假设你一周七天中只有周一才能穿新衣服，那么就需要 <strong>if语句</strong> 中 <strong>单一条件判断</strong>：</p></blockquote><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313212401599.png" alt="条件判断流程图"></p><ul><li><p>单一条件判断的<strong>if语句</strong>格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个花括号放在第一行末，或第二行开头均可，执行语句需要缩进一个Tab键</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    条件成立执行这里;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意1：如果成立后的语句只有一句，可以去掉花括号，或放在第一行末</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) 条件成立执行这里;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) </span><br><span class="line">    条件成立执行这里;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> flag;</span><br><span class="line">cin &gt;&gt; flag;</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag == 1 返回布尔值，成立的话执行缩进的第一行语句</span></span><br><span class="line"><span class="comment">// 如果有缩进的第二行，且没有括号包含，则无效</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;周一穿新衣！&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-if…else分支">2. if…else分支</h3><blockquote><p>单一if语句比较高冷，如果未满足条件，ta就不理你了；而<strong>else分支</strong>则可爱许多；</p></blockquote><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313212622014.png" alt="分支判断流程图"></p><ul><li>else分支条件判断的<strong>if语句</strong>格式如下：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    条件成立执行这里;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">条件不成立执行这里;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行语句</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;周一穿新衣！&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有新衣穿！&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行语句</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;嘿嘿！&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;周一穿新衣！&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;哎！&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;没有新衣穿！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题四：1632.需要几辆车</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/1010addaa55d3820b13267b40994373c.png" alt="1632.需要几辆车"></p><h3 id="代码详解-4">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, a;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断人数是否刚好30人</span></span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">30</span> == <span class="number">0</span>) </span><br><span class="line">    a = n / <span class="number">30</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">// 31人 = 1 + 1 = 2辆</span></span><br><span class="line">    <span class="comment">// 65人 = 2 + 1 = 3辆</span></span><br><span class="line">    a = n / <span class="number">30</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">cout &lt;&lt; a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h1>习题五：1045.能否构成三角形</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250312235713325.png" alt="1045.能否构成三角形"></p><h3 id="代码详解-5">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断三角形</span></span><br><span class="line"><span class="keyword">if</span> (a + b &gt; c &amp;&amp; a + c &gt; b &amp;&amp; b + c &gt; a)</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Yes&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;No&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h1>习题六：1718. 闯关大冒险？</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313000026973.png" alt="1718. 闯关大冒险？"></p><h3 id="代码详解-6">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, a, b, c, d, maxn;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆位</span></span><br><span class="line">a = n / <span class="number">1000</span>;</span><br><span class="line">b = n / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">c = n / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">d = n % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最大值，初始值比规定的小即可，四位数的话最小是0，-1即可</span></span><br><span class="line">maxn = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; maxn)</span><br><span class="line">maxn = a;</span><br><span class="line"><span class="comment">//b</span></span><br><span class="line"><span class="keyword">if</span> (b &gt; maxn)</span><br><span class="line">maxn = b;</span><br><span class="line"><span class="comment">//c</span></span><br><span class="line"><span class="keyword">if</span> (c &gt; maxn)</span><br><span class="line">maxn = c;</span><br><span class="line"><span class="comment">//d</span></span><br><span class="line"><span class="keyword">if</span> (d &gt; maxn)</span><br><span class="line">maxn = d;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">cout &lt;&lt; maxn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>八、多重判断.嵌套判断</h1><h3 id="1-else-if…分支">1. else if…分支</h3><blockquote><p>很多时候的分支判断，可能不止一条或两条，此时就需要使用 <strong>else if</strong> 多重分支结构</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式成立) &#123;</span><br><span class="line">    执行语句;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式成立) &#123;</span><br><span class="line">    执行语句;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式成立) &#123;</span><br><span class="line">    执行语句;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式成立) &#123;</span><br><span class="line">    执行语句;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 8岁之前：成长阶段</span></span><br><span class="line"><span class="comment">// 8-25之间：求学阶段</span></span><br><span class="line"><span class="comment">// 26-60之间：工作阶段</span></span><br><span class="line"><span class="comment">// 大于60：退休阶段</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多重循环</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">8</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;成长阶段&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt;= <span class="number">8</span> &amp;&amp; a &lt;= <span class="number">25</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;求学阶段&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt;= <span class="number">26</span> &amp;&amp; a &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;工作阶段&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;退休阶段&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-嵌套判断">2. 嵌套判断</h3><blockquote><p>在某一个成立的条件下，是否还有不同的另外的条件判断呢，此时需要用到嵌套判断</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;退休阶段，请输入孙子孙女数量：&quot;</span>;</span><br><span class="line">    <span class="comment">// 如果退休阶段有很多个孙子孙女，那还是需要打工赚压岁钱的</span></span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    cin &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span> (b &gt;= <span class="number">7</span> &amp;&amp; b &lt;=<span class="number">9</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;无法退休，要打两份工&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &gt;=<span class="number">3</span> &amp;&amp; b &lt;= <span class="number">6</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;无法退休，要打一份工&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;退休生活&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题七：P5715.三位数排序</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313000258554.png" alt="P5715.三位数排序"></p><h3 id="代码详解-7">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多重判断，从小到大排序</span></span><br><span class="line"><span class="comment">// 无非是：abc,acb,bca,bac,cab,cba 这六种</span></span><br><span class="line"><span class="comment">// 输出的值需要空格 a b c 这样；用printf更方便</span></span><br><span class="line"><span class="keyword">if</span> (a &lt;= b &amp;&amp; a &lt;=c) &#123;</span><br><span class="line">    <span class="comment">// a最小</span></span><br><span class="line">    <span class="keyword">if</span> (b &lt;= c) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, a, b, c);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, a, c, b);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &lt;= a &amp;&amp; b &lt;= c) &#123;</span><br><span class="line">    <span class="comment">// b最小</span></span><br><span class="line">    <span class="keyword">if</span> (a &lt;= c)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, b, a, c);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, b, c, a);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= a &amp;&amp; c &lt;= b) &#123;</span><br><span class="line">    <span class="comment">// c最小</span></span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, c, a, b);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, c, b, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题八：1667.最大和最小数的差</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313000434275.png" alt="1667.最大和最小数的差"></p><h3 id="代码详解-8">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, a, b, c, maxn, minn;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆位</span></span><br><span class="line">a = n / <span class="number">100</span>;</span><br><span class="line">b = n / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">c = n % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最大值</span></span><br><span class="line">maxn = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt;= b &amp;&amp; a &gt;= c) &#123;</span><br><span class="line">    maxn = a;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &gt;= c) &#123;</span><br><span class="line">    maxn = b;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    maxn = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最小值</span></span><br><span class="line">minn = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (a &lt;= b &amp;&amp; a &lt;= c) &#123;</span><br><span class="line">    minn = a;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &lt;= c) &#123;</span><br><span class="line">    minn = b;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    minn = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差</span></span><br><span class="line">cout &lt;&lt; maxn - minn;</span><br></pre></td></tr></table></figure><h1>习题九：P1909.NOIP2016.普及组.买铅笔</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313000937598.png" alt="P1909.NOIP2016.普及组.买铅笔"></p><h3 id="代码详解-9">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T,n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> minv=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">minv=<span class="built_in">min</span>(minv,((n<span class="number">-1</span>)/a+<span class="number">1</span>)*b);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;minv&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>九、switch分支</h1><h3 id="1-swtich分支">1. swtich分支</h3><ul><li><p>除了if … else条件分支，还有一种 <strong>switch … case</strong> 分支，用于变量均为等于成立的分支方案：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// case 值1 表示 变量名 == 值1，成立的话，执行下面缩进的语句</span></span><br><span class="line"><span class="comment">// break; 表示跳出switch，否则会继续判断后续的case；</span></span><br><span class="line"><span class="comment">// default 相当于 else，在没有满足条件的时候执行，当然，可以省略这个；</span></span><br><span class="line"><span class="keyword">switch</span> (变量名) &#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>: </span><br><span class="line">    执行语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    执行语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">    执行语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line"><span class="keyword">default</span>: </span><br><span class="line">    执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-垃圾分类">2. 垃圾分类</h3><ul><li><p>王二狗要下楼倒垃圾，垃圾分类有四种，他到底应该倒哪个桶呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 垃圾种类</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">// 输入提示</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入垃圾种类的序号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.表示可回收垃圾!&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.表示有害垃圾！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3.表示厨余垃圾！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4.表示其它垃圾！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入1-4：&quot;</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch分支</span></span><br><span class="line"><span class="keyword">switch</span> (n) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;王二狗往可回收垃圾桶倒了垃圾！&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;王二狗往有害垃圾桶倒了垃圾！&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;王二狗往厨余垃圾桶倒了垃圾！&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;王二狗往其它垃圾桶倒了垃圾！&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;你往哪里倒？？？倒错了吧！&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1>十、for循环.累加和</h1><h3 id="1-for语句">1. for语句</h3><blockquote><p>计算机最大的一个特性就是快速的重复执行有规律的运算，<strong>for循环语句</strong> 就是做这种事的</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (循环变量初始化;循环条件;循环变量增或减) &#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313212726378.png" alt="循环流程图"></p><ul><li><p>使用 for 循环语句，输出1-10这十个数字：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出1-10，每个数字换行</span></span><br><span class="line"><span class="comment">// int i = 1; 循环变量初始化，从1开始</span></span><br><span class="line"><span class="comment">// i &lt;= 10; 循环判断，当i目前小于等于10时，继续执行循环体</span></span><br><span class="line"><span class="comment">// i++；让循环变量进行累加，效果为：i = i + 1，没有这个过程就死循环啦</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; i &lt;&lt; endl; 循环体，也就是可执行语句的部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 流程图文字版如下：</span></span><br><span class="line"><span class="comment">// 第一步：int i = 1；初始化循环变量，这条语句只执行一次</span></span><br><span class="line"><span class="comment">// 第二步：i &lt;= 10; 判断循环条件；</span></span><br><span class="line"><span class="comment">// 第三步：cout &lt;&lt; i &lt;&lt; endl; 第二步条件成立后，执行这一步，不成立，退出for语句；</span></span><br><span class="line"><span class="comment">// 第四步：i++；增值变量；然后回到第二步继续</span></span><br><span class="line"><span class="comment">// 后续一直循环2,3,4步，直到退出for语句位置；</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;退出 for 循环后执行我！&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-累加和">2. 累加和</h3><ul><li><p>通过 for 循环 代码将一个月的零花钱保存起来，1号存1块，2号存2块…30号存30块，共存了多少钱。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存钱变量</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 累加和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// sum = sum + i;</span></span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">cout &lt;&lt; sum;</span><br></pre></td></tr></table></figure></li></ul><h1>习题十：1700.输出两位数中含2的整数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/cb5795b448667f07ae30dc3d3c210b17.png" alt="1700.输出两位数中含2的整数"></p><h3 id="代码详解-10">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 十位 个位</span></span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环10-99之间，包含10和99</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">10</span>;i&lt;=<span class="number">99</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 拆位</span></span><br><span class="line">    a = i / <span class="number">10</span>;</span><br><span class="line">    b = i % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">2</span> || b == <span class="number">2</span>) cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题十一：1058.求三位数的水仙花数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313001604631.png" alt="1058.求三位数的水仙花数"></p><h3 id="代码详解-11">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 百 十 个</span></span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环三位数 100-999</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">100</span>;i&lt;=<span class="number">999</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 拆位</span></span><br><span class="line">    a = i / <span class="number">100</span>;</span><br><span class="line">    b = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">    c = i % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 立方和</span></span><br><span class="line">    <span class="keyword">if</span> (a * a * a + b * b * b + c * c * c == i) cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题十二：1395.小丽找数？</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/1c03bed875f177b97502052477903ad1.png" alt="1395.小丽找数？"></p><h3 id="代码详解-12">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整数</span></span><br><span class="line"><span class="type">int</span> n, a, b, c, d, count = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">// 拆位</span></span><br><span class="line">    a = i / <span class="number">1000</span>;</span><br><span class="line">    b = i / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">    c = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">    d = i % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断需求</span></span><br><span class="line">    <span class="keyword">if</span> ((a + b + c + d) % <span class="number">2</span> != <span class="number">0</span> &amp;&amp; (a + b + c + d) % <span class="number">5</span> != <span class="number">0</span>) count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">cout &lt;&lt; count;</span><br></pre></td></tr></table></figure><hr><h1>十一、for嵌套</h1><h3 id="1-for嵌套">1. for嵌套</h3><blockquote><p>for嵌套是什么意思？for语句的循环体再执行一个for语句吗？没错！</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先来个简单的需求，完成下列图形</span></span><br><span class="line">* * * * *</span><br><span class="line">* * * * *</span><br><span class="line">* * * * *</span><br><span class="line">* * * * *</span><br><span class="line">* * * * *</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先，开启纬度思想，一维即：一行一条线；二维则：多行多列是个面</span></span><br><span class="line"><span class="comment">// 第一步，先考虑输出一行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步，将一行改成一列试试，为后续扩展铺路</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;* &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步，将每一列当成一个for循环，再铺出一行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;<span class="comment">// 一列换一次行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-九九乘法表">2. 九九乘法表</h3><blockquote><p>利用 for循环 嵌套，实现一个不重复的 九九乘法表</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步：先考虑1x1=1...1x9=9 这一列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1x%d=%d\n&quot;</span>, i, <span class="number">1</span> * i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步：将输出的每一项换成for循环输出9项</span></span><br><span class="line"><span class="comment">// 循环逻辑：</span></span><br><span class="line"><span class="comment">// i = 1时，j = 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// i = 2时，j = 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// i = 9时，j = 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%2d &quot;</span>, i, j, i * j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步：去掉右上部分的重复, 1 x 2 = 2 和 2 x 1 = 2 这种</span></span><br><span class="line"><span class="comment">// 问题：每次j都循环满9次是导致重复的根源，如何处理？</span></span><br><span class="line"><span class="comment">// 解题：第1行，后8个是重复的，第2行，后7个是重复的，以此类推；</span></span><br><span class="line"><span class="comment">// 编码：那么只要将每次循环的次数和i保持一致即可。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%2d &quot;</span>, i, j, i * j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题十三：1492.空心正方形</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313001919666.png" alt="1492.空心正方形"></p><h3 id="代码详解-13">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正方形边数</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="comment">// 第一行和第n行是满星</span></span><br><span class="line">        <span class="comment">// 第一列和第n列也要星</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span> <span class="keyword">or</span> i == n <span class="keyword">or</span> j == <span class="number">1</span> <span class="keyword">or</span> j == n)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题十四：1006.打印星号三角形</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313002105391.png" alt="1006.打印星号三角形"></p><h3 id="代码详解-14">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 行数</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最外层控制行数，比如样例的5行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">    <span class="comment">// 中层控制三块三角形</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">        <span class="comment">// 假设第一次循环</span></span><br><span class="line">        <span class="comment">// 第一行星号前后有4个空格，那就需要循环4次，星号1次</span></span><br><span class="line">        <span class="comment">// 以此类推：第二行，前后3个空格，星号3次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> z=<span class="number">1</span>;z&lt;=n-i;z++)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 星号是：1 3 5 每行+2：i*2-1</span></span><br><span class="line">        <span class="comment">// i = 1 z&lt;=1*2-1=1</span></span><br><span class="line">        <span class="comment">// i = 2 z&lt;=2*2-1=3</span></span><br><span class="line">        <span class="comment">// i = 3 z&lt;=3*2-1=5</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> z=<span class="number">1</span>;z&lt;=i*<span class="number">2</span><span class="number">-1</span>;z++)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> z=<span class="number">1</span>;z&lt;=n-i;z++)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题十五：1019.求1!+2!+…+N!</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313002212894.png" alt="1019.求1!+2!+...+N!"></p><h3 id="代码详解-15">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整数n, 总和sum</span></span><br><span class="line"><span class="type">int</span> n, sum = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">// 希望累加的过程</span></span><br><span class="line">    <span class="comment">// i = 1, 1</span></span><br><span class="line">    <span class="comment">// i = 2, 1 x 2</span></span><br><span class="line">    <span class="comment">// i = 3, 1 x 2 x 3</span></span><br><span class="line">    <span class="comment">// i = 4, 1 x 2 x 3 x 4</span></span><br><span class="line">    <span class="comment">// 最后，把每一行乘积的结果累加</span></span><br><span class="line">    <span class="type">int</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">        <span class="comment">// 1 * 1 * 2 * 3 * 4</span></span><br><span class="line">        temp *= j;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; sum;</span><br></pre></td></tr></table></figure><h1>习题十六：1519.求1~n中每个数的因子</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313002319111.png" alt="1519.求1~n中每个数的因子"></p><h3 id="代码详解-16">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整数n</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    cout &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="comment">// 循环1-i</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">        <span class="comment">// 求因子</span></span><br><span class="line">        <span class="keyword">if</span> (i % j == <span class="number">0</span>) cout &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 换行</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>十二、变量作用域.退出循环</h1><h3 id="1-变量作用域">1. 变量作用域</h3><blockquote><p>变量作用域分为局部和全局，在之前的解题中存在不同位置，效果也不尽相同；</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先，函数还没学过，不考虑</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 在if里面声明的变量和外部的区别</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">5</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断体内可以访问外部变量a</span></span><br><span class="line">    <span class="comment">// 此时a可以理解为全局变量（不考虑函数），在哪里可以访问（赋值取值）</span></span><br><span class="line">    cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在if体内的变量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">5</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问不了b，因为它是局部变量，只能在所在的if体内访问</span></span><br><span class="line">cout &lt;&lt; b;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里int i属于for体内的局部变量i</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部无法访问，直接报错</span></span><br><span class="line">cout &lt;&lt; i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以提到外面来声明来保证全局性</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以访问，并且是6，因为for最后执行是i++</span></span><br><span class="line">cout &lt;&lt; i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前短除法的临时变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 这里的tmp在for外部就无法访问了</span></span><br><span class="line">    <span class="comment">// 它就是临时工，在for体内用的</span></span><br><span class="line">    <span class="comment">// 所以总结：想要在体内用不想在外面用，就在体内声明</span></span><br><span class="line">    <span class="comment">// 如果要全局都能使用，就在外部声明，比如程序代码的第一行</span></span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-break-退出">2. break 退出</h3><blockquote><p>break 的作用是在循环体内，可设置条件来退出这个循环；</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// break退出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 当遇到5退出整个循环</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 输出i</span></span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-continue-退出">3. continue 退出</h3><blockquote><p>continue 的作用是在循环体内，可设置条件来退出当前这次循环，然后继续执行下一次循环；</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// continue退出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 当遇到5退出当前循环，continue需要卸载循环体最前面才有意义</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">// 输出i</span></span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题十七：P1075.NOIP2012.普及组.质因数分解</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313184725156.png" alt="P1075.NOIP2012.普及组.质因数分解"></p><h3 id="代码详解-17">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 质数 = 素数，只能被1和本身整除</span></span><br><span class="line"><span class="comment">// n</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环2~n-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 判断i是否为因子，找到第一个即最小的因子</span></span><br><span class="line">    <span class="comment">// 天坑：此题如果测试数据n是20，那因子为2,10,则10最大，但10不是质数</span></span><br><span class="line">    <span class="comment">// 审题：题目说了由两个不同质数的乘积，10不是质数，所以测试数据不会给20让你测</span></span><br><span class="line">    <span class="comment">// 再审题：由两个不同的质数，不是多个，还必须是质数。。。20 不符合要求的</span></span><br><span class="line">    <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 求出较大的数</span></span><br><span class="line">        cout &lt;&lt; n / i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题十八：P5725.求三角形</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313184824195.png" alt="P5725.求三角形"></p><h3 id="代码详解-18">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n*n</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*n;i++) &#123;</span><br><span class="line">    <span class="comment">// 个位数，补零</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">10</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; i;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断n的倍数，换行</span></span><br><span class="line">    <span class="keyword">if</span> (i % n == <span class="number">0</span>) cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空一行</span></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n，负责n列，计数器count</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">// 输出空格</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n-i;j++)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出数字</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">10</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; count;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; count;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题十九：P2669.NOIP2015.普及组.金币</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313185129507.png" alt="P2669.NOIP2015.普及组.金币"></p><h3 id="代码详解-19">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// k天数, coin金币, day当前累计天</span></span><br><span class="line"><span class="type">int</span> k, coin = <span class="number">0</span>, day = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单捋一下</span></span><br><span class="line"><span class="comment">// i=1, 第1天：+1</span></span><br><span class="line"><span class="comment">// i=2, 第2,3天：+2 +2</span></span><br><span class="line"><span class="comment">// i=3, 第4,5,6天：+3 +3 +3</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在给出的k是天数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根本不清楚i的末值是多少，那就无限循环吧（死循环）</span></span><br><span class="line"><span class="comment">// 死循环可以将条件去掉，但保留分号，循环体通过判断退出即可</span></span><br><span class="line"><span class="comment">// 外层循环，表示轮次，第1次1天，第2次2，3天，第3次4，5，6天中的次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;;i++) &#123;</span><br><span class="line">    <span class="comment">// 将轮次中的天数累加到day里</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">        <span class="comment">// 累加天数</span></span><br><span class="line">        day++;</span><br><span class="line">        <span class="comment">// 累加金币</span></span><br><span class="line">        coin += i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 退出机制</span></span><br><span class="line">        <span class="keyword">if</span> (day == k)&#123;</span><br><span class="line">            cout &lt;&lt; coin &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>十三、while和do while循环</h1><h3 id="1-while">1. while</h3><blockquote><p>while 循环相当于 for 循环，可以不用计数器，需要先进行条件判断，也可设置死循环</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 死循环：条件是1或者true，让它永远成立即可</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用计数器输出1-10</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 死循环中途退出</span></span><br><span class="line"><span class="comment">// 支持break、continue</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">    cout &lt;&lt; <span class="number">123</span>;</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-do-while">2. do while</h3><blockquote><p>do while 循环相当于 while 循环，可以将条件判断至于循环体下方，让其无条件先循环一次</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不管条件是否满足，至少要执行一次循环体</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="number">123</span>;</span><br><span class="line">&#125; <span class="keyword">while</span>(a &lt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1>习题二十：1062.求落地次数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313185622366.png" alt="1062.求落地次数"></p><h3 id="代码详解-20">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// m高度，审题有0.5，所以是浮点型</span></span><br><span class="line"><span class="type">float</span> m = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// count计数器</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大于等于0.5就一直循环</span></span><br><span class="line"><span class="keyword">while</span>(m &gt;= <span class="number">0.5</span>)&#123;</span><br><span class="line">    count++;</span><br><span class="line">    m /= <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; count;</span><br></pre></td></tr></table></figure><h1>习题二十一：1261.韩信点兵</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313185818434.png" alt="1261.韩信点兵"></p><h3 id="代码详解-21">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 人数</span></span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不知道人数，只能无脑死循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 每循环一次n+1，统计人数</span></span><br><span class="line">    n++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 余数同时成立即可</span></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">5</span> == <span class="number">1</span> &amp;&amp; n % <span class="number">6</span> == <span class="number">5</span> &amp;&amp; n % <span class="number">7</span> == <span class="number">4</span> &amp;&amp; n % <span class="number">11</span> == <span class="number">10</span>) &#123;</span><br><span class="line">        cout &lt;&lt; n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>十四、短除法.新式拆位</h1><h3 id="1-短除拆位">1. 短除拆位</h3><blockquote><p>之前我们拆位使用了整除+求余的方式，但对于不确定位数的整数就会捉襟见肘</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求输入三至五位整数</span></span><br><span class="line"><span class="comment">// 将每一位输出</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用短除法</span></span><br><span class="line"><span class="comment">// 通过求余得到末尾：</span></span><br><span class="line"><span class="comment">// 比如 123 % 10 = 3 </span></span><br><span class="line"><span class="comment">// 然后 12 % 10 = 2 ... 1 % 10 = 1...最终除数为0</span></span><br><span class="line"><span class="keyword">while</span>(n != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 输出拆位</span></span><br><span class="line">    cout &lt;&lt; n % <span class="number">10</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 整除</span></span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题二十二：1750.有0的数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313190003133.png" alt="1750.有0的数"></p><h3 id="代码详解-22">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, count = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n，1-9不含0，直接从10开始</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">10</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">// 短除</span></span><br><span class="line">    <span class="type">int</span> temp = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(temp != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 102: 2..0(+1)..1</span></span><br><span class="line">        <span class="keyword">if</span> (temp % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">// 只要包含0就行了，退while</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 整除</span></span><br><span class="line">        temp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; count;</span><br></pre></td></tr></table></figure><h1>习题二十三：P1307.NOIP2011.普及组.数字反转</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313190052401.png" alt="P1307.NOIP2011.普及组.数字反转"></p><h3 id="代码详解-23">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n原数，f新数</span></span><br><span class="line"><span class="type">int</span> n, f = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用考虑负数</span></span><br><span class="line"><span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// 拆位</span></span><br><span class="line">    <span class="type">int</span> g;</span><br><span class="line">    g = n % <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设123，上一轮f得到了3，这次要30+2=32，最后要320+1=321</span></span><br><span class="line">    <span class="comment">// 第一轮，由于f是0，所以，f * 10 + g = 3</span></span><br><span class="line">    f = f * <span class="number">10</span> + g;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整除</span></span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f;</span><br></pre></td></tr></table></figure><h1>习题二十四：P1980.NOIP2013.普及组.计数问题</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313190140491.png" alt="P1980.NOIP2013.普及组.计数问题"></p><h3 id="代码详解-24">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, x, count = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">//拆位</span></span><br><span class="line">    <span class="type">int</span> temp = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(temp != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp % <span class="number">10</span> == x) count++;</span><br><span class="line">        temp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; count;</span><br></pre></td></tr></table></figure><h1>习题二十五：P1089.NOIP2004.提高组.津津的储蓄计划</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313190254103.png" alt="P1089.NOIP2004.提高组.津津的储蓄计划"></p><h3 id="代码详解-25">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// money钱, cost花销, mather妈</span></span><br><span class="line"><span class="type">int</span> money = <span class="number">0</span>, cost = <span class="number">0</span>, mather = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1-12月循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++) &#123;</span><br><span class="line">    <span class="comment">// 每个月+300元</span></span><br><span class="line">    money += <span class="number">300</span>;</span><br><span class="line">    <span class="comment">// 输入这个月花销</span></span><br><span class="line">    cin &gt;&gt; cost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果持有100或以上，就把整百交给妈妈</span></span><br><span class="line">    <span class="comment">// 比如有180，交给妈妈100，有280，交给妈妈200</span></span><br><span class="line">    <span class="comment">// 扣去当月花销</span></span><br><span class="line">    money -= cost;</span><br><span class="line">    <span class="keyword">while</span> (money &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">        mather += <span class="number">100</span>;</span><br><span class="line">        money -= <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果发现钱是负的</span></span><br><span class="line">    <span class="keyword">if</span> (money &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-%d&quot;</span>, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出money</span></span><br><span class="line">cout &lt;&lt; money + mather + (mather * <span class="number">0.2</span>);</span><br></pre></td></tr></table></figure><hr><h1>十五、简单穷举</h1><h3 id="1-穷举说明">1. 穷举说明</h3><blockquote><p><strong>穷举即枚举</strong>，我们会在下一套课程中讲解 <strong>暴力枚举</strong>，那么现在先简单的了解下</p></blockquote><ul><li>其实，在之前循环课程中，我们经常使用穷举法，只是没有挑明：<ul><li>通过不断循环，让大量的值进行比对验证，得出想要的结果；</li></ul></li></ul><h3 id="2-买公园门票">2. 买公园门票</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设只有一个小孩，成人拥有的票钱 = 40 - 3</span></span><br><span class="line"><span class="comment">// 成人票最多买：37 / 8 = 4张，循环1-4张</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=(<span class="number">40</span><span class="number">-3</span>)/<span class="number">8</span>;i++) &#123;</span><br><span class="line">    <span class="comment">// 第一次循环：1张成人票，减去-8，再看看买小孩的票，能否整除</span></span><br><span class="line">    <span class="comment">// 第i次以此类推</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="comment">// 得到买小孩票的钱</span></span><br><span class="line">    x = <span class="number">40</span> - i * <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 判断是否能整除</span></span><br><span class="line">    <span class="keyword">if</span> (x % <span class="number">3</span> == <span class="number">0</span>) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; x / <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题二十六：1025.兑换硬币</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313190452878.png" alt="1025.兑换硬币"></p><h3 id="代码详解-26">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 100分, 累计count</span></span><br><span class="line"><span class="type">int</span> f = <span class="number">100</span>, count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先从5分开始，1分2分至少一个：(100 - 2 - 1) / 5 = 5分钱个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=(<span class="number">100</span><span class="number">-2</span><span class="number">-1</span>)/<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 嵌套2分：(100 - 5 - 1) / 2 = 2分个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=(<span class="number">100</span><span class="number">-5</span><span class="number">-1</span>)/<span class="number">2</span>;j++)&#123;</span><br><span class="line">        <span class="comment">// i第一轮,j第一轮：一个5分+一个2分，93个1分</span></span><br><span class="line">        <span class="comment">// i第一轮,j第二轮：一个5分+两个2分，91个1分</span></span><br><span class="line">        <span class="comment">// i第一轮,j第三轮：一个5分+三个2分，89个1分</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// i第三轮,j第一轮：三个5分+一个2分，83个1分</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// i第三轮,j第五轮：三个5分+五个2分，75个1分</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到1分钱银币的总分数</span></span><br><span class="line">        <span class="comment">// 在循环中，值&gt;=1，说明可以整除1</span></span><br><span class="line">        <span class="keyword">if</span> (f - (i * <span class="number">5</span> + j * <span class="number">2</span>) &gt;= <span class="number">1</span>) count++; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; count;</span><br></pre></td></tr></table></figure><hr><h1>十六、批量存储.一维数组</h1><h3 id="1-数组声明">1. 数组声明</h3><blockquote><p>数组分为：一维、二维、多维，大部分情况下只用一维，少量二维，多维很少</p></blockquote><ul><li><p>变量只能存储一条数据，数组可以存储多条数据；</p></li><li><p>比如我要声明一个可以存放10条数据数组：</p><ul><li>格式为：<strong>类型名 数组名[表达式]</strong>   注：[] 可以是数字，也可以是a-1的运算；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明可以存放10条数据的数组，数组里的值(或叫元素)为整数</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">a[0]</th><th style="text-align:center">a[1]</th><th style="text-align:center">a[2]</th><th style="text-align:center">a[3]</th><th style="text-align:center">a[4]</th><th style="text-align:center">a[5]</th><th style="text-align:center">a[6]</th><th style="text-align:center">a[7]</th><th style="text-align:center">a[8]</th><th style="text-align:center">a[9]</th></tr></thead><tbody><tr><td style="text-align:center">78</td><td style="text-align:center">59</td><td style="text-align:center">66</td><td style="text-align:center">12</td><td style="text-align:center">9</td><td style="text-align:center">128</td><td style="text-align:center">98</td><td style="text-align:center">73</td><td style="text-align:center">52</td><td style="text-align:center">76</td></tr></tbody></table></li><li><p>从上述的数组数据结构图中，总结几点：</p><ul><li>int a[10]：表示声明一个可以存放10条整数的数组a；</li><li>其中[0~9]，我们称为下标，它的范围是0-9之间；</li><li>对某一个下标进行赋值取值，可以是：a[5] = 128；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对数组a下标5，也就是第6个位置赋值</span></span><br><span class="line">a[<span class="number">5</span>] = <span class="number">128</span>;</span><br><span class="line"><span class="comment">// 输出123</span></span><br><span class="line">cout &lt;&lt; a[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有赋值的数组会随机出现不同值</span></span><br><span class="line">cout &lt;&lt; a[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然这里有一个目前还没有学习的概念：全局变量和局部变量</span></span><br><span class="line"><span class="comment">// 如果把int a[10]放在int main()外部，就是全局，那么不赋值默认就是0</span></span><br><span class="line"><span class="comment">// 如果是局部变量：没有赋值的还有可能默认0，我们可以用循环查看</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">19</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a[%d]=%d\n&quot;</span>, i, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种数组的赋值方式，采用花括号对声明的数组直接赋值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 花括号直接赋值</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">78</span>, <span class="number">59</span>, <span class="number">66</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">128</span>, <span class="number">98</span>, <span class="number">73</span>, <span class="number">52</span>, <span class="number">76</span>&#125;;</span><br><span class="line"><span class="comment">// 通过循环逐步输出，注意，i从0开始，i&lt;=9或&lt;10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a[%d]=%d\n&quot;</span>, i, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你设置了a[20]，但&#123;&#125;里只有10个数据，则会用整数0填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">19</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a[%d]=%d\n&quot;</span>, i, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果不确定赋值的个数，可以采用动态方案赋值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 但这样，就无法得知长度了；需要通过以后学习的sizeof()函数来获取，先不深入探讨</span></span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>至于无法一开始初始化指定值，又怕未赋值导致随机值，可以先初始化零；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化0：方案一</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 初始化0：方案二</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-下标越界">2. 下标越界</h3><blockquote><p>什么是下标越界：声明时，超过了指定的范围就是下标越界，规定：不要越界；</p></blockquote><ul><li><p>下标越界，有些平台会报异常，有些不报错（这种最要命，程序没错，数据错了检查不出来）</p></li><li><p>所以，不要越界；</p></li><li><p>比如，你int a[10]，你赋值时就初始化时，就无法对a[20]赋值，导致随机数字；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">cout &lt;&lt; a[<span class="number">12</span>];</span><br></pre></td></tr></table></figure></li></ul><h1>习题二十七：1153.查找“支撑数”</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/ed4a0c14a851918b87cf026e60fccda1.png" alt="1153.查找“支撑数”"></p><h3 id="代码详解-27">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整型数组，长度100，默认0，废弃a[0]，+1</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n，注意：如果从1开始，废弃a[0]</span></span><br><span class="line"><span class="comment">// 循环0-n，注意：i&lt;n 去掉等号</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支撑数：不在第一位，不在最后一位，掐头去尾</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 当前值比左右两边都大</span></span><br><span class="line">    <span class="comment">// 上一个值：a[i-1]，下一个值：a[i+1]</span></span><br><span class="line">    <span class="keyword">if</span> (a[i] &gt; a[i<span class="number">-1</span>] &amp;&amp; a[i] &gt; a[i+<span class="number">1</span>]) cout &lt;&lt; a[i] &lt;&lt; endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题二十八：1354.拿到某个数的概率</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313190825556.png" alt="1354.拿到某个数的概率"></p><h3 id="代码详解-28">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 球</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;, n, cnt = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比值</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">// 判断</span></span><br><span class="line">    <span class="keyword">if</span> (a[i] == x) cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求概率</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, cnt / <span class="built_in">float</span>(n));</span><br></pre></td></tr></table></figure><h1>习题二十九：2029.缺失的数字</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313191037919.png" alt="2029.缺失的数字"></p><h3 id="代码详解-29">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">100001</span>] = &#123;<span class="number">0</span>&#125;, n, x;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// x</span></span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    <span class="comment">// 将a数组中下标为x，即a[x]做个标记，比如设置为1</span></span><br><span class="line">    a[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次循环1-n</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">// 输出值为零的数组元素</span></span><br><span class="line">    <span class="keyword">if</span> (a[i] == <span class="number">0</span>) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题三十：P1047.NOIP2005.普及组.校门外的树</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313190950844.png" alt="P1047.NOIP2005.普及组.校门外的树"></p><h3 id="代码详解-30">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> l, m, a[<span class="number">10001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> u, v = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// m行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">    <span class="comment">// 从u点到v点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=u;j&lt;=v;j++)&#123;</span><br><span class="line">        a[j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// l总树木，题目说从0开始</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=l;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] == <span class="number">0</span>) total++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">cout &lt;&lt; total;</span><br></pre></td></tr></table></figure><hr><h1>十七、二维数组.多维数组</h1><h3 id="1-数组声明-2">1. 数组声明</h3><blockquote><p>所谓的二维数组，就是数组里还有一个数组，类似嵌套循环，多维数组就是数组里的数组里的数组；</p></blockquote><ul><li><p>声明格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[行数][列数]<span class="comment">// 就是两层嵌套循环</span></span><br></pre></td></tr></table></figure></li><li><p>二维数组构建一个矩阵表格：</p><table><thead><tr><th style="text-align:center">a[0,0] -&gt; 78</th><th style="text-align:center">a[0,1] -&gt; 102</th><th style="text-align:center">a[0,2] -&gt; 44</th></tr></thead><tbody><tr><td style="text-align:center"><strong>a[1,0] -&gt; 92</strong></td><td style="text-align:center"><strong>a[1,1] -&gt; 165</strong></td><td style="text-align:center"><strong>a[1,2] -&gt; 92</strong></td></tr><tr><td style="text-align:center"><strong>a[2,0] -&gt; 67</strong></td><td style="text-align:center"><strong>a[2,1] -&gt; 278</strong></td><td style="text-align:center"><strong>a[2,2] -&gt; 39</strong></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面的构建，从0开始的，也可以和之前废弃0从1开始</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 硬赋值</span></span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">78</span>;</span><br><span class="line">a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">102</span>;</span><br><span class="line">a[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">44</span>;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">92</span>;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">165</span>;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">95</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">67</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">278</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">39</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组较好理解的初始化，内嵌的花括号表示一行，逗号结束表示换行</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">3</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">78</span>, <span class="number">102</span>, <span class="number">44</span>&#125;, &#123;<span class="number">92</span>, <span class="number">165</span>, <span class="number">95</span>&#125;, &#123;<span class="number">67</span>, <span class="number">278</span>, <span class="number">39</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组本质也是一维数组，可按照一维方式赋值</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">3</span>][<span class="number">3</span>] = &#123;<span class="number">78</span>, <span class="number">102</span>, <span class="number">44</span>, <span class="number">92</span>, <span class="number">165</span>, <span class="number">95</span>, <span class="number">67</span>, <span class="number">278</span>, <span class="number">39</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套循环输出</span></span><br><span class="line"><span class="comment">// 输出矩阵为：</span></span><br><span class="line"><span class="comment">// 第一轮：a[0][0] a[0][1] a[0][2]</span></span><br><span class="line"><span class="comment">// 第二轮：a[1][0] a[1][1] a[1][2]</span></span><br><span class="line"><span class="comment">// 第三轮：a[2][0] a[2][1] a[2][2]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">2</span>;j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-多维数组">2. 多维数组</h3><blockquote><p>多为数组，三维：数组里的数组里的数组，不用理解到其它学科的纬度</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题外话：不用理解成几何里三维立体，四维超立体，或天文里的四维时空，没那么复杂</span></span><br><span class="line"><span class="comment">// 用三维表示地球村，一维：地球，二维：国家：三维：省份，用数字代替</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">3</span>][<span class="number">3</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">11</span>, <span class="number">11</span>, <span class="number">12</span>&#125;, &#123;<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;, &#123;<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>&#125;, &#123;<span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>&#125;, &#123;<span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">2</span>;j++)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;( &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> z=<span class="number">0</span>;z&lt;=<span class="number">2</span>;z++)&#123;</span><br><span class="line">            cout &lt;&lt; b[i][j][z] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;), &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题三十一：1272.郭远摘苹果</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313191405832.png" alt="1272.郭远摘苹果"></p><h3 id="代码详解-31">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m, a[<span class="number">11</span>][<span class="number">11</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i从0开始也行，从1开始也行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) cin &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大值没给范围，那就把第一个值初始</span></span><br><span class="line"><span class="type">int</span> maxn = a[<span class="number">1</span>][<span class="number">1</span>], minn = a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">        <span class="comment">// 求最大值</span></span><br><span class="line">        <span class="keyword">if</span> (maxn &lt; a[i][j]) maxn = a[i][j];</span><br><span class="line">        <span class="comment">// 求最小值</span></span><br><span class="line">        <span class="keyword">if</span> (minn &gt; a[i][j]) minn = a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求差</span></span><br><span class="line">cout &lt;&lt; maxn - minn;</span><br></pre></td></tr></table></figure><h1>习题三十二：1384.靶心数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313191500772.png" alt="1384.靶心数"></p><h3 id="代码详解-32">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m, a[<span class="number">101</span>][<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) cin &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="comment">// 第一行：[1,1] [1,2] [1,3] [1,4]</span></span><br><span class="line"><span class="comment">// 第二行：[2,1] [2,2] [2,3] [2,4]</span></span><br><span class="line"><span class="comment">// 第三行：[3,1] [3,2] [3,3] [3,4]</span></span><br><span class="line"><span class="comment">// 第四行：[4,1] [4,2] [4,3] [4,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 已知第一行，末行，第一列，末列不存在靶心，去除减少循环次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=m<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        <span class="comment">//将上下左右相邻的判断一下</span></span><br><span class="line">        <span class="keyword">if</span> (a[i][j] &gt; a[i<span class="number">-1</span>][j] &amp;&amp; a[i][j] &gt; a[i][j<span class="number">-1</span>] &amp;&amp; a[i][j] &gt; a[i][j+<span class="number">1</span>] &amp;&amp; a[i][j] &gt; a[i+<span class="number">1</span>][j])</span><br><span class="line">            cout &lt;&lt; a[i][j] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题三十三：P5731.蛇形方阵</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313191548022.png" alt="P5731.蛇形方阵"></p><h3 id="代码详解-33">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, a[<span class="number">10</span>][<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设n=4</span></span><br><span class="line"><span class="comment">// a[1,1] a[1,2] a[1,3] a[1,4]</span></span><br><span class="line"><span class="comment">// a[2,1] a[2,2] a[2,3] a[2,4]</span></span><br><span class="line"><span class="comment">// a[3,1] a[3,2] a[3,3] a[3,4]</span></span><br><span class="line"><span class="comment">// a[4,1] a[4,2] a[4,3] a[4,4]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化行和列，</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 假设n=4，则执行16次，累加可以在循环体执行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> z=<span class="number">1</span>;z&lt;=n*n;)&#123;</span><br><span class="line">    <span class="comment">// 朝右</span></span><br><span class="line">    i++;j++;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= n &amp;&amp; !a[i][j])&#123;</span><br><span class="line">        a[i][j] = z;</span><br><span class="line">        j++;z++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 朝下，i下移一位，j左移一位，保证不越界</span></span><br><span class="line">    i++;j--;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= n &amp;&amp; !a[i][j])&#123;</span><br><span class="line">        a[i][j] = z;</span><br><span class="line">        i++;z++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 朝左，i上移一位，j左移一位</span></span><br><span class="line">    i--;j--;</span><br><span class="line">    <span class="keyword">while</span>(j &gt;= <span class="number">1</span> &amp;&amp; !a[i][j])&#123;</span><br><span class="line">        a[i][j] = z;</span><br><span class="line">        j--;z++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 朝上，j右移一位</span></span><br><span class="line">    i--;j++;</span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">1</span> &amp;&amp; !a[i][j])&#123;</span><br><span class="line">        a[i][j] = z;</span><br><span class="line">        i--;z++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题三十四：P5732.杨辉三角</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313191626620.png" alt="P5732.杨辉三角"></p><h3 id="代码详解-34">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 杨辉三角形特性</span></span><br><span class="line"><span class="comment">// 1.第一行只有数字：1</span></span><br><span class="line"><span class="comment">// 2.每一行头尾数字：1</span></span><br><span class="line"><span class="comment">// 3.每一个非头尾数字是上一行对应左右的和：</span></span><br><span class="line"><span class="comment">//   比如a[5][3] = a[4][2] + a[4][3]</span></span><br><span class="line"><span class="comment">// 4.第n行数字的和为：2的n-1次方</span></span><br><span class="line"><span class="comment">// 1+5+10+10+5+1=32  为： 2 x 2 x 2 x 2 x 2 = 32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//             1</span></span><br><span class="line"><span class="comment">//           1   1</span></span><br><span class="line"><span class="comment">//        1    2   1</span></span><br><span class="line"><span class="comment">//     1    3    3   1</span></span><br><span class="line"><span class="comment">//   1   4    6    4   1</span></span><br><span class="line"><span class="comment">// 1   5   10   10   5   1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了方便观察，改为以上图形，程序上不需要考虑左边空隙</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[<span class="number">21</span>][<span class="number">21</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始首行</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="comment">// 每一行的列数正好是当前的i数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">        a[i][j] = a[i<span class="number">-1</span>][j<span class="number">-1</span>] + a[i<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">        cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题三十五：P5729.工艺品制作</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313191703129.png" alt="P5729.工艺品制作"></p><h3 id="代码详解-35">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三维</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">21</span>][<span class="number">21</span>][<span class="number">21</span>] = &#123;<span class="number">0</span>&#125;, w, x, h, q, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入 长宽高</span></span><br><span class="line">cin &gt;&gt; w &gt;&gt; x &gt;&gt; h &gt;&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被激光切割的组数q</span></span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line">    <span class="type">int</span> x1, y1, z1, x2, y2, z2;</span><br><span class="line">    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; z1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; z2;</span><br><span class="line">    <span class="comment">// 三重循环标记被切割的方块</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x1;i&lt;=x2;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=y1;j&lt;=y2;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=z1;k&lt;=z2;k++)&#123;</span><br><span class="line">                a[i][j][k] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出三维，求0的个数，即为剩下的方块体积</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=w;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=x;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=h;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j][k] == <span class="number">0</span>) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans;</span><br></pre></td></tr></table></figure><hr><h1>十八、函数.参数.返回值.常量</h1><h3 id="1-自定义函数">1. 自定义函数</h3><blockquote><p>函数或叫自定义函数，是用户自己定义的一种函数，适用于将大量重复的代码进行封装调用</p></blockquote><ul><li><p>自定义函数说明：</p><ul><li>每个程序都在用函数，比如 int main() 这是主函数，程序在这里自动执行；</li><li>int main() 中， int是返回类型，自然也会有其它类型，甚至无返回类型void；</li><li>函数末尾除了void类型，一般都会有一个return 返回对应类型；</li><li>函数名也遵循变量原则；</li><li>用户自定义创建的函数，无法像主函数 main() 那样自动执行，需要被调用自行；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个无返回值的自定义函数，通过调用执行</span></span><br><span class="line"><span class="comment">// 比如重复输出10组星号三角形</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 星号三角</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">star</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">star</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-参数和返回值">2. 参数和返回值</h3><blockquote><p>函数中有两个重要的概念：参数和返回值，用于更加灵活的使用函数；</p></blockquote><ul><li><p>参数：</p><ul><li>形参（形式参数），在定义函数时定义的变量（类似变量声明，可直接赋值作为初始值）；</li><li>实参（实际参数），在调用函数时传递的值（类似赋值，直接给形参变量赋值）；</li><li>定义了形参，实参需要一一对应传递赋值，否则出错；</li><li>如果形参设置了默认值，则可以省略，一般定义默认值的形参在最后；</li><li>有默认值的形参，如果被实参传递，则覆盖默认值；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带参数的void类型函数</span></span><br><span class="line"><span class="comment">// 控制输出的星数</span></span><br><span class="line"><span class="comment">// num：每行个数</span></span><br><span class="line"><span class="comment">// line：行数</span></span><br><span class="line"><span class="comment">// def：显示的字符</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">star</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> line, string def = <span class="string">&quot;*&quot;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=line;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=num;j++)&#123;</span><br><span class="line">cout &lt;&lt; def;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 特别注意：函数里声明的变量num,line,def,i,j在star函数体外无法识别</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用，并传参</span></span><br><span class="line"><span class="built_in">star</span>(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">star</span>(<span class="number">3</span>, <span class="number">3</span>, <span class="string">&quot;@&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回值：</p><ul><li>void 类型 是无返回值的，上面已经研究过；</li><li>需要返回值的类型：比如 int 、float 、string 等；</li><li>为什么要返回值？因为可以把函数当成一个变量，参与到主函数程序中的运算中；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算一个圆的面积和周长的和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的面积：π * r * r</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">area</span><span class="params">(<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="type">float</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">return</span> pi * r * r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的周长：π * r * 2</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">circ</span><span class="params">(<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="type">float</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">return</span> pi * r * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 输入半径r</span></span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line">cin &gt;&gt; r;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算面积+周长的和</span></span><br><span class="line">cout &lt;&lt;  <span class="built_in">area</span>(r) + <span class="built_in">circ</span>(r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-常量概念">3. 常量概念</h3><blockquote><p>之前一直在使用变量，即：可以改变的量；而常量是相对的产物，即：定义后就不可改变的量；</p></blockquote><ul><li><p>常量：</p><ul><li>语法多种，推荐一种即可：const 类型 常量名 = 值；<ul><li>const int A = 10; （这里的A为常量名，推荐用大写，以区别变量）</li></ul></li><li>常量是不可改变的量，定义之后无法再次赋值，所以定义时就必须初始化；</li><li>为何要使用常量，有一些值是固定的，比如π，如果不小心改变了，语法上不报错就非常要命；</li><li>为何要大写常量名，当一段程序有几十上百量时，常量变量识别度变差，故约定大写；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个常量PI</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的面积：π * r * r</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">area</span><span class="params">(<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> PI * r * r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的周长：π * r * 2</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">circ</span><span class="params">(<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> PI * r * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1>习题三十六：1512.甲乙的年龄</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313192621442.png" alt="1512.甲乙的年龄"></p><h3 id="代码详解-36">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 甲乙两者年龄只和是两位数</span></span><br><span class="line"><span class="comment">// 2. 这个两位数是一个质数</span></span><br><span class="line"><span class="comment">// 3. 这个质数(个位+十位=13)</span></span><br><span class="line"><span class="comment">// 4. 甲比乙大13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求甲乙分别是多少？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明和变量</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举（穷举）出所有情况</span></span><br><span class="line"><span class="comment">// 假设乙最小1，那么甲就是14，乙最大就是99-13=86</span></span><br><span class="line"><span class="comment">// 循环1-86之间，但当乙到达44时，和为101，也就是说43是头</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">43</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 求和</span></span><br><span class="line">    sum = i + (i + <span class="number">13</span>);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; sum &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断这个和是不是质数以及数字之和是13</span></span><br><span class="line">    <span class="comment">// 先用常规方法，然后改函数，第一次用函数会因缺少经验无从下手</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记</span></span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 判断质数，只能被1和本身整除</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=sum<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum % j == <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记判断</span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; i + 13 &lt;&lt; &quot; &quot; &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; sum &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断数字之和13</span></span><br><span class="line">    <span class="type">int</span> a = sum / <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = sum % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a + b == <span class="number">13</span>) &#123;</span><br><span class="line">        cout &lt;&lt; i + <span class="number">13</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断质数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isZ</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=n<span class="number">-1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (n % j == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 只要执行了return 函数就终止执行</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面循环体没有执行return，就继续执行下面的return</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断和</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isS</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a = n / <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = n % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行了return true将终止往下执行</span></span><br><span class="line"><span class="keyword">if</span> (a + b == <span class="number">13</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有执行true，则继续返回false</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">43</span>;i++)&#123;</span><br><span class="line">sum = i + (i + <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断输出</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isZ</span>(sum) &amp;&amp; <span class="built_in">isS</span>(sum))</span><br><span class="line">cout &lt;&lt; i + <span class="number">13</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题三十七：1862.友好数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313192745245.png" alt="1862.友好数"></p><h3 id="代码详解-37">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求约数和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 1到n-1，题目说除了本身</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) tmp += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if ((对a求约数和) == b &amp;&amp; (对b求约数和) == a)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sum</span>(a) == b &amp;&amp; <span class="built_in">sum</span>(b) == a) cout &lt;&lt; <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;no&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题三十八：P5737.闰年展示</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313192826618.png" alt="P5737.闰年展示"></p><h3 id="代码详解-38">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前学习过除了函数的变量作用域</span></span><br><span class="line"><span class="comment">// 1. 我们可以意识到：函数体内的变量，其它函数或外部全局都无法识别</span></span><br><span class="line"><span class="comment">// 2. 外部全局声明的变量，叫做全局变量，所有区域均可识别</span></span><br><span class="line"><span class="comment">// 3. 当然，至于全局和局部变量重名会怎样，可自行测试，建议别重名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在和main等函数同一平级声明的变量为全局变量</span></span><br><span class="line"><span class="comment">// 我们要创建一个全局计数器变量cnt;</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>, a[<span class="number">1500</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断闰年函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">isR</span><span class="params">(<span class="type">int</span> year)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; year % <span class="number">4</span> == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="comment">//cnt++;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; year &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// 这里的顺序是a[cnt] = year， 然后cnt++</span></span><br><span class="line">a[cnt++] = year;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 题目非常初级，主要学习下函数，实际答题中并不强制</span></span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=y;i++)&#123;</span><br><span class="line"><span class="comment">// 判断闰年，将判断的方式作为函数处理</span></span><br><span class="line"><span class="comment">// 它需要判断后输出，或者不输出，可以用void类型，否则还需要返回判断</span></span><br><span class="line"><span class="built_in">isR</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>十九、P5739.计算阶乘.递归入门</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313195655879.png" alt="P5739.计算阶乘.递归入门"></p><h3 id="代码详解-39">* 代码详解</h3><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313212828693.png" alt="递归流程图"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 什么是递归？即：通过函数自我执行的方式表现出循环的效果</span></span><br><span class="line"><span class="comment">// 求n!，也就是阶乘，之前做过，这次作为递归入门</span></span><br><span class="line"><span class="comment">// 之前用循环做的，如下：</span></span><br><span class="line"><span class="comment">// i = 1, 1</span></span><br><span class="line"><span class="comment">// i = 2, 1 x 2</span></span><br><span class="line"><span class="comment">// i = 3, 1 x 2 x 3</span></span><br><span class="line"><span class="comment">// i = 4, 1 x 2 x 3 x 4</span></span><br><span class="line"><span class="comment">// i = n, 1 x ... x n</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fn</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 假设n=4，然后递减循环 4 3 2 1</span></span><br><span class="line"><span class="comment">// 递归则不需要再循环</span></span><br><span class="line"><span class="comment">// 递归思维：n x (n - 1) x (n - 2) x (n - 3) ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 理 解：return n * fn(n - 1);</span></span><br><span class="line"><span class="comment">// 调 用：fn(4)</span></span><br><span class="line"><span class="comment">// 第一轮：return 4 * fn(3)，fn(3)又调用了自己，就进入第二轮</span></span><br><span class="line"><span class="comment">//  fn(3)这块本身是：return 3 * fn(n-1) 也就是：3 * fn(2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二轮：return 4 * 3 * fn(2)</span></span><br><span class="line"><span class="comment">// 第三轮：return 4 * 3 * 2 * fn(1)  1到头了，单独判断返回1即可</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 最终轮：fn(1)，判断if n == 1 return 1即可，最终为：return 4 * 3 * 2 * 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先判断1停止递归</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">return</span> n * <span class="built_in">fn</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归求n!</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">fn</span>(n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题三十九：1514.数根</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313193004000.png" alt="1514.数根"></p><h3 id="代码详解-40">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 树根</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fn</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 短除</span></span><br><span class="line"><span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">sum += n % <span class="number">10</span>;</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断sum是否是个位数</span></span><br><span class="line"><span class="keyword">if</span> (sum &lt; <span class="number">10</span>) <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fn</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">fn</span>(n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题四十：1223.汉诺塔的移动次数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313193033159.png" alt="1223.汉诺塔的移动次数"></p><h3 id="代码详解-41">* 代码详解</h3><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20240125161802209.png" alt="image-20240125161802209" style="zoom:75%;margin:0"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 移动只能一块一块移动</span></span><br><span class="line"><span class="comment">// 2. 大的不能放到小的上面</span></span><br><span class="line"><span class="comment">// 3. 最终状态从A到C状态，如上图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动计步如下：</span></span><br><span class="line"><span class="comment">// 1块：1步</span></span><br><span class="line"><span class="comment">// 2块：3步</span></span><br><span class="line"><span class="comment">// 3块：7步</span></span><br><span class="line"><span class="comment">// 4块：15步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求输入n块，&lt;= 20，求多少步</span></span><br><span class="line"><span class="comment">// 已知n == 1，那么就 1 步</span></span><br><span class="line"><span class="comment">// 假设n == 2，先将小块移动到B，花了1步，大块移动到C花了1步，小块再移动到C；</span></span><br><span class="line"><span class="comment">//    结论：小块2步 + 大块1步 = 3步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设n == 3，先将小块移动到C，花了1步，中块移动到B，花了1步，小块移动到B，花了2步</span></span><br><span class="line"><span class="comment">//  大块移动到C，花了1步，小块移动到A，花了3步，中块移动到C，花了2步</span></span><br><span class="line"><span class="comment">//  小块移动到C，花了4步</span></span><br><span class="line"><span class="comment">//  结论：小块4步 + 中块2步 + 大块1步 = 7步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设n == 4，结论：8 + 4 + 2 + 1 = 15，找到规律：每次都是x2的步数，也就是2的n次方-1</span></span><br><span class="line"><span class="comment">// 用这种规律直接：2 * 2 * 2 * 2 - 1 = 15 步；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非常有意思的事，深入研究规律后，直接循环做出来了。根本无需递归</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> step = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    step *= <span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; step - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那我们再思考用递归来做一下：</span></span><br><span class="line"><span class="comment">// 步数：n = 1, 2, 3, 4  步 = 1, 3, 7, 15</span></span><br><span class="line"><span class="comment">// 公式：2 * fn(n - 1) + 1，fn(n - 1)是上一层，x 2 + 1 = 本层步数</span></span><br><span class="line"><span class="comment">// 代码：return 2 * fn(n - 1) + 1，方便理解，列出轮次：</span></span><br><span class="line"><span class="comment">// 第一轮：return 2 * fn(3) + 1</span></span><br><span class="line"><span class="comment">// 第二轮：return 2 * (2 * fn(2) + 1) + 1</span></span><br><span class="line"><span class="comment">// 第三轮：return 2 * (2 * (2 * fn(1) + 1) + 1) + 1</span></span><br><span class="line"><span class="comment">// 第四轮：return 2 * (2 * (2 * 1 + 1) + 1) + 1 = 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 汉诺塔</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fn</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// n == 1</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">fn</span>(n - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">fn</span>(n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题四十一：P5743.猴子吃桃</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313193116916.png" alt="P5743.猴子吃桃"></p><h3 id="代码详解-42">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 每一天吃当前数量的一半+1个</span></span><br><span class="line"><span class="comment">// 2. 第n天发现只剩1个</span></span><br><span class="line"><span class="comment">// 3. 求共多少个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设n == 4，剩1个</span></span><br><span class="line"><span class="comment">// 没有思路就先猜，第3天，大概是4个，吃一半加1个，正好剩1个，这个很容易猜到；</span></span><br><span class="line"><span class="comment">// 但我们可能要cin &gt;&gt; n，fn(n)；输入4，不可能判断n == 4 return 1;</span></span><br><span class="line"><span class="comment">// 但我们知道n == 1是第一天，我们要反向思考这题：</span></span><br><span class="line"><span class="comment">// 原本：1:22  2:10  3:4  4:1  从后向前推：(当前 + 1) * 2</span></span><br><span class="line"><span class="comment">// 反向：1:1   2:4   3:10 4:22 </span></span><br><span class="line"><span class="comment">// 换成递归格式为：return (fn(n-1) + 1) * 2，并且 n == 1 return 1;</span></span><br><span class="line"><span class="comment">// 轮次列表：</span></span><br><span class="line"><span class="comment">// 第一轮：return (fn(3) + 1) * 2</span></span><br><span class="line"><span class="comment">// 第二轮：return (((fn(2) + 1) * 2) + 1) * 2</span></span><br><span class="line"><span class="comment">// 第三轮：return (((((fn(1) + 1) * 2) + 1) * 2) + 1) * 2</span></span><br><span class="line"><span class="comment">// 第四轮：return (((((1 + 1) * 2) + 1) * 2) + 1) * 2 = 22</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 猴子吃桃</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fn</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 界限</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆推</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">fn</span>(n<span class="number">-1</span>) + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">fn</span>(n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题四十二：1148.数数小木块</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313193152375.png" alt="1148.数数小木块"></p><h3 id="代码详解-43">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先硬算，然后找规律</span></span><br><span class="line"><span class="comment">// n:块数</span></span><br><span class="line"><span class="comment">// 1:1  2:3  3:6  4:10  5:15  </span></span><br><span class="line"><span class="comment">// 1:1</span></span><br><span class="line"><span class="comment">// 2:1+2</span></span><br><span class="line"><span class="comment">// 3:1+2+3</span></span><br><span class="line"><span class="comment">// 4:1+2+3+4</span></span><br><span class="line"><span class="comment">// 5:1+2+3+4+5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方块</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fn</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 界限</span></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上一层的个数 + 本层多出来的 = 本层个数</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fn</span>(n - <span class="number">1</span>) + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, sum = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 题目要求将所有层数将每一层累加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum += <span class="built_in">fn</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>二十、常用内置函数</h1><h3 id="1-数学函数">1. 数学函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span><span class="comment">// 数序函数库 或math.h</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 绝对值</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">abs</span>(<span class="number">-5</span>) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 向上取整，有小数进一位，5.11=6</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">ceil</span>(<span class="number">5.11</span>) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 向下取整，截断取，5.95=5</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">floor</span>(<span class="number">5.95</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 四舍五入</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">round</span>(<span class="number">5.55</span>) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 平方根</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">sqrt</span>(<span class="number">16</span>) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 幂函数，10的4次方的值</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 自然常数e为：2.71828...</span></span><br><span class="line"><span class="comment">// exp(n)为指数函数，获取e的n次方，1次方即自己</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">exp</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 对数函数log(n)，即幂的逆运算</span></span><br><span class="line"><span class="comment">// 获取以e为底的n的对数</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">log</span>(<span class="built_in">exp</span>(<span class="number">3</span>)) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有sin(正弦)、cos(余弦)、tan(正切)启蒙涉及不到</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-比较函数">2. 比较函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取最小值</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">min</span>(<span class="number">1</span>, <span class="number">9</span>) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 取最大值</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(<span class="number">1</span>, <span class="number">9</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h1>习题四十三：P5735.距离函数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313193316081.png" alt="P5735.距离函数"></p><h3 id="代码详解-44">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用函数减少重复</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">dis</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">float</span> c, <span class="type">float</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((a - b) * (a - b) + (c - d) * (c - d));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">float</span> x1, x2, x3, y1, y2, y3, sum = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; x3 &gt;&gt; y3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两点距离：</span></span><br><span class="line">sum += <span class="built_in">dis</span>(x2, x1, y2, y1);</span><br><span class="line">sum += <span class="built_in">dis</span>(x3, x2, y3, y2);</span><br><span class="line">sum += <span class="built_in">dis</span>(x3, x1, y3, y1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题四十四：1253.寻找肇事司机</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313193408840.png" alt="1253.寻找肇事司机"></p><h3 id="1-代码详解">1. 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, d;</span><br><span class="line"><span class="comment">// 循环四位数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1100</span>;i&lt;=<span class="number">9988</span>;i++)&#123;</span><br><span class="line">a = i / <span class="number">1000</span>;</span><br><span class="line">b = i / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">c = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">d = i % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line">        <span class="comment">// 四位的车号刚好是一个整数的平方</span></span><br><span class="line"><span class="comment">// sqrt(16) = 4，怎么判断4的平方是16</span></span><br><span class="line"><span class="comment">// sqrt(26) = 5.xxx  sqrt(25) = 5</span></span><br><span class="line"><span class="comment">// 4 x 4 = sqrt(16) * sqrt(16)</span></span><br><span class="line"><span class="comment">// floor(sqrt(26)) = 5  ?= sqrt(26) = 5.xxx</span></span><br><span class="line"><span class="keyword">if</span> (a == b &amp;&amp; c == d &amp;&amp; a != c &amp;&amp; <span class="built_in">sqrt</span>(i) == <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(i))) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题四十五：P5736.质数筛</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313193452561.png" alt="P5736.质数筛"></p><h3 id="代码详解-45">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断质数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isP</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1不是质数，直接返回0。</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 循环验证质数，1和本身不参数，2~x-1</span></span><br><span class="line"><span class="comment">// for(int i=2;i&lt;=x-1;i++)</span></span><br><span class="line"><span class="comment">// 优化算法：</span></span><br><span class="line"><span class="comment">// 1.假设x = 16，它不是质数，因子有：2, 4, 4, 8 </span></span><br><span class="line"><span class="comment">//2.假设x = 20，它不是质数，因子有：2, 4, 5, 10</span></span><br><span class="line"><span class="comment">// 3.假设x = 30，它不是质数，因子有：2, 3, 5, 6, 10, 15</span></span><br><span class="line"><span class="comment">// 寻找规律：</span></span><br><span class="line"><span class="comment">//1.这些因子的最大值，基本是数值的一半，i&lt;=x/2即可；</span></span><br><span class="line"><span class="comment">//2.这些因子中间来一刀，左右两侧是配对的。比如x=30，只要循环到5-6之间即可，sqrt(30)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环验证</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(x);i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环1-n赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line"><span class="comment">// 题目要求存入数组，本题其实没必要，它只能检测结果，不能检测你代码</span></span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isP</span>(tmp)) cout &lt;&lt; tmp &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>二十一、字符与ASCII码</h1><h3 id="1-字符">1. 字符</h3><blockquote><p>字符类型，即：<strong>char 类型</strong> 或 <strong>C 风格字符串</strong>，可以存储字符或字符串的类型；</p></blockquote><ul><li><p>字符类型说明：</p><ul><li><p>强调一下：char 类型 不是 string，string是声明的字符串，可以放一串字符；而char，只能放一个；</p><ul><li>例：<strong>char a = ‘A’</strong> ， 1. 只能存一个字符； 2. 必须是单引号包含；</li></ul></li><li><p>如何表示字符串？可以用字符数组来表示：</p><ul><li><strong>char a[5] = “hello”;</strong>1. 这是错的，需要预留一位存储\0(空字符null)来表示结束 ;</li><li><strong>char a[6] = “hello”;</strong>    2. 这是对的，此时可以用双引号来表示字符串；</li><li><strong>cout &lt;&lt; a;</strong>   3. 直接输出即可，无须数组式的循环逐个输出；</li></ul><table><thead><tr><th style="text-align:center">a[0]</th><th style="text-align:center">a[1]</th><th style="text-align:center">a[2]</th><th style="text-align:center">a[3]</th><th style="text-align:center">a[4]</th><th style="text-align:center">a[5]</th></tr></thead><tbody><tr><td style="text-align:center">h</td><td style="text-align:center">e</td><td style="text-align:center">l</td><td style="text-align:center">l</td><td style="text-align:center">o</td><td style="text-align:center">\0</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//char a = &#x27;A&#x27;;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; a;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5位不够，需要预留一位存储\0(空字符null)来表示结束</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">6</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">cout &lt;&lt; a;</span><br></pre></td></tr></table></figure></li><li><p>初始化声明方法和普通数组差不多：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化字符数组</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">6</span>];</span><br><span class="line"><span class="comment">// 初始化并直接赋值</span></span><br><span class="line"><span class="type">char</span> b[<span class="number">6</span>] = &#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line"><span class="comment">// 初始化并赋值初始值</span></span><br><span class="line"><span class="type">char</span> c[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态初始</span></span><br><span class="line"><span class="type">char</span> d[] = &#123;<span class="string">&quot;world&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-ASCII码">2. ASCII码</h3><blockquote><p>ASCII码，即：美国标准信息交换代码；用于和计算机数据通信；</p></blockquote><ul><li>码表：</li></ul><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/ascii-Table.jpg" alt="img" style="zoom:65%;margin:0 auto"><p>​</p><ul><li><p>通过上述表查阅到：小写a的十进制编码为97，然后逐步递增。大写的A是65，往后逐步递增；</p></li><li><p>什么是十进制，ASCII码到底如何和计算机通信，解决了啥问题？自己百度查阅，我们只关注答题啊；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符型a</span></span><br><span class="line"><span class="type">char</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出它的十进制，即整型数值</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">int</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整型数值65</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">65</span>;</span><br><span class="line"><span class="comment">// 输出它的字符</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(b);</span><br></pre></td></tr></table></figure></li></ul><h1>习题四十六：1971.大小写转换</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313193533317.png" alt="1971.大小写转换"></p><h3 id="代码详解-46">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查表：a 97，A 65 梳理两点：</span></span><br><span class="line"><span class="comment">// 1. a跑到A，a - 32 = 65</span></span><br><span class="line"><span class="comment">// 2. A跑到a，A + 32 = 97</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否需要转换整数后判断？答：不需要</span></span><br><span class="line"><span class="comment">// 直接字符判断即可，它底层会自行转换判断</span></span><br><span class="line"><span class="comment">// 直接判断&gt;=&#x27;A&#x27;，意味&gt;=97，得到大写的范围</span></span><br><span class="line"><span class="keyword">if</span> (a &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">    a += <span class="number">32</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    a -= <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出a</span></span><br><span class="line">cout &lt;&lt; a;</span><br></pre></td></tr></table></figure><h1>习题四十七：P5733.自动修正</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313193631033.png" alt="P5733.自动修正"></p><h3 id="代码详解-47">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">110</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 小写变大写，其它不变</span></span><br><span class="line"><span class="comment">// 2. 如果本身是大写，则不变</span></span><br><span class="line"><span class="comment">// 3. 如果是数字和符号，则不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 怎么循环去判断是否要大写？</span></span><br><span class="line"><span class="comment">// 可以判断字符数组最后一位是&#x27;\0&#x27;结束</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; a[0]; 从0开始填入字符的</span></span><br><span class="line"><span class="comment">// 死循环</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 遇到结尾就退出</span></span><br><span class="line">    <span class="keyword">if</span> (a[cnt] == <span class="string">&#x27;\0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 判断是小写</span></span><br><span class="line">    <span class="keyword">if</span> (a[cnt] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; a[cnt] &lt;= <span class="string">&#x27;z&#x27;</span>) a[cnt] -= <span class="number">32</span>;</span><br><span class="line">    <span class="comment">// 累加</span></span><br><span class="line">    cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">cout &lt;&lt; a;</span><br></pre></td></tr></table></figure><hr><h1>二十二、cstring头和字符函数</h1><h3 id="1-sizeof操作符">1. sizeof操作符</h3><blockquote><p>字符数组是如何获取它的长度，比如占用多少，或者有多少个字符？之前的题目，都只是判断\0结束</p></blockquote><ul><li><p><strong>sizeof：</strong></p><ul><li><p>它可以返回一个字符数组所占的内存字节数（字节数理解为：数组分配的一个个小格子）</p></li><li><p>比如 ： <strong>char a[10] = “hello”</strong> ， 它占用了多少？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 占用10个字节，&#123;&quot;hello&quot;&#125; 和 &#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;&#125;; 都一样</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 占用6个字节，不定式，末尾\0占一个</span></span><br><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(a);</span><br></pre></td></tr></table></figure></li><li><p>所以，想用 sizeof 操作符 来 获取字符个数，其实并不方便。当然，用 <strong>a[]</strong> 这种 ，然后 - 1也可以。</p></li></ul></li></ul><h3 id="2-cstring头">2. cstring头</h3><blockquote><p>cstring是 C 标准库头文件， 包含了一些 C 风格字符串的类型和函数；</p></blockquote><ul><li><p>基本使用：</p><ul><li><p>首先要引入 cstring ： #include <cstring></cstring></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure></li><li><p>使用 <strong>strlen()</strong> 函数 来获取 字符数组的长度：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cstring下的strlen函数获取</span></span><br><span class="line"><span class="comment">// 并不会统计占用，也不会统计结束符</span></span><br><span class="line"><span class="comment">// 结果为：5</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">strlen</span>(a);</span><br></pre></td></tr></table></figure></li><li><p>使用 <strong>strcpy()</strong> 和 <strong>strncpy()</strong> 函数赋值字符数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无法直接复制</span></span><br><span class="line"><span class="comment">// char b[20] = a;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; b;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// strcpy复制字符数组</span></span><br><span class="line"><span class="type">char</span> b[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(b, a);</span><br><span class="line">cout &lt;&lt; b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// strncpy复制指定个数</span></span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">strncpy</span>(c, a, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; c;</span><br></pre></td></tr></table></figure></li><li><p>使用 <strong>strcat()</strong> 和 <strong>strncat()</strong> 函数，连接字符数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接两个字符数组</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">20</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> b[<span class="number">10</span>] = <span class="string">&quot;, world!&quot;</span>;</span><br><span class="line"><span class="comment">// 函数本身会返回连接后的字符串</span></span><br><span class="line"><span class="comment">// 参数1：被添加的字符数组；</span></span><br><span class="line"><span class="comment">// 参数2：添加的字符数组；</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">strcat</span>(a, b) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// a被添加了，所以它增加了字符</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"><span class="comment">// b不变</span></span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接部分字符数组</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">20</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> b[<span class="number">10</span>] = <span class="string">&quot;, world!&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">strncat</span>(a, b, <span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li><li><p>使用 <strong>strchr()</strong> 和 <strong>strstr()</strong> 函数，来实现字符数组查找：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找字符在数组中的位置</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">20</span>] = <span class="string">&quot;hello, world!&quot;</span>;</span><br><span class="line"><span class="comment">// 获取第一次查询到的字符位置，并往后输出字符</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">strchr</span>(a, <span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取到底是第几个位置</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">strchr</span>(a, <span class="string">&#x27;o&#x27;</span>) - a + <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询一串字符在数组中的位置</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">20</span>] = <span class="string">&quot;hello, world!&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">strstr</span>(a, <span class="string">&quot;or&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">strstr</span>(a, <span class="string">&quot;or&quot;</span>) - a + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>更多 <strong>cstring</strong> 旗下的函数：<a href="https://www.apiref.com/cpp-zh/cpp/header/cstring.html">https://www.apiref.com/cpp-zh/cpp/header/cstring.html</a></p></li></ul></li></ul><hr><h1>二十三、string字符串.常用函数</h1><h3 id="1-string">1. string</h3><blockquote><p>string是标准模板库 <strong>STL</strong> 中提供处理字符串的工具类型，可以直接赋值使用，无须设置数组；</p></blockquote><ul><li><p>字符串类型：</p><ul><li><p>可以直接赋值，无须数组化，但本身又是数组；</p></li><li><p>string是弹性长度，根据你赋值的内容自动伸缩，无须考虑赋值越界问题；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串需双引号</span></span><br><span class="line">string s = <span class="string">&quot;hello!&quot;</span>;</span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string本身也是数组</span></span><br><span class="line">cout &lt;&lt; s[<span class="number">0</span>];</span><br><span class="line">cout &lt;&lt; s[<span class="number">3</span>];</span><br><span class="line">cout &lt;&lt; s[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-常用函数">2. 常用函数</h3><blockquote><p>字符串类型，有非常多的实用函数工具，这里把最最常用的罗列出来，后续课程逐步补充</p></blockquote><ul><li><p>首先，字符串类型 string 本质是一个类（和之前的类型有所区别），它函数语法是类形式的语法：</p><ul><li>语法结构为：<strong>字符串变量.函数()</strong>  ，这里的 <strong>函数()</strong>，我个人喜欢读成 方法()；</li><li>也就是：<strong>字符串变量.方法()</strong> ，在使用这些方法时，需要 <strong>include <string></string></strong>；</li><li>当然，我这里使用如下方法并没有引入 <string> 也可以使用，可见已被隐式引入；</string></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">string s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符串长度size()或length()方法</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">size</span>();</span><br><span class="line">cout &lt;&lt; s.<span class="built_in">length</span>();</span><br><span class="line">cout &lt;&lt; s.<span class="built_in">max_size</span>();<span class="comment">// 获取最大字符数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接方法append()，在s后面添加字符串</span></span><br><span class="line">s.<span class="built_in">append</span>(<span class="string">&quot;, world!&quot;</span>); </span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接字符串，直接用+号也能实现</span></span><br><span class="line">s += <span class="string">&quot;, world!&quot;</span>; </span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入字符（一个），push_back()末尾插入</span></span><br><span class="line">s.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">// 一个字符单引号</span></span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定位置插入字符或字符串：insert()</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">3</span>, <span class="string">&quot;@@@&quot;</span>);<span class="comment">// 字符串形式，两个参数：位置和字符串</span></span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;#&#x27;</span>);<span class="comment">// 字符形式，三个参数：位置、个数、单个字符</span></span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找字符串中是否包含某个字符：find()</span></span><br><span class="line"><span class="comment">// 不存在返回：-1，存在返回：位置</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">find</span>(<span class="string">&quot;ll&quot;</span>);<span class="comment">// 只有一个参数时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数2，从第几个位置查找，自然找不到，会返回一个超大的数</span></span><br><span class="line"><span class="comment">// 超大数不好判断没找到，一般是最好返回-1</span></span><br><span class="line"><span class="comment">// 但由于find()本身返回的是无符号整数，即：没有负数，所以无法返回-1</span></span><br><span class="line"><span class="comment">// 直接用 int 转换下即可</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">int</span>(s.<span class="built_in">find</span>(<span class="string">&quot;ll&quot;</span>, <span class="number">3</span>)) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 或赋值方案</span></span><br><span class="line"><span class="type">int</span> index = s.<span class="built_in">find</span>(<span class="string">&quot;11&quot;</span>, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; index;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串截取：substr</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">substr</span>(<span class="number">2</span>);<span class="comment">// 从第2个位置截取到最后</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">substr</span>(<span class="number">2</span>,<span class="number">2</span>);<span class="comment">// 从第2个位置截取2个</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1>二十四、string.char.int的相互转换</h1><h3 id="1-char转int">1. char转int</h3><blockquote><p>其它现代语言数据类型转换都比较方便，而C++这种语言机制导致转换起来较为麻烦</p></blockquote><ul><li><p>char字符转int：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先抛出问题：string数字转int，常规方法int转不了</span></span><br><span class="line">string x = <span class="string">&quot;97&quot;</span>;</span><br><span class="line">cout &lt;&lt; x + <span class="number">1</span>;<span class="comment">// 语法错误，无法相加</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">int</span>(x) + <span class="number">1</span>;<span class="comment">// 语法错误，无法转换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符 char转ascii码</span></span><br><span class="line"><span class="type">char</span> y = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">cout &lt;&lt; y;<span class="comment">// 输出字符a</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">int</span>(y);<span class="comment">// 输出ascii码97，所以，用int转换char字符，只会得到ascii码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符数字 char转int</span></span><br><span class="line"><span class="type">char</span> z = <span class="string">&#x27;8&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">int</span>(z);<span class="comment">// 输出的是56，得到的是ascii码</span></span><br><span class="line">cout &lt;&lt; z - <span class="string">&#x27;0&#x27;</span>;<span class="comment">// 输出的是8，可以得到整型8</span></span><br><span class="line">cout &lt;&lt; z - <span class="string">&#x27;0&#x27;</span> - <span class="number">1</span>;<span class="comment">// 输出的是7，为了验证是不是int，减1便知</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">atoi</span>(&amp;z);<span class="comment">// 输出的是8，&amp;表示z变量的引用地址(指针)，不用理解，记住语法即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关于指针和引用地址，会在后续课程中专门篇幅讲解（不是本套），目前都是有意避开，避不开的强记</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-string转int">2. string转int</h3><blockquote><p>将 string 转换成 int 的思路：就是先让 string 变成 char 的引用，然后用 atoi() 函数转换</p></blockquote><ul><li><p>string字符转int：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string转int</span></span><br><span class="line">string k = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">// 先转换到char的指针，使用c_str()函数就是这个意思</span></span><br><span class="line"><span class="comment">// 然后再用atoi函数包裹转成int</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">atoi</span>(k.<span class="built_in">c_str</span>()) + <span class="number">1</span>;  <span class="comment">// 124</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然还提供了直接转换的函数stoi</span></span><br><span class="line">string p = <span class="string">&quot;456&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">stoi</span>(p);</span><br></pre></td></tr></table></figure></li></ul><hr><h1>二十五、读入一行.fgets.getline函数</h1><h3 id="1-getline-函数">1. getline()函数</h3><blockquote><p>在读入字符串时，遇到换行和空格，它是认为下一次 <strong>cin</strong> 读入，这给我们编码带来一些麻烦</p></blockquote><ul><li><p>getline()读入一整行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先抛出问题，假设s1输入=&gt; hello world!</span></span><br><span class="line">string s1;</span><br><span class="line">cin &gt;&gt; s1;</span><br><span class="line">cout &lt;&lt; s1;<span class="comment">// 结果为hello，空格后的字符串会理解为下一次cin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// scanf也不行</span></span><br><span class="line">string s2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s2);<span class="comment">// 直接报错，无法使用</span></span><br><span class="line">cout &lt;&lt; s2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// scanf单字符输入</span></span><br><span class="line"><span class="type">char</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;a);<span class="comment">// 单字符输入，不管输入多少，得到1个字符</span></span><br><span class="line">cout &lt;&lt; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// scanf字符数组输入，字符数组本身是引用地址，无须&amp;前缀</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);<span class="comment">// 输入多少，输出多少，可是遇到空格就没了</span></span><br><span class="line">cout &lt;&lt; s;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getline(cin, str)  参数1：固定cin，参数2：输入的字符串变量</span></span><br><span class="line"><span class="comment">// getline()函数 适用于 string类型</span></span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s);<span class="comment">// 输入 hello world!  不会被空格断掉</span></span><br><span class="line">cout &lt;&lt; s;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-fgets-函数">2. fgets()函数</h3><blockquote><p>对于字符数组，我们可以采用 fgets() 函数读入一整行</p></blockquote><ul><li><p>fgets()读入一整行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符数组s</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">20</span>];</span><br><span class="line"><span class="comment">// 参数1：要存储的字符数组</span></span><br><span class="line"><span class="comment">// 参数2：限定最大读入长度，防止越界</span></span><br><span class="line"><span class="comment">// 参数3：固定参数，表示标准输入</span></span><br><span class="line"><span class="built_in">fgets</span>(s, <span class="built_in">sizeof</span>(s), stdin);</span><br><span class="line">cout &lt;&lt; s;</span><br></pre></td></tr></table></figure></li><li><p>cin.getline()读入一整行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和fgets()函数类似</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">20</span>];</span><br><span class="line">cin.<span class="built_in">getline</span>(s, <span class="built_in">sizeof</span>(s));</span><br><span class="line">cout &lt;&lt; s;</span><br></pre></td></tr></table></figure></li></ul><h1>习题四十八：1478.出现次数最多的小写字母</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313194136811.png" alt="1478.出现次数最多的小写字母"></p><h3 id="代码详解-48">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">110</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">130</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环输入的字符</span></span><br><span class="line"><span class="comment">// 获取长度，strlen返回的是size_t(无符号整型)，用int转换</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">int</span>(<span class="built_in">strlen</span>(s));i++)&#123;</span><br><span class="line">    <span class="comment">// 转换成ascii，移位到数组初始，并累计</span></span><br><span class="line">    a[<span class="built_in">int</span>(s[i])]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设a最大</span></span><br><span class="line"><span class="type">int</span> maxn = <span class="number">97</span>;</span><br><span class="line"><span class="comment">// 输出字母的ascii次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">98</span>;i&lt;=<span class="number">122</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 比大小，注意这里必须有等于，方便将ascii码大的交给maxn</span></span><br><span class="line">    <span class="keyword">if</span> (a[maxn] &lt;= a[i]) maxn = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(maxn);</span><br></pre></td></tr></table></figure><h1>习题四十九：P1125.NOIP2008.提高组.笨小猴</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313194354711.png" alt="P1125.NOIP2008.提高组.笨小猴"></p><h3 id="代码详解-49">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">110</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">// 从0开始存储a-z</span></span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求出s长度</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大最小值</span></span><br><span class="line"><span class="type">int</span> maxn = <span class="number">-1</span>, minn = len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环97-122</span></span><br><span class="line"><span class="comment">// 或者0-25，用当前字母的ascii-97或-&#x27;a&#x27;即可</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; 98 - &#x27;a&#x27;; 相当于98 - 97</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    a[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最大值和最小值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">25</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">        maxn = <span class="built_in">max</span>(maxn, a[i]);</span><br><span class="line">        minn = <span class="built_in">min</span>(minn, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断质数</span></span><br><span class="line"><span class="type">int</span> d = maxn - minn;</span><br><span class="line"><span class="comment">// 特殊</span></span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">0</span> || d == <span class="number">1</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;No Answer&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(d);i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (d % i == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No Answer&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lucky Word&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; maxn - minn;</span><br></pre></td></tr></table></figure><h1>习题五十：1134.国王的魔镜</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313194240836.png" alt="1134.国王的魔镜"></p><h3 id="代码详解-50">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否回文</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isHW</span><span class="params">(<span class="type">char</span> x[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(x);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况1：回文必须是偶数</span></span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况2：必须是回文</span></span><br><span class="line">    <span class="comment">// 假设传过来的是: ABBA，判断03、12是否相等</span></span><br><span class="line">    <span class="comment">// 假设传过来的是: ABBAABBA，判断07、16、25...是否相等</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len/<span class="number">2</span><span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (x[i] != x[len - <span class="number">1</span> - i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">110</span>];</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 截取一半，如果用strcpy也行，但需要另外创建一个字符数组变量</span></span><br><span class="line">    <span class="comment">// 此方法，给一半后面位置强行改为0，表示结束了</span></span><br><span class="line">    <span class="comment">// s[len / 2] = &#x27;\0&#x27;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; s;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 截取后的字符数组</span></span><br><span class="line">    <span class="comment">// 循环判断是不是回文：即倒过来也一样</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isHW</span>(s))&#123;</span><br><span class="line">        s[<span class="built_in">strlen</span>(s) / <span class="number">2</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出最终长度</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">strlen</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题五十一：P5015.NOIP2018.普及组.标题统计</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313194440880.png" alt="P5015.NOIP2018.普及组.标题统计"></p><h3 id="代码详解-51">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 统计</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=(<span class="type">int</span>)s.<span class="built_in">length</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// string被拆分单字符，用单引号判断</span></span><br><span class="line">    <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span>) cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; cnt;</span><br></pre></td></tr></table></figure><h1>习题五十二：1012.我是第几个单词</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313194527735.png" alt="1012.我是第几个单词"></p><h3 id="代码详解-52">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br><span class="line"></span><br><span class="line">string x;</span><br><span class="line"><span class="built_in">getline</span>(cin, x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找位置</span></span><br><span class="line"><span class="type">int</span> p = s.<span class="built_in">find</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">// 总长度</span></span><br><span class="line">    <span class="type">int</span> len =  s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="comment">// 去掉空格数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=(<span class="type">int</span>)s.<span class="built_in">length</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span>) len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 去掉末尾点</span></span><br><span class="line">    cout &lt;&lt; len - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 计算到p的空格数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=p;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span>) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 三个空格，就是第四个单词</span></span><br><span class="line">    cout &lt;&lt; cnt + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题五十三：P1308.NOIP.普及组.统计单词数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313194625624.png" alt="P1308.NOIP.普及组.统计单词数"></p><h3 id="代码详解-53">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转成小写</span></span><br><span class="line"><span class="function">string <span class="title">to_lower</span><span class="params">(string x)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 先将字符全部转换成小写</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=(<span class="type">int</span>)x.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="comment">// 如果是大写字母，就转成小写</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isupper</span>(x[i])) &#123;</span><br><span class="line">x[i] = <span class="built_in">char</span>(<span class="built_in">tolower</span>(x[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string w, s;</span><br><span class="line"><span class="built_in">getline</span>(cin, w);</span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理大小写</span></span><br><span class="line">w = <span class="built_in">to_lower</span>(w);</span><br><span class="line">s = <span class="built_in">to_lower</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单词而不是字符串，需要给单词前后加上空格</span></span><br><span class="line">w = <span class="string">&quot; &quot;</span> + w + <span class="string">&quot; &quot;</span>;</span><br><span class="line">s = <span class="string">&quot; &quot;</span> + s + <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否找到</span></span><br><span class="line"><span class="type">int</span> i = s.<span class="built_in">find</span>(w);</span><br><span class="line"><span class="comment">// 找不到直接-1</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">-1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> f = i;<span class="comment">// 第一次出现的位置</span></span><br><span class="line"><span class="comment">// 有多个单词，用while循环逐个找</span></span><br><span class="line"><span class="keyword">while</span>(i != <span class="number">-1</span>)&#123;</span><br><span class="line">cnt++;<span class="comment">// 找到一个就+1</span></span><br><span class="line">i = s.<span class="built_in">find</span>(w, i + <span class="number">1</span>);  <span class="comment">// 在i位置找到，就+1位置往后继续找</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; cnt &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题五十四：1113.隐藏的最大整数</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313194709727.png" alt="1113.隐藏的最大整数"></p><h3 id="代码详解-54">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连续字符，初始空字符串</span></span><br><span class="line">string num, maxn = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=(<span class="type">int</span>)s.<span class="built_in">length</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 判断是否是数字</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i])) &#123;</span><br><span class="line">        num += s[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 把连续的数字字符比较后赋值给maxn</span></span><br><span class="line">        <span class="keyword">if</span> (num.<span class="built_in">length</span>() &gt; maxn.<span class="built_in">length</span>()) maxn = num;</span><br><span class="line">        <span class="comment">// 清空</span></span><br><span class="line">        num = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出位置</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">find</span>(maxn) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><hr><h1>二十六、结构体概念入门</h1><h3 id="1-基本格式">1. 基本格式</h3><blockquote><p>结构体：即一组变量的聚合体，可以将非同类型的数据绑定成一体的这么个东西</p></blockquote><ul><li>结构体语法：</li></ul>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体类型创建，并对内部变量直接赋初始值</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span> &#123;</span><br><span class="line">   string name = <span class="string">&quot;王二狗&quot;</span>;</span><br><span class="line"><span class="type">int</span> age = <span class="number">15</span>;</span><br><span class="line"><span class="type">char</span> gender = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">float</span> weight = <span class="number">1.55</span>;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体变量：struct info a; </span></span><br><span class="line"><span class="comment">// 而struct可以省略，方便阅读，可以把info当成自定义类型</span></span><br><span class="line">info a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用结构体变量</span></span><br><span class="line">cout &lt;&lt; a.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a.age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a.gender &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a.weight &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a.flag &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化交给变量声明</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span> &#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> gender;</span><br><span class="line"><span class="type">float</span> weight;</span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以初始化&#123;&#125;</span></span><br><span class="line">info a = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化0，需要把string改为char name[20]，否则报错</span></span><br><span class="line">info a = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对标赋值</span></span><br><span class="line">info a = &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">1.38</span>, <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有一种结合在一起的写法</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span> &#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> gender;</span><br><span class="line"><span class="type">float</span> weight;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line">&#125; a = &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">1.38</span>, <span class="literal">true</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-数组">2. 数组</h3><blockquote><p>结构体数组：如果要实现多组结构体数组，和普通数据使用方法一样，结合结构体语法即可</p></blockquote><ul><li><p>数组语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">grade</span> &#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> gender;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 不省略struct，提高可读性</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">grade</span> s[<span class="number">3</span>] = &#123;&#123;<span class="string">&quot;张三&quot;</span>, <span class="number">15</span>, <span class="string">&#x27;A&#x27;</span>&#125;, &#123;<span class="string">&quot;李四&quot;</span>, <span class="number">14</span>, <span class="string">&#x27;B&#x27;</span>&#125;, &#123;<span class="string">&quot;王五&quot;</span>, <span class="number">13</span>, <span class="string">&#x27;A&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// 输出结构体数组第一条</span></span><br><span class="line">cout &lt;&lt; s[<span class="number">0</span>].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s[<span class="number">0</span>].age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s[<span class="number">0</span>].gender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1>习题五十五：P5744.培训</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313194833379.png" alt="P5744.培训"></p><h3 id="代码详解-55">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学员信息</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span> &#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 初始化结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span> stu[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; stu[i].name &gt;&gt; stu[i].age &gt;&gt; stu[i].score;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">// 年龄+1岁</span></span><br><span class="line">stu[i].age++;</span><br><span class="line"><span class="comment">// 分数+20%，但不大于600分</span></span><br><span class="line"><span class="keyword">if</span> (stu[i].score * <span class="number">1.2</span> &lt; <span class="number">600</span>) stu[i].score *= <span class="number">1.2</span>;</span><br><span class="line"><span class="keyword">else</span>  stu[i].score = <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout &lt;&lt; stu[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu[i].age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu[i].score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题五十六：P5740.最厉害的学生</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313194903389.png" alt="P5740.最厉害的学生"></p><h3 id="代码详解-56">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span> &#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> chi;</span><br><span class="line"><span class="type">int</span> mat;</span><br><span class="line"><span class="type">int</span> en;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span> stu[<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">cin &gt;&gt; stu[i].name &gt;&gt; stu[i].chi &gt;&gt; stu[i].mat &gt;&gt; stu[i].en;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最大值</span></span><br><span class="line"><span class="type">int</span> maxn = <span class="number">-1</span>, index = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">// 总分</span></span><br><span class="line"><span class="type">int</span> total = stu[i].chi + stu[i].mat + stu[i].en;</span><br><span class="line"><span class="keyword">if</span> (maxn &lt; total) maxn = total, index = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出最厉害</span></span><br><span class="line">cout &lt;&lt; stu[index].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu[index].chi &lt;&lt; <span class="string">&quot; &quot;</span> </span><br><span class="line"> &lt;&lt; stu[index].mat &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu[index].en;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>习题五十七：1953. 新生舞会</h1><p><img src="/2025/03/13/C++%E7%AB%9E%E8%B5%9B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250313194933321.png" alt="1953. 新生舞会"></p><h3 id="代码详解-57">* 代码详解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span> &#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> uid[<span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span> stu[<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 性别判断</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">getSex</span><span class="params">(<span class="type">char</span> str[], <span class="type">int</span> mark)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">if</span> (mark == <span class="number">0</span>) <span class="built_in">strcpy</span>(tmp, stu[j].uid);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">strcpy</span>(tmp, stu[j].name);</span><br><span class="line"><span class="comment">// 对比所有uid或name</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(str, tmp) == <span class="number">0</span>) &#123;</span><br><span class="line">sex = stu[j].sex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// isD</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">isD</span><span class="params">(<span class="type">char</span> s[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[<span class="number">0</span>])) <span class="keyword">return</span> <span class="built_in">getSex</span>(s, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">getSex</span>(s, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">cin &gt;&gt; stu[i].name &gt;&gt; stu[i].uid &gt;&gt; stu[i].sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 询问</span></span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="type">char</span> s1[<span class="number">20</span>], s2[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="comment">// 读入一组询问</span></span><br><span class="line">cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断性别</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isD</span>(s1) == <span class="built_in">isD</span>(s2)) cout &lt;&lt; <span class="string">&quot;N&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Y&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语法基础</title>
      <link href="/2025/03/03/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/03/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、此为知识点总结内容；</li><li>2、如有使用或转载请注明出处；</li><li>3、如有不足，欢迎批评指正；</li></ul><hr><h3 id="导言须知">* 导言须知</h3><ul><li><p><strong>Python方向：</strong></p><ul><li><p>知识点主要面向小学<strong>5年级+<strong>的少儿编程Python课程，适用于各类</strong>竞赛</strong>；</p></li><li><p>课程比较适合理工科父母的<strong>亲子互动</strong>，教培机构老师<strong>备课参考</strong>；</p></li></ul></li><li><p><strong>课程知识点：</strong></p><ul><li>1.基础篇：输入输出函数、变量及数据类型、条件判断、循环、函数、字符串、列表元祖字典、常用库；</li><li><strong>x.数学篇：独立课程，采用OJ系统刷题教学；</strong></li><li>2.绘图篇：Turtle海龟绘图库，基础教学在系统课程里；</li><li><strong>y.绘图扩展篇：Turtle海龟绘图库的提高扩展部分，面向竞赛的独立课程；</strong></li><li>以上部分，止步于小学5年级+，OJ刷题如需要更高年级或能力则会特别说明；</li><li><strong>z.项目篇：独立课程，每个项目一个课程，常用软件和游戏开发课程（这部分在另一篇文章上）；</strong></li></ul></li></ul><p>​  特别说明：竞赛中理论部分会有大量<strong>本课程无法涉及</strong>的部分：比如进制问题（二进制、八进制等）、数据结构和算法部分（二叉树、排序、链表等）以及初等数学、离散、图论等<strong>均没有</strong>。</p><p>​</p><h3 id="软件使用">* 软件使用</h3><p>​<strong>官网网站：<a href="https://codewith.mu/">https://codewith.mu/</a></strong><br>​**安装方式：**默认安装即可，但无法更改路径，所以一般在C:\Users\Administrator目录下，如果路径是中文，可能会出现无法打开的问题。需要自行搜索解决，或进入管理员模式下重新安装。</p><img src="/2025/03/03/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20230628104437744.png" alt="image-20230628104437744" style="zoom:80%;margin:0 0 0 20px;"><p>​<strong>注意：以下内容比较超纲，但都是小概率才会出现，如果不幸出现，请一定要排除万难去解决问题。</strong></p><p>​解决方案1：按照这个英文这个提示，去查询，有视频、文章去专门解决Qt platform plugin启动的问题。但我不推荐，而且比较难；</p><p>​解决方案2：卸载掉后，进入win10 管理员帐户下（Administrator），直接安装即可。怎么进入管理员帐户，直接搜索即可。在管理员帐户安装好后，切换到自己的帐户还找不到安装程序，直接去管理员目录下复制到桌面一个快捷方式即可。</p><h3 id="3-print-输出函数">3. print()输出函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向控制台输出一行字：Hello, Python</span></span><br><span class="line"><span class="comment"># 注意1：括号和引号(单双均可)必须是英文状态下的</span></span><br><span class="line"><span class="comment"># 注意2：#号开头表示注释，它的作用是解释，并不会执行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, Python!&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="一、变量">一、变量</h2><h3 id="1-变量的声明">1. 变量的声明</h3><ul><li>什么是变量？变量就是一个可以存储东西的存储罐，具体特性如下：<ul><li>每次存储罐里只能存一次东西，也就是说再次存储时，上一次存储的东西会被<strong>替换</strong>掉；</li><li>声明变量就好比你拿出了一个存储罐，实际上是在内存里开辟了一个空间；</li><li>不管是现实中的存储罐还是内存开一个空间，多了防止混淆就需要贴个标签，<strong>命个名</strong>；</li><li>我们来通过一张图来理解一下，这个声明概念：</li></ul></li></ul><img src="/2025/03/03/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2-1.png" style="zoom:80%;margin:0 0 0 30px;"><blockquote><p>那么，如何通过编程来实现变量的声明呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明一个变量</span></span><br><span class="line"><span class="comment"># 注意1：= 不是等于的意思，是赋值的意思</span></span><br><span class="line"><span class="comment"># 注意2：阅读代码从右边向左边阅读，意为：将数字123赋值给变量a</span></span><br><span class="line">a = <span class="number">123</span></span><br><span class="line"><span class="comment"># 输出a</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># a变量被替换</span></span><br><span class="line">a = <span class="number">456</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="2-命名的规则">2. 命名的规则</h3><ul><li><p>从 <strong>a=123</strong> 的例子中，a是变量名，但变量的名字有什么要求？需要注意哪些规则？能乱起吗？</p><ul><li><p>变量名可以包含<strong>字母、数字、下划线</strong>，但数字不能在变量名首位；</p><ul><li>abc（合法）、a123（合法）、_xyz（合法）、123a（不合法）</li></ul></li><li><p>Python中的关键字无法作为变量名，编辑器会提示，比如：def、class，使用会直接报错；</p></li><li><p>Python中的英文是区分大小写的，大写的A和小写的a不是一种东西；</p></li></ul></li><li><p>为了让变量名更加的有可读性，比如：你的名字，当然，中文变量名也是支持的，但基本不用；</p><ul><li>第一种经典命名方式，驼峰式：yourName，或YourName，我比较喜欢前者；</li><li>第二种经典命名方式：蛇形式：your_name，用的也比较多；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关键字错误命名</span></span><br><span class="line"><span class="keyword">def</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">class</span> = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">class</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文命名</span></span><br><span class="line">你的名字 = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(你的名字)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驼峰式</span></span><br><span class="line">yourName = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(yourName)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蛇形式</span></span><br><span class="line">your_name = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(your_name)</span><br></pre></td></tr></table></figure><h3 id="3-Shell模式">3. Shell模式</h3><blockquote><p>有时我们要对一些结果进行快速获取，可以直接使用命令行窗口直接输出：Shell模式；</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a = 123</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a</span></span><br><span class="line">123</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b = 456</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(b)</span></span><br><span class="line">456</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果在主程序本身就已经运行赋值了，直接在命令行输出也是可以的</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; c</span></span><br><span class="line">798</span><br></pre></td></tr></table></figure><hr><h2 id="二、算术">二、算术</h2><h3 id="1-算术运算符">1. 算术运算符</h3><blockquote><p>虽说叫做四则运算，但其实运算符往往不止加减乘除这四种：</p></blockquote><table><thead><tr><th style="text-align:center">运算</th><th style="text-align:center">符号</th><th style="text-align:center">格式</th></tr></thead><tbody><tr><td style="text-align:center">加</td><td style="text-align:center">+</td><td style="text-align:center">1 + 1</td></tr><tr><td style="text-align:center">减</td><td style="text-align:center">-</td><td style="text-align:center">2 - 1</td></tr><tr><td style="text-align:center">乘</td><td style="text-align:center">*</td><td style="text-align:center">3 * 4</td></tr><tr><td style="text-align:center">除</td><td style="text-align:center">/</td><td style="text-align:center">6 / 2</td></tr><tr><td style="text-align:center">整除</td><td style="text-align:center">//</td><td style="text-align:center">9 // 7</td></tr><tr><td style="text-align:center">求余</td><td style="text-align:center">%</td><td style="text-align:center">10 % 8</td></tr><tr><td style="text-align:center">幂</td><td style="text-align:center">**</td><td style="text-align:center">2**3</td></tr></tbody></table><ul><li>在编程语法中乘法 <strong>x</strong> 用 ***** 号代替，除法 <strong>÷</strong> 用 <strong>/</strong> 代替。</li><li>除法 <strong>/</strong> 是保留小数的，而整除 <strong>//</strong> 是直接取整的。</li><li>幂运算中：2**3，2为底数，3为指数，换算成乘法为：2 x 2 x 2。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加减乘除，在末尾Ctrl+D复制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> - <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> * <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> / <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> // <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> % <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> ** <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量进行四则运算</span></span><br><span class="line">a = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="2-变量自运算">2. 变量自运算</h3><ul><li>所以自运算，就是让变量本身的值累计运算，比如累加、累减等；<ul><li><strong>+=</strong> 累加，a += 1，相当于a = a + 1;</li><li><strong>-=</strong> 累减，a -= 1，相当于a = a -1;</li><li>其它雷同，不再赘述，加减最为常用；<strong>Python不支持a++语法</strong>；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 累加</span></span><br><span class="line">a+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="3-温度转换器">3. 温度转换器</h3><ul><li>王二狗被夏天40度的高温热晕了，对于科学爱好者的他还是要计算一下华氏度是多少？</li><li>转换公式为：F = 9 ÷ 5 × C + 32</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 温度转换</span></span><br><span class="line">c = <span class="number">40</span></span><br><span class="line">f = <span class="number">9</span> / <span class="number">5</span> * c + <span class="number">32</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><hr><h2 id="三、转义">三、转义</h2><h3 id="1-print-不详解">1. print()不详解</h3><blockquote><p>给命令行输出一段内容，可以使用 <strong>print()</strong> 函数；</p></blockquote><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:center">函数名</td><td style="text-align:left">print(*objects, sep=’ ‘, end=’\n’, file=sys.stdout)</td></tr><tr><td style="text-align:center">参数</td><td style="text-align:left">objects --表示输出的对象。输出多个对象时，需要用 , （逗号）分隔。</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">sep – 用来间隔多个对象。</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">end – 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符。</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">file – 要写入的文件对象。</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">无</td></tr></tbody></table><ul><li>如果只是单纯在控制台输出一些内容，只需要传递一个参数即可：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单的数值输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><ul><li>输出的内容可以<strong>多条数据</strong>，默认空格隔开显示，可以通过参数更改：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以输出多个数据，默认英文逗号隔开</span></span><br><span class="line"><span class="comment"># 输出时，默认会以空格来隔开显示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过sep参数改变显示时间隔符号</span></span><br><span class="line"><span class="comment"># 注意，参数的值需要通过双引号包含，因为它不是数值而是字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>, sep=<span class="string">&quot;-&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>默认情况下，print输出会<strong>自动换行</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下一个print输出后会自动换行</span></span><br><span class="line"><span class="comment"># 可以通过end参数改变这一特性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>, end=<span class="string">&quot;|||&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">456</span>)</span><br></pre></td></tr></table></figure><h3 id="2-转义字符">2. 转义字符</h3><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>\\</td><td>反斜杠</td></tr><tr><td>\’</td><td>单引号</td></tr><tr><td>\&quot;</td><td>双引号</td></tr><tr><td>\n</td><td>换行符</td></tr></tbody></table><ul><li>以上是比较常用的转义字符，更多的可以搜索查询，暂时我们也用不到；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转义字符输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\&#x27;\&quot;\n123&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只使用一个print输出以下图形</span></span><br><span class="line">***</span><br><span class="line">  ***</span><br><span class="line">    ***</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;***\n  ***\n    ***&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="四、类型">四、类型</h2><h3 id="1-数据类型">1. 数据类型</h3><table><thead><tr><th style="text-align:center">类型名</th><th style="text-align:center">转换函数</th><th style="text-align:center">说明及示例</th></tr></thead><tbody><tr><td style="text-align:center">整型</td><td style="text-align:center">int()</td><td style="text-align:center">将合法的字符数值或浮点数转换成整数</td></tr><tr><td style="text-align:center">字符串型</td><td style="text-align:center">str()</td><td style="text-align:center">将任意内容转换成字符串型</td></tr><tr><td style="text-align:center">浮点型</td><td style="text-align:center">float()</td><td style="text-align:center">将合法的字符数值或整数转换成浮点数</td></tr><tr><td style="text-align:center">布尔型</td><td style="text-align:center">bool()</td><td style="text-align:center">将任意内容转换成布尔型</td></tr></tbody></table><blockquote><p>为了判断一个变量或内容，可以采用**type()**函数；</p></blockquote><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:center">语法</th></tr></thead><tbody><tr><td style="text-align:center">函数名</td><td style="text-align:center">type(object)</td></tr><tr><td style="text-align:center">参数</td><td style="text-align:center">object --表现需要获取类型的内容</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:center">返回一个&lt;class ‘类型符号’&gt;</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用type()获取四种类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10.15</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;王二狗&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><ul><li><p>布尔类型只有两个值：<strong>True</strong>和<strong>False</strong>，注意首字母是大写的；</p></li><li><p>布尔类型一般用于<strong>条件表达式</strong>的判断，这在后续课程会使用；</p></li><li><p>类型转换，有一些条件：</p><ul><li>转换成整数时，包含字母或其它字符都不能转成整数，只有纯数字才可以</li><li>浮点数同上；</li><li>布尔型只能转换成True和False；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类型转换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;123&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">123.34</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">&quot;123&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(<span class="number">123</span>)))</span><br></pre></td></tr></table></figure><ul><li>将整型转换成字符串时，无法直观的检查出，所以需要用type()判断；</li></ul><h3 id="2-字符串拼接">2. 字符串拼接</h3><blockquote><p>字符串的连接可以使用 <strong>+号</strong> 或者 <strong>逗号</strong> ，具体如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串拼接，+号紧凑，逗号松散</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我&quot;</span>+<span class="string">&quot;和&quot;</span>+<span class="string">&quot;你&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我&quot;</span> + <span class="string">&quot;和&quot;</span> + <span class="string">&quot;你&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我&quot;</span>,<span class="string">&quot;和&quot;</span>,<span class="string">&quot;你&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量同理</span></span><br><span class="line">a = <span class="string">&quot;我&quot;</span></span><br><span class="line">b = <span class="string">&quot;你&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure><h3 id="3-输出格式">3. 输出格式</h3><table><thead><tr><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td>%d</td><td>格式化整数，会直接取整</td></tr><tr><td>%f</td><td>格式化浮点数，可以设置保留的小数点</td></tr><tr><td>%s</td><td>字符串</td></tr></tbody></table><ul><li>格式化语法如下：<ul><li>“字符串文字%d %s %f”%(3, “嗯嗯”, 3.1415926)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %符的格式化处理</span></span><br><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line">age = <span class="number">3.33</span></span><br><span class="line">weight = <span class="number">1.23456</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字叫%s，今年%d岁了，身高%.2f&quot;</span>%(name, age, weight))</span><br></pre></td></tr></table></figure><ul><li>%5.2f：可以理解为5个占位符，不足的用空格占用；</li><li>%10s和%-10s：可以理解为占用10个位置，占用前面和占用后面的区别；</li></ul><hr><h2 id="五、输入">五、输入</h2><h3 id="1-input-不详解">1. input()不详解</h3><blockquote><p>如果想让用户在键盘输入内容，可以使用 <strong>input()</strong> 函数；</p></blockquote><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:center">函数名</td><td style="text-align:left">input([prompt])</td></tr><tr><td style="text-align:center">参数</td><td style="text-align:left">prompt --表示提示输入，[]表示它是可选状态。</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">返回提示内容</td></tr></tbody></table><ul><li>如果提示输入为空，则用户会黑灯瞎火的输入，除非本身知道；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在这里写上你的代码 :-)</span></span><br><span class="line"><span class="comment"># 无任何提示的输入，运行时控制台的光标闪烁</span></span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以将输入的内容，赋值给一个变量</span></span><br><span class="line"><span class="comment"># input()输入的内容，不管字面上是什么都是字符串类型</span></span><br><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure><ul><li>如果加上提示内容，将很好的提示用户正确的输入;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有提示的输入</span></span><br><span class="line">b = <span class="built_in">input</span>(<span class="string">&quot;请输入一个数，1-9之间：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h3 id="2-输入转换运算">2. 输入转换运算</h3><blockquote><p>通过输入的两个数值进行运算，必须进行转换；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过输入进行数值计算</span></span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个数，1-9之间：&quot;</span>))</span><br><span class="line">d = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个数，1-9之间：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d+%d=%d&quot;</span>%(c, d, c+d))</span><br></pre></td></tr></table></figure><ul><li>最后，再做个经典的图形输出，输入指定图形元素（比如*）得到如下的图：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出三角图形，这里的*号是字符乘法，复制显示数量</span></span><br><span class="line">e = <span class="built_in">input</span>(<span class="string">&quot;请输入任意字符：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>,e*<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(e*<span class="number">5</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="六、布尔类型">六、布尔类型</h2><h3 id="1-关系运算符">1. 关系运算符</h3><blockquote><p>布尔类型的值，是专门用于各种<strong>表达式</strong>的判断，表达式的<strong>运算符</strong>如下：</p></blockquote><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">关系运算符</th><th>表达式返回值</th></tr></thead><tbody><tr><td style="text-align:center">大于</td><td style="text-align:center">&gt;</td><td>成立范围True（6 &gt; 5），否则为False（6 &gt; 7）</td></tr><tr><td style="text-align:center">小于</td><td style="text-align:center">&lt;</td><td>成立返回True（6 &lt; 8），否则为False（6 &lt; 5）</td></tr><tr><td style="text-align:center">等于</td><td style="text-align:center">==</td><td>成立返回True（6 == 6），否则为False（6 == 7）</td></tr><tr><td style="text-align:center">大于等于</td><td style="text-align:center">&gt;=</td><td>成立返回True（7 &gt;= 6），否则为False（7 &gt;= 8）</td></tr><tr><td style="text-align:center">小于等于</td><td style="text-align:center">&lt;=</td><td>成立返回True（6 &lt;= 6），否则为False（6 &lt;= 5）</td></tr><tr><td style="text-align:center">不等于</td><td style="text-align:center">!=</td><td>成立返回True（6 != 5），否则为False（6 != 6）</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表达式返回值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &gt; <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &gt; <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &lt; <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &lt; <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> == <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> == <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &gt;= <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> &lt;= <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> != <span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="2-逻辑运算符">2. 逻辑运算符</h3><blockquote><p>除了关系运算符之外，还有一种叫做逻辑运算符，具体如下：</p></blockquote><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">逻辑运算符</th><th>表达式返回值</th></tr></thead><tbody><tr><td style="text-align:center">and</td><td style="text-align:center">x and y</td><td>x和y同时为True时，返回True，否则返回False</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">x or y</td><td>x和y只要其中之一为True，返回True，否则返回False</td></tr><tr><td style="text-align:center">not</td><td style="text-align:center">not x</td><td>x为True时，结果为False，否则为True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &gt; <span class="number">6</span> <span class="keyword">and</span> <span class="number">5</span> &gt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> &gt; <span class="number">6</span> <span class="keyword">and</span> <span class="number">5</span> &gt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &gt; <span class="number">6</span> <span class="keyword">or</span> <span class="number">5</span> &gt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &gt; <span class="number">6</span> <span class="keyword">or</span> <span class="number">5</span> &lt; <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="number">5</span> &gt; <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="七、条件判断">七、条件判断</h2><h3 id="1-if…单一条件">1. if…单一条件</h3><blockquote><p>假设你一周七天中只有周一才能穿新衣服，那么就需要 <strong>if语句</strong> 中 <strong>单一条件判断</strong>：</p></blockquote><p><img src="/2025/03/03/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250314001729340.png" alt="条件判断流程图"></p><ul><li>单一条件判断的<strong>if语句</strong>格式如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if 条件判断:</span><br><span class="line">条件满足时，执行</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1：判断的数值需要转换为整数再判断</span></span><br><span class="line"><span class="comment"># 注意2：a == 1由于习惯或方式，可以加上括号(a == 1)</span></span><br><span class="line"><span class="comment"># 注意3：if条件判断内的语句，需要用Tab键缩进才能识别</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入今天星期几，1-7之间：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天穿新衣&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-if…else分支">2. if…else分支</h3><blockquote><p>单一if语句比较高冷，如果未满足条件，ta就不理你了；而<strong>else分支</strong>则可爱许多；</p></blockquote><p><img src="/2025/03/03/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250314001825294.png" alt="分支判断流程图"></p><ul><li>else分支条件判断的<strong>if语句</strong>格式如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件判断:</span><br><span class="line">条件满足时，执行</span><br><span class="line">else:</span><br><span class="line">条件不满足时，执行</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1：else后面有冒号，表示结束</span></span><br><span class="line"><span class="comment"># 注意2：else需要和if在同一垂直位对齐，否则报错</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天穿新衣&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天无法穿新衣&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-日常穿衣表">3. 日常穿衣表</h3><blockquote><p>夏天到了，汗渍很多，每日换洗：1，3，5穿A款，2，4，6穿B款，星期日放假不出门；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入今天星期几，1-6之间：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">1</span> <span class="keyword">or</span> a == <span class="number">3</span> <span class="keyword">or</span> a == <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;穿A款&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;穿B款&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="八、多重嵌套">八、多重嵌套</h2><h3 id="1-elif…多重分支">1. elif…多重分支</h3><blockquote><p>年龄决定一个人当前的状态，8岁到80岁，你都在干什么？此时需要<strong>elif多重分支</strong>：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if 条件判断:</span><br><span class="line">条件满足时，执行</span><br><span class="line">elif 条件判断:</span><br><span class="line">条件满足时，执行</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8-25之间：求学阶段</span></span><br><span class="line"><span class="comment"># 26-60之间：工作阶段</span></span><br><span class="line"><span class="comment"># 大于60：退休阶段</span></span><br><span class="line">a= <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄：8-80之间：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">8</span> <span class="keyword">and</span> a &lt;=<span class="number">25</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我在上学！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a &gt;=<span class="number">26</span> <span class="keyword">and</span> a&lt;=<span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我在工作！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a &gt; <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我在退休！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这个年龄，尚未被统计！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-if…嵌套判断">2. if…嵌套判断</h3><blockquote><p>难道大于60岁就真的可以退休了吗？真实情况显然不是这样的，我们还需要具体判断：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">elif</span> a &gt; <span class="number">60</span>:</span><br><span class="line">    <span class="comment"># 如果爷爷有大伯，二伯和我爸</span></span><br><span class="line">    <span class="comment"># 且，我还有姐姐和弟弟</span></span><br><span class="line">    <span class="comment"># 再且，大伯、二伯每家还有三个</span></span><br><span class="line">    <span class="comment"># 为了存压岁钱，也无法退休呢！</span></span><br><span class="line">    b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入子孙的数量，1-9之间：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> b &gt;= <span class="number">7</span> <span class="keyword">and</span> b &lt;=<span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退休后打两份工&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> b &gt;= <span class="number">4</span> <span class="keyword">and</span> b &lt;=<span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退休后打一份工&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> b &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退休中！&quot;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><h2 id="九、switch-for循环">九、switch.for循环</h2><h3 id="1-for…有限循环">1. for…有限循环</h3><blockquote><p>王二狗考试得了双百，就得意的要求买台switch，还保证一周只玩三小时，但妈妈让他自己存；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 集合:</span><br><span class="line">执行语句</span><br></pre></td></tr></table></figure><p><img src="/2025/03/03/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/image-20250314001908130.png" alt="循环流程图"></p><h3 id="2-rang-数值生成">2. rang()数值生成</h3><blockquote><p>想要实现一个月1-30号的自增循环，那需要使用**rang()**函数；</p></blockquote><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:center">函数名</td><td style="text-align:left">range(start[,end,step])</td></tr><tr><td style="text-align:center">参数</td><td style="text-align:left"><strong>start</strong>：计数从start开始，<strong>默认是从0开始</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><strong>end</strong>：计数到end结束，但是不包括end</td></tr><tr><td style="text-align:center"></td><td style="text-align:left"><strong>step</strong>：每次自增的数值，默认1</td></tr><tr><td style="text-align:center">返回值</td><td style="text-align:left">无</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1：for...in...语法核心</span></span><br><span class="line"><span class="comment"># 注意2：i是变量，随便定义，每次获取自增后的值</span></span><br><span class="line"><span class="comment"># 注意3：range(1,30)实际上循环到1-29</span></span><br><span class="line"><span class="comment"># 注意4：range第三个参数，设置2体会下</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>+<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果range只传入一个参数，默认从0开始到29</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>此时，我们再回到上方的流程图，可能会略懂一二了；</li><li>但是，我们怎么才能知道循环体内的语句在重复执行呢？</li><li>这时，可以采用<strong>调试</strong>中的<strong>步进</strong>或<strong>步入</strong>来逐条执行语句；</li></ul><h3 id="3-终于可以存钱了吗？">3. 终于可以存钱了吗？</h3><blockquote><p>使用以上学到的循环语句，我们存一个月的钱，对自己狠一点，每天存的钱比前一天多一元；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存一个月的钱</span></span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>+<span class="number">1</span>):</span><br><span class="line">    t += i;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一个月存了%d元！&quot;</span>%(t))</span><br></pre></td></tr></table></figure><hr><h2 id="十、退出">十、退出</h2><h3 id="1-break退出整体">1. break退出整体</h3><blockquote><p>过不下去啦，每天要存的金额越来越多，还是放弃吧，王二狗说道；此时，我们需要使用<strong>break终止循环</strong>；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 坚持到第3天，就要放弃</span></span><br><span class="line">    <span class="comment"># 注意：如果将if放在print后面，将执行第3天</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>break语句</strong>的作用：是退出整个循环；</li></ul><h3 id="2-continue退出当前">2. continue退出当前</h3><blockquote><p>逃避的加锁禁锢着王二狗的内心，悟道自律才能获得自由；决定：偶数天存钱，奇数天放纵；理由：循序渐进，慢慢来；此时，我们就需要使用<strong>continue终止当前循环</strong>；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>+<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 先来简单的，假设第三天不存</span></span><br><span class="line">    <span class="comment"># 注意：continue必须在执行语句前面执行，否则白搭</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>计算偶数的方法：当天日期除以2的余数为0即为偶数，反之奇数；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>+<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#判断为奇数就退出当前循环</span></span><br><span class="line">    <span class="comment">#去自增执行下一次循环</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="十一、while循环">十一、while循环</h2><h3 id="1-while常规循环">1. while常规循环</h3><blockquote><p>常规的 <strong>while循环</strong> 和 <strong>for循环</strong> 基本一致，只不过while更加灵活一点；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化变量1</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="comment"># 如果变量小于等于30，则执行循环体</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">30</span>:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br><span class="line">    <span class="comment"># 当执行完毕，自增1</span></span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>while循环除了普通的循环，还有不少独有的做法，比如<strong>死循环</strong>；</li></ul><h3 id="2-while无限循环">2. while无限循环</h3><blockquote><p>王二狗家有一头拉磨的驴，ta的主人告诉ta，只要每天一直往前走，就会有精彩的未来；此时，我们就需要使用<strong>while中的无限循环</strong>，让其无穷无尽的执行下去；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只要判断表达式永远为True，则不停的执行</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br></pre></td></tr></table></figure><ul><li>请编写一只怀揣梦想、坚持不懈、勇往直前、誓不罢休的驴；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;驴：请问，到达路的尽头了吗？^.^&quot;</span>)</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;请告诉驴，到达与否，回车或输入yes：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> a != <span class="string">&quot;yes&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;旁白：还没到，请继续向前！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;驴：加油！加油！努力！奋斗！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;旁白：已经到了！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;驴：真好，我累了，要睡了！❤&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="十二、列表入门">十二、列表入门</h2><h3 id="1-九宫格解析">1. 九宫格解析</h3><blockquote><p><strong>列表</strong>其实就是一种可以同时<strong>存放多个数据的变量</strong>，就好比如下图存放了9条数据，但只有一个变量；</p></blockquote><table border="1" style="inline-block;width:60%;">    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">101</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">102</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">103</td>    </tr>    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">201</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">202</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">203</td>    </tr>    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">301</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">302</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">303</td>    </tr></table><ul><li>分析上图的九宫格，王二狗家住在第三行第二列的位置上；整体看上去像个容器，例如超市存包的柜子；</li><li>我们如何设置它，获取它，使用它？那就必须是用今天的列表变量；列表声明方式为：<ul><li><strong>列表变量 = [ 数据1, 数据2, 数据3… ]</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1，array是列表变量名，是随便定义的</span></span><br><span class="line"><span class="comment"># 注意2：列表的值外围是一个中括号，里面的每个数据可以称为元素</span></span><br><span class="line"><span class="comment"># 注意3：每个元素，用逗号隔开，元素太多，可以换行</span></span><br><span class="line"><span class="comment"># 注意4：元素遵循数据类型，如果是字符串元素，要加引号</span></span><br><span class="line"><span class="comment"># 注意5：其它语言一般称为数组，如果我不小心说数组啥啥啥的，等同</span></span><br><span class="line">array = [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>,</span><br><span class="line">         <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>,</span><br><span class="line">         <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出列表，带上中括号原封不动的输出</span></span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># 看看什么类型，&lt;class &#x27;list&#x27;&gt;列表类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(array))</span><br></pre></td></tr></table></figure><h3 id="2-理解下标">2. 理解下标</h3><blockquote><p>什么是<strong>下标</strong>？即：列表中元素对应的<strong>位置编号</strong>，或称为：<strong>索引</strong>，默认从0开始计算；</p></blockquote><table border="1" style="inline-block;width:60%;">    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">0</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">1</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">2</td>    </tr>    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">3</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">4</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">5</td>    </tr>    <tr>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">6</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">7</td>        <td style="border:2px solid #333;height:120px;font-weight:bold;text-align:center;">8</td>    </tr></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取王二狗的家</span></span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">7</span>])</span><br></pre></td></tr></table></figure><ul><li><p>除了直接通过下标获取指定位置的元素值，还有一些其它语法：</p><ul><li><p>为了避免混淆，我不把下标0说成第1个位置（我会说下标为0的元素）；</p></li><li><p>array[0]：获取下标为0的位置的元素，这里获取的是101；</p></li><li><p>array[2:4]：获取下标为2到3的元素，这里获取的是[103, 201]，返回一个新list；</p></li><li><p>array[2:]：获取下标为2到end的元素，这里获取的是[103…303]，返回一个新list；</p></li><li><p>array[:2]：获取下标为start到1的元素，这里获取的是[101,102]，返回一个新list；</p></li><li><p>array[-2]：获取倒数第2个元素，这里获取的是[302]；</p></li><li><p>array[-5:-2]：获取倒数第5到倒数第3的元素，这里获取的是：[202, 203, 301]，返回一个新list；</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(array[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(array[:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(array[-<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(array[-<span class="number">5</span>:-<span class="number">2</span>])</span><br></pre></td></tr></table></figure><hr><h2 id="十三、列表操作">十三、列表操作</h2><h3 id="1-点语法启蒙">1. 点语法启蒙</h3><blockquote><p>列表是一种<strong>容器类</strong>的结构，势必会给予它较为丰富的操作，比如点语法的操作方法：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表变量.操作方法()</span><br></pre></td></tr></table></figure><ul><li><strong>.操作方法()<strong>可以理解为列表变量下的</strong>特有函数</strong>；</li></ul><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.append(o)</td><td>在列表末尾添加o元素</td></tr><tr><td style="text-align:left">.insert(i, o)</td><td>在指定位置插入o元素</td></tr><tr><td style="text-align:left">.remove(o)</td><td>移除匹配到o元素的第一个</td></tr><tr><td style="text-align:left">.pop(i)</td><td>取出列表中最后一个元素，或指定元素；然后返回该元素的值</td></tr><tr><td style="text-align:left">.extend(s)</td><td>在列表尾部合并另一个列表</td></tr></tbody></table><h3 id="2-增删改查">2. 增删改查</h3><blockquote><p>通过自身语法以及点语法，我们可以对列表进行一系列的 <strong>增删改查</strong> 操作：</p></blockquote><ul><li>先创建一个空列表，以便于我们操作：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空的列表</span></span><br><span class="line">array = []</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(array))</span><br></pre></td></tr></table></figure><ul><li>.append()方法添加元素，会在列表尾部添加一条</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.append()方法添加元素</span></span><br><span class="line">array.append(<span class="number">101</span>)</span><br><span class="line">array.append(<span class="number">102</span>)</span><br><span class="line">array.append(<span class="number">103</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.insert()方法在某一处插入元素，用下标来指定位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.insert()在指定下标位置插入元素</span></span><br><span class="line">array.insert(<span class="number">0</span>, <span class="number">109</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.remove()方法删除元素，会找到第一个匹配值的元素删除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.remove()方法删除元素</span></span><br><span class="line"><span class="comment"># 注意：参数需填写元素的值</span></span><br><span class="line">array.remove(<span class="number">102</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.pop()方法取出元素，使用下标定位，再返回这个元素值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.pop()方法删除元素</span></span><br><span class="line"><span class="comment"># 注意1：这个删除严格意义上是取出返回的意思</span></span><br><span class="line"><span class="comment"># 注意2：参数需填写元素的下标</span></span><br><span class="line"><span class="built_in">print</span>(array.pop(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>列表修改的方法，直接通过下标定位赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用[]方式修改元素，传递下标位置即可</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="number">1001</span></span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.extend()方法参数是要合并的列表，添加到尾部</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.extend()方法合并列表</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1002</span>, <span class="number">1003</span>]</span><br><span class="line">array.extend(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><hr><h2 id="十四、超好用的列表工具箱">十四、超好用的列表工具箱</h2><h3 id="1-工具方法">1. 工具方法</h3><blockquote><p>包括获取列表元素的数量、获取匹配的下标位置、排序、复制、清空等；</p></blockquote><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.count(o)</td><td>统计元素o在列表中出现的次数</td></tr><tr><td>.index(o)</td><td>获取元素o在列表中第一次出现的位置</td></tr><tr><td>.reverse()</td><td>反转列表</td></tr><tr><td>.sort(reverse=True)</td><td>排序，默认从小到大排序，设置reverse参数为True则反之</td></tr><tr><td>.copy()</td><td>复制列表</td></tr><tr><td>.clear()</td><td>清空列表</td></tr></tbody></table><ul><li>依旧先创建一个九宫格列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据不同演示的方法会做出修改</span></span><br><span class="line">array = [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>,</span><br><span class="line">         <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>,</span><br><span class="line">         <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">102</span>, <span class="number">102</span>]</span><br></pre></td></tr></table></figure><ul><li>.count()方法获取指定元素出现的次数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .count()方法</span></span><br><span class="line"><span class="built_in">print</span>(array.count(<span class="number">102</span>))</span><br></pre></td></tr></table></figure><ul><li>.index()方法获取指定元素第一次出现的位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .index()方法</span></span><br><span class="line"><span class="built_in">print</span>(array.index(<span class="number">102</span>))</span><br></pre></td></tr></table></figure><ul><li>.reverse()方法可以让原列表进行翻转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .reverse()方法，反转原列表</span></span><br><span class="line"><span class="comment"># 注意：这个方法本身不返回反转，而是让原列表反转</span></span><br><span class="line">array.reverse()</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.sort()方法可以让原列表进行排序，参数可以设置大小排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .sort()方法，默认从小到大排序原列表</span></span><br><span class="line"><span class="comment"># 参数reverse=True|False，从大到小和反之</span></span><br><span class="line">array.sort()</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line">array.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><ul><li>.copy()方法，是拷贝一份独立的列表赋值给新变量</li><li>.clear()方法，清空列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .copy()方法，将列表复制出来交给新变量</span></span><br><span class="line"><span class="comment"># 注意：赋值和拷贝的区别，本课不深究</span></span><br><span class="line"><span class="built_in">list</span> = array.copy()</span><br><span class="line"><span class="comment">#list = array</span></span><br><span class="line">array.pop()</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># .clear()方法，清空</span></span><br><span class="line"><span class="built_in">list</span>.clear()</span><br></pre></td></tr></table></figure><h3 id="2-工具函数">2. 工具函数</h3><blockquote><p>这里推荐三个极其常用的函数，来快速获取想要的对应数据：<strong>min()</strong>、<strong>max()</strong>、<strong>len()</strong>；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># len()函数，获取长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(array))</span><br><span class="line"><span class="comment"># min()函数，获取最小值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(array))</span><br><span class="line"><span class="comment"># max()函数，获取最大值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(array))</span><br></pre></td></tr></table></figure><h3 id="3-del语句和遍历">3. del语句和遍历</h3><blockquote><p>还有一个删除列表的快捷语句 <strong>del</strong> 和 <strong>循环列表</strong> 数据的遍历方法；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除某一个元素或多个元素</span></span><br><span class="line"><span class="keyword">del</span> array[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">del</span> array[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="comment"># 删除整个列表</span></span><br><span class="line"><span class="comment"># 注意：这里不是清空，是直接把array变量给抹除了</span></span><br><span class="line"><span class="keyword">del</span> array</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历列表，两种方法，1.没必要 2.不错</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)):</span><br><span class="line">    <span class="built_in">print</span>(array[i], end=<span class="string">&quot;|&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="十五、元祖">十五、元祖</h2><h3 id="1-只读的列表">1. 只读的列表</h3><blockquote><p>元祖相对于列表，有两个最主要的特性：1. 数据集用圆括号包含；2. 数据只读，无法修改删除；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1：创建时()包含，但输出还用[]</span></span><br><span class="line"><span class="comment"># 注意2：无法修改删除，array[0] = 1001 将报错</span></span><br><span class="line"><span class="comment"># 注意3：type()后得知元祖是tuple[tʌpl]类型</span></span><br><span class="line"><span class="comment"># 注意4：如果创建的元祖只有一条元素，需要补上逗号</span></span><br><span class="line">array = (<span class="number">101</span>, <span class="number">102</span>, <span class="number">203</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(array))</span><br></pre></td></tr></table></figure><h3 id="2-元祖遍历">2. 元祖遍历</h3><blockquote><p>遍历和列表一致；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元祖遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="十六、字典">十六、字典</h2><h3 id="1-一一配对的概念">1. 一一配对的概念</h3><blockquote><p>字典的核心就是：<strong>配对</strong>！即：<strong>键值对(key:value)</strong>！就是将列表中的下标索引进行自定义设计；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典创建的语法，通过 花括号 以及 key:value 的方式构成：</span></span><br><span class="line">字典变量 = &#123;键:值, 键:值, ...&#125;</span><br></pre></td></tr></table></figure><ul><li>创建空的字典，有两种方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建空字典，有两种方式1. &#123;&#125; 2. dict()</span></span><br><span class="line"><span class="comment">#array = &#123;&#125;</span></span><br><span class="line">array = <span class="built_in">dict</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(array))</span><br></pre></td></tr></table></figure><ul><li>创建带数据的字典：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典，键值配对</span></span><br><span class="line"><span class="comment"># 注意1：冒号左边称为：键(key)，右边称为：值(value)</span></span><br><span class="line"><span class="comment"># 注意2：依然遵循数据类型规则，key或value，数字不加引号，字符加</span></span><br><span class="line"><span class="comment"># 注意3：通过key找value，依然用中括号，但字符串不能省略引号</span></span><br><span class="line">array = &#123;</span><br><span class="line">            <span class="string">&quot;A1&quot;</span>:<span class="string">&quot;张三&quot;</span>, </span><br><span class="line">            <span class="string">&quot;A2&quot;</span>:<span class="string">&quot;李四&quot;</span>, </span><br><span class="line">            <span class="string">&quot;A3&quot;</span>:<span class="string">&quot;王二狗&quot;</span>,</span><br><span class="line">            <span class="string">&quot;A4&quot;</span>:<span class="string">&quot;马六&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="built_in">print</span>(array[<span class="string">&quot;A3&quot;</span>])</span><br></pre></td></tr></table></figure><h3 id="2-字典的操作">2. 字典的操作</h3><blockquote><p>和列表一样，字典也需要进行增删查改的操作；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典新增</span></span><br><span class="line">array[<span class="string">&quot;A5&quot;</span>] = <span class="string">&quot;王五&quot;</span></span><br><span class="line"><span class="comment"># 字典删除，和列表一样</span></span><br><span class="line"><span class="comment">#del array[&quot;A4&quot;]</span></span><br><span class="line">array.pop(<span class="string">&quot;A4&quot;</span>)</span><br><span class="line"><span class="comment"># 字典修改</span></span><br><span class="line">array[<span class="string">&quot;A1&quot;</span>] = <span class="string">&quot;张四&quot;</span> </span><br></pre></td></tr></table></figure><ul><li><p>和列表一样，字典也具有**.copy()<strong>和</strong>.clear()<strong>方法以及</strong>min()**、**max()<strong>和</strong>len()**等函数，这里不再赘述；</p></li><li><p>字典也有自己独有的方法，方便更好的操作：</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.get(key, default)</td><td>返回指定key的值，如果不存在则返回default默认值</td></tr><tr><td>.keys()</td><td>返回字典中所有的key组成的列表，可再通过遍历输出</td></tr><tr><td>.values()</td><td>同上</td></tr><tr><td>.items()</td><td>返回字典中所有的(key,value)组成的元祖，再通过遍历输出</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取指定key的value，如果不在，返回指定值</span></span><br><span class="line"><span class="built_in">print</span>(array.get(<span class="string">&quot;A3&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(array.get(<span class="string">&quot;A9&quot;</span>, <span class="string">&quot;不存在&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过.keys()返回所有key</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array.keys():</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过.values()返回所有values</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array.values():</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 通过.items()返回所有(key,value)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array.items():</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="十七、学籍卡系统-二维查">十七、学籍卡系统.二维查</h2><h3 id="1-二维的概念">1. 二维的概念</h3><blockquote><p>什么是一维？就是普通列表，一行数据；什么是二维？就是多行数据，表格式数据；</p></blockquote><ul><li>我们首先要创建一个空的字典，用来存储每个学员的学籍卡；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化区</span></span><br><span class="line">s = &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>但是，为了测试查询方便，先填充三条学员数据，具体形式如下表格：</li></ul><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">姓名</th><th style="text-align:center">性别</th><th style="text-align:center">年龄</th></tr></thead><tbody><tr><td style="text-align:center">A1</td><td style="text-align:center">张三</td><td style="text-align:center">男</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">A2</td><td style="text-align:center">李四</td><td style="text-align:center">女</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">A3</td><td style="text-align:center">王二狗</td><td style="text-align:center">男</td><td style="text-align:center">12</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># s是字典</span></span><br><span class="line"><span class="comment"># 注意1：整个学籍卡用字典来表示，这样直接可以通过key快速查找</span></span><br><span class="line"><span class="comment"># 注意2：但是value不是普通的数据，它是一个列表，是一串数据</span></span><br><span class="line"><span class="comment"># 注意3：对于字典里的value，本身可以通过s[&quot;A3&quot;]访问，但得到是list类型</span></span><br><span class="line"><span class="comment"># 注意4：对于list列表类型，再通过[]号获取：s[&quot;A3&quot;][0]得到&quot;王二狗&quot;</span></span><br><span class="line"><span class="comment"># 注意5：两个中括号，可以理解为嵌套list，或list里的list，这就是二维</span></span><br><span class="line">s = &#123;</span><br><span class="line">        <span class="string">&quot;A1&quot;</span>:[<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">12</span>], </span><br><span class="line">        <span class="string">&quot;A2&quot;</span>:[<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">11</span>],</span><br><span class="line">        <span class="string">&quot;A3&quot;</span>:[<span class="string">&quot;王二狗&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">12</span>],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-while-Ture">2. while Ture</h3><blockquote><p>对于一款小软件，只有在用户主动关闭才能退出，我们通过死循环来实现；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 选项开启</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入要操作的选项：\n1.查看学籍 2.添加学籍 3.修改学籍 4.删除学籍\n请选择，1-4之间：&quot;</span>))</span><br><span class="line">    <span class="comment"># 判断选项</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;show&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;add&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;update&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;delete&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>用二维查询的方法建立表格，实现数据的展现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标头</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-3s %-7s %-5s %-5s&quot;</span>%(<span class="string">&quot;编号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;年龄&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历学籍卡</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.items():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-4s %-8s %-5s %-5s&quot;</span>%(i[<span class="number">0</span>], i[<span class="number">1</span>][<span class="number">0</span>], i[<span class="number">1</span>][<span class="number">1</span>], i[<span class="number">1</span>][<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><hr><h2 id="十八、学籍卡系统-增删改">十八、学籍卡系统.增删改</h2><h3 id="1-增加数据">1. 增加数据</h3><blockquote><p>通过input()录入来写入数据到字典中，key是编号，而value是列表；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 信息录入</span></span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;请输入编号：&quot;</span>)</span><br><span class="line">b = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">c = <span class="built_in">input</span>(<span class="string">&quot;请输入性别：&quot;</span>)</span><br><span class="line">d = <span class="built_in">input</span>(<span class="string">&quot;请输入年龄：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入s</span></span><br><span class="line">s[a] = [b,c,d]</span><br><span class="line"></span><br><span class="line"><span class="comment">#空一行</span></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="2-修改数据">2. 修改数据</h3><blockquote><p>查询数据，通过input()获取编号后，录入修改的内容，再更新；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询并修改</span></span><br><span class="line">f = <span class="built_in">input</span>(<span class="string">&quot;请输入编号：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> s.get(f, <span class="string">&quot;no&quot;</span>) != <span class="string">&quot;no&quot;</span>:</span><br><span class="line">    b = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br><span class="line">    c = <span class="built_in">input</span>(<span class="string">&quot;请输入性别：&quot;</span>)</span><br><span class="line">    d = <span class="built_in">input</span>(<span class="string">&quot;请输入年龄：&quot;</span>)</span><br><span class="line">    s[f] = [b, c, d]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;编号有误！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#空一行</span></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="3-删除数据">3. 删除数据</h3><blockquote><p>查询数据，通过input()获取编号后，直接del即可；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询并删除</span></span><br><span class="line">f = <span class="built_in">input</span>(<span class="string">&quot;请输入编号：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> s.get(f, <span class="string">&quot;no&quot;</span>) != <span class="string">&quot;no&quot;</span>:</span><br><span class="line">    <span class="keyword">del</span> s[f]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;编号有误！&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#空一行</span></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><hr><h2 id="十九、重新回顾字符串类型">十九、重新回顾字符串类型</h2><h3 id="1-常规功能合集">1. 常规功能合集</h3><blockquote><p>字符串本身有一些功能，有些之前运用过，这里总结如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 功能一：判断字符串类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;Hello&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">123</span>))     <span class="comment"># 转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能二：连接字符段片段</span></span><br><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;python!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a + b)        <span class="comment"># 没有空格</span></span><br><span class="line"><span class="built_in">print</span>(a, b)         <span class="comment"># 包含一个空格 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能三：重复字符</span></span><br><span class="line">c = <span class="string">&quot;^.^ &quot;</span></span><br><span class="line"><span class="built_in">print</span>(c * <span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-类似列表的特性">2. 类似列表的特性</h3><blockquote><p>如果把字符串每个字符当成列表的元素，将会有很多处理方案：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字符串理解为列表</span></span><br><span class="line"><span class="comment"># 注意：但是列表中方法和工具不一定都能用</span></span><br><span class="line">d = <span class="string">&quot;abcdefghijklmn&quot;</span></span><br><span class="line"><span class="comment"># 输入b，那么下标位置为1</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(d[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(d[<span class="number">2</span>:<span class="number">8</span>])</span><br><span class="line"><span class="comment"># 第三个冒号是step步长</span></span><br><span class="line"><span class="built_in">print</span>(d[<span class="number">2</span>:<span class="number">8</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 可以用工具函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串也可以像列表一样遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;|&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-格式化数据">3. 格式化数据</h3><blockquote><p>之前已经学习过%d、%f、%s等格式化输出的方式，再看一些变种：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式化输出</span></span><br><span class="line"><span class="comment">#t = &quot;hello&quot;</span></span><br><span class="line"><span class="comment">#s = t + &quot;python&quot;</span></span><br><span class="line">t = <span class="string">&quot;hello%s&quot;</span></span><br><span class="line">s = t%<span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;我叫%s，今年%d岁，身高%.2f米&quot;</span></span><br><span class="line">y = x%(<span class="string">&quot;王二狗&quot;</span>,<span class="number">10</span>,<span class="number">1.45</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><hr><h2 id="二十、超好用的字符串工具箱">二十、超好用的字符串工具箱</h2><h3 id="1-判断方法">1. 判断方法</h3><blockquote><p>字符串有一些用于判断数据的工具函数：成立返回True，失败返回False</p></blockquote><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.isnumeric()、.isdigit()</td><td>判断字符串是否只包含了数字</td></tr><tr><td>.isalpha()</td><td>判断字符串是否只包含了字母</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断是否只包含数字</span></span><br><span class="line">a = <span class="string">&quot;123&quot;</span></span><br><span class="line">b = <span class="string">&quot;123abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.isdigit())</span><br><span class="line"><span class="built_in">print</span>(b.isdigit())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否只包含字母</span></span><br><span class="line">c = <span class="string">&quot;abc&quot;</span></span><br><span class="line">d = <span class="string">&quot;abc123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c.isalpha())</span><br><span class="line"><span class="built_in">print</span>(d.isalpha())</span><br></pre></td></tr></table></figure><h3 id="2-转换方法">2. 转换方法</h3><blockquote><p>字符串有一些用于转换数据的工具函数：直接返回转换后的数据</p></blockquote><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.lower()</td><td>将英文的字符串全部转换为小写</td></tr><tr><td>.upper()</td><td>同上，大写</td></tr><tr><td>.format()</td><td>格式化</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大小写转换，格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abCdeFghiJklmn&quot;</span>.upper())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abCdeFghiJklmn&quot;</span>.lower())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&#123;&#125;45&#123;&#125;6&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&#123;1&#125;45&#123;0&#125;6&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-查询处理方法">3. 查询处理方法</h3><blockquote><p>字符串有一些用于查询处理数据的工具函数：返回新的字符串</p></blockquote><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.find(s[, start, end])</td><td>判断是否包含子字符串，返回下标索引，否则返回-1</td></tr><tr><td></td><td>start：开始下标索引位置，默认0，end：结束下标索引位置，默认为字符串长度</td></tr><tr><td></td><td></td></tr><tr><td>.replace(s1, s2[,max])</td><td>将字符串中的s1替换成s2后生成新的字符串</td></tr><tr><td></td><td>s1：将要被替换的字符串  s2：新字符串  max：替换次数</td></tr><tr><td></td><td></td></tr><tr><td>.split(s, n)</td><td>将字符串切割后形成一个字符串列表</td></tr><tr><td></td><td>s：分隔符  n：切割次数  默认值：-1，即切割所有</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询、替换、切割</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abCdeFghiJklmn&quot;</span>.find(<span class="string">&quot;d&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abCdeFghiJklmn&quot;</span>.find(<span class="string">&quot;d&quot;</span>, <span class="number">6</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1abCd1eFgh1iJk1lmn&quot;</span>.replace(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1abCd1eFgh1iJk1lmn&quot;</span>.replace(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1abCd1eFgh1iJk1lmn&quot;</span>.split(<span class="string">&quot;1&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1abCd1eFgh1iJk1lmn&quot;</span>.split(<span class="string">&quot;1&quot;</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="二十一、随机库">二十一、随机库</h2><h3 id="1-引入库概念">1. 引入库概念</h3><blockquote><p>Python有大量的功能需要借助丰富的库来实现，随机库 <strong>random</strong> 是其中一种：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入随机库</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机1-100之间</span></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>,<span class="number">100</span>))</span><br></pre></td></tr></table></figure><ul><li>一般来说，库的原名太长，我们可以设置一个别名方便调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置库的别名</span></span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> r</span><br><span class="line"><span class="built_in">print</span>(r.randint(<span class="number">1</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure><h3 id="2-常用的随机方法">2. 常用的随机方法</h3><blockquote><p>除了上面的 <strong>.randint()</strong> 整数随机，还有其它的一系列随机数：</p></blockquote><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.randint(s, e)</td><td>返回s~e之间的一个随机整数</td></tr><tr><td>.uniform(s, e)</td><td>返回s~e之间的一个随机小数</td></tr><tr><td>.randrange(s, e, p)</td><td>同第一条，p是步长</td></tr><tr><td>.choice(s)</td><td>从元祖中随机获取一个元素</td></tr><tr><td>.shuffle(s)</td><td>打乱原列表</td></tr><tr><td>.sample(s, n)</td><td>随机从s列表中取出n个元素组成新列表</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机小数</span></span><br><span class="line"><span class="built_in">print</span>(r.uniform(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机规律整数</span></span><br><span class="line"><span class="comment"># 随机奇数，偶数</span></span><br><span class="line"><span class="built_in">print</span>(r.randrange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(r.randrange(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从元祖数据中随机产生一个</span></span><br><span class="line"><span class="built_in">print</span>(r.choice((<span class="string">&quot;ScratchJR&quot;</span>, <span class="string">&quot;Scratch&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打乱原列表</span></span><br><span class="line">array = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>]</span><br><span class="line">r.shuffle(array)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机取出元素组成新列表</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(r.sample(<span class="built_in">list</span>, <span class="number">3</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="二十二、小海龟起航-turtle库">二十二、小海龟起航.turtle库</h2><h3 id="1-turtle库入门">1. turtle库入门</h3><blockquote><p><strong>turtle</strong>，即：海龟；和随机库一样，是Python中一种 <strong>绘图工具</strong> 库，也叫 <strong>海龟库</strong>：</p></blockquote><ul><li>先用最少的代码，画上一笔，注意会有图形界面：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入海龟库</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画一笔，向前(默认右)画100步(单位：像素)</span></span><br><span class="line">t.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.forward(d)</td><td>面朝当前方向前进d个距离，d单位是像素</td></tr><tr><td>.back(d)</td><td>同上，后退</td></tr></tbody></table><ul><li>绘图结束时，需要使用.done()方法来暂停绘制：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂停画笔绘制，不会关闭窗口，等待用户交互（比如关闭窗口）</span></span><br><span class="line"><span class="comment"># 注意1：在某些其它Python开发工具，没有.done()会自动关闭窗口</span></span><br><span class="line"><span class="comment"># 注意2：而.done()方法放在绘图代码结尾，保证窗口悬停</span></span><br><span class="line"><span class="comment"># 注意3：既然.done()是暂停的意思，后面再绘图便无效</span></span><br><span class="line"><span class="comment"># 注意4：本开发工具Mu Editor不会自动关闭，学习时不必每次调用</span></span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure><h3 id="2-角度的概念">2. 角度的概念</h3><blockquote><p>在绘制图形时，有时需要转向，那么就需要调整前进箭头的指向（角度）即可</p></blockquote><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.left(a)</td><td>设置当前角度左转a度，a的取值0-360</td></tr><tr><td>.right(d)</td><td>同上，右转</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拐个弯，向左拐90度</span></span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line"><span class="comment"># 再向前100步</span></span><br><span class="line">t.forward(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 拐个弯，向右拐90度</span></span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line"><span class="comment"># 再向前100步，或后退</span></span><br><span class="line"><span class="comment">#t.forward(100)</span></span><br><span class="line">t.back(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="3-设置箭头造型">3. 设置箭头造型</h3><blockquote><p>为什么叫小海龟呢？因为箭头是可以设置为小海龟的，当然，默认是箭头</p></blockquote><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.shape()</td><td>设置箭头的造型：arrow、turtle、circle、square、triangle、classic</td></tr><tr><td>.hideturtle()</td><td>设置绘图结束后，隐藏箭头</td></tr><tr><td>.showturtle()</td><td>同上，相反</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置箭头造型</span></span><br><span class="line">t.shape(<span class="string">&quot;turtle&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏海龟</span></span><br><span class="line">t.hideturtle()</span><br></pre></td></tr></table></figure><hr><h2 id="二十三、正方形-三角形-多边形-圆">二十三、正方形.三角形.多边形.圆</h2><h3 id="1-正方形-三角形">1. 正方形.三角形</h3><blockquote><p>通过计算总度数（360）除以要绘制的边数，就可以得到正方形和三角形的绘制角度</p></blockquote><ul><li>正方形四条边，那么角度为：360 / 4 = 90°</li><li>三角形三条边，那么角度为：360 / 3 = 120°</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制正方形</span></span><br><span class="line"><span class="comment"># 注意1：forward可以简写fd，back=&gt;bk</span></span><br><span class="line"><span class="comment"># 注意2：right可以简写rt，left=&gt;lt</span></span><br><span class="line"><span class="comment"># 注意3：推荐初学者用完全单词，不然都不知道啥意思</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    t.forward(<span class="number">200</span>)</span><br><span class="line">    t.right(<span class="number">90</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 绘制三角形</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    t.forward(<span class="number">200</span>)</span><br><span class="line">    t.left(<span class="number">120</span>)</span><br></pre></td></tr></table></figure><h3 id="2-多边形绘制">2. 多边形绘制</h3><blockquote><p>我们需要通过计算多边形的角度来获取要拐弯的角度，具体如下：</p></blockquote><ul><li>turtle库提供了类似input()函数的输入方法：</li></ul><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.numinput(t, p)</td><td>弹窗输入框，t为标题文本，p为描述信息</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取多边形的边</span></span><br><span class="line">n = t.numinput(<span class="string">&quot;OK&quot;</span>, <span class="string">&quot;请输入多边形的边数：&quot;</span>)</span><br><span class="line"><span class="comment"># 绘制多边形</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(n)):</span><br><span class="line">    t.forward(<span class="number">200</span>)</span><br><span class="line">    t.right(<span class="number">360</span> / n)</span><br></pre></td></tr></table></figure><h3 id="3-圆">3. 圆</h3><blockquote><p>圆的绘制，有自己单独的方法：<strong>.circle</strong>()</p></blockquote><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.circle(r[, extent=None, steps=None])</td><td>绘制一个圆，r是半径，可负数</td></tr><tr><td></td><td>e可选，弧形的角度</td></tr><tr><td></td><td>s可选，多边形边数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制圆</span></span><br><span class="line">t.circle(<span class="number">150</span>)</span><br><span class="line">t.circle(-<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 半圆</span></span><br><span class="line">t.circle(<span class="number">150</span>, <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多边形</span></span><br><span class="line">t.circle(<span class="number">150</span>, <span class="number">180</span>, <span class="number">7</span>)</span><br><span class="line">t.circle(<span class="number">150</span>, <span class="number">360</span>, <span class="number">7</span>)</span><br><span class="line">t.circle(<span class="number">150</span>, steps=<span class="number">7</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="二十四、画笔设置">二十四、画笔设置</h2><h3 id="1-画笔设置">1. 画笔设置</h3><blockquote><p>海龟库绘制时的线条是可以设置的：包括颜色、粗细以及绘制速度等</p></blockquote><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.speed(s)</td><td>设置绘图的速度：0或大于10表示瞬间绘制，1~10之间，1最慢，10最快</td></tr><tr><td>.color(p[,f])</td><td>设置所有颜色，包括笔头和绘制的线条，以及填充</td></tr><tr><td>.pencolor©</td><td>设置画笔颜色，绘制的线条以及笔头的轮廓部分</td></tr><tr><td>.pensize(s)</td><td>设置画笔粗细，填入数字，最小值1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置为海龟</span></span><br><span class="line">t.shape(<span class="string">&quot;turtle&quot;</span>)</span><br><span class="line"><span class="comment"># 设置颜色，只有一个参数，则设置所有，如有第二参数，为填充</span></span><br><span class="line">t.color(<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line"><span class="comment"># 设置画笔颜色，箭头只会轮廓被覆盖</span></span><br><span class="line">t.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line"><span class="comment"># 设置画笔粗细</span></span><br><span class="line">t.pensize(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 设置绘制速度</span></span><br><span class="line">t.speed(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>设置颜色的方式推荐两种：英文单词和RGB代码<ul><li>英文单词比如：black、red、blue等；</li><li>RGB代码比如：(0, 0, 0)、(255, 255,255)，范围0~255之间；</li></ul></li></ul><table><thead><tr><th style="text-align:center">红</th><th style="text-align:center">黑</th><th style="text-align:center">白</th><th style="text-align:center">黄</th></tr></thead><tbody><tr><td style="text-align:center"><strong>red</strong></td><td style="text-align:center"><strong>black</strong></td><td style="text-align:center"><strong>white</strong></td><td style="text-align:center"><strong>yellow</strong></td></tr><tr><td style="text-align:center"><strong>绿</strong></td><td style="text-align:center"><strong>粉</strong></td><td style="text-align:center"><strong>橙</strong></td><td style="text-align:center"><strong>紫</strong></td></tr><tr><td style="text-align:center"><strong>green</strong></td><td style="text-align:center"><strong>pink</strong></td><td style="text-align:center"><strong>orange</strong></td><td style="text-align:center"><strong>purple</strong></td></tr></tbody></table><img src="/2025/03/03/Python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/20200409120154580.png" alt="tkcolorchart" style="zoom:80%;"><ul><li>图片来源于：<a href="https://blog.csdn.net/piglite/article/details/105407429">https://blog.csdn.net/piglite/article/details/105407429</a></li></ul><h3 id="2-填充设置">2. 填充设置</h3><blockquote><p>如何在绘制好的封闭区域进行填充呢？比如一个圆</p></blockquote><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.fillcolor©</td><td>设置填充的颜色</td></tr><tr><td>.begin_fill()</td><td>在需要填充的封闭区域前设置</td></tr><tr><td>.end_fill()</td><td>在需要填充的封闭区域后设置</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制一个圆</span></span><br><span class="line"><span class="comment"># 默认会填充会依附于t.color()</span></span><br><span class="line"><span class="comment"># 单独设置使用t.fillcolor()</span></span><br><span class="line">t.fillcolor(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">t.begin_fill()  <span class="comment"># 开始填充</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br><span class="line">t.end_fill()    <span class="comment"># 结束填充</span></span><br></pre></td></tr></table></figure><h3 id="3-窗体设置">3. 窗体设置</h3><blockquote><p>绘图部分都设置完毕了，那么运行的窗体、背景啥的能修改吗？</p></blockquote><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>.setup(w, h)</td><td>设置窗体的大小</td></tr><tr><td>.title(s)</td><td>设置窗体的标题</td></tr><tr><td>.Screen().bgcolor©</td><td>设置屏幕的背景颜色</td></tr><tr><td>.bgcolor©</td><td>同上</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置窗体大小</span></span><br><span class="line">t.setup(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line"><span class="comment"># 设置窗体标题</span></span><br><span class="line">t.title(<span class="string">&quot;品味穿搭&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取屏幕设置变量</span></span><br><span class="line">s = t.Screen()</span><br><span class="line"><span class="comment"># 背景颜色</span></span><br><span class="line">s.bgcolor(<span class="string">&quot;pink&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="二十五、同心圆-坐标与定位">二十五、同心圆.坐标与定位</h2><h3 id="1-坐标的概念">1. 坐标的概念</h3><blockquote><p>默认情况下，海龟绘图在屏幕中间开始。我们可以设置对应坐标让其在指定位置绘制</p></blockquote><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.goto(x, y)</td><td>设置海龟箭头的位置，默认0, 0</td></tr><tr><td>.setx(n)</td><td>设置海龟箭头的x位置</td></tr><tr><td>.sety(n)</td><td>设置海龟箭头的y位置</td></tr><tr><td>.home()</td><td>回到初始位置，并设置初始方向</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将坐标定位至x:0,y:0</span></span><br><span class="line">t.goto(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将坐标y轴上移100位置</span></span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">100</span>)<span class="comment"># 或t.sety(100)</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><ul><li>虽然，我们绘制出了同心圆，但暴露了两个问题：<ul><li>问题一：同心圆没有按照中心点绘制；</li><li>问题二：当绘制第二个圆时，笔头划过路过的区域，并没有抬笔；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照中心点绘制圆</span></span><br><span class="line">n = t.numinput(<span class="string">&quot;同心圆&quot;</span>, <span class="string">&quot;请输入外围圆的半径：&quot;</span>)</span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">0</span> - n)</span><br><span class="line">t.circle(n)</span><br><span class="line"></span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">0</span> - n / <span class="number">2</span>)</span><br><span class="line">t.circle(n / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="2-抬笔与落笔">2. 抬笔与落笔</h3><blockquote><p>每次当笔头要位移绘制时，我们需要将笔头抬起，然后再绘制处再落笔即可</p></blockquote><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.penup()</td><td>设置画笔抬起，此时无法绘制内容，简写为：.up()</td></tr><tr><td>.pendown()</td><td>设置画笔落下，此时可以绘制内容，简写为：.down()</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 起始先抬笔</span></span><br><span class="line">t.penup()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制时落笔</span></span><br><span class="line">t.pendown()</span><br></pre></td></tr></table></figure><hr><h2 id="二十六、点和文字">二十六、点和文字</h2><h3 id="1-坐标设计">1. 坐标设计</h3><blockquote><p>想设计一个x轴和y轴的坐标图形，先利用已有的知识绘制出来</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x轴</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">50</span>,<span class="number">0</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.forward(<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y轴</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, -<span class="number">50</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.forward(<span class="number">250</span>)</span><br></pre></td></tr></table></figure><ul><li>上面的代码有两个问题：<ul><li>我们可以通过设置箭头的方向，而不是left拐弯；</li><li>箭头只能保持一个，需要使用驻留的功能保持；</li></ul></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.seth(a)</td><td>设置海龟箭头方向，</td></tr><tr><td></td><td>右（0）、上（90）、左（180）、下（-90， 270）</td></tr><tr><td>.stamp()</td><td>将箭头标记驻留在绘制结尾</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># y轴</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, -<span class="number">50</span>)</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.forward(<span class="number">250</span>)</span><br><span class="line">t.stamp()</span><br></pre></td></tr></table></figure><h3 id="2-点和文字">2. 点和文字</h3><blockquote><p>在坐标（0, 0）位置设置一个中心点，并在点写上文字</p></blockquote><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>.dot(s[, c])</td><td>绘制一个点，s为大小，c可选颜色</td></tr><tr><td>.write(s[, move, align, font])</td><td>写入文字，s是文字，move是true或false，设置画笔初始位置</td></tr><tr><td></td><td>align是方向：left（左）、right（右）、center（中）</td></tr><tr><td></td><td>font是字体：“宋体”, 20, “bold”，字体是本机的字体，20是字体大小</td></tr><tr><td></td><td>bold是加粗，另外选项：noraml（正常）、italic（倾斜）</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x轴</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">50</span>,<span class="number">0</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.forward(<span class="number">250</span>)</span><br><span class="line">t.stamp()</span><br><span class="line">t.write(<span class="string">&quot;x&quot;</span>, align=<span class="string">&quot;left&quot;</span>, font=(<span class="string">&quot;宋体&quot;</span>, <span class="number">12</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># y轴</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, -<span class="number">50</span>)</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.forward(<span class="number">250</span>)</span><br><span class="line">t.stamp()</span><br><span class="line">t.write(<span class="string">&quot;y&quot;</span>, align=<span class="string">&quot;right&quot;</span>, font=(<span class="string">&quot;宋体&quot;</span>, <span class="number">12</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中心点</span></span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">t.dot(<span class="number">10</span>)</span><br><span class="line">t.write(<span class="string">&quot;(0,0)&quot;</span>, align=<span class="string">&quot;left&quot;</span>, font=(<span class="string">&quot;宋体&quot;</span>, <span class="number">12</span>, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏箭头</span></span><br><span class="line">t.hideturtle()</span><br></pre></td></tr></table></figure><hr><h2 id="二十七、函数">二十七、函数</h2><h3 id="1-函数的概念">1. 函数的概念</h3><blockquote><p>我们这里所说的函数有两个意思：<strong>系统内置函数</strong>和<strong>自定义函数</strong></p></blockquote><ul><li>具体区别如下：<ul><li>系统内置函数：之前学习的print()、input()等 <strong>固定英文+括号</strong> 的语法格式，并有独有的效果；</li><li>自定义函数：今天即将要学习的自己创建的 <strong>自定义英文+括号</strong> 的语法格式，效果是自己的创意和算法；</li><li>那么，先看一个需求：我要在屏幕左上、左下、右上、右下绘制四个圆：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入海龟库</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加速</span></span><br><span class="line">t.speed(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抬笔</span></span><br><span class="line">t.penup()</span><br><span class="line"><span class="comment"># 去左上角</span></span><br><span class="line">t.goto(-<span class="number">150</span>, <span class="number">150</span>)</span><br><span class="line"><span class="comment"># 落笔</span></span><br><span class="line">t.pendown()</span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抬笔</span></span><br><span class="line">t.penup()</span><br><span class="line"><span class="comment"># 去右上角</span></span><br><span class="line">t.goto(<span class="number">150</span>, <span class="number">150</span>)</span><br><span class="line"><span class="comment"># 落笔</span></span><br><span class="line">t.pendown()</span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抬笔</span></span><br><span class="line">t.penup()</span><br><span class="line"><span class="comment"># 去左下角</span></span><br><span class="line">t.goto(-<span class="number">150</span>, -<span class="number">150</span>)</span><br><span class="line"><span class="comment"># 落笔</span></span><br><span class="line">t.pendown()</span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抬笔</span></span><br><span class="line">t.penup()</span><br><span class="line"><span class="comment"># 去右下角</span></span><br><span class="line">t.goto(<span class="number">150</span>, -<span class="number">150</span>)</span><br><span class="line"><span class="comment"># 落笔</span></span><br><span class="line">t.pendown()</span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">t.circle(<span class="number">100</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>从上面的例子中发现，非常简单的圆，只不过要重复四次，就花费了大量的代码片段，带来了很多问题：<ul><li>代码重复度高，可读性差，查询修改代码会错位；</li><li>后期维护困难，如需升级，重复的地方都要修改；</li></ul></li></ul><h3 id="2-无参数的函数">2. 无参数的函数</h3><blockquote><p>函数的括号部分是用于传递参数的，如果留空那就是无参数的函数</p></blockquote><ul><li>语法格式：<ul><li>创建函数：<strong>def</strong> 自定义函数名():</li><li>调用函数：自定义函数名()</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个函数，关键字def开头</span></span><br><span class="line"><span class="comment"># 注意1：和if语句一样，创建函数结尾加上冒号</span></span><br><span class="line"><span class="comment"># 注意2：和if语句一样，在函数体内必须有Tab键间隔</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是函数！&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用多次函数</span></span><br><span class="line">hello()</span><br><span class="line">hello()</span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><h3 id="3-有参数的函数">3. 有参数的函数</h3><blockquote><p>函数的括号部分是用于传递参数的，如果留空那就是无参数的函数</p></blockquote><ul><li>语法格式：<ul><li>创建函数：<strong>def</strong> 自定义函数名([参数1, 参数2, 参数3…]):</li><li>调用函数：自定义函数名()</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数的参数，本质上就是变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">name, age</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我的名字叫：%s, 年龄：%d&quot;</span>%(name, age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用传递不同参数</span></span><br><span class="line">info(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>)</span><br><span class="line">info(<span class="string">&quot;李四&quot;</span>, <span class="number">11</span>)</span><br><span class="line">info(<span class="string">&quot;王二狗&quot;</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure><ul><li>此时，我们再回到之前重复绘制圆的问题，用函数去解决它：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数，解决了后期升级和可读性问题</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dc</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="comment"># 抬笔</span></span><br><span class="line">    t.penup()</span><br><span class="line">    <span class="comment"># 去左上角</span></span><br><span class="line">    t.goto(x, y)</span><br><span class="line">    <span class="comment"># 落笔</span></span><br><span class="line">    t.pendown()</span><br><span class="line">    <span class="comment"># 画圆</span></span><br><span class="line">    t.circle(<span class="number">100</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 左上</span></span><br><span class="line">dc(-<span class="number">150</span>, <span class="number">150</span>)</span><br><span class="line"><span class="comment"># 右上</span></span><br><span class="line">dc(<span class="number">150</span>, <span class="number">150</span>)</span><br><span class="line"><span class="comment"># 左下</span></span><br><span class="line">dc(-<span class="number">150</span>, -<span class="number">150</span>)</span><br><span class="line"><span class="comment"># 右下</span></span><br><span class="line">dc(<span class="number">150</span>, -<span class="number">150</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="二十八、传参">二十八、传参</h2><h3 id="1-参数传递">1. 参数传递</h3><blockquote><p>除了无参和固定参数外，还有带默认值的参数以及不确定个数的参数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 带默认值的参数</span></span><br><span class="line"><span class="comment"># 注意1：不带默认值的参数是必须传递的，否则报错</span></span><br><span class="line"><span class="comment"># 注意2：带默认值的，如果传递了则覆盖默认值，反之则启用默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params"><span class="built_in">id</span>, name, gender=<span class="string">&quot;未知&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>, name, gender)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="comment">#info(1)     # 报错</span></span><br><span class="line"><span class="comment"># 启用默认值</span></span><br><span class="line">info(<span class="number">1</span>, <span class="string">&quot;王二狗&quot;</span>)</span><br><span class="line"><span class="comment"># 覆盖默认值</span></span><br><span class="line">info(<span class="number">1</span>, <span class="string">&quot;王二狗&quot;</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-不确定参数">2. 不确定参数</h3><blockquote><p>什么叫做不确定参数？传递参数的个数不确定，有多有少，从而设计的传参方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不固定的传参</span></span><br><span class="line"><span class="comment"># 需求说明：给同时进入大厅的客户发表问候</span></span><br><span class="line"><span class="comment"># 例如：1.张三，欢迎光临！2. 张三，李四，王二狗，欢迎光临！</span></span><br><span class="line"><span class="comment"># 注意1：传递的参数名和普通参数一样，自定义，args单词为多组参数的意思</span></span><br><span class="line"><span class="comment"># 注意2：参数左边有一个 * 号，表示我是不固定个数的传参</span></span><br><span class="line"><span class="comment"># 注意3：不管传递了多少个参数，都将形成一个 turple（元祖）类型，可遍历</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&quot;，&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;欢迎光临！&quot;</span>)</span><br><span class="line">    </span><br><span class="line">hello()    </span><br><span class="line">hello(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">hello(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王二狗&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>如果想要在不固定参数的使用上，再添加一个固定参数，那需要在左边传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">info, *args</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&quot;，&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(info)</span><br><span class="line">    </span><br><span class="line">hello(<span class="string">&quot;恭喜发财&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王二狗&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>在不固定传参中，还有一种**args的传参方式，原理和上面一样，只是采用了key:value模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># **args模式，特别适合key:value形式的数据传递</span></span><br><span class="line"><span class="comment"># 注意1：这个参数会返回一个 dict 字典数据</span></span><br><span class="line"><span class="comment"># 注意2：调用的时候，通过赋值传递即可</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">student</span>(<span class="params">**args</span>):</span><br><span class="line">    <span class="comment">#print(type(args))</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args.items():</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">student(<span class="built_in">id</span>=<span class="string">&quot;A1&quot;</span>, name=<span class="string">&quot;张三&quot;</span>, age=<span class="number">11</span>)</span><br><span class="line">student(<span class="built_in">id</span>=<span class="string">&quot;A2&quot;</span>, name=<span class="string">&quot;李四&quot;</span>, age=<span class="number">10</span>)</span><br><span class="line">student(<span class="built_in">id</span>=<span class="string">&quot;A3&quot;</span>, name=<span class="string">&quot;王二狗&quot;</span>, age=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="二十九、返回值">二十九、返回值</h2><h3 id="1-无返回值函数">1. 无返回值函数</h3><blockquote><p>之前我们自定义的函数都是无返回值的函数，即：调用函数后，直接执行所有代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无返回值函数</span></span><br><span class="line"><span class="comment"># 注意1：无返回值函数权限太高，自行执行需求，包括格式方法等</span></span><br><span class="line"><span class="comment"># 注意2：调用方只能调用和传参，没有任何其它权限</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%dx%d=%d&quot;</span>%(a,b,a*b))</span><br><span class="line">    </span><br><span class="line">hello(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">hello(<span class="number">30</span>,<span class="number">50</span>)</span><br></pre></td></tr></table></figure><ul><li>我们希望函数能给调用者更多的权限，让调用者控制更多的需求和流程，可采用返回值模式</li></ul><h3 id="2-有返回值函数">2. 有返回值函数</h3><blockquote><p>通过函数计算得到的结果后，不用去处理它的流程和显示格式，返回给调用方处理</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有返回值函数</span></span><br><span class="line"><span class="comment"># 注意1：通过return关键字将结果返回出来</span></span><br><span class="line"><span class="comment"># 注意2：由于函数是返回结果，直接调用是无任何输出的</span></span><br><span class="line"><span class="comment"># 注意3：可以把有返回值的函数当前变量处理，输出或判断等</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(info(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%dx%d=%d&quot;</span>%(<span class="number">10</span>,<span class="number">20</span>,info(<span class="number">10</span>,<span class="number">20</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对函数返回值进行判断</span></span><br><span class="line"><span class="keyword">if</span> info(<span class="number">10</span>,<span class="number">20</span>) &gt; <span class="number">150</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;结果正确！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="三十、全局与局部">三十、全局与局部</h2><h3 id="1-局部变量">1. 局部变量</h3><blockquote><p>有没有考虑过一个问题：函数体内声明的变量会不会被外部干涉？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的num 叫全局变量</span></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在函数体内声明变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="comment"># 这里的num 叫局部变量</span></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> x + y + num</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这里的返回值中，参与运算的是局部变量num    </span></span><br><span class="line"><span class="built_in">print</span>(hello(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># 注意：这里的num一定是全局 num，局部num出了函数体就看不见了</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><ul><li>归纳以下几点：<ul><li>局部变量只能在自己的函数体内参与操作，出了函数体就不认识了；</li><li>全局变量就是在函数体外部声明的变量，它无法改变函数体声明的同名变量；</li><li>局部变量比全局变量的优先度高，它会覆盖全局同名变量在函数体内的运行；</li><li>如果函数体内不存在同名的局部变量声明，那么函数体内的变量将由全局变量接管；</li></ul></li></ul><h3 id="2-全局变量">2. 全局变量</h3><blockquote><p>全局变量除了在函数体外直接定义，也可以在函数体内声明</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量解析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>():</span><br><span class="line">    <span class="comment"># 在函数体内创建一个全局变量</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    y = <span class="number">20</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 在未调用时，x无法访问</span></span><br><span class="line"><span class="comment">#print(x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在调用时，x可以访问，y是局部变量无法访问</span></span><br><span class="line">info()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment">#print(y)</span></span><br></pre></td></tr></table></figure><ul><li><p>归纳以下几点：</p><ul><li>全局函数在函数体需要定义为：global x，赋值需要单独进行，不可直接赋值；</li><li>global 关键字声明，必须在函数体的第一行；</li><li>函数体内的全局变量，需要调用过函数才能实现声明可见；</li></ul></li><li><p>利用全局变量的特性，实现一个调用关系的小例子：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用关系</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">your</span>():</span><br><span class="line">    <span class="built_in">print</span>(name, age)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my</span>():</span><br><span class="line">    <span class="keyword">global</span> name</span><br><span class="line">    name = <span class="string">&quot;王二狗&quot;</span></span><br><span class="line">    age = <span class="number">12</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 外部初始化全局变量name和age</span></span><br><span class="line">name = <span class="string">&quot;张三&quot;</span>     </span><br><span class="line">age = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，调用your()，直接被全局变量接管</span></span><br><span class="line">your()</span><br><span class="line"><span class="comment"># 其次，调用my()，会激活全局变量name和局部变量age</span></span><br><span class="line"><span class="comment"># 此时，name被新的全局变量覆盖，而age只是局部，无法接管另一个函数的同名变量</span></span><br><span class="line">my()</span><br><span class="line">your() </span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="三十一、模块化处理-函数分组">三十一、模块化处理.函数分组</h2><h3 id="1-函数分组">1. 函数分组</h3><blockquote><p>函数太多怎么办？将函数独立里成文件用库的方式import导入，实现模块化</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加法函数，addition.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块其实就是引入库，比如import turtle</span></span><br><span class="line"><span class="comment"># 本节课主要是学会如何自己创建可以import的库</span></span><br><span class="line"><span class="comment"># 将函数存放到单独文件中，通过import调用</span></span><br><span class="line"><span class="comment"># import 导入同文件夹下的.py文件名</span></span><br><span class="line"><span class="keyword">import</span> addition <span class="keyword">as</span> add</span><br><span class="line"><span class="built_in">print</span>(add.<span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h3 id="2-from…import">2. from…import</h3><blockquote><p>引入模块库时，可以使用from…import可将指定方法导入模块中</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from...import只是将库中某一个或几个方法引入近来</span></span><br><span class="line"><span class="comment"># 多个方法，用逗号个开  circle,fd,bk</span></span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> circle</span><br><span class="line"><span class="comment"># 如果想将所有的turtle引入近来，直接import *</span></span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add.<span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># 无法执行</span></span><br><span class="line"><span class="comment">#turtle.forward(100)</span></span><br><span class="line"><span class="comment"># 直接使用方法，当成函数语法使用</span></span><br><span class="line">circle(<span class="number">100</span>)</span><br><span class="line">fd(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="三十二、反复调用-递归函数">三十二、反复调用.递归函数</h2><h3 id="1-简单递归">1. 简单递归</h3><blockquote><p>什么是递归，即：重复的执行自身函数，从而解决某些问题</p></blockquote><ul><li><p>需求分析：阶乘问题</p><ul><li>输入一个数n：比如5，求出1-n之间的阶乘：1x2x3x4x5</li><li>具体阶乘公式为：F(n) = n × F(n-1)</li></ul></li><li><p>思路分析：从后向前乘</p><ul><li>假设n为5，利用公式：n × F(n-1)</li><li>第一轮：5 x (5-1)， 20</li><li>第二轮：20  x (4 - 1) ， 60</li><li>第三轮：60 x (3-1)， 120</li><li>第四轮：120 x (2-1)，120</li><li>第五轮：判断1退出</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阶乘递归函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 当n为1时，就需要退出递归不再调用</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>: </span><br><span class="line">        <span class="comment"># return 除了返回还有类似break退出的作用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">#print(123)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 5 * F(5-1)</span></span><br><span class="line">        <span class="comment"># 5 * 4 * F(4-1)</span></span><br><span class="line">        <span class="comment"># 5 * 4 * 3 * F(2-1)</span></span><br><span class="line">        <span class="comment"># 5 * 4 * 3 * 2 * 1</span></span><br><span class="line">        <span class="keyword">return</span> n * F(n - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(fn(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="2-斐波那契数列">2. 斐波那契数列</h3><blockquote><p>提升一点难度，尝试用递归来算出第20位的经典数列：斐波那契数列</p></blockquote><ul><li>数列公式分析：<ul><li><strong>F(n)=F(n-1)+F(n-2)</strong></li><li>1、1、2、3、5、8、13、21…</li><li>从第三项开始，每一项都是前两项的和</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那契数列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 前两项固定为1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 套用递归</span></span><br><span class="line">    <span class="comment"># 如果n=3，F(2) + F(1) = 2</span></span><br><span class="line">    <span class="comment"># 如果n=5, F(4) + F(3) = 3 + 2 = 5</span></span><br><span class="line">    <span class="comment"># 如果n=8，F(7) + F(6) = 5 + 3 + 5 + 5 + 2 + 1 = 21</span></span><br><span class="line">    <span class="keyword">return</span> F(n-<span class="number">1</span>) + F(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(F(<span class="number">20</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="三十三、数学函数及Math库">三十三、数学函数及Math库</h2><h3 id="1-数学函数">1. 数学函数</h3><blockquote><p>头疼的数学计算，提供了不少快捷的函数方便我们直接使用</p></blockquote><table><thead><tr><th>函数名</th><th>返回值说明</th></tr></thead><tbody><tr><td>abs(x)</td><td>返回x的绝对值</td></tr><tr><td>round(x[, n])</td><td>返回x四舍五入的值，n可选，保留小数的位数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绝对值，不管正负，都取正</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(-<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入，遇5进位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">3.55</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">3.55</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">3.44</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">3.44</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="2-math数学库">2. math数学库</h3><blockquote><p>除了上述直接作用的函数外，math库也提供了更多的数学方法和属性</p></blockquote><table><thead><tr><th>方法名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.ceil(x)</td><td>返回x向上取整的值</td></tr><tr><td>.floor(x[, n])</td><td>返回x向下取整的值</td></tr><tr><td>.fsum(list)</td><td>返回list中所有元素的和</td></tr></tbody></table><table><thead><tr><th>属性名</th><th>返回值说明</th></tr></thead><tbody><tr><td>.pi</td><td>返回圆周率</td></tr><tr><td>.e</td><td>返回自然常数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对小数向上取整，进位取整</span></span><br><span class="line"><span class="built_in">print</span>(m.ceil(<span class="number">2.55</span>))</span><br><span class="line"><span class="built_in">print</span>(m.ceil(<span class="number">2.44</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对小数向下取整，截断取整</span></span><br><span class="line"><span class="built_in">print</span>(m.floor(<span class="number">2.55</span>))</span><br><span class="line"><span class="built_in">print</span>(m.floor(<span class="number">2.44</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取列表中所有元素的和</span></span><br><span class="line"><span class="built_in">print</span>(m.fsum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取pi，圆周率的值</span></span><br><span class="line"><span class="built_in">print</span>(m.pi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取e，自然常数，无限不循环小数</span></span><br><span class="line"><span class="built_in">print</span>(m.e)</span><br></pre></td></tr></table></figure><hr><h2 id="三十四、实训-璀璨星空">三十四、实训.璀璨星空</h2><h3 id="1-实战内容">1. 实战内容</h3><blockquote><p>利用随机、海龟图、函数等知识点，绘制一张包含很多个五角星的星空</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入库</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制速度</span></span><br><span class="line">t.speed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗体大小</span></span><br><span class="line">t.setup(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 晚间天空SlateBlue4</span></span><br><span class="line">t.bgcolor(<span class="string">&quot;SlateBlue4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 五角星函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawStar</span>(<span class="params">x, y, color, size, angle</span>):</span><br><span class="line">    t.penup()</span><br><span class="line">    t.goto(x,y)</span><br><span class="line">    t.pendown()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置颜色</span></span><br><span class="line">    t.color(color)</span><br><span class="line">    <span class="comment"># 设置角度</span></span><br><span class="line">    t.left(angle)</span><br><span class="line">    <span class="comment"># 五角星绘制</span></span><br><span class="line">    t.begin_fill()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t.forward(size)</span><br><span class="line">        t.right(<span class="number">144</span>)</span><br><span class="line">    t.end_fill()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 循环100次</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 随机坐标</span></span><br><span class="line">    x = r.randint(-<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">    y = r.randint(-<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 随机颜色</span></span><br><span class="line">    color = r.choice([<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;maroon&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 随机大小</span></span><br><span class="line">    size = r.randint(<span class="number">10</span>, <span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 随机角度</span></span><br><span class="line">    angle = r.randint(<span class="number">0</span>, <span class="number">360</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用五角星函数</span></span><br><span class="line">    drawStar(x, y, color, size, angle)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制完毕</span></span><br><span class="line">t.done()</span><br><span class="line">t.hideturtle()</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python项目基础</title>
      <link href="/2025/03/03/Python%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/03/Python%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、此为知识点总结内容；</li><li>2、如有使用或转载请注明出处；</li><li>3、如有不足，欢迎批评指正；</li></ul><hr><h3 id="学习路线">* 学习路线</h3><ul><li><p>路线规划一（一般小学生）：</p><ul><li>对于能力一般的学员，36课就是他们的归宿，不用继续往下学；</li><li>36课之后，进入 <strong>百题速刷（数理解题）</strong>、**海龟绘图（竞赛操作题）**两个篇章；</li><li>36课在1.5-2小时的线下课，可以填充15节左右。加上百题速刷和海龟绘图，可以填充30多节；</li><li>也就是说，这条路线完美解决48节一年课程；然后可以考虑考级。。。</li><li>不太建议第一年比赛，因为选择题部分，涉及到算法、数据结构等内容。。。</li><li>当然，由于操作题比较合理，而不太正规的赛事的理论题都是拿来主义，自己也不懂。。</li><li>大概率：给你一个题库，背一背就可以了。然后主攻操作题。</li><li>大部分学生其实无法进入更高阶段的学习，那继续 用Python <strong>数理解题</strong> 和 <strong>海龟绘图</strong> 运作第二年；</li></ul></li><li><p>路线规划二（优质小学生）：</p><ul><li>从37课后，可以继续学完，到最后。也可以按照路线一，然后再37课往后；</li><li>而本套课程学完之后，解题 和 绘图 也完毕了，考级也考了，比赛也比了；</li><li>后续就是 <strong>软件开发</strong> 和 <strong>游戏开发</strong> 的各种扩展主题课，直至到中学阶段；</li></ul></li><li><p>路线规划三（优质中学生）：</p><ul><li>优质小学生开始进化优质中学生，更强的数理能力和逻辑能力，此时升级到C++信奥赛体系；</li><li>这里就开始规划一说的，正规赛事的教学和集训，开始涉及到：<ul><li>数据结构（链表、堆栈、队列、二叉树等等）</li><li>图论（邻接矩阵、无相连通图、节点等）</li><li>算法（贪心、递推、二分、枚举、高精度、各种排序等等）</li><li>初等数学（代数、平面几何、数论、组合数学等）</li></ul></li><li>当然，这是后话！！！</li></ul></li></ul><hr><h2 id="一、做个小软件-Tkinter入门">一、做个小软件.Tkinter入门</h2><h3 id="1-Tkinter初步">1. Tkinter初步</h3><blockquote><p>Tkinter是一款Python内置的GUI软件界面开发库，用这个库可以做软件</p></blockquote><ul><li><p>学习这款库，有以下注意点：</p><ul><li>由于是针对小学生5年级+，不按成人那种手册式教学</li><li>也就是说：用到哪里，就只讲哪里，并且不涉及原理</li><li>如果对软件开发感兴趣，后续独立主题课会开设项目式课程</li><li><strong>Tkinter和Pygame只花5-6节蜻蜓点水一下，做个了解，学个概念，跟做就行</strong></li><li><strong>系统性和软游项目课程会做独立课程，基础课中的内容学完啥也做不了的</strong></li></ul></li><li><p>tkinter库旗下的方法：</p></li></ul><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Tk()</td><td>生成窗体的方法，返回值是一个对象（点出万物的变量），设置当前窗体</td></tr><tr><td style="text-align:left">.Label()</td><td>生成一个文字标签，返回值同上，设置当前文本</td></tr><tr><td style="text-align:left">.mainloop()</td><td>循环窗体，不断刷新窗体内容</td></tr></tbody></table><p>.Tk()方法下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.geometry()</td><td>窗体的大小，长高坐标，具体传参看后续代码</td></tr><tr><td style="text-align:left">.title()</td><td>窗体的标题，参数即标题名称</td></tr></tbody></table><p>.Label()方法下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.pack()</td><td>将文本内容定位到指定的窗体上，细节看后续代码</td></tr></tbody></table><h3 id="2-代码详解">2. 代码详解</h3><blockquote><p>通过以上的知识点，完成一个包含文本的窗体</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入GUI库 tkinter</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="comment"># 库下的.Tk()方法，称为窗体组件，可以生成一个窗口</span></span><br><span class="line"><span class="comment"># 注意1：Tk中的T是大写，区分大小写</span></span><br><span class="line"><span class="comment"># 注意2：方法返回一个可以点出万物的变量（是对象，还没学这概念）</span></span><br><span class="line"><span class="comment"># 注意3：可以通过print(type(t))来查看类型</span></span><br><span class="line">t = tk.Tk()</span><br><span class="line"><span class="comment"># 设置窗体大小，800x600是长和高，[400是x轴，200是y轴]</span></span><br><span class="line">t.geometry(<span class="string">&quot;800x600&quot;</span>)</span><br><span class="line"><span class="comment">#t.geometry(&quot;800x600+400+200&quot;)</span></span><br><span class="line"><span class="comment"># 设置窗体标题</span></span><br><span class="line">t.title(<span class="string">&quot;tkinter 初步&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入一个Label()文字组件</span></span><br><span class="line"><span class="comment"># 注意1：Label(t[,option])方法组件区分大小写</span></span><br><span class="line"><span class="comment"># 注意2：参数t是必须，text是文字内容</span></span><br><span class="line">lab1 = tk.Label(t, text=<span class="string">&quot;我的第一个tk程序！&quot;</span>)</span><br><span class="line"><span class="comment"># 入驻窗体</span></span><br><span class="line">lab1.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环，让窗体内交互内容不断刷新</span></span><br><span class="line"><span class="comment"># 但是，由于我们的编辑器自带了轮询，所以不加也在刷新</span></span><br><span class="line"><span class="comment"># 可是，如果脱离编辑器环境，就变成静态的死窗口了</span></span><br><span class="line"><span class="comment"># 结论，还是加上去</span></span><br><span class="line">tk.mainloop()</span><br></pre></td></tr></table></figure><hr><h2 id="二、交互-按钮和文本框">二、交互.按钮和文本框</h2><h3 id="1-按钮和文本框">1. 按钮和文本框</h3><blockquote><p>按钮**.Button()<strong>组件方法和单行文本框</strong>.Entry()**组件方法的使用</p></blockquote><ul><li>tkinter库旗下的方法：</li></ul><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Button()</td><td>生成一个按钮，参数看后续代码</td></tr><tr><td style="text-align:left">.Entry()</td><td>生成一个单行文本框，参数看后续代码</td></tr></tbody></table><p>.Entry()旗下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.get()</td><td>可以获取单行文本框的值</td></tr><tr><td style="text-align:left">.delete()</td><td>可以删除单行文本框的值，清空直接范围：0-“end”</td></tr></tbody></table><p>.Label()旗下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.config()</td><td>可以修改文本内的值</td></tr></tbody></table><ul><li>如何实现按钮点击触发：<ul><li>在Button()按钮内设置时，有一个属性：command</li><li>将一个函数fn赋值给command属性，即可完成点击按钮触发函数</li></ul></li></ul><h3 id="2-代码详解-2">2. 代码详解</h3><blockquote><p>通过以上的知识点，构建一个按钮和输入框，并实现交互</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文本框</span></span><br><span class="line"><span class="comment"># 注意1：.Entry()组件方法，区分大小写</span></span><br><span class="line">ent1 = tk.Entry(t, font=(<span class="string">&quot;宋体&quot;</span>, <span class="number">20</span>))</span><br><span class="line">ent1.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">    <span class="comment">#print(&quot;感谢点击！&quot;)</span></span><br><span class="line">    <span class="comment"># 获取文本框的值</span></span><br><span class="line">    res = ent1.get()</span><br><span class="line">    <span class="comment"># 改变文本标签的值</span></span><br><span class="line">    lab1.config(text=res)</span><br><span class="line">    <span class="comment"># 清空文本框</span></span><br><span class="line">    <span class="comment"># 0表示第一个字符，&quot;end&quot;表示到最后一个字符</span></span><br><span class="line">    ent1.delete(<span class="number">0</span>, <span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个按钮</span></span><br><span class="line"><span class="comment"># 注意1：.Button()组件方法，区分大小写</span></span><br><span class="line"><span class="comment"># 注意2：command是交互属性，可以调用自定义函数</span></span><br><span class="line">but1 = tk.Button(t, text=<span class="string">&quot;确认&quot;</span>, command=fn)</span><br><span class="line">but1.pack()</span><br></pre></td></tr></table></figure><hr><h2 id="三、合法性-验证和弹窗">三、合法性.验证和弹窗</h2><h3 id="1-验证数据">1. 验证数据</h3><blockquote><p>可以通过以往的只是了判断输入框的数据是否符合要求</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断res是否为空，当然可以判断各种其它验证</span></span><br><span class="line"><span class="keyword">if</span> res == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据不可以为空！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    lab1.config(text=res)</span><br><span class="line">    ent1.delete(<span class="number">0</span>, <span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-弹窗组件">2. 弹窗组件</h3><blockquote><p>弹窗组件是一个需要引入的独立库，通过这个组件可以实现弹窗效果</p></blockquote><ul><li>tkinter.messagebox库旗下的方法：</li></ul><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.showinfo()</td><td>提示框的类型设定为：普通提示</td></tr><tr><td style="text-align:left">.showwarning()</td><td>提示框的类型设定为：警告提示</td></tr></tbody></table><p>.showinfo()和showwarning()方法旗下的属性：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td>提示的标题</td></tr><tr><td style="text-align:left">message</td><td>提示内容的详情文本</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入信息提示框</span></span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox <span class="keyword">as</span> tmb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断res是否为空，当然可以判断各种其它验证</span></span><br><span class="line"><span class="keyword">if</span> res == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="comment">#print(&quot;数据不可以为空！&quot;)</span></span><br><span class="line">    <span class="comment"># 提示组件有集中类别：showinfo(普通消息)、showwarning(警告消息)等...</span></span><br><span class="line">    tmb.showwarning(title=<span class="string">&quot;警告信息&quot;</span>, message=<span class="string">&quot;输入框不可以为空！&quot;</span>)</span><br><span class="line">    <span class="comment"># 让输入框获得焦点</span></span><br><span class="line">    ent1.focus()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    lab1.config(text=res)</span><br><span class="line">    ent1.delete(<span class="number">0</span>, <span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="四、载入天空-绘图组件">四、载入天空.绘图组件</h2><h3 id="1-绘制天空">1. 绘制天空</h3><blockquote><p>绘图组件：Canvas()提供了一些简单的绘图功能</p></blockquote><ul><li>tkinter库旗下的方法：</li></ul><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Canvas()</td><td>在窗体上绘制图形，可以设置bg、width和height</td></tr></tbody></table><p>.Canvas()方法旗下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.create_oval(x1,y1,x2,y2[,options])</td><td>创建一个圆的图形，前四个参数为左上角和右下角坐标位置</td></tr><tr><td style="text-align:left">.move(oval, moveX, moveY)</td><td>将绘图区的一个图形，移动相应坐标的数值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 载入绘图区域</span></span><br><span class="line">cv = tk.Canvas(t, bg=<span class="string">&quot;lightblue&quot;</span>, width=<span class="string">&quot;800&quot;</span>, height=<span class="string">&quot;300&quot;</span>)</span><br><span class="line"><span class="comment"># 绘制一个橙红太阳</span></span><br><span class="line">oval = cv.create_oval(<span class="number">450</span>, <span class="number">150</span>, <span class="number">350</span>, <span class="number">50</span>, fill=<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">cv.pack()</span><br></pre></td></tr></table></figure><p>.Tk()方法旗下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.resizeable(x,y)</td><td>设置窗体的x和y是否允许拖动，都设置False，即无法最大化</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移动太阳</span></span><br><span class="line">cv.move(oval, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无法调整大小，x和y轴</span></span><br><span class="line">t.resizable(<span class="literal">False</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="五、下拉的魅力-菜单组件">五、下拉的魅力.菜单组件</h2><h3 id="1-设计菜单">1. 设计菜单</h3><blockquote><p>软件有一个重要的功能，就是菜单系统：Menu()组件可以实现</p></blockquote><p>tkinter库旗下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Menu()</td><td>创建一个菜单组</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建第一个菜单容器，用于存放具体的菜单组</span></span><br><span class="line">one = tk.Menu(t)</span><br><span class="line"><span class="comment"># 再创建一个菜单组，内嵌到one菜单容器里</span></span><br><span class="line"><span class="comment"># 注意1：第一参数，内嵌到哪个菜单容器</span></span><br><span class="line"><span class="comment"># 注意2：tearoff只有两个值1和0，1表示可独立分离，0不可以</span></span><br><span class="line">file = tk.Menu(one, tearoff=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>.Menu()旗下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.add_cascade()</td><td>在指定的菜单组中添加一个菜单项</td></tr><tr><td style="text-align:left">.add_separator()</td><td>创建一条水平线</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在one这个菜单容器中添加一个&quot;文件&quot;菜单项，设置它隶属于file菜单组</span></span><br><span class="line">one.add_cascade(label=<span class="string">&quot;文件&quot;</span>, menu=file)</span><br><span class="line">file.add_command(label=<span class="string">&quot;新建&quot;</span>)</span><br><span class="line">file.add_command(label=<span class="string">&quot;打开&quot;</span>)</span><br><span class="line"><span class="comment"># 水平分割线</span></span><br><span class="line">file.add_separator()</span><br><span class="line">file.add_command(label=<span class="string">&quot;保存&quot;</span>)</span><br><span class="line"><span class="comment"># cmmand执行执行函数</span></span><br><span class="line">file.add_command(label=<span class="string">&quot;关闭&quot;</span>, command=close)</span><br></pre></td></tr></table></figure><p>.Tk()旗下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.destroy()</td><td>关闭窗口</td></tr><tr><td style="text-align:left">.config()</td><td>将组件展现</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将菜单容器one展现出来</span></span><br><span class="line">t.config(menu=one)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close</span>():</span><br><span class="line">    t.destroy()</span><br></pre></td></tr></table></figure><h3 id="2-总结">2. 总结</h3><blockquote><p>对Tkinter库的一些说明</p></blockquote><ul><li>基础课程点到为止，学完了解即可，也无法真正开发软件（所需的知识点非常多的）</li><li>后续主题课会通过各种应用软件的开发给有兴趣的同学选择性系统学习</li></ul><hr><h2 id="六、做个小游戏-Pygame入门">六、做个小游戏.Pygame入门</h2><h3 id="1-Pygame初步">1. Pygame初步</h3><blockquote><p>Pygame库是一款专门用于游戏开发的库，用这个库可以做游戏</p></blockquote><ul><li>学习这款库，有以下注意点：<ul><li>由于是针对小学生5年级+，不按成人那种手册式教学</li><li>也就是说：用到哪里，就只讲哪里，并且不涉及原理</li><li><strong>基础课程点到为止介绍Pygame，但主题课只会讲解Pygame zero</strong></li><li><strong>Pygame zero进行了简化封装，更利于小朋友学习研究</strong></li><li>官方文档翻译中文版：<a href="https://blog.csdn.net/Enderman_xiaohei/article/details/87708373">https://blog.csdn.net/Enderman_xiaohei/article/details/87708373</a></li></ul></li></ul><p>pygame库旗下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.init()</td><td>初始化pygame模块及检查系统</td></tr><tr><td style="text-align:left">.display</td><td>属性，控制窗口和屏幕的模块</td></tr></tbody></table><p>.display属性旗下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.set_mode()</td><td>设置窗体的大小，传递元祖参数，返回Surface模块</td></tr><tr><td style="text-align:left">.set_caption()</td><td>属性，控制窗口和屏幕的模块</td></tr><tr><td style="text-align:left">.flip()</td><td>刷新屏幕</td></tr><tr><td style="text-align:left">.update()</td><td>刷新屏幕部分内容，在不传参时：同上</td></tr></tbody></table><p>Surface模块旗下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.fill()</td><td>设置背景颜色</td></tr></tbody></table><h3 id="2-代码详解-3">2. 代码详解</h3><blockquote><p>窗口显示、背景色、标题等设置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入库pygame，并设置别名pg</span></span><br><span class="line"><span class="keyword">import</span> pygame <span class="keyword">as</span> pg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="comment"># 注意1：pgame库旗下的方法init()</span></span><br><span class="line"><span class="comment"># 注意2：它的作用是导入pygame各个模块以及检查系统等</span></span><br><span class="line">pg.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># .display属性：控制窗口和屏幕的模块</span></span><br><span class="line"><span class="comment"># .display旗下set_mode()方法，</span></span><br><span class="line"><span class="comment"># 注意1：传递的参数是一个元祖数据，(长, 高)</span></span><br><span class="line"><span class="comment"># 注意2：赋值给screen，这个变量就可以控制窗体和屏幕</span></span><br><span class="line"><span class="comment"># .display旗下set_caption()方法，设置标题</span></span><br><span class="line">screen = pg.display.set_mode((<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">pg.display.set_caption(<span class="string">&quot;Pygame游戏&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景色</span></span><br><span class="line">bgcolor = <span class="string">&quot;pink&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 轮询</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># screen旗下的fill()方法，设置背景色</span></span><br><span class="line">    screen.fill(bgcolor)</span><br><span class="line">    <span class="comment"># pg.display旗下的flip()方法，刷新屏幕</span></span><br><span class="line">    pg.display.flip()</span><br></pre></td></tr></table></figure><hr><h2 id="七、关掉它-event事件">七、关掉它.event事件</h2><h3 id="1-卸载操作quit">1. 卸载操作quit()</h3><blockquote><p>初始化init()加载所需的各种模块，相对应的卸载就是quit()方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载模块</span></span><br><span class="line">pg.quit()</span><br></pre></td></tr></table></figure><h3 id="2-event事件入门">2. event事件入门</h3><blockquote><p>事件：即需要通过触发才能执行的程序，比如鼠标点击、键盘按键等触发操作</p></blockquote><ul><li>事件如何触发执行？<ul><li>需要不断循环刷新检测，因为鼠标键盘触发是随机时间触发的</li><li>事件类型也有不少，也需要每次把各种事件循环出来一一检测</li></ul></li></ul><p>pygame库旗下的属性（模块）：</p><table><thead><tr><th style="text-align:left">模块名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.event</td><td>处理事件和事件列队的模块</td></tr></tbody></table><p>.event事件模块下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.get()</td><td>从事件列队里获取事件</td></tr></tbody></table><p>.event.get()方法遍历返回值下的属性：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.type</td><td>获取事件对应的值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历事件</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> pg.event.get():</span><br><span class="line">    <span class="comment"># 获取事件对应的值</span></span><br><span class="line">    <span class="built_in">print</span>(e.<span class="built_in">type</span>)</span><br></pre></td></tr></table></figure><ul><li>通过检测关闭窗口对应的事件值，然后卸载pygame</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历事件</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> pg.event.get():</span><br><span class="line">    <span class="comment"># 如果检测到事件值为256（即点击了关闭按钮）</span></span><br><span class="line">    <span class="keyword">if</span> e.<span class="built_in">type</span> == <span class="number">256</span>:</span><br><span class="line">        <span class="comment"># 卸载pygame</span></span><br><span class="line">        pg.quit()</span><br></pre></td></tr></table></figure><ul><li>pygame也提供了常量也对应常用的值：pg.QUIT（这个会返回256）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pg.QUIT系统常量，直接返回256</span></span><br><span class="line"><span class="keyword">if</span> e.<span class="built_in">type</span> == pg.QUIT:</span><br></pre></td></tr></table></figure><ul><li>关闭代码编写完毕后，发现会报一个错误：原因是卸载后不认识了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">isOpen = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 轮询</span></span><br><span class="line"><span class="keyword">while</span> isOpen:</span><br><span class="line">    screen.fill(bgcolor)</span><br><span class="line">    pg.display.flip()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历事件</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> pg.event.get():</span><br><span class="line">        <span class="comment"># 如果检测到事件值为256（即点击了关闭按钮）</span></span><br><span class="line">        <span class="comment"># pg.QUIT系统常量，直接返回256</span></span><br><span class="line">        <span class="keyword">if</span> e.<span class="built_in">type</span> == pg.QUIT:</span><br><span class="line">            isOpen = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 卸载pygame</span></span><br><span class="line">pg.quit()</span><br></pre></td></tr></table></figure><hr><h2 id="八、移动的圆-绘制方法">八、移动的圆.绘制方法</h2><h3 id="1-图形绘制">1. 图形绘制</h3><blockquote><p>pygame也自带了各种绘图的方法，我们这里学习一下绘制一个圆以及矩形</p></blockquote><p>pygame库旗下的属性（模块）：</p><table><thead><tr><th style="text-align:left">模块名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.draw</td><td>绘图模块</td></tr><tr><td style="text-align:left">.time</td><td>用于管理实践的模块</td></tr></tbody></table><p>.draw模块下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.rect()</td><td>绘制一个矩形，参数参考代码</td></tr><tr><td style="text-align:left">.circle()</td><td>绘制一个圆，参数参考代码</td></tr></tbody></table><p>.time模块下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Clock()</td><td>可以返回一个追踪时间的变量（对象）</td></tr></tbody></table><p>.Clock()方法下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.tick()</td><td>设置刷新频率</td></tr></tbody></table><h3 id="2-代码详情">2. 代码详情</h3><blockquote><p>绘制一个静态的矩形，绘制一个可以移动的圆，并设置刷新频率</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 时间追踪</span></span><br><span class="line">clock = pg.time.Clock()</span><br><span class="line"><span class="comment"># 小球默认位置</span></span><br><span class="line">x, y = <span class="number">390</span>, <span class="number">290</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 轮询</span></span><br><span class="line"><span class="keyword">while</span> isOpen:</span><br><span class="line">    <span class="comment"># 频率</span></span><br><span class="line">    clock.tick(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 矩形</span></span><br><span class="line">    pg.draw.rect(screen, (<span class="string">&quot;blue&quot;</span>), (<span class="number">100</span>, <span class="number">100</span>, <span class="number">35</span>, <span class="number">35</span>))</span><br><span class="line">    <span class="comment"># 绘制圆</span></span><br><span class="line">    pg.draw.circle(screen, (<span class="string">&quot;red&quot;</span>), (x, y), <span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 默认情况下向右移动</span></span><br><span class="line">    x += <span class="number">20</span></span><br></pre></td></tr></table></figure><hr><h2 id="九、键盘控制-事件监听">九、键盘控制.事件监听</h2><h3 id="1-键盘监听">1. 键盘监听</h3><blockquote><p>本节课想要通过用户键盘的操作，来改变小球的移动方向</p></blockquote><ul><li>e.type可以获取到事件的类型：<ul><li>键盘按下时返回值是：768</li><li>键盘弹起时返回值是：769</li><li>可以直接判断：e.type == 768</li><li>或者pygame提供了常量pg.KEYDOWN值为：768</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断是否键盘按下</span></span><br><span class="line"><span class="keyword">elif</span> e.<span class="built_in">type</span> == pg.KEYDOWN:</span><br></pre></td></tr></table></figure><ul><li><p>而对于上下左右的按键常量为：</p><ul><li>上：pg.K_UP</li><li>下：pg.K_DOWN</li><li>左：pg.K_LEFT</li><li>右：pg.K_RIGHT</li></ul></li><li><p>但是，判断具体按键并不是e.type，通过手册查询到是e.key</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 小球方向</span></span><br><span class="line"><span class="built_in">dir</span> = <span class="string">&quot;right&quot;</span></span><br><span class="line"></span><br><span class="line">isOpen = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 轮询</span></span><br><span class="line"><span class="keyword">while</span> isOpen:</span><br><span class="line">    <span class="comment"># 判断方向</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">dir</span> == <span class="string">&quot;right&quot;</span>:</span><br><span class="line">        x += <span class="number">20</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">dir</span> == <span class="string">&quot;left&quot;</span>:</span><br><span class="line">        x -= <span class="number">20</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">dir</span> == <span class="string">&quot;up&quot;</span>:</span><br><span class="line">        y -= <span class="number">20</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">dir</span> == <span class="string">&quot;down&quot;</span>:</span><br><span class="line">        y += <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> pg.event.get():</span><br><span class="line">        <span class="keyword">if</span> e.<span class="built_in">type</span> == pg.QUIT:</span><br><span class="line">            isOpen = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 判断是否键盘按下</span></span><br><span class="line">        <span class="keyword">elif</span> e.<span class="built_in">type</span> == pg.KEYDOWN:</span><br><span class="line">            <span class="comment"># 判断按下了左键盘</span></span><br><span class="line">            <span class="keyword">if</span> e.key == pg.K_LEFT:</span><br><span class="line">                <span class="comment">#print(&quot;左&quot;)</span></span><br><span class="line">                <span class="built_in">dir</span> = <span class="string">&quot;left&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> e.key == pg.K_RIGHT:</span><br><span class="line">                <span class="comment">#print(&quot;右&quot;)</span></span><br><span class="line">                <span class="built_in">dir</span> = <span class="string">&quot;right&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> e.key == pg.K_UP:</span><br><span class="line">                <span class="comment">#print(&quot;上&quot;)</span></span><br><span class="line">                <span class="built_in">dir</span> = <span class="string">&quot;up&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> e.key == pg.K_DOWN:</span><br><span class="line">                <span class="comment">#print(&quot;下&quot;)</span></span><br><span class="line">                <span class="built_in">dir</span> = <span class="string">&quot;down&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="十、碰撞检测-坐标重叠">十、碰撞检测.坐标重叠</h2><h3 id="1-坐标重叠">1. 坐标重叠</h3><blockquote><p>我们想让移动的球对方块进行碰撞，采用坐标重叠的方法设计</p></blockquote><ul><li>如果和判断两个图形重叠：<ul><li>得到方块的坐标位置为：x=&gt;100, y=&gt;100</li><li>加上方块本身的大小35，算出占用的区域：x（100~135）, y（100~135）</li><li>有些判断希望擦边一点点不算碰撞，那可以设计一个值让判断更加中心一点</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方块默认位置</span></span><br><span class="line">rx, ry = <span class="number">100</span>, <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> isOpen:</span><br><span class="line">    <span class="comment"># 方块占用的区域为：x(100~135)，y(100~135)</span></span><br><span class="line">    pg.draw.rect(screen, (<span class="string">&quot;blue&quot;</span>), (rx, ry, <span class="number">35</span>, <span class="number">35</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判断小球是否碰撞方块</span></span><br><span class="line">    <span class="keyword">if</span> rx != -<span class="number">9999</span> <span class="keyword">and</span> ry != -<span class="number">9999</span>:</span><br><span class="line">        <span class="keyword">if</span> x &gt; rx <span class="keyword">and</span> x &lt; rx + <span class="number">35</span> <span class="keyword">and</span> y &gt; ry <span class="keyword">and</span> y &lt; ry + <span class="number">35</span>:</span><br><span class="line">        <span class="comment"># 让方块飞到天际去</span></span><br><span class="line">            rx = -<span class="number">9999</span></span><br><span class="line">            ry = -<span class="number">9999</span></span><br></pre></td></tr></table></figure><ul><li>用类似的方法判断边缘碰撞：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断小球碰撞边界，边缘坐标+本身大小</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> + <span class="number">20</span> <span class="keyword">or</span> x &gt; <span class="number">800</span> - <span class="number">20</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> + <span class="number">20</span> <span class="keyword">or</span> y &gt; <span class="number">600</span> - <span class="number">20</span>:</span><br><span class="line">x, y = <span class="number">390</span>, <span class="number">290</span></span><br></pre></td></tr></table></figure><hr><h2 id="十一、计算得分-输入文本">十一、计算得分.输入文本</h2><h3 id="1-文字输入">1. 文字输入</h3><blockquote><p>pygame库提供了文字输入的模块方法font</p></blockquote><p>pygame库旗下的属性（模块）：</p><table><thead><tr><th style="text-align:left">模块名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.font</td><td>文字模块</td></tr></tbody></table><p>.font模块下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.Sysfont()</td><td>返回一个可以创建字体的变量（对象Font）</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置文本</span></span><br><span class="line"><span class="comment"># 注意1：参数1为字体名称，可以在C盘windows下Fonts查阅</span></span><br><span class="line"><span class="comment"># 注意2：参数2为大小20</span></span><br><span class="line">font = pg.font.SysFont(<span class="string">&quot;simhei&quot;</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>.Sysfont()方法下方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.render()</td><td>绘制文本</td></tr></tbody></table><p>Surface模块下的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">.blit()</td><td>将图像或文字图形绘制到窗体上</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得分文本</span></span><br><span class="line"><span class="comment"># 注意1：参数1为文本，参数2为是否平滑抗锯齿</span></span><br><span class="line"><span class="comment"># 注意2：参数3为元祖模式颜色，参数4</span></span><br><span class="line"><span class="comment"># 注意3：blit方法将文本绘制到窗体上</span></span><br><span class="line">screen.blit(font.render(<span class="string">&quot;得分：&quot;</span>, <span class="literal">True</span>, (<span class="string">&quot;black&quot;</span>)), (<span class="number">720</span>,<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 分数文本</span></span><br><span class="line">screen.blit(font.render(<span class="built_in">str</span>(score), <span class="literal">True</span>, (<span class="string">&quot;black&quot;</span>)), (<span class="number">780</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><ul><li>对数字进行变动：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得分</span></span><br><span class="line">score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断小球是否碰撞方块</span></span><br><span class="line"><span class="keyword">if</span> rx != -<span class="number">9999</span> <span class="keyword">and</span> ry != -<span class="number">9999</span>:</span><br><span class="line">score += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断小球碰撞边界</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> + <span class="number">20</span> <span class="keyword">or</span> x &gt; <span class="number">800</span> - <span class="number">20</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> + <span class="number">20</span> <span class="keyword">or</span> y &gt; <span class="number">600</span> - <span class="number">20</span>:</span><br><span class="line">score = <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><h2 id="十二、总裁思维-面向对象">十二、总裁思维.面向对象</h2><h3 id="1-面向过程">1. 面向过程</h3><blockquote><p>之前学习的编程方式就是面向过程，即员工思维。</p></blockquote><pre><code>**提醒：面向对象难度较大，对于教培老师，当然要掌握；对于小学生，可选；**</code></pre><ul><li>所谓员工思维：<ul><li>按部就班的完成每一个步骤：比如上班：<ul><li>1.起床 2.洗脸 3.坐公交 4.打卡进公司 5.工作 …等</li></ul></li><li>用程序代码理解：自上而下按顺序的一步步完成既定的代码程序；</li></ul></li></ul><h3 id="2-面向对象">2. 面向对象</h3><blockquote><p>面向对象就好比总裁思维，那总裁的思维是哪些？</p></blockquote><ul><li>所谓总裁思维：<ul><li>按需分配让他人执行所要的步骤：比如上班：<ul><li>1.到公司 2.分配任务 3.完</li></ul></li><li>用程序代码理解：以调用的方式，给各个模块发送指令，并执行；</li></ul></li></ul><h3 id="3-属性和方法">3. 属性和方法</h3><blockquote><p>我们之前已经零星的接触过属性和方法的区别</p></blockquote><ul><li><p>属性和方法概念：</p><ul><li>方法其实就是函数，只不过有一个点语法：pg.init()</li><li>方法的其实就是：<strong>对象.方法()</strong>  ，一般用于执行某种行为动作</li><li>而属性，就是不带括号的：e.type</li><li>属性语法为：<strong>对象.属性</strong>，一般用于获取某种特性的值</li><li>备注：我们之前点出万物的变量都可以理解为对象</li></ul></li><li><p>实例演练，小汽车对象：</p><ul><li>它有哪些属性呢？<ul><li>价格， 大小， 颜色…等等可以理解为属性</li></ul></li><li>它有哪些方法呢？<ul><li>行驶， 停靠…等等可以理解为方法</li></ul></li><li>获取特性的是属性，执行动作的是方法</li></ul></li></ul><hr><h2 id="十三、泰拉瑞亚-类与对象">十三、泰拉瑞亚.类与对象</h2><h3 id="1-生成概念">1. 生成概念</h3><blockquote><p>有玩过泰拉瑞亚的世界生成形式的游戏吗？大概这个意思</p></blockquote><p><img src="/2025/03/03/Python%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/image-20250314002210651.png" alt="游戏模型图"></p><ul><li>理解上图：<ul><li>世界模型可以理解为基石（一切的基础），也可以理解为生产世界的工厂，也是后面“类”这个概念；</li><li>生成世界123，即：世界工厂生产的行为，英文为new，新建，创建的意思；</li><li>各种特性的副本，即：对象，对象是具有各种属性和方法的，比如：<ul><li>火山熔岩副本，具有热、灼烧的属性，需要有降温、灭火等方法</li><li>寒冰洞窟副本，具有冷、冰冻的属性，需要有保暖、碎冰等方法</li><li>沙漠戈壁副本，。。。。。</li></ul></li><li>也就是说，类可以包含全部的功能，而生成对象的时候呢，随机选择特性载入；</li><li>下面就需要通过代码来实现这个类和对象。</li></ul></li></ul><h3 id="2-创建类和对象">2. 创建类和对象</h3><blockquote><p>类是一切的基石，而对象是类生成出来的一个副本</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写一个世界类</span></span><br><span class="line"><span class="comment"># 注意1：约定俗成，类名首字母大写</span></span><br><span class="line"><span class="comment"># 注意2：class和pass是关键字</span></span><br><span class="line"><span class="comment"># 注意3：两种写法 class World: 或 class World():</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="comment"># 空类会报错，需要pass填充</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建一个对象，即副本，直接函数形式调用即可</span></span><br><span class="line"><span class="comment"># 注意1：为方便后续使用，一般会将调用类()返回给一个变量</span></span><br><span class="line"><span class="comment"># 注意2：这个w就是这个对象</span></span><br><span class="line"><span class="comment"># 注意3：World()看上去是函数调用，但有自己的名称：实例化</span></span><br><span class="line">w = World()</span><br><span class="line"><span class="built_in">print</span>(w)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(w))</span><br></pre></td></tr></table></figure><hr><h2 id="十四、载入特性-创建属性">十四、载入特性.创建属性</h2><h3 id="1-初始化函数">1. 初始化函数</h3><blockquote><p>初始化函数：<strong>__ init __()</strong> 一般在定义类时定义，也可以称为初始化方法</p></blockquote><ul><li>初始化函数作用：<ul><li>如果把类理解成函数，当实例化（创建对象）时，会自动执行初始化函数；</li><li>初始化函数，也叫初始化方法，在别的语言称为构造方法，这里也可以；</li><li>参数1是必填参数，固定关键字self，调用本类里的属性和方法用的；</li><li>那么它的作用到底是什么呢？很简单：在创建对象时自动执行，初始化各项数据；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>():</span><br><span class="line">    <span class="comment"># 定义初始化函数</span></span><br><span class="line">    <span class="comment"># 注意1：参数1固定为self，必传，关键字</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 函数没内容，pass占位</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">w = World()</span><br></pre></td></tr></table></figure><h3 id="1-类的属性">1. 类的属性</h3><blockquote><p>类的属性，一般用于保证创建的对象具有相应的特性</p></blockquote><ul><li>那么，如何创建三个不同特性的世界副本呢？通过初始化函数试试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>():</span><br><span class="line">    <span class="comment"># 定义初始化函数</span></span><br><span class="line">    <span class="comment"># 注意1：参数1固定为self，必传，关键字</span></span><br><span class="line">    <span class="comment"># 注意2：self代表World本身</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建属性</span></span><br><span class="line">        self.name = <span class="string">&quot;火山&quot;</span></span><br><span class="line">        self.gender = <span class="string">&quot;熔岩&quot;</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">w1 = World()</span><br><span class="line"><span class="built_in">print</span>(w1.name+w1.gender,<span class="string">&quot;的世界被创建！&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>以上的代码只能创建有一个特性的世界副本。如何创建不同的呢？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>():</span><br><span class="line">    <span class="comment"># 定义初始化函数</span></span><br><span class="line">    <span class="comment"># 注意1：参数1固定为self，必传，关键字</span></span><br><span class="line">    <span class="comment"># 注意2：self代表World本身的实例化对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        <span class="comment"># 创建属性</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 给初始化函数传参</span></span><br><span class="line"><span class="comment"># 相当于给生成的世界做自定义选项</span></span><br><span class="line"><span class="comment"># 或者添加了世界种子之类的东西</span></span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w1.name+w1.gender,<span class="string">&quot;的世界被创建！&quot;</span>)</span><br><span class="line"></span><br><span class="line">w2 = World(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞窟&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w2.name+w2.gender,<span class="string">&quot;的世界被创建！&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>结构分析：<ul><li>每个对象都是内存独立分配的空间；</li><li>每个对象的属性，都是独立的，和其它对象属性毫无关系；</li></ul></li></ul><p><img src="/2025/03/03/Python%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/image-20250314002303218.png" alt="结构分析图"></p><hr><h2 id="十五、固有特性-静态属性">十五、固有特性.静态属性</h2><h3 id="1-静态概念">1. 静态概念</h3><blockquote><p>所谓静态，无法实例化改变，数据定义后可以共享给所有对象使用</p></blockquote><ul><li>所谓静态属性：<ul><li>静态属性，直接在类的顶部定义，无法通过对象改变的属性；</li><li>静态属性可以用一个特殊的语法：<strong>类.静态属性</strong>，而无需实例化对象；</li><li>什么样的环境需要静态：所有对象的某个属性特性都是同一个值，那就可以静态（共享）；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="comment"># 静态属性</span></span><br><span class="line">    <span class="comment"># 注意1：不在初始化函数里，不需要self</span></span><br><span class="line">    <span class="comment"># 注意2：不通过函数赋值，可直接赋值</span></span><br><span class="line">    age = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w1.age)</span><br><span class="line"></span><br><span class="line">w2 = World(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞窟&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w2.age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类.静态属性</span></span><br><span class="line"><span class="built_in">print</span>(World.age)</span><br></pre></td></tr></table></figure><h3 id="2-动态属性">2. 动态属性</h3><blockquote><p>动态属性，就很好理解了。直接在实例化对象创建的属性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w1.age)</span><br><span class="line"><span class="comment"># 实例化对象直接创建的属性</span></span><br><span class="line"><span class="comment"># 类似普通变量，在类中不存在，本身也是实例属性</span></span><br><span class="line">w1.info = <span class="string">&quot;我是动态属性&quot;</span></span><br><span class="line"><span class="built_in">print</span>(w1.info)</span><br></pre></td></tr></table></figure><ul><li>名词解释：<ul><li>创建属性：一般是在类里声明的属性，比如 <strong><a href="http://self.name">self.name</a></strong> 这种；</li><li>实例属性：实例化后对象调用的属性，比如 <strong><a href="http://w1.name">w1.name</a></strong> 这种；</li><li>静态属性：可以用类直接调用，也可以对象调用的属性：<strong>World.age</strong> 这种；</li><li>动态属性：类里面没有定义的属性，在实例化后对象直接声明的属性：<strong><a href="http://w1.info">w1.info</a></strong> 这种；</li></ul></li></ul><hr><h2 id="十六、行动激活-创建方法">十六、行动激活.创建方法</h2><h3 id="1-实例方法">1. 实例方法</h3><blockquote><p>实例方法（函数），也是普通类里的方法，用于执行实例化对象后的某种行为</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法（函数），self是函数必填的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;遇到火山熔岩副本，我要使用降温灭火装备！&quot;</span></span><br><span class="line"></span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="comment"># 实例方法</span></span><br><span class="line"><span class="built_in">print</span>(w1.run())</span><br><span class="line"></span><br><span class="line">w2 = World(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞窟&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w2.run())</span><br></pre></td></tr></table></figure><p>如果要实现针对不同对象（副本），采取对应的行为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    age = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, a, b</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 类方法（函数），self是函数必填的</span></span><br><span class="line">    <span class="comment"># 注意：字符串太长，可以在+号后面加一个\表示换行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;遇到&quot;</span> + self.name + self.gender +\</span><br><span class="line">               <span class="string">&quot;副本，我要使用&quot;</span> + self.a + self.b + <span class="string">&quot;装备！&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>, <span class="string">&quot;降温&quot;</span>, <span class="string">&quot;灭火&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w1.run())</span><br><span class="line"></span><br><span class="line">w2 = World(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞窟&quot;</span>, <span class="string">&quot;保暖&quot;</span>, <span class="string">&quot;碎冰&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w2.run())</span><br></pre></td></tr></table></figure><h3 id="2-静态方法">2. 静态方法</h3><blockquote><p>和静态属性一样，静态方法是每一个对象（副本）都可以共享使用的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 静态方法</span></span><br><span class="line"><span class="comment"># 在普通方法上方设置@staticmethod就变成静态方法</span></span><br><span class="line"><span class="comment"># 这种@的语法叫做装饰器语法</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">over</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Game Over！&quot;</span></span><br><span class="line"></span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>, <span class="string">&quot;降温&quot;</span>, <span class="string">&quot;灭火&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w1.run())</span><br><span class="line"><span class="built_in">print</span>(w1.over())</span><br><span class="line"></span><br><span class="line">w2 = World(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞窟&quot;</span>, <span class="string">&quot;保暖&quot;</span>, <span class="string">&quot;碎冰&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(w2.run())</span><br><span class="line"><span class="built_in">print</span>(w2.over())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态方法可以直接通过类名.方法()</span></span><br><span class="line"><span class="built_in">print</span>(World.over())</span><br></pre></td></tr></table></figure><h3 id="3-动态方法">3. 动态方法</h3><blockquote><p>和动态属性一样，在类外声明的普通函数，并用实例化对象调用的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;吃饭&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将函数名赋值给动态属性</span></span><br><span class="line">w2.eat = eat</span><br><span class="line"><span class="built_in">print</span>(w2.eat())</span><br></pre></td></tr></table></figure><h3 id="4-类方法">4. 类方法</h3><blockquote><p>使用装饰器@classmethod声明的方法</p></blockquote><ul><li>类方法：<ul><li>和静态方法一样，支持 <strong>类.方法()</strong> 的调用方式；</li><li>静态方法只处理数据，无法获取本类的数据，比如无法使用self；</li><li>类方法必须传递 <strong>cls</strong> 参数，通过这个 <strong>cls</strong> 来调用本类的静态属性等；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">cls</span>):</span><br><span class="line"><span class="keyword">return</span> cls.age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类方法</span></span><br><span class="line"><span class="built_in">print</span>(World.info())</span><br></pre></td></tr></table></figure><hr><h2 id="十七、私有属性-封装">十七、私有属性.封装</h2><h3 id="1-封装性">1. 封装性</h3><blockquote><p>面向对象有三大特性：封装、继承和多态，那什么是封装？</p></blockquote><ul><li>封装的解释：<ul><li>对属性进行私有化操作，这种行为就是封装；</li><li>为何要封装，防止这些属性被污染；</li><li>怎么理解污染？想一下电脑机箱，为何要把主板、内存、显卡封在壳子里，只留个插孔；</li></ul></li><li>我们先看下公有属性，如何赋值和取值的：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="comment"># 共有属性特性</span></span><br><span class="line"><span class="comment"># 注意1：可以直接赋值</span></span><br><span class="line"><span class="comment"># 注意2：可以直接输出</span></span><br><span class="line">w1.name = <span class="string">&quot;沙漠&quot;</span></span><br><span class="line"><span class="built_in">print</span>(w1.name)</span><br></pre></td></tr></table></figure><ul><li>将公有属性，转换为私有属性后：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">    <span class="comment"># 私有属性，只要在前面加上两个下划线即可</span></span><br><span class="line">    self.__name = name</span><br><span class="line">    self.__gender = gender</span><br><span class="line">    </span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="comment"># 私有属性直接获取，报错</span></span><br><span class="line"><span class="built_in">print</span>(w1.__name)</span><br></pre></td></tr></table></figure><ul><li>封装私有化后，提供一个可以取值的入口方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        <span class="comment"># 私有属性，只要在前面加上两个下划线即可</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">        </span><br><span class="line">w1 = World(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="comment"># 私有变量被封装了，但可以设置一个方法作为调用入口</span></span><br><span class="line"><span class="comment"># 这个调用入口就好比机箱提供的插口区</span></span><br><span class="line"><span class="built_in">print</span>(w1.getName())</span><br></pre></td></tr></table></figure><ul><li>封装私有化赋值，有时不是在实例化后赋值的，可以再建立一个赋值入口：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name = <span class="string">&quot;&quot;</span>, gender = <span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="comment"># 私有属性，只要在前面加上两个下划线即可</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setName</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">        </span><br><span class="line">w1 = World()</span><br><span class="line"><span class="comment"># 私有化后的属性赋值</span></span><br><span class="line">w1.setName(<span class="string">&quot;沙漠&quot;</span>)</span><br><span class="line"><span class="comment"># 私有变量被封装了，但可以设置一个方法作为调用入口</span></span><br><span class="line"><span class="comment"># 这个调用入口就好比机箱提供的插口区</span></span><br><span class="line"><span class="built_in">print</span>(w1.getName())</span><br></pre></td></tr></table></figure><h3 id="2-私有方法">2. 私有方法</h3><blockquote><p>私有方法和私有属性概念一样</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我是私有方法，外部无法调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__run</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;运行。。。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无法执行私有方法</span></span><br><span class="line"><span class="built_in">print</span>(w1.__run())</span><br></pre></td></tr></table></figure><ul><li>私有方法也需要一个入口，来执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我是私有方法，外部无法调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__run</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;运行。。。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对外公开的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.__run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="built_in">print</span>(w1.go())</span><br></pre></td></tr></table></figure><hr><h2 id="十八、装饰器-property">十八、装饰器.@property</h2><h3 id="1-property">1. @property</h3><blockquote><p><strong>getName()</strong> 和 <strong>setName()</strong> 是一种比较通用的封装属性的手段，但还是有点麻烦</p></blockquote><ul><li>先补遗下容易出错的点：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name = <span class="string">&quot;火山&quot;</span>, gender = <span class="string">&quot;熔岩&quot;</span></span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对外获取私有属性__name</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">        </span><br><span class="line">w1 = World()</span><br><span class="line"><span class="comment"># 私有属性无法直接赋值取值，但操作语法并不报错</span></span><br><span class="line"><span class="comment"># 这里的__name已经是动态属性，和类里面的私有属性无关</span></span><br><span class="line">w1.__name = <span class="string">&quot;寒冰&quot;</span></span><br><span class="line"><span class="comment"># 这里输出的是动态属性 寒冰</span></span><br><span class="line"><span class="built_in">print</span>(w1.__name)</span><br><span class="line"><span class="comment"># 之类获取到私有属性 火山</span></span><br><span class="line"><span class="built_in">print</span>(w1.getName())</span><br></pre></td></tr></table></figure><ul><li>问题分析：<ul><li>私有属性赋值有两种，一种就是 <strong>初始化函数传参</strong>，第二种就是 <strong>setName()</strong> 方法；</li><li>我们希望属性在对象这里，直接用属性赋值取值，可读性更好一些；</li><li>所以，需要使用装饰器@property来完成这种功能，具体如下：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name = <span class="string">&quot;火山&quot;</span>, gender = <span class="string">&quot;熔岩&quot;</span></span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 装饰器</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 装饰器</span></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w1 = World()</span><br><span class="line">w1.name = <span class="string">&quot;寒冰&quot;</span></span><br><span class="line"><span class="comment"># 下面两种获取均为 寒冰</span></span><br><span class="line"><span class="built_in">print</span>(w1.name)</span><br><span class="line"><span class="built_in">print</span>(w1.getName())</span><br></pre></td></tr></table></figure><hr><h2 id="十九、第二大特性-继承">十九、第二大特性.继承</h2><h3 id="1-继承概念">1. 继承概念</h3><blockquote><p>父亲有100w，儿子继承了父亲的100w，那么儿子就有了100w，这就是继承</p></blockquote><ul><li>继承扩展理解：<ul><li>世界类或世界工厂，在生成火山、寒冰、沙漠副本时，逻辑都在本类或本工厂里；</li><li>当这些副本需求内容过多，或逻辑逐步复杂时，世界工厂内的代码将变得冗余难以理解；</li><li>尤其是当需要通过实例化调用时传递不同参数时，也会变成杂乱可读性差；</li><li>那么，我们将这个工厂开始拆分，分为三个工厂：火山工厂、寒冰工厂、沙漠工厂；</li></ul></li></ul><p><img src="/2025/03/03/Python%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/image-20250314002350246.png" alt="继承流程图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 火山类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>:</span><br><span class="line">    name = <span class="string">&quot;火山&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;熔岩&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在&quot;</span>+ self.name + self.gender +<span class="string">&quot;里战斗！&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 寒冰类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>:</span><br><span class="line">    name = <span class="string">&quot;寒冰&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;洞窟&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在&quot;</span>+ self.name + self.gender +<span class="string">&quot;里战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山对象</span></span><br><span class="line">f = Fire()</span><br><span class="line">f.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰对象</span></span><br><span class="line">c = Cold()</span><br><span class="line">c.fight()</span><br></pre></td></tr></table></figure><ul><li>结构分析：<ul><li>模型拆分后，逻辑上清晰很多，不用在一个类中设计太多不同副本的功能；</li><li>初始化函数的传递参数上，直接被静态属性取代了；</li><li>但暴露出一个新的问题，每个副本都有相同的行为和属性怎么办？<ul><li>比如，这里 <strong>fight()</strong> 战斗方法，由于拆分后，又冗余了；</li></ul></li></ul></li></ul><hr><h2 id="二十、复制共性-改写特性">二十、复制共性.改写特性</h2><h3 id="1-子类继承">1. 子类继承</h3><blockquote><p>要解决火山、寒冰等工厂冗余问题，我们还得请回世界工厂来整合共性</p></blockquote><p><img src="/2025/03/03/Python%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/image-20250314002421885.png" alt="子类继承流程图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类（父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="comment"># 将相同的逻辑放在父类继承</span></span><br><span class="line">    age = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在&quot;</span>+ self.name + self.gender +<span class="string">&quot;里战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="comment"># 注意1：子类继承父类，只需要在括号里传入父类名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    name = <span class="string">&quot;火山&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;熔岩&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    name = <span class="string">&quot;寒冰&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;洞窟&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山对象</span></span><br><span class="line">f = Fire()</span><br><span class="line"><span class="built_in">print</span>(f.age)</span><br><span class="line">f.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰对象</span></span><br><span class="line">c = Cold()</span><br><span class="line">c.fight()</span><br></pre></td></tr></table></figure><h3 id="2-改写特性">2. 改写特性</h3><blockquote><p>有时，我们需要修改父类继承下来的属性和方法，以及初始化函数</p></blockquote><ul><li>初始化函数：<ul><li>上面为了方便理解，均用了静态属性；</li><li>本次我们尝试用初始化函数的声明的属性试一试；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类（父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="comment"># 将相同的逻辑放在父类继承</span></span><br><span class="line">    age = <span class="number">1000</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在&quot;</span>+ self.name + self.gender +<span class="string">&quot;里战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="comment"># 注意1：子类继承父类，只需要在括号里传入父类名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山对象</span></span><br><span class="line">f = Fire(<span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.age)</span><br><span class="line">f.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰对象</span></span><br><span class="line">c = Cold(<span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞穴&quot;</span>)</span><br><span class="line">c.fight()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果取消掉实例化的传递参数，开始改写属性：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="comment"># 注意1：子类继承父类，只需要在括号里传入父类名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="comment"># 重写属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 子类调用父类的初始化函数，并传递参数</span></span><br><span class="line">        World.__init__(self, <span class="string">&quot;火山&quot;</span>, <span class="string">&quot;熔岩&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="comment"># 重写属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        World.__init__(self, <span class="string">&quot;寒冰&quot;</span>, <span class="string">&quot;洞穴&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山对象</span></span><br><span class="line">f = Fire()</span><br><span class="line"><span class="built_in">print</span>(f.age)</span><br><span class="line">f.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰对象</span></span><br><span class="line">c = Cold()</span><br><span class="line">c.fight()</span><br></pre></td></tr></table></figure><ul><li>那么，如何改写方法呢？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment">#调用父类</span></span><br><span class="line">    World.fight(self)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="二十一、继承中的抽象化">二十一、继承中的抽象化</h2><h3 id="1-抽象化">1. 抽象化</h3><blockquote><p>对于父类，我们有几个问题有待解决，比如父类要不要封装等</p></blockquote><ul><li><p>对于继承的思考：</p><ul><li>首先，父类能不能实例化，答案：现在能，但我们希望不能；</li><li>因为，我们只是希望使用子类创建对象副本，父类只是提供规范；</li><li>或者，用好理解的语言表述：总裁只是下达命令，真正执行的是员工；</li><li>员工按照命令去执行即可，但员工自然也有自己独有的特性罢了；</li><li>所以，在父类中，有些属性和方法，我们只希望提供规范让子类实现：<ul><li>而这种属性和方法称为：<strong>抽象属性</strong> 和 <strong>抽象方法</strong></li></ul></li></ul></li><li><p>创建一个抽象的世界类，防止用户实例化：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入abc模块，实现抽象化</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 世界类（抽象父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>(metaclass=abc.ABCMeta):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 抽象方法</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 无法实例化</span></span><br><span class="line">w1 = World()</span><br></pre></td></tr></table></figure><ul><li>创建一个子类去继承抽象父类，实例化后强制要求实现抽象方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实例化后，报错，提示必须实现父类的抽象方法</span></span><br><span class="line"><span class="comment"># 也就是，总裁的命令必须完成</span></span><br><span class="line">f = Fire()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;战斗！&quot;</span></span><br><span class="line">    </span><br><span class="line">f = Fire()</span><br><span class="line"><span class="built_in">print</span>(f.fight())</span><br></pre></td></tr></table></figure><ul><li>最后一个抽象属性定义：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入abc模块，实现抽象化</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 世界类（抽象父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>(metaclass=abc.ABCMeta):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#抽象属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 抽象方法</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;在&quot;</span> + self.__name + <span class="string">&quot;区域战斗！&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 抽象属性也必须强制定义</span></span><br><span class="line">f = Fire()</span><br><span class="line">f.name = <span class="string">&quot;火山&quot;</span></span><br><span class="line"><span class="built_in">print</span>(f.fight())</span><br></pre></td></tr></table></figure><ul><li>为了更加直观，改写一下import引入方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们只用abc模块中的两个方法，这样可以去掉abc.的前缀</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 世界类（抽象父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>(metaclass=ABCMeta):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#抽象属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 抽象方法</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><h2 id="二十二、第三大特性-多态">二十二、第三大特性.多态</h2><h3 id="1-多态的概念">1. 多态的概念</h3><blockquote><p>多态：即多种形态，执行同一种命令根据场景不同而执行不同的行为特征</p></blockquote><ul><li><p>多态理解：</p><ul><li>go()这个方法，“走”的意思，但环境不同意思不同：<ul><li>在餐厅前go()，表示吃饭；</li><li>在校门前go()，表示上课；</li><li>在网吧前go()，表示打游戏；</li></ul></li><li>那么方法，肯定是固定的，那么就必须实现子类重写父类；</li><li>而调用者也是固定的，否则叫什么多态？</li></ul></li><li><p>第一种做法，通过固有函数作为执行者，传入不同环境实现不同行为的多态；</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 世界类（抽象父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>(metaclass=ABCMeta):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 抽象方法</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;与炎魔战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;与霜魔战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 战斗</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">obj</span>):</span><br><span class="line">    obj.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数调用，传入不同的子类对象实现执行不同行为</span></span><br><span class="line">fight(Fire())</span><br><span class="line">fight(Cold())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">f = Fire()</span></span><br><span class="line"><span class="string">c = Cold()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fight(f)</span></span><br><span class="line"><span class="string">fight(c)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>第二种做法，通过普通父类的方法去执行子类的方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类（父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self, obj</span>):</span><br><span class="line">        obj.fight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 火山类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;与炎魔战斗！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 寒冰类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cold</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;与霜魔战斗！&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">w = World()</span><br><span class="line"><span class="comment"># 调用父类的方法执行子类的方法</span></span><br><span class="line">w.fight(Fire())</span><br><span class="line">w.fight(Cold())</span><br></pre></td></tr></table></figure><ul><li>好处：当有非常多的副本，但他们通用的功能是战斗，而战斗的细节又不同，就避免大量的if等判断操作。</li></ul><hr><h2 id="二十三、面向对象工具箱">二十三、面向对象工具箱</h2><h3 id="1-工具箱合集">1. 工具箱合集</h3><blockquote><p>面向对象中，有很多工具方法来更方便的查询或构建我们的代码</p></blockquote><ul><li>一般带有前后两个下划线的方法，称为魔术方法：<ul><li>__ init __ ()  ：初始化函数，或称为构造方法，当实例化时</li><li>__ str __ () ：打印对象时，替代原本的描述信息</li><li>__ del __()  ：析构函数，和 初始化 正好相反，当删除实例化对象时触发</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># __str__() 替代本来的对象描述</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是一个世界类&quot;</span> + <span class="built_in">str</span>(self.x)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 析构函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除对象时，我被触发&quot;</span> + <span class="built_in">str</span>(self.y))</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">w = World(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(w)</span><br><span class="line"><span class="keyword">del</span> w</span><br></pre></td></tr></table></figure><h3 id="2-super-函数">2. super()函数</h3><blockquote><p>重写父类方法时，我们还需要得到父类方法最终的结果，使用super()函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 世界类（父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;World！&quot;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 火类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fire</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 通过 super()函数调用父类方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().run() + <span class="string">&quot;Fire！&quot;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">f = Fire()</span><br><span class="line"><span class="built_in">print</span>(f.run())</span><br></pre></td></tr></table></figure><hr><h2 id="二十四、实训-塞尔达传说①">二十四、实训.塞尔达传说①</h2><h3 id="1-需求分析">1. 需求分析</h3><blockquote><p>从本节课开始，我们用面向对象实战一款经典的开放世界文字版：塞尔达传说</p></blockquote><ul><li>具体要求如下：<ul><li>游戏开始，醒来，系统让你输入用户名；</li><li>当然，不管你输入什么（除了林克），系统都会纠正你叫“林克”；输入正确，不会纠正；</li><li>你走出洞穴，生命体只有1颗星，遇到烤火老爷爷，要给你两个烤苹果；</li><li>你接受吃了烤苹果，则变成3颗星，你走入寒冰区，老爷爷要给你防寒服，你可以选择；</li><li>防寒服可以增加你在本区域的防御值，你原本的防御值为1，遇到寒冰怪，血量为1，它先手；</li><li>对战胜利或失败，失败退出游戏；胜利后，进入火山区，矿工要给你防火服，同上；</li><li>然后，走入城堡拯救公主，公主介绍Boss，攻击力10000，防御力4000，生命值5000，它先手；</li><li>她说可以给你一把攻击力8999的光之弓，还加送一张先手祝福之卷轴；胜利或失败；</li></ul></li></ul><h3 id="2-初始化数据">2. 初始化数据</h3><blockquote><p>直接面向对象，对于新手来说不太容易，先面向过程开始，从底层打工开始</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 游戏开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;游戏开始....&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;林克，林克，林克，醒一醒....&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化名字</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> name != <span class="string">&quot;林克&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你忘了吗？你叫林克！&quot;</span>)</span><br><span class="line">    name = <span class="string">&quot;林克&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 初始化血量</span></span><br><span class="line">life = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n走出洞穴，遇到一个老爷爷，他要送你两个烤苹果！&quot;</span>)</span><br><span class="line">flag = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;是否接受？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">    life += <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你的生命值+2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化防御力</span></span><br><span class="line">defence = <span class="number">1</span></span><br><span class="line"><span class="comment"># 初始化攻击力</span></span><br><span class="line">attack = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目前状态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n目前生命值：%d，防御力：%d，攻击力：%d&quot;</span>%(life, defence, attack))</span><br></pre></td></tr></table></figure><hr><h2 id="二十五、实训-塞尔达传说②">二十五、实训.塞尔达传说②</h2><h3 id="1-对战系统">1. 对战系统</h3><blockquote><p>和怪物攻击，默认怪先手，通过数值加减来判断胜利或失败</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 走入寒冰区</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n走入寒冰区，老爷爷要送你防寒服！&quot;</span>)</span><br><span class="line"><span class="comment"># 区域防御力</span></span><br><span class="line">defence_cold = <span class="number">0</span></span><br><span class="line">flag = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;是否接受？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">    defence_cold = defence + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你的寒冰区防御力+1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遇到第一个怪</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n你遇到了寒冰怪，开始挑战！&quot;</span>)</span><br><span class="line">enemy1_atk = <span class="number">2</span></span><br><span class="line">enemy1_life = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 互相攻击，直到一方倒下</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 怪物先手，开始攻击，攻击算法：怪物攻击力 - 玩家防御力</span></span><br><span class="line">    <span class="comment"># 玩家的生命值 = 玩家生命总量 - （怪物攻击力 - 玩家区域防御力）</span></span><br><span class="line">    <span class="comment"># 吃满buff第一轮：3 - (2 - 2) = 3</span></span><br><span class="line">    <span class="comment"># 不吃buff第一轮：1 - (2 - 1) = 0 死了</span></span><br><span class="line">    life = life - (enemy1_atk - defence_cold)</span><br><span class="line">    <span class="comment"># 判断玩家生命</span></span><br><span class="line">    <span class="keyword">if</span> life &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;挑战失败！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Game over！&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 玩家开始攻击</span></span><br><span class="line">    enemy1_life = enemy1_life - attack</span><br><span class="line">    <span class="comment"># 判断怪物的生命</span></span><br><span class="line">    <span class="keyword">if</span> enemy1_life &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你胜利了！目前生命值为：%d&quot;</span>%life)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胜利后继续走入火山区</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n胜利后继续走入火山区&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目前状态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n目前生命值：%d，防御力：%d，攻击力：%d&quot;</span>%(life, defence, attack))</span><br></pre></td></tr></table></figure><h3 id="2-退出机制">2. 退出机制</h3><blockquote><p>胜利后可继续往下执行，但失败后，要退出整个系统，需要函数处理</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 游戏开始</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><hr><h2 id="二十六、实训-塞尔达传说③">二十六、实训.塞尔达传说③</h2><h3 id="1-重复对战">1. 重复对战</h3><blockquote><p>直接继续复制寒冰区的代码即可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取防火服</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n火山区矿工告诉你，里面很热，需要防火服&quot;</span>)</span><br><span class="line"><span class="comment"># 区域防御力</span></span><br><span class="line">defence_fire = <span class="number">0</span></span><br><span class="line">flag = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;是否接受？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">defence_fire = defence + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你的火山区防御力+1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遇到第一个怪</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n你遇到了熔岩怪，进入战斗模式！&quot;</span>)</span><br><span class="line">enemy2_atk = <span class="number">2</span></span><br><span class="line">enemy2_life = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 互相攻击，直到一方倒下</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">life = life - (enemy2_atk - defence_fire)</span><br><span class="line"><span class="comment"># 判断玩家生命</span></span><br><span class="line"><span class="keyword">if</span> life &lt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;挑战失败！&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Game over！&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 玩家开始攻击</span></span><br><span class="line">enemy2_life = enemy2_life - attack</span><br><span class="line"><span class="comment"># 判断怪物的生命</span></span><br><span class="line"><span class="keyword">if</span> enemy2_life &lt;= <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你胜利了！目前生命值为：%d&quot;</span>%life)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 胜利后继续走入城堡</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n胜利后走入城堡迎接公主&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目前状态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n目前生命值：%d，防御力：%d，攻击力：%d&quot;</span>%(life, defence, attack))</span><br></pre></td></tr></table></figure><h3 id="2-Boss登场">2. Boss登场</h3><blockquote><p>介绍Boss和初始化数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 公主介绍Boss</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n公主：我的骑士啊！恶魔的攻击力为10000，防御力4000，生命值5000，而且先手！&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我这里有一把攻击力为8999光之弓，还有一张先手祝福之卷轴！&quot;</span>)</span><br><span class="line">flag1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;是否接受光之弓？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>))</span><br><span class="line">flag2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;是否接受先手祝福之卷轴？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恶魔数据</span></span><br><span class="line">enemy3_life = <span class="number">5000</span></span><br><span class="line">enemy3_defence = <span class="number">4000</span></span><br><span class="line">enemy3_atk = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新攻击力</span></span><br><span class="line"><span class="keyword">if</span> flag1 == <span class="number">1</span>:</span><br><span class="line">attack += <span class="number">8999</span></span><br></pre></td></tr></table></figure><hr><h2 id="二十七、实训-塞尔达传说④">二十七、实训.塞尔达传说④</h2><h3 id="1-Boss对战">1. Boss对战</h3><blockquote><p>Boss对战和小怪基本一致，主要是否接受先手Buff这个条件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 互相攻击，直到一方倒下</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 判断先手</span></span><br><span class="line">    <span class="keyword">if</span> flag2 == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 玩家开始攻击</span></span><br><span class="line">        enemy3_life = enemy3_life + enemy3_defence - attack</span><br><span class="line">        <span class="comment"># 取消先手buff</span></span><br><span class="line">        flag2 = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 判断怪物的生命</span></span><br><span class="line">        <span class="keyword">if</span> enemy3_life &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n你战胜了恶魔，拯救了公主，游戏通关！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    life = life - (enemy3_atk - defence)</span><br><span class="line">    <span class="comment"># 判断玩家生命</span></span><br><span class="line">    <span class="keyword">if</span> life &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你被恶魔打败啦，公主也没救回来！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Game over！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 玩家开始攻击</span></span><br><span class="line">    enemy3_life = enemy3_life + enemy3_defence - attack</span><br><span class="line">    <span class="comment"># 判断怪物的生命</span></span><br><span class="line">    <span class="keyword">if</span> enemy3_life &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n你战胜了恶魔，拯救了公主，游戏通关！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>员工的编码思维已经做完，后面要改成面向对象的方式。</li></ul><hr><h2 id="二十八、实训-塞尔达传说⑤">二十八、实训.塞尔达传说⑤</h2><h3 id="1-旁白类">1. 旁白类</h3><blockquote><p>文字游戏，太多旁白，我们先从这里入手进行整理吧</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 旁白类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Aside</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开场语音</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏开始....&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;林克，林克，林克，醒一醒....&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 介绍Boss</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">boss</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n公主：我的骑士啊！恶魔的攻击力为10000，防御力4000，生命值5000，而且先手！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我这里有一把攻击力为8999光之弓，还有一张先手祝福之卷轴！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 游戏胜利</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">win</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你战胜了恶魔，拯救了公主，游戏通关！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 败于谁下</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">who</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你被%s打败啦，公主也没救回来！&quot;</span>%name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 游戏失败</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">over</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Game over！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 战斗旁白</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n你遇到了%s，进入战斗模式！&quot;</span>%name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单局胜利</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">single</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;恭喜你战胜了%s！&quot;</span>%name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 人物状态</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">status</span>(<span class="params">life, defence, attack</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;目前生命值：%d，防御力：%d，攻击力：%d&quot;</span>%(life, defence, attack))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入提示</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">input</span>(<span class="params">info</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span>(<span class="string">&quot;是否接受%s？接受输入-&gt;1，不接受输入-&gt;0：&quot;</span>%info)</span><br></pre></td></tr></table></figure><ul><li>然后，在主程序用静态方法来调用这些归类好的方法即可：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开场</span></span><br><span class="line">Aside.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">Aside.who(name)</span><br><span class="line">Aside.over()</span><br><span class="line"></span><br><span class="line"><span class="comment">#...</span></span><br></pre></td></tr></table></figure><hr><h2 id="二十九、实训-塞尔达传说⑥">二十九、实训.塞尔达传说⑥</h2><h3 id="1-人物类">1. 人物类</h3><blockquote><p>将玩家的数据信息，单独通过一个类来管理调用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 人物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, life, defence, attack</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__life = life</span><br><span class="line">        self.__defence = defence</span><br><span class="line">        self.__attack = attack</span><br><span class="line">        self.__defence_cold = <span class="number">0</span></span><br><span class="line">        self.__defence_fire = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">life</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__life</span><br><span class="line"></span><br><span class="line"><span class="meta">    @life.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">life</span>(<span class="params">self, life</span>):</span><br><span class="line">        self.__life = life</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__defence</span><br><span class="line"></span><br><span class="line"><span class="meta">    @defence.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence</span>(<span class="params">self, defence</span>):</span><br><span class="line">        self.__defence = defence</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__attack</span><br><span class="line"></span><br><span class="line"><span class="meta">    @attack.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self, attack</span>):</span><br><span class="line">        self.__attack = attack</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence_cold</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__defence_cold</span><br><span class="line"></span><br><span class="line"><span class="meta">    @defence_cold.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence_cold</span>(<span class="params">self, defence_cold</span>):</span><br><span class="line">        self.__defence_cold = defence_cold</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence_fire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__defence_fire</span><br><span class="line"></span><br><span class="line"><span class="meta">    @defence_cold.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence_fire</span>(<span class="params">self, defence_fire</span>):</span><br><span class="line">        self.__defence_fire = defence_fire</span><br></pre></td></tr></table></figure><ul><li>然后通过Aside开场时，生成人物对象，在主程序操作人物数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开场语音</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;游戏开始....&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;林克，林克，林克，醒一醒....&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化名字</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;林克&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你忘了吗？你叫林克！&quot;</span>)</span><br><span class="line">        name = <span class="string">&quot;林克&quot;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment"># 实例化人物数据</span></span><br><span class="line">     p = Person(name, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">     <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure><ul><li>主程序，涉及到人物的六个属性时，全部加上<strong>对象.属性</strong>的格式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 攻击</span></span><br><span class="line">p.life = p.life - (enemy1_atk - p.defence_cold)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目前状态</span></span><br><span class="line">Aside.status(p.life, p.defence, p.attack)</span><br></pre></td></tr></table></figure><hr><h2 id="三十、实训-塞尔达传说⑦">三十、实训.塞尔达传说⑦</h2><h3 id="1-怪物类">1. 怪物类</h3><blockquote><p>将怪物的数据信息，单独通过一个类来管理调用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 怪物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span>:</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, life, attack, defence = <span class="number">0</span></span>):</span><br><span class="line">        self.__life = life</span><br><span class="line">        self.__attack = attack</span><br><span class="line">        self.__defence = defence</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">life</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__life</span><br><span class="line"></span><br><span class="line"><span class="meta">    @life.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">life</span>(<span class="params">self, life</span>):</span><br><span class="line">        self.__life = life</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__attack</span><br><span class="line"></span><br><span class="line"><span class="meta">    @attack.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self, attack</span>):</span><br><span class="line">        self.__attack = attack</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__defence</span><br><span class="line"></span><br><span class="line"><span class="meta">    @defence.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">defence</span>(<span class="params">self, defence</span>):</span><br><span class="line">        self.__defence = defence</span><br></pre></td></tr></table></figure><ul><li>主程序，涉及到怪物的三个属性时，全部加上<strong>对象.属性</strong>的格式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建寒冰怪，实例化</span></span><br><span class="line">en1 = Enemy(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 怪物属性调用</span></span><br><span class="line">p.life = p.life - (en1.attack - p.defence_cold)</span><br></pre></td></tr></table></figure><hr><h2 id="三十一、实训-塞尔达传说⑧">三十一、实训.塞尔达传说⑧</h2><h3 id="1-战斗类">1. 战斗类</h3><blockquote><p>将小怪和boss战的逻辑，存储到一个单独的类进行管理</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 战斗类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fight</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 和普通怪战斗</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">general</span>(<span class="params">p, en, Aside, defence</span>):</span><br><span class="line">        <span class="comment"># 互相攻击，直到一方倒下</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 怪物先手：攻击：怪物攻击力 - 玩家防御力</span></span><br><span class="line">            <span class="comment"># 玩家生命值 = 玩家生命总量 - (怪物攻击 - 玩家区域防御力)</span></span><br><span class="line">            <span class="comment"># 吃满buff第一轮：3 - (2 - 2) = 3</span></span><br><span class="line">            <span class="comment"># 不吃buff第一轮：1 - (2 - 1) = 0 死亡</span></span><br><span class="line">            p.life = p.life - (en.attack - defence)</span><br><span class="line">            <span class="comment"># 判断玩家生命</span></span><br><span class="line">            <span class="keyword">if</span> p.life &lt;= <span class="number">0</span>:</span><br><span class="line">                Aside.who(en.name)</span><br><span class="line">                Aside.over()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 玩家开始攻击</span></span><br><span class="line">            en.life = en.life - p.attack</span><br><span class="line">            <span class="comment"># 判断怪物的生命</span></span><br><span class="line">            <span class="keyword">if</span> en.life &lt;= <span class="number">0</span>:</span><br><span class="line">                Aside.single(en.name)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 和Boss战斗</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">boss</span>(<span class="params">p, en, Aside, flag2</span>):</span><br><span class="line">        <span class="comment"># 互相攻击</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 判断先手</span></span><br><span class="line">            <span class="keyword">if</span> flag2 == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 玩家攻击</span></span><br><span class="line">                en.life = en.life + en.defence - p.attack</span><br><span class="line">                <span class="comment"># 取消先手</span></span><br><span class="line">                flag2 = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 判断怪物生命</span></span><br><span class="line">                <span class="keyword">if</span> en.life &lt;= <span class="number">0</span>:</span><br><span class="line">                    Aside.win()</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment"># 正常手（没有buff，我就是先手，有buff，我就是后手）</span></span><br><span class="line">            p.life = p.life - (en.attack - p.defence)</span><br><span class="line">            <span class="comment"># 判断玩家生命</span></span><br><span class="line">            <span class="keyword">if</span> p.life &lt;= <span class="number">0</span>:</span><br><span class="line">                Aside.who(en.name)</span><br><span class="line">                Aside.over()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 玩家攻击</span></span><br><span class="line">            en.life = en.life + en.defence - p.attack</span><br><span class="line">            <span class="comment"># 判断怪物生命</span></span><br><span class="line">            <span class="keyword">if</span> en.life &lt;= <span class="number">0</span>:</span><br><span class="line">                Aside.win()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>主程序调用的时候，直接传入必要的参数即可：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建熔岩怪</span></span><br><span class="line">en2 = Enemy(<span class="string">&quot;熔岩怪&quot;</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 遇到第二个怪，熔岩怪</span></span><br><span class="line">Aside.fight(en2.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 战斗</span></span><br><span class="line"><span class="keyword">if</span> Fight.general(p, en2, Aside, p.defence) == <span class="literal">False</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Boss</span></span><br><span class="line">en3 = Enemy(<span class="string">&quot;恶魔&quot;</span>, <span class="number">5000</span>, <span class="number">10000</span>, <span class="number">4000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 战斗</span></span><br><span class="line"><span class="keyword">if</span> Fight.boss(p, en3, Aside, flag2) == <span class="literal">False</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><hr><h2 id="三十二、实训-塞尔达传说⑨">三十二、实训.塞尔达传说⑨</h2><h3 id="1-场景类">1. 场景类</h3><blockquote><p>目前四个场景都在主程序中，分成独立类，方便以后扩展升级</p></blockquote><ul><li>在main.py中，执行主函数，已经只是调用关系，根据场景一一调用，非常清晰</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入类库</span></span><br><span class="line"><span class="keyword">from</span> Aside2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Original2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Cold2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Fire2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Castle2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 开场语音</span></span><br><span class="line">    p = Aside.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景一</span></span><br><span class="line">    o = Original()</span><br><span class="line">    o.<span class="built_in">exec</span>(p, Aside)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行场景二</span></span><br><span class="line">    c = Cold()</span><br><span class="line">    c.<span class="built_in">exec</span>(p, Aside)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景三</span></span><br><span class="line">    f = Fire()</span><br><span class="line">    f.<span class="built_in">exec</span>(p, Aside)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景四</span></span><br><span class="line">    cc = Castle()</span><br><span class="line">    cc.<span class="built_in">exec</span>(p, Aside)</span><br></pre></td></tr></table></figure><ul><li>创建世界的抽象父类，在基础知识部分学习过，其它四个场景，则继承它</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">from</span> Enemy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Fight2 <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 世界类（抽象父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">World</span>(metaclass=ABCMeta):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 抽象方法，执行场景</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exec</span>():<span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>子类的构建如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> World2 <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 初始场景（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Original</span>(<span class="title class_ inherited__">World</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exec</span>(<span class="params">self, p, Aside</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n走出洞穴，遇到一个老爷爷，他要送你两个烤苹果！&quot;</span>)</span><br><span class="line">        flag = <span class="built_in">int</span>(Aside.<span class="built_in">input</span>(<span class="string">&quot;烤苹果&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            p.life += <span class="number">2</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你的生命值+2&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 统计目前状态</span></span><br><span class="line">        Aside.status(p.life, p.defence, p.attack)</span><br></pre></td></tr></table></figure><ul><li>其余的三个子类，一模一样，不再贴代码。</li><li>这么做的好处显而易见，扩展场景，只需要在这个类中设计即可</li></ul><hr><h2 id="三十三、实训-塞尔达传说⑩">三十三、实训.塞尔达传说⑩</h2><h3 id="1-启动主程序">1. 启动主程序</h3><blockquote><p>观察目前结构，调整重复代码，并实现场景的多态调用，实现总裁式一行启动模式</p></blockquote><ul><li>在World类中，增加一个统计数据的方法，来避免每个子类重复操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stats</span>(<span class="params">self, p</span>):</span><br><span class="line">    <span class="comment"># 统计目前状态</span></span><br><span class="line">    Aside.status(p.life, p.defence, p.attack)</span><br></pre></td></tr></table></figure><ul><li>子类调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计目前状态</span></span><br><span class="line"><span class="built_in">super</span>().stats(p)</span><br></pre></td></tr></table></figure><ul><li><p>Aside类，直接通过World引入，避免前台传递Aside类</p></li><li><p>在World类中，创建一个静态方法，实现多态的调用效果</p></li><li><p>由于return 被封装到子类的方法里了，无法实现退出函数，需要再传递回来</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">obj, p</span>):</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="built_in">exec</span>(p)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 开场语音</span></span><br><span class="line">    p = Aside.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景一（初始区）</span></span><br><span class="line">    World.run(Original(), p)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行场景二（寒冰区）</span></span><br><span class="line">    <span class="keyword">if</span> World.run(Cold(), p) == <span class="literal">False</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景三（火山区）</span></span><br><span class="line">    <span class="keyword">if</span> World.run(Fire(), p) == <span class="literal">False</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行场景四（城堡区）</span></span><br><span class="line">    <span class="keyword">if</span> World.run(Castle(), p) == <span class="literal">False</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 战斗</span></span><br><span class="line"><span class="keyword">if</span> Fight.general(p, en1, Aside, p.defence_cold) == <span class="literal">False</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>实现主程序一行调用，<a href="http://xn--game-955ft9ofqdqtoxvgp3gr4eyt3fxjnd1pes0c.py">可以将总调用程序复制给game.py</a>。然后用mian执行game即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入game</span></span><br><span class="line"><span class="keyword">import</span> game2 <span class="keyword">as</span> g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 塞尔达，启动</span></span><br><span class="line">g.main()</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csp-j1知识点总结</title>
      <link href="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、这为本人总结内容，主观性比较强，可以部分借鉴但不建议完全效仿；</li><li>2、如有使用或转载请注明出处；</li><li>3、如有不足，欢迎批评指正；</li></ul><hr><h1>CSP-J 第一轮知识点总结</h1><hr><h2 id="题目类型整理">* 题目类型整理</h2><table><thead><tr><th><strong>题型</strong></th><th><strong>知识点类型</strong></th><th><strong>题目</strong>数量</th></tr></thead><tbody><tr><td>单选</td><td>信息学史&amp;基本知识</td><td>8-10</td></tr><tr><td>单选</td><td>C++语法知识点</td><td>2-3</td></tr><tr><td>单选</td><td>数据结构&amp;算法</td><td>3-4</td></tr><tr><td>单选</td><td>数学&amp;逻辑学&amp;运筹学</td><td>3-4</td></tr><tr><td>单选</td><td>比赛相关知识</td><td>1-2</td></tr><tr><td>问题求解</td><td>数学</td><td>1</td></tr><tr><td>问题求解</td><td>数据结构</td><td>1</td></tr><tr><td>模拟程序运行</td><td>C++语法&amp;算法</td><td>4</td></tr><tr><td>完善程序</td><td>C++语法&amp;算法</td><td>2</td></tr></tbody></table><hr><h2 id="一、信息学及计算机史">一、信息学及计算机史</h2><ul><li><strong>计算机的顶级奖项</strong>：图灵奖、冯·诺依曼奖</li></ul><p>图灵奖：由ACM（美国计算机协会）设立于1966年。是“计算机界的诺贝尔奖”。</p><p>冯·诺依曼奖：由IEEE设立。</p><ul><li><strong>对信息科学做出突出贡献的大神</strong>：图灵（所以才有个奖），冯 · 诺伊曼</li><li><strong>中国获图灵奖的大神</strong>：姚期智（清华就有姚班，就是以他的名字命名的）</li><li><strong>世界第一台电子计算机</strong>：埃尼阿克（𝐸𝑁𝐼𝐴𝐶），于1946年2月14日在美国宾夕法尼亚大学诞生。又被叫做电子管计算机。</li></ul><hr><h2 id="二、关于编程">二、关于编程</h2><ul><li><strong>编程语言</strong>：</li></ul><p>分两类：面向对象和面向过程。</p><ul><li><strong>高级语言和低级语言的区别</strong>：</li></ul><p>高级语言需要编译运行，常数较大，运行速度慢。而低级语言常数极小，运行速度快。此外，高级语言更容易移植。</p><ul><li><strong>常见低级语言</strong>：</li></ul><p>汇编</p><ul><li><strong>面向对象的高级语言</strong>：</li></ul><p>C++，Java，EIFFEL，Simula 67等。</p><ul><li><strong>面向过程的高级语言</strong>：</li></ul><p>C，Fortran语言。</p><ul><li><strong>递归编程</strong>：</li></ul><p>递归是指一种通过重复将问题分解为同类的子问题而解决问题的方法。递归式方法可以被用于解决很多的计算机科学问题。简单来讲，就是“自身调用自身”（在函数中）。</p><ul><li><strong>P类/NP类/NPC类问题</strong>：</li></ul><p>1、P类问题：如果一个问题能找到一个在多项式时间内解决它的算法，那么这个问题就是P问题。</p><p>2、NP类问题：注意：NP问题<strong>不是非P类问题</strong>，而是在多项式时间内验证一个解的问题。或者，我们可以将其理解为在多项式时间内猜出一个解的问题。</p><p>3、NPC类问题：定义如下：如果一个问题是NP问题，而且所有的NP问题都可以约化到它。那么它就是NPC类问题。再来介绍一下关于约化的定义：如果一个问题A可以约化为问题B，含义就是这个问题A可以用问题B的解法来解决。</p><h3 id="NOIP-CSP等的历史、大事件、参赛要求（每年都考）">*NOIP / CSP等的历史、大事件、参赛要求（每年都考）</h3><ul><li><p>NOI：中国计算机学会于1984年（当年，*提出计算机要从娃娃抓起）创办全国青少年计算机程序设计竞赛，即全国青少年信息学奥林匹克竞赛，是国内包括港澳在内的省级代表队最高水平的大赛。</p></li><li><p>NOIP：中国计算机学会于1995年创办全国青少年信息学奥林匹克联赛。NOIP在同一时间、不同地点以各省市为单位由特派员组织。全国统一大纲、统一试卷，初、高中或其他中等专业学校的学生可报名参加。联赛分初赛和复赛，初赛考察通用和实用的计算机科学知识，以笔试为主。复赛为程序设计，须在计算机上调试完成。参加初赛者须达到一定分数线后才有资格参加复赛。联赛分普及组和提高组两个组别，难度不同，分别面向初中和高中阶段的学生。</p></li><li><p>从2005年开始，NOIP不再支持Basic；从2022年开始，不再支持Pascal。</p></li><li><p>选手进入考场时，只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，NOI各省特派员可直接取消违规选手的参赛资格。</p></li><li><p>CCSP：大学生计算机系统与程序设计竞赛，由中国计算机学会(CCF)于2016年发起的一个面向大学生的竞赛，每年举办一次，考察的是算法、编程以及计算机系统设计能力，旨在进一步提高计算机教育质量，使学生通过竞赛进一步学习和掌握计算机系统知识，同时对高校计算机教育产生引领作用。</p></li><li><p>CSP：中国计算机学会于2014年推出CCF计算机软件能力认证，该项认证重点考察软件开发者实际编程能力，由中国计算机学会统一命题、统一评测，委托各地设立的考试机构进行认证考试。该项认证每年大约3、9、12月各举办一次。认证者不限年龄，不限学历，不限报考次数，不限国籍 ，在报名官网注册账户后均可报名参加认证。语言：C/C++(Dev-CPP 5.4.0 (Min GW 4.7.2))，Java(Eclipse (Java SDK 1.7.0_15))，Python(3.6.5) 浏览器：Chrome</p><blockquote><p>CSP认证考试可以带纸质资料进入考场，不过只能是常用语言的程序设计基础书、数据结构的相关书籍。不允许U盘、手机等电子设备进入考场。</p><p>CSP-S/J：认证开始15分钟后，认证者不能再进入认证点。如有认证者提前离开认证点，除身体特别原因外，须在认证进行2小时后方可准予离开。在第一轮认证期间，任何人不得将试卷携带出考场。认证者进入考场时，监考检查认证者携带物品。认证者只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，CSP-J/S认证总负责人可直接取消违规认证者的参加资格。</p></blockquote></li></ul><hr><h2 id="三、关于计算机">三、关于计算机</h2><p>先上张大图：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/1.png" alt></p><ul><li><p><strong>重要设备</strong>：</p><p>硬件组成：</p><ol><li>控制器(Control):是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。</li><li>运算器(Datapath):运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。</li><li>存储器(Memory):存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。</li><li>输入设备(Input system):输入设备是计算机的重要组成部分，输入设备与输出设备合称为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。</li><li>输出设备(Output system):输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。</li></ol></li><li><p><strong>CPU及存储</strong>：</p></li></ul><p>CPU（中央处理器）=运算器+控制器+寄存器</p><p>运算器=算术逻辑运算单元（ALU）及浮点运算单元（FPU）</p><p>存储器=内存储器+外存储器</p><p>BIOS是英文&quot;Basic Input Output System&quot;的缩略语，直译过来后中文名称就是&quot;基本输入输出系统&quot;。其实，它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、系统设置信息、开机后自检程序和系统自启动程序。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。</p><p>随机存储器RAM的“随机”指“随时访问”</p><p>所以，我们记下来以下知识点：</p><p><strong>断电后可以保存数据：硬盘，ROM</strong></p><p><strong>断电后不可以保存数据：显存（显卡内存），RAM，CPU</strong></p><ul><li><strong>计算机各存储单位及进位关系</strong>：</li></ul><p>计算机的存储单位有以下几种：<br>$$<br>𝑇𝐵/𝐺𝐵/𝑀𝐵/𝐾𝐵/𝐵<br>$$<br>他们之间的进位关系为 $1024$</p><p>特殊地，$1B=8(bit)$ ，这里的 $𝑏𝑖𝑡$ 是二进制下的一位内存。</p><h3 id="机内代码及其运算">* 机内代码及其运算</h3><p>原码：设X，若为非负数，则符号位为0，其余各位取值不变，否则符号位为1。如：</p><p>X=+1110001，则[X]原=01110001；X=-1110001，则[X]原=11110001。</p><p>反码：设X，若为非负数，则与原码相同，否则符号位为1，其余各位取值求反。如：</p><p>X=+1110001，则[X]反=01110001；X=-1110001，则[X]反=10001110。</p><p>补码：设X，若为非负数，则与原码相同，若为负数，则为反码加1。如：</p><p>X=+1110001，则[X]补=01110001；X=-1110001，则[X]补=10001111。</p><p>负补：对补码（包括符号位）的每一位求反，且最低位加1。如：</p><p>X=+1110001，[-X]补=10001111。</p><p>[X+Y]补=[X]补+[Y]补，[X-Y]补=[X]补-[Y]补=[X]补+[-Y]补（最高位产生的进位要丢掉）</p><hr><h2 id="四、进制及进制转化">四、进制及进制转化</h2><h4 id="十进制转任意进制">十进制转任意进制</h4><p>将十进制转换成N𝑁进制，只需把十进制数每次除N𝑁求余数，然后把余数逆序写出来。</p><p>看不懂就看图：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/2.png" alt></p><p>这是二进制的图，其他进制就类比推一下就可以了。如果这个看不懂的话就不要参加初赛了，50块钱买点啥不好…</p><h4 id="任意进制转十进制">任意进制转十进制</h4><p>简单说就是：按位转，第i𝑖位的数字乘以要转换的进制的𝑛−1次幂即可。</p><p>还是上图：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/3.png" alt></p><h4 id="任意进制互相转化">任意进制互相转化</h4><p>这里考虑用十进制做中转，先把A𝐴进制转十进制，再把十进制转B𝐵进制。</p><h4 id="关于小数的进制转换">关于小数的进制转换</h4><p>十进制转任意进制的小数不进行除法运算，而进行乘法运算后取整，取整后从前向后排列。</p><p>任意进制转十进制的小数只需要乘上负指数，最后算出来即可。</p><h4 id="各进制的字母表达">各进制的字母表达</h4><p>$𝐻(𝐻𝑒𝑥𝑎𝑑𝑒𝑐𝑖𝑚𝑎𝑙)——16进制$</p><p>$𝐷(𝐷𝑒𝑐𝑖𝑚𝑎𝑙)——10进制$</p><p>$𝑂(𝑂𝑐𝑡𝑜𝑛𝑎𝑟𝑦)——8进制$</p><p>$𝐵(𝐵𝑖𝑛𝑎𝑟𝑦)——2进制$</p><h4 id="二进制的相关知识">二进制的相关知识</h4><p>二进制是计算机进行计算所使用的工具，自然也是非常常考的要点。二进制的相关知识有许多，甚至算法中的位运算也是二进制的相关内容，但为了过第一轮初赛，我们只介绍一些理论知识。关于位运算的相关知识请有兴趣的同学自己学习。</p><ul><li><strong>1、原码</strong></li></ul><p>顾名思义，原码就是十进制数直接转换成二进制之后直接形成的二进制编码。</p><ul><li><strong>2、补码</strong></li></ul><p>正数的补码是本身，负数的补码是其<strong>反码加一</strong>。</p><ul><li><strong>3、反码</strong></li></ul><p>顾名思义：正数的反码是本身，负数的反码是其除符号位之外的所有位按位取反的结果。</p><h4 id="附：ASCII码">附：ASCII码</h4><p>ASCII（American Standard Code for Information Interchange，美国标准信息交流码）码是目前微型计算机中使用最广泛的一种字符编码，用7位二进制数来编码（占一个字节），可表示128个字符，最高位为0或作奇偶校验用。</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/10.jpg" alt></p><hr><h2 id="五、位运算">五、位运算</h2><p>位运算不仅在初赛中是一个知识点分类，在复赛（即真正的程序设计与运用）的时候也有很大的一个应用。而且，位运算的相关知识是计算机运算的灵魂，更是每个程序猿应该理解的一种基本操作。</p><h3 id="1、与-运算">1、与(&amp;)运算</h3><h4 id="1-运算法则">(1)运算法则</h4><p>两个二进制数进行与&amp;运算，如果对应位都为1则结果为1，否则为0.</p><h4 id="2-技巧及用途">(2)技巧及用途</h4><p><strong>与运算常常用于二进制下的取位操作</strong>。想要知道二进制下的某位是否是1，就&amp;上这个位数对应的十进制数。假如返回的是这个十进制数本身，则这个位的确是1，反之就是0.</p><p>比如：</p><p>我们要取第三位是否为1，我们只需要与&amp;上第三位（二进制表示为100）对应的二进制数4，如果返回值为4，就代表第三位为1，反之就是0.</p><p>最常用的是取二进制下的最末位，即a&amp;1。这样的技巧可以用于<strong>判断奇偶</strong>，根据二进制常识，尾数为1则为奇数，反之为偶数。</p><h3 id="2、或-运算">2、或(|)运算</h3><h4 id="1-运算法则-2">(1)运算法则</h4><p>两个二进制数进行或|运算，如果对应位有一个为1，结果就为1.只有在两个数的对应位置都是0的时候，结果才为0.</p><h4 id="2-技巧及用途-2">(2)技巧及用途</h4><p><strong>或运算常用于二进制特定位的赋值</strong>。想把哪个位强行变成1，就用这个数|上这个位数对应的二进制数。</p><p>还是上面那个例子，我们想让00000的第三位变成1.即十进制变4，我们直接|上4就可以。</p><p>当然，不同于&amp;运算，我们很少用|运算进行任意位赋值。通常来讲，我们只使用a|1把a的最后一位强行变成1，其实质意义是<strong>把原数加一</strong>。或者使用a|1-1再把它变为0.这个技巧通常用于<strong>把它变成它最接近的偶数</strong>。</p><h3 id="3、异或-xor-运算">3、异或(^)(xor)运算</h3><h4 id="1-运算法则-3">(1)运算法则</h4><p>两个二进制数进行异或(^)运算，如果对应位相同，不管是0或者是1，都返回1，反之返回0.</p><h4 id="2-技巧及用途-3">(2)技巧及用途</h4><p>其实没啥用途…</p><p>好吧，我介绍一个性质：一个数经过两次异或之后等于原数。</p><p>（很好理解）</p><h3 id="4、非-运算">4、非(~)运算</h3><h4 id="1-运算法则-4">(1)运算法则</h4><p>把给定二进制数全部取反。</p><h4 id="2-技巧及用途-4">(2)技巧及用途</h4><p>其实没什么运算上的用途，本蒟蒻曾看见一些大佬用这个运算判断输入是否为0…</p><p>大约长这个样子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))</span><br></pre></td></tr></table></figure><h3 id="5、左移-运算">5、左移(&lt;&lt;)运算</h3><h4 id="1-运算法则-5">(1)运算法则</h4><p>a&lt;&lt;b 表示把 a 的二进制位向左移动b位，低位用0补上。</p><h4 id="2-技巧及用途-5">(2)技巧及用途</h4><p>根据二进制的常识，我们会发现，二进制第k位上的数就等于 $2^{k-1}$。（从0开始计位）</p><p>比如，二进制下的100就是 $2^{3-1}=4$。</p><p>所以我们发现，左移运算 a&lt;&lt;b 的实质就是 $𝑎×2^k$。</p><p>左移运算最常用的技巧就是用来代替×2的整数次幂的乘法运算。因为我们普遍认为，位运算是要比四则运算加减乘除及模运算更快一些的运算。</p><h3 id="6、右移-运算">6、右移(&gt;&gt;)运算</h3><h4 id="1-运算法则-6">(1)运算法则</h4><p>a&gt;&gt;b就是把a的二进制位向右移动b位，溢出的舍去。</p><h4 id="2-技巧及用途-6">(2)技巧及用途</h4><p>类比于左移运算，我们发现右移运算就是把a除以2的整数次幂。这就是右移运算的用途——优化除法运算。</p><p>这里需要特殊说明的是，右移算法可以用在数学知识中的求最大公约数的程序块上。因为mod运算的效率慢的出奇，所以我们可以用右移运算来进行除以2的操作。据说可以提高 60% 的效率。</p><h3 id="7、位运算优先级">7、位运算优先级</h3><p>位运算的优先级是我们在处理位运算的时候常常要考虑的问题，诚然，我们可以用括号强制位运算的顺序，但是，我们还是应该学会位运算的优先级（这应该是常识）。</p><p>位运算的优先级如下：</p><p><strong>按位反（~）&gt;位移运算（&lt;&lt;,&gt;&gt;）&gt;按位与（&amp;）&gt;按位异或（^）&gt;按位或（|）</strong></p><h3 id="附：位运算在状压DP的用法">附：位运算在状压DP的用法</h3><p>众所周知，状压DP就是把状态压缩成一个01串（其实就是一个二进制数），用以减少DP数组的维数。但是我们在DP的时候就要按照01串来进行状态的转移。所以位运算是状压DP的基础知识和必备知识。所以我在本篇随笔的末尾还附上了状压DP中比较常用的操作及其二进制实现的方式。</p><p>正文：（本文中的a表示十进制下的整数）</p><p><strong>1、获得第i位的数字</strong>：(a&gt;&gt;i)&amp;1 或者 a&amp;(1&lt;&lt;i)</p><p>很好理解，我们知道可以用&amp;1来提取最后一位的数，那么我们现在要提取第i位数，就直接把第i位数变成最后一位即可（直接右移）。或者，我们可以直接&amp;上1左移i位，也能达到我们的目的。</p><p><strong>2、设置第i位为1</strong>：a=a|(1&lt;&lt;i)</p><p>我们知道强制赋值用|运算，所以就直接强制|上第i位即可。</p><p><strong>3、设置第i位为0</strong>：a=a&amp;(~(1&lt;&lt;i))</p><p>这里比较难以理解。其实很简单，我们知道非~运算是按位取反，(1&lt;&lt;i)非一下就变成了第i为是0，其它全是1的二进制串。这样再一与原数进行&amp;运算，原数的第i位无论是什么都会变成0，而其他位不会改变（实在不明白的可以用纸笔进行推演）。</p><p><strong>4、把第i位取反</strong>：a=a^(1&lt;&lt;i)</p><p>1左移i位之后再进行异或，我们就会发现，如果原数第i位是0，一异或就变成1，否则变成0。</p><p><strong>5、取出一个数的最后一个1</strong>：a&amp;(-a)</p><p>学过树状数组的同学会发现，这就是树状数组的lowbit。事实上，这和树状数组的原理是一样的。我想，不需要我多解释。</p><p>为了应对初赛的笔试题，建议读者在阅读完这篇博客之后至少应该掌握：<strong>各种位运算的运算法则以及位运算优先级</strong>。</p><h4 id="另外，对于位运算的优先级，本蒟蒻在后面的逻辑运算部分还会有详细的解析。">另外，对于位运算的优先级，本蒟蒻在后面的逻辑运算部分还会有详细的解析。</h4><h3 id="逻辑运算">逻辑运算</h3><h4 id="逻辑运算-2">逻辑运算</h4><p>逻辑运算一共有三种，每种都有两种写法：</p><p><strong>逻辑非</strong>：！或 ┐</p><p><strong>逻辑与</strong>：&amp;&amp; 或 ∧</p><p><strong>逻辑或</strong>：|| 或 ∨</p><h4 id="逻辑运算的优先级">逻辑运算的优先级</h4><p>非&gt;&gt;与&gt;&gt;或</p><h4 id="位运算-逻辑运算的优先级">位运算+逻辑运算的优先级</h4><p><strong>逻辑非（！，┐）=按位反（~）&gt;位移运算（&lt;&lt;,&gt;&gt;）&gt;不等号（&gt;=,&lt;=）&gt;等号（==,!=）&gt;按位与（&amp;）&gt;按位异或（^）&gt;按位或（|）&gt;逻辑与（&amp;&amp;，∧）&gt;逻辑或（||，∨）</strong></p><h4 id="逻辑表达式">逻辑表达式</h4><p>由逻辑运算复合而成，只有两种结果：𝑡𝑟𝑢𝑒和𝑓𝑎𝑙𝑠𝑒，在C/C++中，返回的值以0表示假，以1表示真。</p><h4 id="条件表达式">条件表达式</h4><p>条件表达式的基本形式如下：</p><p>&lt;表达式1&gt;？&lt;表达式2&gt;：&lt;表达式3&gt;</p><p>其表达意义是：如果表达式1成立，则执行表达式2，否则执行表达式3。其实也等价于𝑖𝑓−𝑒𝑙𝑠𝑒条件语句。例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Min(a,b) a&lt;b?a:b</span></span><br></pre></td></tr></table></figure><p>**注意：**如果条件表达式有多个进行复合，那么在执行的时候需要从由往左依次判断最后得出一个结果。即：<strong>右结合性</strong>。</p><p>比如：</p><p>&lt;表达式1&gt;？&lt;表达式2&gt;：&lt;表达式3&gt;？&lt;表达式4&gt;：&lt;表达式5&gt;</p><p>那么，在执行的时候是从3开始判断是否为真，然后执行某一个表达式，依次向上回溯。</p><hr><h2 id="六、简单数据结构基本理论">六、简单数据结构基本理论</h2><h3 id="1、链表">1、链表</h3><p>本篇随笔就数据结构——链表进行讲解。链表是一种特别实用的数据结构，我把它理解为<strong>数组的升级版</strong>，也就是在数组的基础上，它能做到在任意位置添加或者删除元素，而不影响其他元素。链表还是我们进行图论学习时，图的常用存储方式——邻接表（链式前向星）的实现基础。学习链表需要读者具有一定的语法基础，最好会一点点指针。（不会也没关系，我们主要讲解数组模拟链表）</p><h4 id="什么是链表">什么是链表</h4><p>链表，顾名思义，就是带链的表。我已经说过，链表属于数组的加强版。那我们可以借助数组来理解链表：如果说数组是一长排连在一起的“方块”的话，那么链表就是把这些方块“拉开“，每个方块还有两个箭头，分别指向这个方块前面的方块和后面的方块。</p><p>这样我们就可以理解，为什么链表可以支持随机插入和删除了。从某种意义上来说，这里的每一个方块都是离散的，我们在某两点插入的时候，只需要把要插入的元素，这个元素目标位置前面的元素、后面的元素的箭头改一下，就做到了插入的操作。删除同理。</p><h4 id="链表的实现原理">链表的实现原理</h4><p>根据刚才的理解，我们可以发现，我们可以用一个结构体来模拟每一个方块，结构体中存一个元素和两个指针，指针分别指向上一个元素的位置和下一个元素的位置。但是蒟蒻不会指针指针的实现比较麻烦，而且在调试的时候也不是很理想。所以我们来想指针的本质就是告诉你一个位置，那么针对于”加强数组“链表来讲，这个位置可以用什么来表示呢？</p><p><strong>对，数组下标。</strong></p><p>所以我们刚才的结构体就可以简化，变成存一个元素和两个int变量（存储数组下标）。这样，我们就可以用结构体数组模拟链表的实现。</p><h3 id="2、栈">2、栈</h3><p>想象一个桶，你从上面往里扔砖，然后你想把某一块砖拿出来，你需要先拿出来你后扔进去的砖。这就是栈。栈的基本原则是：后进先出</p><p>来一发图示？</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/7.png" alt></p><h4 id="浅谈前、中、后缀表达式">浅谈前、中、后缀表达式</h4><p>前、中、后缀表达式是信息学奥林匹克竞赛中比较鸡肋的知识点。但是知识点在考纲范围内，而且中缀表达式转后缀表达式是比较有用的知识。所以在这里为大家简单介绍一下。</p><h4 id="前缀表达式（少用）">前缀表达式（少用）</h4><p>又称波兰式（Polish Notation），操作符以前缀形式位于两个运算数前（如：3+2的前缀表达形式就是+ 3 2）。</p><h4 id="中缀表达式">中缀表达式</h4><p>操作符以中缀形式位于运算数中间（如：3+2），是我们日常通用的算术和逻辑公式表示方法。</p><p>例子：<br>$$<br>6×12+9−14。<br>$$</p><h4 id="后缀表达式">后缀表达式</h4><p>又称逆波兰式（Reverse Polish Notation - RPN），操作符以后缀形式位于两个运算数后（如：3+2的后缀表达形式就是3 2 +）。</p><p>例子：（注意！正常写是没有逗号的，这里方便区分）<br>$$<br>6 ，12 ，× ，9 ，+ ，14 ，-<br>$$</p><h4 id="后缀表达式转中缀表达式的实现：">后缀表达式转中缀表达式的实现：</h4><p>从左至右依次遍历后缀表达式各个字符（需要准备一个运算数栈存储运算数和操作结果）</p><p>1、字符为 运算数 ：</p><p>直接入栈（注：需要先分析出完整的运算数并将其转换为对应的数据类型）</p><p>2、字符为 操作符 ：</p><p>连续出栈两次，使用出栈的两个数据进行相应计算，并将计算结果入栈</p><p>注意：第一个出栈的运算数为 a ，第二个出栈的运算数为 b ，此时的操作符为 - ，则计算 b-a  （注：a和b顺序不能反），并将结果入栈。</p><p>3、重复以上步骤直至遍历完成后缀表达式，最后栈中的数据就是中缀表达式的计算结果。</p><p>还拿上面的例子：</p><p>$$<br>6 ，12 ，× ，9 ，+ ，14 ，-<br>$$</p><p>上面的式子就可以写成如下的中缀表达式：</p><p>$$<br>6×12+9−14。<br>$$</p><ul><li>特别注意：针对一个确定的中缀表达式，其所对应的后缀表达式不唯一；而针对一个确定的后缀表达式，其对应的中缀表达式是唯一的。</li></ul><h3 id="3、队列">3、队列</h3><p>想象你在排队买票，这个队伍中的人都非常有素质，都自觉排队而且不会提前离开队伍。这样就只能从队首买完票再离开，从队尾进入队伍。队列的基本原则是：先进先出。</p><p>再来一发图示：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/8.png" alt></p><h3 id="4、字符串">4、字符串</h3><p>字符串子串的概念：字符串是一串字符（废话），它的子串被定义为：字符串中<strong>任意个连续的字符组成的子序列</strong>。</p><p>字符串子串个数的计算公式：<br>$$<br>\frac{n×(n+1)}{2}+1<br>$$</p><p>（就是字符串长度等差数列）</p><p>如果是非空子串，就把那个一减去即可（子串个数的公式加一就是考虑空子串的情况）。</p><h3 id="5-树">5.树</h3><p>emmm…直观来讲，就是一张长得像树的图。定义是任意两点之间的简单路径有且只有一条。树是一棵连通且无环的图。它的边数是𝑛−1。</p><h4 id="二叉树的遍历">二叉树的遍历</h4><p>二叉树有不同的遍历方式，一般来讲，我们将其分成三类：先序遍历（也叫先根遍历）、中序遍历（中根遍历）以及后序遍历（后根遍历）。</p><ul><li><strong>先序遍历</strong>：遍历方式如下：根—左儿子—右儿子</li><li><strong>中序遍历</strong>：遍历方式如下：左儿子—根—右儿子</li><li><strong>后序遍历</strong>：遍历方式如下：左儿子—右儿子—根</li></ul><p>我们用一张图来理解一下这几种遍历方式。</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/4.png" alt></p><p>这张图的先序遍历：1245367</p><p>中序遍历：4251637</p><p>后序遍历：4526731</p><ul><li><p><strong>一个推论</strong>：</p><p>先序遍历+中序遍历=一棵确定的二叉树</p><p>后序遍历+中序遍历=一棵确定的二叉树</p><p>先序遍历+后序遍历=啥也不是</p></li></ul><h4 id="特殊二叉树及其性质">特殊二叉树及其性质</h4><ul><li><strong>完全二叉树</strong>：只有最后一层不是满的，且最后一层的所有节点均集中在左侧。</li></ul><p>图例如下：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/5.png" alt></p><ul><li><strong>满二叉树</strong>：节点个数已满。</li></ul><p>图例如下：</p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/6.png" alt></p><ul><li><strong>特殊二叉树的性质</strong>：</li></ul><p>1、对于一棵完全二叉树来讲，它的叶子节点为 $𝑛$，则节点总数为 $2×𝑛−1$。此结论可逆。</p><p>2、对于一棵满二叉树来讲，它的层数（深度）为 $𝑘$，则它的节点总数为 $2×𝑘−1$。此结论可逆。</p><h4 id="拓扑排序（这个先不讲）">拓扑排序（这个先不讲）</h4><h3 id="6-图论">6.图论</h3><p>图（Graph）是图论中的一个重要概念，用于描述由节点（顶点）和连接这些节点的边（或弧）组成的非线性数据结构。</p><h4 id="图的基本概念：">图的基本概念：</h4><ul><li><p>顶点（Vertex）：图中的基本单位，通常用于表示实体或节点。</p></li><li><p>边（Edge）：连接图中两个顶点的关系。边可以是有向的（有方向性，称为弧）或无向的（无方向性）。</p></li><li><p>路径（Path）：顶点序列，其中每两个相邻的顶点通过一条边连接。</p></li><li><p>环（Cycle）：路径中第一个顶点等于最后一个顶点的路径。</p></li><li><p><strong>连通图</strong>：顾名思义，连通图就是连通的图，即任意两点都能<strong>直接或间接</strong>到达，这就区别于完全图必须直接用边到达的定义。</p></li><li><p><strong>完全图</strong>：任意两点都有边相连，我们很容易推出来，一张完全图的边数为（𝑛为节点个数）</p></li></ul><p>$$<br>\frac{n×(n−1)}{2}<br>$$</p><ul><li><p>无向图（Undirected Graph）：所有边没有方向的图。</p></li><li><p>有向图（Directed Graph）：图中的边有方向性的图。</p></li><li><p>权重（Weight）：边或弧上关联的数值，通常用于表示边的成本或距离。</p></li></ul><h4 id="图的邻接矩阵存储：">图的邻接矩阵存储：</h4><p>邻接矩阵是用二维数组表示图的一种常见方法，其中数组元素表示顶点之间的连接关系。</p><p>定义：对于一个有n个顶点的图，邻接矩阵是一个n x n的矩阵，其中元素 a[i][j] 表示顶点 i 和顶点 j 之间是否有边或弧。如果是无向图，通常用1表示连接，0表示没有连接；如果是有向图，可以用1表示有边，0表示没有边，或者用权值表示边的权重。</p><p>优点：</p><ul><li>简单直观，易于理解和实现。</li><li>方便查找任意两个顶点之间是否有边。</li></ul><p>缺点：</p><ul><li>浪费空间：对于稀疏图（边数量远少于顶点数量），大部分矩阵元素为0，造成空间浪费。</li><li>不适合大规模图：当顶点数量非常大时，邻接矩阵的空间消耗会很大。</li></ul><h4 id="图的邻接表存储：">图的邻接表存储：</h4><p>邻接表是用链表或者类似的数据结构表示图的另一种常见方法，适合表示稀疏图。</p><p>定义：使用数组和链表的结合来表示图。数组的每个元素对应一个顶点，每个元素存储与该顶点相邻的所有顶点（即与其有边直接连接的顶点）的链表或者列表。</p><p>优点：</p><ul><li>省空间：对于稀疏图，只存储存在的边，节省了空间。</li><li>插入和删除效率高：对于边的插入和删除操作，相较于邻接矩阵更加高效。</li></ul><p>缺点：</p><ul><li><p>不便于查找任意两个顶点之间的关系：需要遍历链表来确定两个顶点是否相连，效率低于邻接矩阵。</p></li><li><p>需要额外空间来存储链表或列表。</p></li></ul><h4 id="在实际应用中，选择邻接矩阵还是邻接表取决于图的稀疏程度和需要的操作类型。稠密图适合用邻接矩阵表示，而稀疏图通常用邻接表表示。">在实际应用中，选择邻接矩阵还是邻接表取决于图的稀疏程度和需要的操作类型。稠密图适合用邻接矩阵表示，而稀疏图通常用邻接表表示。</h4><hr><h2 id="七、时空复杂度的计算">七、时空复杂度的计算</h2><ul><li><strong>时间复杂度</strong>：渐进时间复杂度用符号 $𝑂$  表示。一个程序的语句执行次数可以用一个代数式表示，那么我们取这个代数式的最高次项且忽略此项系数作为时间复杂度。如果一个程序的语句执行次数为 $2𝑛^3+3𝑛^2+𝑛+7$，那么这个程序的渐进时间复杂度为 $𝑂(𝑛^3)$ 。</li><li><strong>计算非递归程序的时间复杂度</strong>：简单粗暴，数循环。</li><li><strong>常数</strong>：常数即为我们忽略掉的𝑂中最高次项的系数与低次项所带来的时间消耗。</li><li><strong>空间复杂度</strong>：类比时间复杂度。看开空间开了多大。</li><li><strong>计算空间占用量</strong>：根据我们以上说过的计算机存储单位的知识：一个𝑖𝑛𝑡占用的内存是4𝐵，所以我们把开的𝑖𝑛𝑡乘上4，再除以1024就是𝐾𝐵，同理，再除1024就是𝑀𝐵。</li></ul><p>公式：𝑛为元素个数，𝑀为最终答案（以𝑀𝐵为单位）</p><p>$$<br>M=\frac{4𝑛}{1024×1024}<br>$$<br>$PS:一般来讲，比赛中所给的 256𝑀𝐵 内存可以开 6×10^7 个 𝑖𝑛𝑡 类型的变量。另外，大数组必须开全局变量。如果扔在主函数里极容易爆栈。$</p><hr><h2 id="八、数学、逻辑学及运筹学知识">八、数学、逻辑学及运筹学知识</h2><h3 id="1、排列和组合的定义">1、排列和组合的定义</h3><h4 id="1-排列的定义">(1)排列的定义</h4><p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素按照一定顺序排成一列，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个排列。</p><h4 id="2-排列数的定义">(2)排列数的定义</h4><p>从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有排列的个数，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的排列数。</p><h4 id="3-全排列的定义">(3)全排列的定义</h4><p>当 $𝑛=𝑚$ 时所有的排列情况叫做<strong>全排列</strong>。</p><h4 id="4-组合的定义">(4)组合的定义</h4><p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素并成一组，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个组合。</p><h4 id="5-组合数的定义">(5)组合数的定义</h4><p>从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有组合的个数，叫做从 $𝑛$ 个不同元素中取出 $m$ 个元素的组合数。</p><h4 id="6-排列-组合的区别">(6)排列&amp;组合的区别</h4><p>通俗地说，组合不分顺序，而排列分顺序，也就是说，对于数列 $1，2$ ，有以下两种排列：$1，2$ 和 $2，1$ ，但是仅有一种组合 $1，2$ 或 $2，1$ 。</p><h3 id="2、排列-组合的公式">2、排列&amp;组合的公式</h3><h4 id="1-关于排列的公式">(1)关于排列的公式</h4><p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的排列数，数学表示为：$𝐴_{𝑛}^𝑚$.</p><p>计算公式如下：</p><p>$$<br>𝐴_{𝑛}^𝑚=𝑛(𝑛−1)(𝑛−2)⋯(𝑛−𝑚+1)=\frac{𝑛!}{(𝑛−𝑚)!}<br>$$</p><h4 id="2-关于组合的公式">(2)关于组合的公式</h4><p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的组合数，数学表示为：$𝐶_{𝑛}^𝑚$.</p><p>计算公式如下：</p><p>$$<br>𝐶_{𝑛}^𝑚=\frac{𝐴_{𝑛}^𝑚}{𝑚!}=\frac{𝑛!}{𝑚!(𝑛−𝑚)!}<br>$$</p><h4 id="3-关于全排列的公式">(3)关于全排列的公式</h4><p>某个数列的全排列数 $𝑓(𝑛)$，计算公式如下：</p><p>$$<br>𝑓(𝑛)=𝑛!<br>$$</p><h3 id="3、全排列的求法">3、全排列的求法</h3><p>给定 $𝑛$ ,生成 $1−𝑛$ 的全排列。</p><p>我们考虑用递归来解决全排列问题：</p><p>递归出口是当 $x==n+1$ 地时候，绝对不能仅仅等于 $n！$</p><p>我们的递归部分使用标记数组和数列数组实现，具体实现方法可以参照下图：<br><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/9.jpg" alt></p><hr><h2 id="九、算法">九、算法</h2><h3 id="1-算法的基本概念">1.算法的基本概念</h3><p>算法的特征：有穷性，确切性，至少一个输出，可行性</p><p>表示方法：自然语言法，程序流程图法（顺序结构，选择结构，循环结构），程序法</p><h3 id="2-排序">2.排序</h3><ul><li>选择排序：对待排序的记录序列进行n-1遍的处理。第一遍处理是将L[1…n]中最小者与L[1]交换位置，第二遍处理是将L[2…n]中最小者与L[2]交换位置，以此类推，时间复杂度为O(n^2) )。选择排序是稳定排序。</li><li>插入排序：经过i-1遍处理后，L[1…i-1]已排好序。第i遍处理仅将L[i]插入L[1…i-1]的适当位置p，原来p后的元素一一向右移动一个位置，使得L[1…i]又是排好序的序列，时间复杂度为O(n^2 )。插入排序是稳定排序。</li><li>冒泡排序：又称交换排序。对待排序的记录的关键字进行两两比较，如果发现是反序的，则进行交换，时间复杂度为O( n^2 )。冒泡排序是稳定排序。</li><li>希尔排序：先将待排序列进行预排序，使待排序列接近有序，然后再对该序列进行一次插入排序，此时插入排序的时间复杂度为O(n)。</li><li>快速排序：先从数据序列中选一个元素，并将序列中所有比该元素小的元素都放在它的一边，再对左右两边分别用同样的方法处理，直到每一个待处理的序列长度为1，处理结束。时间复杂度下限为O(nlogn)，上限为O( n^2 )。快速排序是不稳定排序，基于分治思想。</li><li>归并排序：归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。时间复杂度为O(nlogn)。</li></ul><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/11.png" alt></p><p><img src="/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/12.png" alt></p><h3 id="考试用到的其他基础算法板子将在我另外一篇博客里。">考试用到的其他基础算法板子将在我另外一篇博客里。</h3><hr><h2 id="十、程序阅读">十、程序阅读</h2><h3 id="阅读程序及完善程序题答题方法">阅读程序及完善程序题答题方法</h3><h4 id="（1）阅读程序和完善程序两个大题在CSP考试当中占据70分，也就是一多半。所以，前面的选择题全对也只能得个30分。这种题不要求必须全对，但是想进入普及组复赛，必须保证拿到70-80-（约合49-56分）的分值">（1）阅读程序和完善程序两个大题在CSP考试当中占据70分，也就是一多半。所以，前面的选择题全对也只能得个30分。这种题不要求必须全对，但是想进入普及组复赛，必须保证拿到70%~80%（约合49~56分）的分值</h4><h3 id="（2）题型：">（2）题型：</h3><p>① 阅读程序先给一个完整的程序，再给2~3个判断题和1~2个选择题，类似于阅读理解。除特殊说明外，判断题一个1.5分，选择题一个3分。<br>②完善程序先给一个有残缺部分的程序，再把合适的代码依次填入空中，均为选择题（一个题3分）。类似于完形填空</p><h3 id="（3）答题技巧">（3）答题技巧</h3><p>① 拿到卷子不用先看代码，先看题，在根据题干有目的地阅读代码的相应片段<br>② 不要一上来就先看第一题，第一题不会就死磕。先找突破口，就是那种非常好填的空，先填上后再加分析，推出其他题的答案。有的代码前后有关联，可以根据前后联系推出答案<br>③ 碰到特别长的程序千万不要惊慌。出一条长代码可能有这几点原因：1.这个程序所涉及的算法确实需要很长的代码；2.故意的，写一个特别长的代码纯粹就是一个考验，看看哪些人遇到这样的题不会慌张。也就是，有的长代码就是个纸老虎，静下心好好分析，不难。<br>④ 这种题也要看平时的积累以及扎实程度。多背一些算法的模板代码及例题，这种题拿五十多分也并非难事</p><hr>]]></content>
      
      
      <categories>
          
          <category> CSP-J/S </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces 题解</title>
      <link href="/2024/06/06/Codeforces%20%E9%A2%98%E8%A7%A3/"/>
      <url>/2024/06/06/Codeforces%20%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、题解为本人原作，如有使用注明出处。</li><li>2、如有改进地方欢迎批评指正~</li></ul><hr><h2 id="题目一：Problem-1925D-Codeforces">题目一：<a href="https://codeforces.com/problemset/problem/1925/D">Problem - 1925D - Codeforces</a></h2><h4 id="介绍一种二项式组合数方法：">介绍一种二项式组合数方法：</h4><p>众所周知，$期望 = 概率 * 值$。<br>我们设期望为 $E$，总概率为 $p$，总值为 $sum$。则：<br>$$<br>E=p\times sum<br>$$</p><p>由于 $k$ 的次数是固定的，则设<br>$$<br>s=\sum_{i=1}^m{f_i}<br>$$</p><p>且 $s$ 每回合每个固定增加 $1$ （类似于等差数列求和的过程），则有：<br>$$<br>sum\gets s+sum<br>$$<br>$$<br>s\gets s+m<br>$$</p><p>解决完 $sum$ 后，我们还剩下 $p$ 没有搞定，那么总概率 $p$ 怎么求呢？</p><p>因为每一个个体选中的概率是相等的，且都为<br>$$<br>\frac{1}{C_{n}^{2}}=\frac{2}{n(n-1)}<br>$$</p><p>所以我们可以先设选中的概率为 $x$，没被选中的概率为 $y$。</p><p>根据二项式定理得：<br>$$<br>p=\sum_{i=1}^k{C_{k}^{i}}x^iy^{k-i}<br>$$</p><p>$$<br>x=\frac{2}{n(n-1)},y=1-x<br>$$</p><p>因为事件是独立的，每个值对应着对应的概率，则总式为：</p><p>$$<br>sum_i\gets s+sum_{i-1}<br>$$</p><p>$$<br>\sum_{i=1}^k{E} \gets C_{k}^{i}x^iy^{k-i}\times sum_i<br>$$</p><p>$$<br>s\gets s+m<br>$$</p><p>最后我们把公式实现一下就搞定了，时间复杂度为：<br>$$<br>O(m+k\log mod)<br>$$</p><p>注意：有数据点当 $n$ 为 100000 时，数据会爆 longlong，所以算 $x$ 时先取模（我就是因为这个而 wa6 了 ~T_T~）。</p><h3 id="MainCode：">MainCode：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;f[i];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) s=(s+f[i])%mod;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>,res=<span class="number">0</span>,p=(n<span class="number">-1</span>)*n/<span class="number">2</span>%mod;   <span class="comment">//p记得取模</span></span><br><span class="line">    <span class="type">int</span> x=<span class="built_in">qmi</span>(p,mod<span class="number">-2</span>),y=(<span class="number">1</span>-x+mod)%mod;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        sum=(s+sum)%mod;</span><br><span class="line">        res=(res+<span class="built_in">C</span>(k,i)*<span class="built_in">qmi</span>(x,i)%mod*<span class="built_in">qmi</span>(y,k-i)%mod*sum%mod)%mod;</span><br><span class="line">        s=(s+m)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="题目二：Problem-2020E-Codeforces">题目二：<a href="https://codeforces.com/contest/2020/problem/E">Problem - 2020E - Codeforces</a></h2><p>题目大意：给定序列 $a$ 和概率序列 $p$，求和在 $a$ 序列中选取的集合总数异或和的平方。</p><h3 id="解题分析：">解题分析：</h3><p>一、首先集合总数为 $2^n$，每个集合都代表着每个元素选和不选两种情况，并且观察数据量，$a$ 序列中的元素很小，只有 1-1023，由此考虑用 $dp$ 背包思想来考虑此题，时间复杂度 $O(2^{10}n)$。</p><p>二、$dp[i][j]$ 代表在选取前 $i$ 个元素的集合里，异或和为 $j$ 的概率。因为 $a$ 序列元素的范围是 1-1023，所以异或和也不会超过 1023，$dp$ 数组开 $dp[N][2^{10}]$。</p><p>三、设上一个状态为 $t$，当前状态为 $j$，即：</p><p>$$<br>j = a[i] \oplus t<br>$$</p><p>已知 $j$，由异或的性质移项得：</p><p>$$<br>t = a[i] \oplus j<br>$$</p><p>四、转移方程：</p><ul><li>不选的情况：</li></ul><p>$$<br>dp_{i,j} = dp_{i-1,j} \times (1-p[i])<br>$$</p><ul><li>选的情况：</li></ul><p>$$<br>dp_{i,j} = dp_{i,j} + dp_{i-1,t} \times p[i]<br>$$</p><p>最后 $(f(S))^2$ 即把 0-1023 平方求和，并且把转移方程实现下就 ok 啦 <strong>（记得取模）</strong>。</p><h3 id="交了第一发-mle">交了第一发 mle</h3><p>$code$：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;p[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++) dp[i][j]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;     <span class="comment">// 什么都不选概率为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">        <span class="type">int</span> t=a[i]^j;</span><br><span class="line">        dp[i][j]=dp[i<span class="number">-1</span>][j]*(<span class="number">1</span>-p[i]*<span class="built_in">qmi</span>(<span class="number">10000</span>,mod<span class="number">-2</span>)%mod+mod)%mod;</span><br><span class="line">        dp[i][j]=(dp[i][j]+dp[i<span class="number">-1</span>][t]*p[i]%mod*<span class="built_in">qmi</span>(<span class="number">10000</span>,mod<span class="number">-2</span>)%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;i++) sum=(sum+dp[n][i]*i%mod*i%mod)%mod;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>第一发一交，发现 mle 了，把 define int long long 换了也不行，因此我意识到还得优化空间。</p><p>稍微思考了一下，发现这个就是经典滚动数组优化，可以优化掉一维，但是前一个状态得另外用一个数组 pre 来记录，因为异或会改变原来的状态，并且不是有序的。</p><h3 id="交了第二发-tle2">交了第二发 tle2</h3><p>$code$：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;p[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;i++) dp[i]=pre[i]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">pre[<span class="number">0</span>]=<span class="number">1</span>;     <span class="comment">// 什么都不选概率为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">        <span class="type">int</span> t=a[i]^j;</span><br><span class="line">        dp[j]=pre[j]*(<span class="number">1</span>-p[i]*<span class="built_in">qmi</span>(<span class="number">10000</span>,mod<span class="number">-2</span>)%mod+mod)%mod;</span><br><span class="line">        dp[j]=(dp[j]+pre[t]*p[i]%mod*<span class="built_in">qmi</span>(<span class="number">10000</span>,mod<span class="number">-2</span>)%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++) pre[j]=dp[j];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;i++) sum=(sum+(ll)dp[i]*i%mod*i%mod)%mod;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;<span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure><p>交了第二发 tle2，那就是把我 log 复杂度也卡了，赶紧先预处理一下 $p$ 序列先。。。。</p><h3 id="交了第三发tle13">交了第三发tle13</h3><p>b 溃了，居然还会 t，不会卡我 define int long long 了吧，我将信将疑改了再交一发。</p><h3 id="交了第四发-AC">交了第四发 AC</h3><p>$code$：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;p[i],p[i]=p[i]*<span class="built_in">qmi</span>(<span class="number">10000</span>,mod<span class="number">-2</span>)%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;i++) dp[i]=pre[i]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">pre[<span class="number">0</span>]=<span class="number">1</span>;     <span class="comment">// 什么都不选概率为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">        <span class="type">int</span> t=a[i]^j;</span><br><span class="line">        dp[j]=(ll)pre[j]*(<span class="number">1</span>-p[i]+mod)%mod;</span><br><span class="line">        dp[j]=(dp[j]+(ll)pre[t]*p[i]%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;j++) pre[j]=dp[j];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">10</span>;i++) sum=(sum+(ll)dp[i]*i%mod*i%mod)%mod;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>布什戈门，3890ms 通过，这个题还会卡常？也许我这个还不是正解，恰巧被我冲过去了。</p><p>$ps$：交 c++20 能够冲到 890ms，很神秘。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Pytorch框架的深度学习语言对话模型</title>
      <link href="/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/"/>
      <url>/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、脚本为本人总结，如有使用注明出处。</li><li>2、模型基于Pytorch框架实现及训练。</li><li>3、脚本内有注释。</li></ul><hr><h2 id="运行过程：">运行过程：</h2><p><img src="/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/1.png" alt></p><p><img src="/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/2.png" alt></p><p><img src="/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/3.png" alt></p><h2 id="对话截图：">对话截图：</h2><p><img src="/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/4.png" alt></p><h2 id="Seq2Seq模型源码：">Seq2Seq模型源码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> unicodedata</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> <span class="built_in">open</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USE_CUDA = torch.cuda.is_available()</span><br><span class="line">device = <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">corpus_name = <span class="string">&quot;cornell movie-dialogs corpus&quot;</span></span><br><span class="line">corpus = os.path.join(<span class="string">&quot;./&quot;</span>, corpus_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printLines</span>(<span class="params">file, n=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> datafile:</span><br><span class="line">        lines = datafile.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines[:n]:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">printLines(os.path.join(corpus, <span class="string">&quot;movie_lines.txt&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把每一行都parse成一个dict，key是lineID、characterID、movieID、character和text</span></span><br><span class="line"><span class="comment"># 分别代表这一行的ID、人物ID、电影ID，人物名称和文本。</span></span><br><span class="line"><span class="comment"># 最终输出一个dict，key是lineID，value是一个dict。</span></span><br><span class="line"><span class="comment"># value这个dict的key是lineID、characterID、movieID、character和text</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loadLines</span>(<span class="params">fileName, fields</span>):</span><br><span class="line">    lines = &#123;&#125;</span><br><span class="line">    <span class="built_in">print</span>(os.path.join(corpus, <span class="string">&quot;movie_lines.txt&quot;</span>))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;iso-8859-1&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            values = line.split(<span class="string">&quot; +++$+++ &quot;</span>)</span><br><span class="line">            <span class="comment"># 抽取fields</span></span><br><span class="line">            lineObj = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> i, field <span class="keyword">in</span> <span class="built_in">enumerate</span>(fields):</span><br><span class="line">                lineObj[field] = values[i]</span><br><span class="line">            lines[lineObj[<span class="string">&#x27;lineID&#x27;</span>]] = lineObj</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据movie_conversations.txt文件和上输出的lines，把utterance组成对话。</span></span><br><span class="line"><span class="comment"># 最终输出一个list，这个list的每一个元素都是一个dict，</span></span><br><span class="line"><span class="comment"># key分别是character1ID、character2ID、movieID和utteranceIDs。</span></span><br><span class="line"><span class="comment"># 分别表示这对话的第一个人物的ID，第二个的ID，电影的ID以及它包含的utteranceIDs</span></span><br><span class="line"><span class="comment"># 最后根据lines，还给每一行的dict增加一个key为lines，其value是个list，</span></span><br><span class="line"><span class="comment"># 包含所有utterance(上面得到的lines的value)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loadConversations</span>(<span class="params">fileName, lines, fields</span>):</span><br><span class="line">    conversations = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;iso-8859-1&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            values = line.split(<span class="string">&quot; +++$+++ &quot;</span>)</span><br><span class="line">            <span class="comment"># 抽取fields</span></span><br><span class="line">            convObj = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> i, field <span class="keyword">in</span> <span class="built_in">enumerate</span>(fields):</span><br><span class="line">                convObj[field] = values[i]</span><br><span class="line">            <span class="comment"># convObj[&quot;utteranceIDs&quot;]是一个字符串，形如[&#x27;L198&#x27;, &#x27;L199&#x27;]</span></span><br><span class="line">            <span class="comment"># 我们用eval把这个字符串变成一个字符串的list。</span></span><br><span class="line">            lineIds = <span class="built_in">eval</span>(convObj[<span class="string">&quot;utteranceIDs&quot;</span>])</span><br><span class="line">            <span class="comment"># 根据lineIds构造一个数组，根据lineId去lines里检索出存储utterance对象。</span></span><br><span class="line">            convObj[<span class="string">&quot;lines&quot;</span>] = []</span><br><span class="line">            <span class="keyword">for</span> lineId <span class="keyword">in</span> lineIds:</span><br><span class="line">                convObj[<span class="string">&quot;lines&quot;</span>].append(lines[lineId])</span><br><span class="line">            conversations.append(convObj)</span><br><span class="line">    <span class="keyword">return</span> conversations</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从对话中抽取句对</span></span><br><span class="line"><span class="comment"># 假设一段对话包含s1,s2,s3,s4这4个utterance</span></span><br><span class="line"><span class="comment"># 那么会返回3个句对：s1-s2,s2-s3和s3-s4。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extractSentencePairs</span>(<span class="params">conversations</span>):</span><br><span class="line">    qa_pairs = []</span><br><span class="line">    <span class="keyword">for</span> conversation <span class="keyword">in</span> conversations:</span><br><span class="line">        <span class="comment"># 遍历对话中的每一个句子，忽略最后一个句子，因为没有答案。</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(conversation[<span class="string">&quot;lines&quot;</span>]) - <span class="number">1</span>):</span><br><span class="line">            inputLine = conversation[<span class="string">&quot;lines&quot;</span>][i][<span class="string">&quot;text&quot;</span>].strip()</span><br><span class="line">            targetLine = conversation[<span class="string">&quot;lines&quot;</span>][i+<span class="number">1</span>][<span class="string">&quot;text&quot;</span>].strip()</span><br><span class="line">            <span class="comment"># 如果有空的句子就去掉</span></span><br><span class="line">            <span class="keyword">if</span> inputLine <span class="keyword">and</span> targetLine:</span><br><span class="line">                qa_pairs.append([inputLine, targetLine])</span><br><span class="line">    <span class="keyword">return</span> qa_pairs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义新的文件</span></span><br><span class="line">datafile = os.path.join(corpus, <span class="string">&quot;formatted_movie_lines.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">delimiter = <span class="string">&#x27;\t&#x27;</span></span><br><span class="line"><span class="comment"># 对分隔符delimiter进行decode，这里对tab进行decode结果并没有变</span></span><br><span class="line">delimiter = <span class="built_in">str</span>(codecs.decode(delimiter, <span class="string">&quot;unicode_escape&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化dict lines，list conversations以及前面我们介绍过的field的id数组。</span></span><br><span class="line">lines = &#123;&#125;</span><br><span class="line">conversations = []</span><br><span class="line">MOVIE_LINES_FIELDS = [<span class="string">&quot;lineID&quot;</span>, <span class="string">&quot;characterID&quot;</span>, <span class="string">&quot;movieID&quot;</span>, <span class="string">&quot;character&quot;</span>, <span class="string">&quot;text&quot;</span>]</span><br><span class="line">MOVIE_CONVERSATIONS_FIELDS = [<span class="string">&quot;character1ID&quot;</span>, <span class="string">&quot;character2ID&quot;</span>, <span class="string">&quot;movieID&quot;</span>, <span class="string">&quot;utteranceIDs&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先使用loadLines函数处理movie_lines.txt</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nProcessing corpus...&quot;</span>)</span><br><span class="line">lines = loadLines(os.path.join(corpus, <span class="string">&quot;movie_lines.txt&quot;</span>), MOVIE_LINES_FIELDS)</span><br><span class="line"><span class="comment"># 接着使用loadConversations处理上一步的结果，得到conversations</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nLoading conversations...&quot;</span>)</span><br><span class="line">conversations = loadConversations(os.path.join(corpus, <span class="string">&quot;movie_conversations.txt&quot;</span>),</span><br><span class="line">                                  lines, MOVIE_CONVERSATIONS_FIELDS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出到一个新的csv文件</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nWriting newly formatted file...&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(datafile, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> outputfile:</span><br><span class="line">    writer = csv.writer(outputfile, delimiter=delimiter, lineterminator=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># 使用extractSentencePairs从conversations里抽取句对。</span></span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> extractSentencePairs(conversations):</span><br><span class="line">        writer.writerow(pair)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出一些行用于检查</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nSample lines from file:&quot;</span>)</span><br><span class="line">printLines(datafile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预定义的token</span></span><br><span class="line">PAD_token = <span class="number">0</span>  <span class="comment"># 表示padding</span></span><br><span class="line">SOS_token = <span class="number">1</span>  <span class="comment"># 句子的开始</span></span><br><span class="line">EOS_token = <span class="number">2</span>  <span class="comment"># 句子的结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Voc</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.trimmed = <span class="literal">False</span></span><br><span class="line">        self.word2index = &#123;&#125;</span><br><span class="line">        self.word2count = &#123;&#125;</span><br><span class="line">        self.index2word = &#123;PAD_token: <span class="string">&quot;PAD&quot;</span>, SOS_token: <span class="string">&quot;SOS&quot;</span>, EOS_token: <span class="string">&quot;EOS&quot;</span>&#125;</span><br><span class="line">        self.num_words = <span class="number">3</span>  <span class="comment"># 目前有SOS, EOS, PAD这3个token。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addSentence</span>(<span class="params">self, sentence</span>):</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> sentence.split(<span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            self.addWord(word)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addWord</span>(<span class="params">self, word</span>):</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> self.word2index:</span><br><span class="line">            self.word2index[word] = self.num_words</span><br><span class="line">            self.word2count[word] = <span class="number">1</span></span><br><span class="line">            self.index2word[self.num_words] = word</span><br><span class="line">            self.num_words += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.word2count[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除频次小于min_count的token</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trim</span>(<span class="params">self, min_count</span>):</span><br><span class="line">        <span class="keyword">if</span> self.trimmed:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.trimmed = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        keep_words = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.word2count.items():</span><br><span class="line">            <span class="keyword">if</span> v &gt;= min_count:</span><br><span class="line">                keep_words.append(k)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;keep_words &#123;&#125; / &#123;&#125; = &#123;:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            <span class="built_in">len</span>(keep_words), <span class="built_in">len</span>(self.word2index), <span class="built_in">len</span>(keep_words) / <span class="built_in">len</span>(self.word2index)</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新构造词典</span></span><br><span class="line">        self.word2index = &#123;&#125;</span><br><span class="line">        self.word2count = &#123;&#125;</span><br><span class="line">        self.index2word = &#123;PAD_token: <span class="string">&quot;PAD&quot;</span>, SOS_token: <span class="string">&quot;SOS&quot;</span>, EOS_token: <span class="string">&quot;EOS&quot;</span>&#125;</span><br><span class="line">        self.num_words = <span class="number">3</span>  <span class="comment"># Count default tokens</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新构造后词频就没有意义了(都是1)</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> keep_words:</span><br><span class="line">            self.addWord(word)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MAX_LENGTH = <span class="number">10</span>  <span class="comment"># 句子最大长度是10个词(包括EOS等特殊词)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把Unicode字符串变成ASCII</span></span><br><span class="line"><span class="comment"># 参考https://stackoverflow.com/a/518232/2809427</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unicodeToAscii</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(</span><br><span class="line">        c <span class="keyword">for</span> c <span class="keyword">in</span> unicodedata.normalize(<span class="string">&#x27;NFD&#x27;</span>, s)</span><br><span class="line">        <span class="keyword">if</span> unicodedata.category(c) != <span class="string">&#x27;Mn&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normalizeString</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># 变成小写、去掉前后空格，然后unicode变成ascii</span></span><br><span class="line">    s = unicodeToAscii(s.lower().strip())</span><br><span class="line">    <span class="comment"># 在标点前增加空格，这样把标点当成一个词</span></span><br><span class="line">    s = re.sub(<span class="string">r&quot;([.!?])&quot;</span>, <span class="string">r&quot; \1&quot;</span>, s)</span><br><span class="line">    <span class="comment"># 字母和标点之外的字符都变成空格</span></span><br><span class="line">    s = re.sub(<span class="string">r&quot;[^a-zA-Z.!?]+&quot;</span>, <span class="string">r&quot; &quot;</span>, s)</span><br><span class="line">    <span class="comment"># 因为把不用的字符都变成空格，所以可能存在多个连续空格</span></span><br><span class="line">    <span class="comment"># 下面的正则替换把多个空格变成一个空格，最后去掉前后空格</span></span><br><span class="line">    s = re.sub(<span class="string">r&quot;\s+&quot;</span>, <span class="string">r&quot; &quot;</span>, s).strip()</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取问答句对并且返回Voc词典对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readVocs</span>(<span class="params">datafile, corpus_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Reading lines...&quot;</span>)</span><br><span class="line">    <span class="comment"># 文件每行读取到list lines中。</span></span><br><span class="line">    lines = <span class="built_in">open</span>(datafile, encoding=<span class="string">&#x27;utf-8&#x27;</span>). \</span><br><span class="line">        read().strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># 每行用tab切分成问答两个句子，然后调用normalizeString函数进行处理。</span></span><br><span class="line">    pairs = [[normalizeString(s) <span class="keyword">for</span> s <span class="keyword">in</span> l.split(<span class="string">&#x27;\t&#x27;</span>)] <span class="keyword">for</span> l <span class="keyword">in</span> lines]</span><br><span class="line">    voc = Voc(corpus_name)</span><br><span class="line">    <span class="keyword">return</span> voc, pairs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filterPair</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)) &lt; MAX_LENGTH <span class="keyword">and</span> <span class="built_in">len</span>(p[<span class="number">1</span>].split(<span class="string">&#x27; &#x27;</span>)) &lt; MAX_LENGTH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤太长的句对</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filterPairs</span>(<span class="params">pairs</span>):</span><br><span class="line">    <span class="keyword">return</span> [pair <span class="keyword">for</span> pair <span class="keyword">in</span> pairs <span class="keyword">if</span> filterPair(pair)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用上面的函数进行处理，返回Voc对象和句对的list</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loadPrepareData</span>(<span class="params">corpus, corpus_name, datafile</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start preparing training data ...&quot;</span>)</span><br><span class="line">    voc, pairs = readVocs(datafile, corpus_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Read &#123;!s&#125; sentence pairs&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(pairs)))</span><br><span class="line">    pairs = filterPairs(pairs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Trimmed to &#123;!s&#125; sentence pairs&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(pairs)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Counting words...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> pairs:</span><br><span class="line">        voc.addSentence(pair[<span class="number">0</span>])</span><br><span class="line">        voc.addSentence(pair[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Counted words:&quot;</span>, voc.num_words)</span><br><span class="line">    <span class="keyword">return</span> voc, pairs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load/Assemble voc and pairs</span></span><br><span class="line"><span class="comment"># save_dir = os.path.join(&quot;data&quot;, &quot;save&quot;)</span></span><br><span class="line">voc, pairs = loadPrepareData(corpus, corpus_name, datafile)</span><br><span class="line"><span class="comment"># 输出一些句对</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\npairs:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> pair <span class="keyword">in</span> pairs[:<span class="number">10</span>]:</span><br><span class="line">    <span class="built_in">print</span>(pair)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MIN_COUNT = <span class="number">3</span>    <span class="comment"># 阈值为3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trimRareWords</span>(<span class="params">voc, pairs, MIN_COUNT</span>):</span><br><span class="line">    <span class="comment"># 去掉voc中频次小于3的词</span></span><br><span class="line">    voc.trim(MIN_COUNT)</span><br><span class="line">    <span class="comment"># 保留的句对</span></span><br><span class="line">    keep_pairs = []</span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> pairs:</span><br><span class="line">        input_sentence = pair[<span class="number">0</span>]</span><br><span class="line">        output_sentence = pair[<span class="number">1</span>]</span><br><span class="line">        keep_input = <span class="literal">True</span></span><br><span class="line">        keep_output = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 检查问题</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> input_sentence.split(<span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> voc.word2index:</span><br><span class="line">                keep_input = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 检查答案</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> output_sentence.split(<span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> voc.word2index:</span><br><span class="line">                keep_output = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果问题和答案都只包含高频词，我们才保留这个句对</span></span><br><span class="line">        <span class="keyword">if</span> keep_input <span class="keyword">and</span> keep_output:</span><br><span class="line">            keep_pairs.append(pair)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Trimmed from &#123;&#125; pairs to &#123;&#125;, &#123;:.4f&#125; of total&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(pairs),</span><br><span class="line"><span class="built_in">len</span>(keep_pairs), <span class="built_in">len</span>(keep_pairs) / <span class="built_in">len</span>(pairs)))</span><br><span class="line">    <span class="keyword">return</span> keep_pairs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际进行处理</span></span><br><span class="line">pairs = trimRareWords(voc, pairs, MIN_COUNT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把句子的词变成ID</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">indexesFromSentence</span>(<span class="params">voc, sentence</span>):</span><br><span class="line">    <span class="keyword">return</span> [voc.word2index[word] <span class="keyword">for</span> word <span class="keyword">in</span> sentence.split(<span class="string">&#x27; &#x27;</span>)] + [EOS_token]</span><br><span class="line"></span><br><span class="line"><span class="comment"># l是多个长度不同句子(list)，使用zip_longest padding成定长，长度为最长句子的长度。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zeroPadding</span>(<span class="params">l, fillvalue=PAD_token</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(itertools.zip_longest(*l, fillvalue=fillvalue))</span><br><span class="line"></span><br><span class="line"><span class="comment"># l是二维的padding后的list</span></span><br><span class="line"><span class="comment"># 返回m和l的大小一样，如果某个位置是padding，那么值为0，否则为1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binaryMatrix</span>(<span class="params">l, value=PAD_token</span>):</span><br><span class="line">    m = []</span><br><span class="line">    <span class="keyword">for</span> i, seq <span class="keyword">in</span> <span class="built_in">enumerate</span>(l):</span><br><span class="line">        m.append([])</span><br><span class="line">        <span class="keyword">for</span> token <span class="keyword">in</span> seq:</span><br><span class="line">            <span class="keyword">if</span> token == PAD_token:</span><br><span class="line">                m[i].append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m[i].append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把输入句子变成ID，然后再padding，同时返回lengths这个list，标识实际长度。</span></span><br><span class="line"><span class="comment"># 返回的padVar是一个LongTensor，shape是(batch, max_length)，</span></span><br><span class="line"><span class="comment"># lengths是一个list，长度为(batch,)，表示每个句子的实际长度。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inputVar</span>(<span class="params">l, voc</span>):</span><br><span class="line">    indexes_batch = [indexesFromSentence(voc, sentence) <span class="keyword">for</span> sentence <span class="keyword">in</span> l]</span><br><span class="line">    lengths = torch.tensor([<span class="built_in">len</span>(indexes) <span class="keyword">for</span> indexes <span class="keyword">in</span> indexes_batch])</span><br><span class="line">    padList = zeroPadding(indexes_batch)</span><br><span class="line">    padVar = torch.LongTensor(padList)</span><br><span class="line">    <span class="keyword">return</span> padVar, lengths</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对输出句子进行padding，然后用binaryMatrix得到每个位置是padding(0)还是非padding，</span></span><br><span class="line"><span class="comment"># 同时返回最大最长句子的长度(也就是padding后的长度)</span></span><br><span class="line"><span class="comment"># 返回值padVar是LongTensor，shape是(batch, max_target_length)</span></span><br><span class="line"><span class="comment"># mask是ByteTensor，shape也是(batch, max_target_length)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outputVar</span>(<span class="params">l, voc</span>):</span><br><span class="line">    indexes_batch = [indexesFromSentence(voc, sentence) <span class="keyword">for</span> sentence <span class="keyword">in</span> l]</span><br><span class="line">    max_target_len = <span class="built_in">max</span>([<span class="built_in">len</span>(indexes) <span class="keyword">for</span> indexes <span class="keyword">in</span> indexes_batch])</span><br><span class="line">    padList = zeroPadding(indexes_batch)</span><br><span class="line">    mask = binaryMatrix(padList)</span><br><span class="line">    mask = torch.ByteTensor(mask)</span><br><span class="line">    padVar = torch.LongTensor(padList)</span><br><span class="line">    <span class="keyword">return</span> padVar, mask, max_target_len</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理一个batch的pair句对</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch2TrainData</span>(<span class="params">voc, pair_batch</span>):</span><br><span class="line">    <span class="comment"># 按照句子的长度(词数)排序</span></span><br><span class="line">    pair_batch.sort(key=<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x[<span class="number">0</span>].split(<span class="string">&quot; &quot;</span>)), reverse=<span class="literal">True</span>)</span><br><span class="line">    input_batch, output_batch = [], []</span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> pair_batch:</span><br><span class="line">        input_batch.append(pair[<span class="number">0</span>])</span><br><span class="line">        output_batch.append(pair[<span class="number">1</span>])</span><br><span class="line">    inp, lengths = inputVar(input_batch, voc)</span><br><span class="line">    output, mask, max_target_len = outputVar(output_batch, voc)</span><br><span class="line">    <span class="keyword">return</span> inp, lengths, output, mask, max_target_len</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">small_batch_size = <span class="number">5</span></span><br><span class="line">batches = batch2TrainData(voc, [random.choice(pairs) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(small_batch_size)])</span><br><span class="line">input_variable, lengths, target_variable, mask, max_target_len = batches</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;input_variable:&quot;</span>, input_variable)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lengths:&quot;</span>, lengths)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;target_variable:&quot;</span>, target_variable)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mask:&quot;</span>, mask)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max_target_len:&quot;</span>, max_target_len)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EncoderRNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hidden_size, embedding, n_layers=<span class="number">1</span>, dropout=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(EncoderRNN, self).__init__()</span><br><span class="line">        self.n_layers = n_layers</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.embedding = embedding</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化GRU，这里输入和hidden大小都是hidden_size，这里假设embedding层的输出大小是hidden_size</span></span><br><span class="line">        <span class="comment"># 如果只有一层，那么不进行Dropout，否则使用传入的参数dropout进行GRU的Dropout。</span></span><br><span class="line">        self.gru = nn.GRU(hidden_size, hidden_size, n_layers,</span><br><span class="line">                          dropout=(<span class="number">0</span> <span class="keyword">if</span> n_layers == <span class="number">1</span> <span class="keyword">else</span> dropout), bidirectional=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_seq, input_lengths, hidden=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 输入是(max_length, batch)，Embedding之后变成(max_length, batch, hidden_size)</span></span><br><span class="line">        embedded = self.embedding(input_seq)</span><br><span class="line">        <span class="comment"># Pack padded batch of sequences for RNN module</span></span><br><span class="line">        <span class="comment"># 因为RNN(GRU)要知道实际长度，所以PyTorch提供了函数pack_padded_sequence把输入向量和长度</span></span><br><span class="line">        <span class="comment"># pack到一个对象PackedSequence里，这样便于使用。</span></span><br><span class="line">        packed = torch.nn.utils.rnn.pack_padded_sequence(embedded, input_lengths)</span><br><span class="line">        <span class="comment"># 通过GRU进行forward计算，需要传入输入和隐变量</span></span><br><span class="line">        <span class="comment"># 如果传入的输入是一个Tensor (max_length, batch, hidden_size)</span></span><br><span class="line">        <span class="comment"># 那么输出outputs是(max_length, batch, hidden_size*num_directions)。</span></span><br><span class="line">        <span class="comment"># 第三维是hidden_size和num_directions的混合，它们实际排列顺序是num_directions在前面，</span></span><br><span class="line">        <span class="comment"># 因此我们可以使用outputs.view(seq_len, batch, num_directions, hidden_size)得到4维的向量。</span></span><br><span class="line">        <span class="comment"># 其中第三维是方向，第四位是隐状态。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 而如果输入是PackedSequence对象，那么输出outputs也是一个PackedSequence对象，我们需要用</span></span><br><span class="line">        <span class="comment"># 函数pad_packed_sequence把它变成shape为(max_length, batch, hidden*num_directions)的向量以及</span></span><br><span class="line">        <span class="comment"># 一个list，表示输出的长度，当然这个list和输入的input_lengths完全一样，因此通常我们不需要它。</span></span><br><span class="line">        outputs, hidden = self.gru(packed, hidden)</span><br><span class="line">        <span class="comment"># 参考前面的注释，我们得到outputs为(max_length, batch, hidden*num_directions)</span></span><br><span class="line">        outputs, _ = torch.nn.utils.rnn.pad_packed_sequence(outputs)</span><br><span class="line">        <span class="comment"># 我们需要把输出的num_directions双向的向量加起来</span></span><br><span class="line">        <span class="comment"># 因为outputs的第三维是先放前向的hidden_size个结果，然后再放后向的hidden_size个结果</span></span><br><span class="line">        <span class="comment"># 所以outputs[:, :, :self.hidden_size]得到前向的结果</span></span><br><span class="line">        <span class="comment"># outputs[:, :, self.hidden_size:]是后向的结果</span></span><br><span class="line">        <span class="comment"># 注意，如果bidirectional是False，则outputs第三维的大小就是hidden_size，</span></span><br><span class="line">        <span class="comment"># 这时outputs[:, : ,self.hidden_size:]是不存在的，因此也不会加上去。</span></span><br><span class="line">        <span class="comment"># 对Python slicing不熟的读者可以看看下面的例子：</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; a=[1,2,3]</span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; a[:3]</span></span><br><span class="line">        <span class="comment"># [1, 2, 3]</span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; a[3:]</span></span><br><span class="line">        <span class="comment"># []</span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; a[:3]+a[3:]</span></span><br><span class="line">        <span class="comment"># [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这样就不用写下面的代码了：</span></span><br><span class="line">        <span class="comment"># if bidirectional:</span></span><br><span class="line">        <span class="comment">#     outputs = outputs[:, :, :self.hidden_size] + outputs[:, : ,self.hidden_size:]</span></span><br><span class="line">        outputs = outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]</span><br><span class="line">        <span class="comment"># 返回最终的输出和最后时刻的隐状态。</span></span><br><span class="line">        <span class="keyword">return</span> outputs, hidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Luong 注意力layer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Attn</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, method, hidden_size</span>):</span><br><span class="line">        <span class="built_in">super</span>(Attn, self).__init__()</span><br><span class="line">        self.method = method</span><br><span class="line">        <span class="keyword">if</span> self.method <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;dot&#x27;</span>, <span class="string">&#x27;general&#x27;</span>, <span class="string">&#x27;concat&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(self.method, <span class="string">&quot;is not an appropriate attention method.&quot;</span>)</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        <span class="keyword">if</span> self.method == <span class="string">&#x27;general&#x27;</span>:</span><br><span class="line">            self.attn = torch.nn.Linear(self.hidden_size, hidden_size)</span><br><span class="line">        <span class="keyword">elif</span> self.method == <span class="string">&#x27;concat&#x27;</span>:</span><br><span class="line">            self.attn = torch.nn.Linear(self.hidden_size * <span class="number">2</span>, hidden_size)</span><br><span class="line">            self.v = torch.nn.Parameter(torch.FloatTensor(hidden_size))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dot_score</span>(<span class="params">self, hidden, encoder_output</span>):</span><br><span class="line">        <span class="comment"># 输入hidden的shape是(1, batch=64, hidden_size=500)</span></span><br><span class="line">        <span class="comment"># encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)</span></span><br><span class="line">        <span class="comment"># hidden * encoder_output得到的shape是(10, 64, 500)，然后对第3维求和就可以计算出score。</span></span><br><span class="line">        <span class="keyword">return</span> torch.<span class="built_in">sum</span>(hidden * encoder_output, dim=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">general_score</span>(<span class="params">self, hidden, encoder_output</span>):</span><br><span class="line">        energy = self.attn(encoder_output)</span><br><span class="line">        <span class="keyword">return</span> torch.<span class="built_in">sum</span>(hidden * energy, dim=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">concat_score</span>(<span class="params">self, hidden, encoder_output</span>):</span><br><span class="line">        energy = self.attn(torch.cat((hidden.expand(encoder_output.size(<span class="number">0</span>), -<span class="number">1</span>, -<span class="number">1</span>),</span><br><span class="line">                                      encoder_output), <span class="number">2</span>)).tanh()</span><br><span class="line">        <span class="keyword">return</span> torch.<span class="built_in">sum</span>(self.v * energy, dim=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入是上一个时刻的隐状态hidden和所有时刻的Encoder的输出encoder_outputs</span></span><br><span class="line">    <span class="comment"># 输出是注意力的概率，也就是长度为input_lengths的向量，它的和加起来是1。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, hidden, encoder_outputs</span>):</span><br><span class="line">        <span class="comment"># 计算注意力的score，输入hidden的shape是(1, batch=64, hidden_size=500)，</span></span><br><span class="line">        <span class="comment"># 表示t时刻batch数据的隐状态</span></span><br><span class="line">        <span class="comment"># encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)</span></span><br><span class="line">        <span class="keyword">if</span> self.method == <span class="string">&#x27;general&#x27;</span>:</span><br><span class="line">            attn_energies = self.general_score(hidden, encoder_outputs)</span><br><span class="line">        <span class="keyword">elif</span> self.method == <span class="string">&#x27;concat&#x27;</span>:</span><br><span class="line">            attn_energies = self.concat_score(hidden, encoder_outputs)</span><br><span class="line">        <span class="keyword">elif</span> self.method == <span class="string">&#x27;dot&#x27;</span>:</span><br><span class="line">            <span class="comment"># 计算内积，参考dot_score函数</span></span><br><span class="line">            attn_energies = self.dot_score(hidden, encoder_outputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Transpose max_length and batch_size dimensions</span></span><br><span class="line">        <span class="comment"># 把attn_energies从(max_length=10, batch=64)转置成(64, 10)</span></span><br><span class="line">        attn_energies = attn_energies.t()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用softmax函数把score变成概率，shape仍然是(64, 10)，然后用unsqueeze(1)变成</span></span><br><span class="line">        <span class="comment"># (64, 1, 10)</span></span><br><span class="line">        <span class="keyword">return</span> F.softmax(attn_energies, dim=<span class="number">1</span>).unsqueeze(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LuongAttnDecoderRNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, attn_model, embedding, hidden_size, output_size, n_layers=<span class="number">1</span>, dropout=<span class="number">0.1</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(LuongAttnDecoderRNN, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存到self里，attn_model就是前面定义的Attn类的对象。</span></span><br><span class="line">        self.attn_model = attn_model</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.output_size = output_size</span><br><span class="line">        self.n_layers = n_layers</span><br><span class="line">        self.dropout = dropout</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义Decoder的layers</span></span><br><span class="line">        self.embedding = embedding</span><br><span class="line">        self.embedding_dropout = nn.Dropout(dropout)</span><br><span class="line">        self.gru = nn.GRU(hidden_size, hidden_size, n_layers, dropout=(<span class="number">0</span> <span class="keyword">if</span> n_layers == <span class="number">1</span> <span class="keyword">else</span> dropout))</span><br><span class="line">        self.concat = nn.Linear(hidden_size * <span class="number">2</span>, hidden_size)</span><br><span class="line">        self.out = nn.Linear(hidden_size, output_size)</span><br><span class="line"></span><br><span class="line">        self.attn = Attn(attn_model, hidden_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_step, last_hidden, encoder_outputs</span>):</span><br><span class="line">        <span class="comment"># 注意：decoder每一步只能处理一个时刻的数据，因为t时刻计算完了才能计算t+1时刻。</span></span><br><span class="line">        <span class="comment"># input_step的shape是(1, 64)，64是batch，1是当前输入的词ID(来自上一个时刻的输出)</span></span><br><span class="line">        <span class="comment"># 通过embedding层变成(1, 64, 500)，然后进行dropout，shape不变。</span></span><br><span class="line">        embedded = self.embedding(input_step)</span><br><span class="line">        embedded = self.embedding_dropout(embedded)</span><br><span class="line">        <span class="comment"># 把embedded传入GRU进行forward计算</span></span><br><span class="line">        <span class="comment"># 得到rnn_output的shape是(1, 64, 500)</span></span><br><span class="line">        <span class="comment"># hidden是(2, 64, 500)，因为是两层的GRU，所以第一维是2。</span></span><br><span class="line">        rnn_output, hidden = self.gru(embedded, last_hidden)</span><br><span class="line">        <span class="comment"># 计算注意力权重， 根据前面的分析，attn_weights的shape是(64, 1, 10)</span></span><br><span class="line">        attn_weights = self.attn(rnn_output, encoder_outputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># encoder_outputs是(10, 64, 500)</span></span><br><span class="line">        <span class="comment"># encoder_outputs.transpose(0, 1)后的shape是(64, 10, 500)</span></span><br><span class="line">        <span class="comment"># attn_weights.bmm后是(64, 1, 500)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># bmm是批量的矩阵乘法，第一维是batch，我们可以把attn_weights看成64个(1,10)的矩阵</span></span><br><span class="line">        <span class="comment"># 把encoder_outputs.transpose(0, 1)看成64个(10, 500)的矩阵</span></span><br><span class="line">        <span class="comment"># 那么bmm就是64个(1, 10)矩阵 x (10, 500)矩阵，最终得到(64, 1, 500)</span></span><br><span class="line">        context = attn_weights.bmm(encoder_outputs.transpose(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment"># 把context向量和GRU的输出拼接起来</span></span><br><span class="line">        <span class="comment"># rnn_output从(1, 64, 500)变成(64, 500)</span></span><br><span class="line">        rnn_output = rnn_output.squeeze(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># context从(64, 1, 500)变成(64, 500)</span></span><br><span class="line">        context = context.squeeze(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 拼接得到(64, 1000)</span></span><br><span class="line">        concat_input = torch.cat((rnn_output, context), <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># self.concat是一个矩阵(1000, 500)，</span></span><br><span class="line">        <span class="comment"># self.concat(concat_input)的输出是(64, 500)</span></span><br><span class="line">        <span class="comment"># 然后用tanh把输出返回变成(-1,1)，concat_output的shape是(64, 500)</span></span><br><span class="line">        concat_output = torch.tanh(self.concat(concat_input))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># out是(500, 词典大小=7826)</span></span><br><span class="line">        output = self.out(concat_output)</span><br><span class="line">        <span class="comment"># 用softmax变成概率，表示当前时刻输出每个词的概率。</span></span><br><span class="line">        output = F.softmax(output, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 返回 output和新的隐状态</span></span><br><span class="line">        <span class="keyword">return</span> output, hidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maskNLLLoss</span>(<span class="params">inp, target, mask</span>):</span><br><span class="line">    <span class="comment"># 计算实际的词的个数，因为padding是0，非padding是1，因此sum就可以得到词的个数</span></span><br><span class="line">    nTotal = mask.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    crossEntropy = -torch.log(torch.gather(inp, <span class="number">1</span>, target.view(-<span class="number">1</span>, <span class="number">1</span>)).squeeze(<span class="number">1</span>))</span><br><span class="line">    loss = crossEntropy.masked_select(mask).mean()</span><br><span class="line">    loss = loss.to(device)</span><br><span class="line">    <span class="keyword">return</span> loss, nTotal.item()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">input_variable, lengths, target_variable, mask, max_target_len, encoder, decoder, embedding,</span></span><br><span class="line"><span class="params">          encoder_optimizer, decoder_optimizer, batch_size, clip, max_length=MAX_LENGTH</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 梯度清空</span></span><br><span class="line">    encoder_optimizer.zero_grad()</span><br><span class="line">    decoder_optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置device，从而支持GPU，当然如果没有GPU也能工作。</span></span><br><span class="line">    input_variable = input_variable.to(device)</span><br><span class="line">    lengths = lengths.to(device)</span><br><span class="line">    target_variable = target_variable.to(device)</span><br><span class="line">    mask = mask.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    loss = <span class="number">0</span></span><br><span class="line">    print_losses = []</span><br><span class="line">    n_totals = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># encoder的Forward计算</span></span><br><span class="line">    encoder_outputs, encoder_hidden = encoder(input_variable, lengths)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Decoder的初始输入是SOS，我们需要构造(1, batch)的输入，表示第一个时刻batch个输入。</span></span><br><span class="line">    decoder_input = torch.LongTensor([[SOS_token <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(batch_size)]])</span><br><span class="line">    decoder_input = decoder_input.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意：Encoder是双向的，而Decoder是单向的，因此从下往上取n_layers个</span></span><br><span class="line">    decoder_hidden = encoder_hidden[:decoder.n_layers]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确定是否teacher forcing</span></span><br><span class="line">    use_teacher_forcing = <span class="literal">True</span> <span class="keyword">if</span> random.random() &lt; teacher_forcing_ratio <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一次处理一个时刻</span></span><br><span class="line">    <span class="keyword">if</span> use_teacher_forcing:</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(max_target_len):</span><br><span class="line">            decoder_output, decoder_hidden = decoder(</span><br><span class="line">                decoder_input, decoder_hidden, encoder_outputs</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># Teacher forcing: 下一个时刻的输入是当前正确答案</span></span><br><span class="line">            decoder_input = target_variable[t].view(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 计算累计的loss</span></span><br><span class="line">            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])</span><br><span class="line">            loss += mask_loss</span><br><span class="line">            print_losses.append(mask_loss.item() * nTotal)</span><br><span class="line">            n_totals += nTotal</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(max_target_len):</span><br><span class="line">            decoder_output, decoder_hidden = decoder(</span><br><span class="line">                decoder_input, decoder_hidden, encoder_outputs</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># 不是teacher forcing: 下一个时刻的输入是当前模型预测概率最高的值</span></span><br><span class="line">            _, topi = decoder_output.topk(<span class="number">1</span>)</span><br><span class="line">            decoder_input = torch.LongTensor([[topi[i][<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(batch_size)]])</span><br><span class="line">            decoder_input = decoder_input.to(device)</span><br><span class="line">            <span class="comment"># 计算累计的loss</span></span><br><span class="line">            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])</span><br><span class="line">            loss += mask_loss</span><br><span class="line">            print_losses.append(mask_loss.item() * nTotal)</span><br><span class="line">            n_totals += nTotal</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向计算</span></span><br><span class="line">    loss.backward()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对encoder和decoder进行梯度裁剪</span></span><br><span class="line">    _ = torch.nn.utils.clip_grad_norm_(encoder.parameters(), clip)</span><br><span class="line">    _ = torch.nn.utils.clip_grad_norm_(decoder.parameters(), clip)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    encoder_optimizer.step()</span><br><span class="line">    decoder_optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(print_losses) / n_totals</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trainIters</span>(<span class="params">model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,</span></span><br><span class="line"><span class="params">               embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,</span></span><br><span class="line"><span class="params">               print_every, save_every, clip, corpus_name, loadFilename</span>):</span><br><span class="line">    <span class="comment"># 随机选择n_iteration个batch的数据(pair)</span></span><br><span class="line">    training_batches = [batch2TrainData(voc, [random.choice(pairs) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(batch_size)])</span><br><span class="line">                        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n_iteration)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Initializing ...&#x27;</span>)</span><br><span class="line">    start_iteration = <span class="number">1</span></span><br><span class="line">    print_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> loadFilename:</span><br><span class="line">        start_iteration = checkpoint[<span class="string">&#x27;iteration&#x27;</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Training...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> iteration <span class="keyword">in</span> <span class="built_in">range</span>(start_iteration, n_iteration + <span class="number">1</span>):</span><br><span class="line">        training_batch = training_batches[iteration - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        input_variable, lengths, target_variable, mask, max_target_len = training_batch</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练一个batch的数据</span></span><br><span class="line">        loss = train(input_variable, lengths, target_variable, mask, max_target_len, encoder,</span><br><span class="line">                     decoder, embedding, encoder_optimizer, decoder_optimizer, batch_size, clip)</span><br><span class="line">        print_loss += loss</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进度</span></span><br><span class="line">        <span class="keyword">if</span> iteration % print_every == <span class="number">0</span>:</span><br><span class="line">            print_loss_avg = print_loss / print_every</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Iteration: &#123;&#125;; Percent complete: &#123;:.1f&#125;%; Average loss: &#123;:.4f&#125;&quot;</span></span><br><span class="line">                  .<span class="built_in">format</span>(iteration, iteration / n_iteration * <span class="number">100</span>, print_loss_avg))</span><br><span class="line">            print_loss = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存checkpoint</span></span><br><span class="line">        <span class="keyword">if</span> (iteration % save_every == <span class="number">0</span>):</span><br><span class="line">            directory = os.path.join(save_dir, model_name, corpus_name, <span class="string">&#x27;&#123;&#125;-&#123;&#125;_&#123;&#125;&#x27;</span></span><br><span class="line">                                     .<span class="built_in">format</span>(encoder_n_layers, decoder_n_layers, hidden_size))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">                os.makedirs(directory)</span><br><span class="line">            torch.save(&#123;</span><br><span class="line">                <span class="string">&#x27;iteration&#x27;</span>: iteration,</span><br><span class="line">                <span class="string">&#x27;en&#x27;</span>: encoder.state_dict(),</span><br><span class="line">                <span class="string">&#x27;de&#x27;</span>: decoder.state_dict(),</span><br><span class="line">                <span class="string">&#x27;en_opt&#x27;</span>: encoder_optimizer.state_dict(),</span><br><span class="line">                <span class="string">&#x27;de_opt&#x27;</span>: decoder_optimizer.state_dict(),</span><br><span class="line">                <span class="string">&#x27;loss&#x27;</span>: loss,</span><br><span class="line">                <span class="string">&#x27;voc_dict&#x27;</span>: voc.__dict__,</span><br><span class="line">                <span class="string">&#x27;embedding&#x27;</span>: embedding.state_dict()</span><br><span class="line">            &#125;, os.path.join(directory, <span class="string">&#x27;&#123;&#125;_&#123;&#125;.tar&#x27;</span>.<span class="built_in">format</span>(iteration, <span class="string">&#x27;checkpoint&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreedySearchDecoder</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, encoder, decoder</span>):</span><br><span class="line">        <span class="built_in">super</span>(GreedySearchDecoder, self).__init__()</span><br><span class="line">        self.encoder = encoder</span><br><span class="line">        self.decoder = decoder</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_seq, input_length, max_length</span>):</span><br><span class="line">        <span class="comment"># Encoder的Forward计算</span></span><br><span class="line">        encoder_outputs, encoder_hidden = self.encoder(input_seq, input_length)</span><br><span class="line">        <span class="comment"># 把Encoder最后时刻的隐状态作为Decoder的初始值</span></span><br><span class="line">        decoder_hidden = encoder_hidden[:decoder.n_layers]</span><br><span class="line">        <span class="comment"># 因为我们的函数都是要求(time,batch)，因此即使只有一个数据，也要做出二维的。</span></span><br><span class="line">        <span class="comment"># Decoder的初始输入是SOS</span></span><br><span class="line">        decoder_input = torch.ones(<span class="number">1</span>, <span class="number">1</span>, device=device, dtype=torch.long) * SOS_token</span><br><span class="line">        <span class="comment"># 用于保存解码结果的tensor</span></span><br><span class="line">        all_tokens = torch.zeros([<span class="number">0</span>], device=device, dtype=torch.long)</span><br><span class="line">        all_scores = torch.zeros([<span class="number">0</span>], device=device)</span><br><span class="line">        <span class="comment"># 循环，这里只使用长度限制，后面处理的时候把EOS去掉了。</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_length):</span><br><span class="line">            <span class="comment"># Decoder forward一步</span></span><br><span class="line">            decoder_output, decoder_hidden = self.decoder(decoder_input, decoder_hidden,</span><br><span class="line">encoder_outputs)</span><br><span class="line">            <span class="comment"># decoder_outputs是(batch=1, vob_size)</span></span><br><span class="line">            <span class="comment"># 使用max返回概率最大的词和得分</span></span><br><span class="line">            decoder_scores, decoder_input = torch.<span class="built_in">max</span>(decoder_output, dim=<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 把解码结果保存到all_tokens和all_scores里</span></span><br><span class="line">            all_tokens = torch.cat((all_tokens, decoder_input), dim=<span class="number">0</span>)</span><br><span class="line">            all_scores = torch.cat((all_scores, decoder_scores), dim=<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># decoder_input是当前时刻输出的词的ID，这是个一维的向量，因为max会减少一维。</span></span><br><span class="line">            <span class="comment"># 但是decoder要求有一个batch维度，因此用unsqueeze增加batch维度。</span></span><br><span class="line">            decoder_input = torch.unsqueeze(decoder_input, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 返回所有的词和得分。</span></span><br><span class="line">        <span class="keyword">return</span> all_tokens, all_scores</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">encoder, decoder, searcher, voc, sentence, max_length=MAX_LENGTH</span>):</span><br><span class="line">    <span class="comment">### 把输入的一个batch句子变成id</span></span><br><span class="line">    indexes_batch = [indexesFromSentence(voc, sentence)]</span><br><span class="line">    <span class="comment"># 创建lengths tensor</span></span><br><span class="line">    lengths = torch.tensor([<span class="built_in">len</span>(indexes) <span class="keyword">for</span> indexes <span class="keyword">in</span> indexes_batch])</span><br><span class="line">    <span class="comment"># 转置</span></span><br><span class="line">    input_batch = torch.LongTensor(indexes_batch).transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 放到合适的设备上(比如GPU)</span></span><br><span class="line">    input_batch = input_batch.to(device)</span><br><span class="line">    lengths = lengths.to(device)</span><br><span class="line">    <span class="comment"># 用searcher解码</span></span><br><span class="line">    tokens, scores = searcher(input_batch, lengths, max_length)</span><br><span class="line">    <span class="comment"># ID变成词。</span></span><br><span class="line">    decoded_words = [voc.index2word[token.item()] <span class="keyword">for</span> token <span class="keyword">in</span> tokens]</span><br><span class="line">    <span class="keyword">return</span> decoded_words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluateInput</span>(<span class="params">encoder, decoder, searcher, voc</span>):</span><br><span class="line">    input_sentence = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 得到用户终端的输入</span></span><br><span class="line">            input_sentence = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">            <span class="comment"># 是否退出</span></span><br><span class="line">            <span class="keyword">if</span> input_sentence == <span class="string">&#x27;q&#x27;</span> <span class="keyword">or</span> input_sentence == <span class="string">&#x27;quit&#x27;</span>: <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 句子归一化</span></span><br><span class="line">            input_sentence = normalizeString(input_sentence)</span><br><span class="line">            <span class="comment"># 生成响应Evaluate sentence</span></span><br><span class="line">            output_words = evaluate(encoder, decoder, searcher, voc, input_sentence)</span><br><span class="line">            <span class="comment"># 去掉EOS后面的内容</span></span><br><span class="line">            words = []</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> output_words:</span><br><span class="line">                <span class="keyword">if</span> word == <span class="string">&#x27;EOS&#x27;</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> word != <span class="string">&#x27;PAD&#x27;</span>:</span><br><span class="line">                    words.append(word)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Bot:&#x27;</span>, <span class="string">&#x27; &#x27;</span>.join(words))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error: Encountered unknown word.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置模型</span></span><br><span class="line">model_name = <span class="string">&#x27;cb_model&#x27;</span></span><br><span class="line">attn_model = <span class="string">&#x27;dot&#x27;</span></span><br><span class="line"><span class="comment"># attn_model = &#x27;general&#x27;</span></span><br><span class="line"><span class="comment"># attn_model = &#x27;concat&#x27;</span></span><br><span class="line">hidden_size = <span class="number">500</span></span><br><span class="line">encoder_n_layers = <span class="number">2</span></span><br><span class="line">decoder_n_layers = <span class="number">2</span></span><br><span class="line">dropout = <span class="number">0.1</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从哪个checkpoint恢复，如果是None，那么从头开始训练。</span></span><br><span class="line"><span class="comment"># loadFilename = None</span></span><br><span class="line"></span><br><span class="line">loadFilename = <span class="string">&quot;./model_Seq2seq/cb_model/cornell movie-dialogs corpus/2-2_500/5000_checkpoint.tar&quot;</span></span><br><span class="line">checkpoint_iter = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果loadFilename不空，则从中加载模型</span></span><br><span class="line"><span class="keyword">if</span> loadFilename:</span><br><span class="line">    <span class="comment"># 如果训练和加载是一条机器，那么直接加载</span></span><br><span class="line">    checkpoint = torch.load(loadFilename)</span><br><span class="line">    <span class="comment"># 否则比如checkpoint是在GPU上得到的，但是我们现在又用CPU来训练或者测试，那么注释掉下面的代码</span></span><br><span class="line">    <span class="comment"># checkpoint = torch.load(loadFilename, map_location=torch.device(&#x27;cpu&#x27;))</span></span><br><span class="line">    encoder_sd = checkpoint[<span class="string">&#x27;en&#x27;</span>]</span><br><span class="line">    decoder_sd = checkpoint[<span class="string">&#x27;de&#x27;</span>]</span><br><span class="line">    encoder_optimizer_sd = checkpoint[<span class="string">&#x27;en_opt&#x27;</span>]</span><br><span class="line">    decoder_optimizer_sd = checkpoint[<span class="string">&#x27;de_opt&#x27;</span>]</span><br><span class="line">    embedding_sd = checkpoint[<span class="string">&#x27;embedding&#x27;</span>]</span><br><span class="line">    voc.__dict__ = checkpoint[<span class="string">&#x27;voc_dict&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Building encoder and decoder ...&#x27;</span>)</span><br><span class="line"><span class="comment"># 初始化word embedding</span></span><br><span class="line">embedding = nn.Embedding(voc.num_words, hidden_size)</span><br><span class="line"><span class="keyword">if</span> loadFilename:</span><br><span class="line">    embedding.load_state_dict(embedding_sd)</span><br><span class="line"><span class="comment"># 初始化encoder和decoder模型</span></span><br><span class="line">encoder = EncoderRNN(hidden_size, embedding, encoder_n_layers, dropout)</span><br><span class="line">decoder = LuongAttnDecoderRNN(attn_model, embedding, hidden_size, voc.num_words,</span><br><span class="line">                              decoder_n_layers, dropout)</span><br><span class="line"><span class="keyword">if</span> loadFilename:</span><br><span class="line">    encoder.load_state_dict(encoder_sd)</span><br><span class="line">    decoder.load_state_dict(decoder_sd)</span><br><span class="line"><span class="comment"># 使用合适的设备</span></span><br><span class="line">encoder = encoder.to(device)</span><br><span class="line">decoder = decoder.to(device)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Models built and ready to go!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置训练的超参数和优化器</span></span><br><span class="line">clip = <span class="number">50.0</span></span><br><span class="line">teacher_forcing_ratio = <span class="number">1.0</span></span><br><span class="line">learning_rate = <span class="number">0.0001</span></span><br><span class="line">decoder_learning_ratio = <span class="number">5.0</span></span><br><span class="line">n_iteration = <span class="number">5000</span></span><br><span class="line">print_every = <span class="number">1</span></span><br><span class="line">save_every = <span class="number">1000</span></span><br><span class="line">save_dir = <span class="string">&quot;./model_Seq2seq_1&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置进入训练模式，从而开启dropout</span></span><br><span class="line">encoder.train()</span><br><span class="line">decoder.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化优化器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Building optimizers ...&#x27;</span>)</span><br><span class="line">encoder_optimizer = optim.Adam(encoder.parameters(), lr=learning_rate)</span><br><span class="line">decoder_optimizer = optim.Adam(decoder.parameters(), lr=learning_rate * decoder_learning_ratio)</span><br><span class="line"><span class="keyword">if</span> loadFilename:</span><br><span class="line">    encoder_optimizer.load_state_dict(encoder_optimizer_sd)</span><br><span class="line">    decoder_optimizer.load_state_dict(decoder_optimizer_sd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Starting Training!&quot;</span>)</span><br><span class="line">trainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,</span><br><span class="line">           embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,</span><br><span class="line">           print_every, save_every, clip, corpus_name, loadFilename)</span><br><span class="line"></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入eval模式，从而去掉dropout。</span></span><br><span class="line">encoder.<span class="built_in">eval</span>()</span><br><span class="line">decoder.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造searcher对象</span></span><br><span class="line">searcher = GreedySearchDecoder(encoder, decoder)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">evaluateInput(encoder, decoder, searcher, voc)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Deeplearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Pytorch框架的深度学习图像分类模型</title>
      <link href="/2023/03/15/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/"/>
      <url>/2023/03/15/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、脚本为本人总结，如有使用注明出处。</li><li>2、模型基于Pytorch框架实现及训练。</li><li>3、脚本内有注释。</li></ul><hr><h2 id="一、经典图像分类数据集：">一、经典图像分类数据集：</h2><h3 id="注：pytorch官网数据集-Datasets-—-Torchvision-0-15-documentation-pytorch-org">注：pytorch官网数据集 Datasets — Torchvision 0.15 documentation (<a href="http://pytorch.org">pytorch.org</a>)</h3><h3 id="1-CIFAR10">1.CIFAR10</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">384</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">384</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="2-CIFAR100">2.CIFAR100</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR100(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR100(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">128</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">128</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="3-ImageNet-ILSVRC2012">3.ImageNet (ILSVRC2012)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">299</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">299</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.ImageFolder(root=<span class="string">&quot;/训练集的位置&quot;</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.ImageFolder(root=<span class="string">&quot;/测试集的位置&quot;</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">32</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">32</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="二、图像分类经典模型（基于CIFAR10数据集）：">二、图像分类经典模型（基于CIFAR10数据集）：</h2><h3 id="注：硬件配置显存最好有12g，根据显存大小调整batch-size的大小。">注：硬件配置显存最好有12g，根据显存大小调整batch_size的大小。</h3><h3 id="1-AlexNet（自己写的模型）">1.AlexNet（自己写的模型）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> AlexNet <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">384</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">384</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_AlexNet_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = AlexNet()</span><br><span class="line">    model.to(device)</span><br><span class="line">    model.apply(weight_init)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">60</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc: %.6f  val_loss:%.6f \n&quot;</span> %</span><br><span class="line">              ((correct / <span class="built_in">len</span>(test_set)), test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/AlexNet_1.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手搓一个AlexNet模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlexNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AlexNet, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.conv1 = nn.Sequential(</span><br><span class="line">                                   nn.Conv2d(<span class="number">3</span>, <span class="number">96</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.MaxPool2d(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">                                  )</span><br><span class="line"></span><br><span class="line">        self.conv2 = nn.Sequential(</span><br><span class="line">                                   nn.Conv2d(<span class="number">96</span>, <span class="number">256</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.MaxPool2d(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">                                  )</span><br><span class="line"></span><br><span class="line">        self.conv3 = nn.Sequential(</span><br><span class="line">                                   nn.Conv2d(<span class="number">256</span>, <span class="number">384</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Conv2d(<span class="number">384</span>, <span class="number">384</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.Conv2d(<span class="number">384</span>, <span class="number">256</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                                   nn.ReLU(),</span><br><span class="line">                                   nn.MaxPool2d(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">                                  )</span><br><span class="line"></span><br><span class="line">        self.fc = nn.Sequential(</span><br><span class="line">                                nn.Linear(<span class="number">256</span> * <span class="number">6</span> * <span class="number">6</span>, <span class="number">4096</span>),</span><br><span class="line">                                nn.ReLU(),</span><br><span class="line">                                nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line">                                nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>),</span><br><span class="line">                                nn.ReLU(),</span><br><span class="line">                                nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line">                                nn.Linear(<span class="number">4096</span>, <span class="number">100</span>),</span><br><span class="line">                               )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = self.conv3(x)</span><br><span class="line">        output = self.fc(x.view(-<span class="number">1</span>, <span class="number">256</span> * <span class="number">6</span> * <span class="number">6</span>))</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-VGG（models-vgg16-）">2.VGG（models.vgg16()）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">        [transforms.ToTensor(),</span><br><span class="line">         transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">         transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_VGG_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = torchvision.models.vgg16()</span><br><span class="line">    model.to(device)</span><br><span class="line">    <span class="comment"># model.apply(weight_init)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc: %.6f  val_loss:%.6f \n&quot;</span> %</span><br><span class="line">              ((correct / <span class="built_in">len</span>(test_set)), test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/VGG_1.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-GoogLeNet">3.GoogLeNet</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">128</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">128</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_GoogLeNet_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = torchvision.models.GoogLeNet()</span><br><span class="line">    model.to(device)</span><br><span class="line">    <span class="comment"># model.apply(weight_init)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            outputs = outputs.logits</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.5f&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc: %.5f  val_loss:%.5f \n&quot;</span> %</span><br><span class="line">              ((correct / <span class="built_in">len</span>(test_set)), test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/GooLeNet_1.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-ResNet（models-resnet101-）">4.ResNet（models.resnet101()）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">        [transforms.ToTensor(),</span><br><span class="line">         transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">         transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_ResNet_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = torchvision.models.resnet101()</span><br><span class="line">    model.to(device)</span><br><span class="line">    <span class="comment"># model.apply(weight_init)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc: %.6f  val_loss:%.6f \n&quot;</span> %</span><br><span class="line">              ((correct / <span class="built_in">len</span>(test_set)), test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/ResNet_1.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-DenseNet（models-densenet121-）">5.DenseNet（models.densenet121()）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">        [transforms.ToTensor(),</span><br><span class="line">         transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">         transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, transform=transform, train=<span class="literal">True</span>)</span><br><span class="line">    test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, transform=transform, train=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_DenseNet_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = torchvision.models.densenet121()</span><br><span class="line">    model.to(device)</span><br><span class="line">    <span class="comment"># model.apply(weight_init)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始  dgsd</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc: %.6f  val_loss:%.6f \n&quot;</span> %</span><br><span class="line">              ((correct / <span class="built_in">len</span>(test_set)), test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/DenseNet_1.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-Train-ImageNet（main-py）">6.Train_ImageNet（<a href="http://main.py">main.py</a>）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.backends.cudnn <span class="keyword">as</span> cudnn</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.parallel</span><br><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torch.utils.data</span><br><span class="line"><span class="keyword">import</span> torch.utils.data.distributed</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets <span class="keyword">as</span> datasets</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.optim.lr_scheduler <span class="keyword">import</span> StepLR</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Subset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_names = <span class="built_in">sorted</span>(name <span class="keyword">for</span> name <span class="keyword">in</span> models.__dict__</span><br><span class="line">                     <span class="keyword">if</span> name.islower() <span class="keyword">and</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>)</span><br><span class="line">                     <span class="keyword">and</span> <span class="built_in">callable</span>(models.__dict__[name]))</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;PyTorch ImageNet Training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;data&#x27;</span>, metavar=<span class="string">&#x27;DIR&#x27;</span>, nargs=<span class="string">&#x27;?&#x27;</span>, default=<span class="string">&#x27;imagenet&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;path to dataset (default: imagenet)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--arch&#x27;</span>, metavar=<span class="string">&#x27;ARCH&#x27;</span>, default=<span class="string">&#x27;resnet34&#x27;</span>,</span><br><span class="line">                    choices=model_names,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;model architecture: &#x27;</span> +</span><br><span class="line">                         <span class="string">&#x27; | &#x27;</span>.join(model_names) +</span><br><span class="line">                         <span class="string">&#x27; (default: resnet34)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-j&#x27;</span>, <span class="string">&#x27;--workers&#x27;</span>, default=<span class="number">4</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of data loading workers (default: 4)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, default=<span class="number">50</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of total epochs to run&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--start-epoch&#x27;</span>, default=<span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;manual epoch number (useful on restarts)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-b&#x27;</span>, <span class="string">&#x27;--batch-size&#x27;</span>, default=<span class="number">192</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;mini-batch size (default: 256), this is the total &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;batch size of all GPUs on the current node when &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;using Data Parallel or Distributed Data Parallel&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>, <span class="string">&#x27;--learning-rate&#x27;</span>, default=<span class="number">0.1</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;LR&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;initial learning rate&#x27;</span>, dest=<span class="string">&#x27;lr&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--momentum&#x27;</span>, default=<span class="number">0.9</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, metavar=<span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;momentum&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--wd&#x27;</span>, <span class="string">&#x27;--weight-decay&#x27;</span>, default=<span class="number">1e-4</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;W&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;weight decay (default: 1e-4)&#x27;</span>,</span><br><span class="line">                    dest=<span class="string">&#x27;weight_decay&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--print-freq&#x27;</span>, default=<span class="number">500</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;N&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;print frequency (default: 500)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--resume&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&#x27;PATH&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;path to latest checkpoint (default: none)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-e&#x27;</span>, <span class="string">&#x27;--evaluate&#x27;</span>, dest=<span class="string">&#x27;evaluate&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;evaluate model on validation set&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--pretrained&#x27;</span>, dest=<span class="string">&#x27;pretrained&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;use pre-trained model&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--world-size&#x27;</span>, default=-<span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of nodes for distributed training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--rank&#x27;</span>, default=-<span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;node rank for distributed training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--dist-url&#x27;</span>, default=<span class="string">&#x27;tcp://224.66.41.62:23456&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;url used to set up distributed training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--dist-backend&#x27;</span>, default=<span class="string">&#x27;nccl&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;distributed backend&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;seed for initializing training. &#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--gpu&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;GPU id to use.&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--multiprocessing-distributed&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;Use multi-processing distributed training to launch &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;N processes per node, which has N GPUs. This is the &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;fastest way to use PyTorch for either single node or &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;multi node data parallel training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--dummy&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;use fake data to benchmark&quot;</span>)</span><br><span class="line"></span><br><span class="line">best_acc1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.seed <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        random.seed(args.seed)</span><br><span class="line">        torch.manual_seed(args.seed)</span><br><span class="line">        cudnn.deterministic = <span class="literal">True</span></span><br><span class="line">        cudnn.benchmark = <span class="literal">False</span></span><br><span class="line">        warnings.warn(<span class="string">&#x27;You have chosen to seed training. &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;This will turn on the CUDNN deterministic setting, &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;which can slow down your training considerably! &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;You may see unexpected behavior when restarting &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;from checkpoints.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        warnings.warn(<span class="string">&#x27;You have chosen a specific GPU. This will completely &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;disable data parallelism.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.dist_url == <span class="string">&quot;env://&quot;</span> <span class="keyword">and</span> args.world_size == -<span class="number">1</span>:</span><br><span class="line">        args.world_size = <span class="built_in">int</span>(os.environ[<span class="string">&quot;WORLD_SIZE&quot;</span>])</span><br><span class="line"></span><br><span class="line">    args.distributed = args.world_size &gt; <span class="number">1</span> <span class="keyword">or</span> args.multiprocessing_distributed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        ngpus_per_node = torch.cuda.device_count()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ngpus_per_node = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> args.multiprocessing_distributed:</span><br><span class="line">        <span class="comment"># Since we have ngpus_per_node processes per node, the total world_size</span></span><br><span class="line">        <span class="comment"># needs to be adjusted accordingly</span></span><br><span class="line">        args.world_size = ngpus_per_node * args.world_size</span><br><span class="line">        <span class="comment"># Use torch.multiprocessing.spawn to launch distributed processes: the</span></span><br><span class="line">        <span class="comment"># main_worker process function</span></span><br><span class="line">        mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Simply call main_worker function</span></span><br><span class="line">        main_worker(args.gpu, ngpus_per_node, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main_worker</span>(<span class="params">gpu, ngpus_per_node, args</span>):</span><br><span class="line">    <span class="keyword">global</span> best_acc1</span><br><span class="line">    args.gpu = gpu</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Use GPU: &#123;&#125; for training&quot;</span>.<span class="built_in">format</span>(args.gpu))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        <span class="keyword">if</span> args.dist_url == <span class="string">&quot;env://&quot;</span> <span class="keyword">and</span> args.rank == -<span class="number">1</span>:</span><br><span class="line">            args.rank = <span class="built_in">int</span>(os.environ[<span class="string">&quot;RANK&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> args.multiprocessing_distributed:</span><br><span class="line">            <span class="comment"># For multiprocessing distributed training, rank needs to be the</span></span><br><span class="line">            <span class="comment"># global rank among all the processes</span></span><br><span class="line">            args.rank = args.rank * ngpus_per_node + gpu</span><br><span class="line">        dist.init_process_group(backend=args.dist_backend, init_method=args.dist_url,</span><br><span class="line">                                world_size=args.world_size, rank=args.rank)</span><br><span class="line">    <span class="comment"># create model</span></span><br><span class="line">    <span class="keyword">if</span> args.pretrained:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&gt; using pre-trained model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.arch))</span><br><span class="line">        model = models.__dict__[args.arch](pretrained=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&gt; creating model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.arch))</span><br><span class="line">        model = models.__dict__[args.arch]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> torch.cuda.is_available() <span class="keyword">and</span> <span class="keyword">not</span> torch.backends.mps.is_available():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;using CPU, this will be slow&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> args.distributed:</span><br><span class="line">        <span class="comment"># For multiprocessing distributed, DistributedDataParallel constructor</span></span><br><span class="line">        <span class="comment"># should always set the single device scope, otherwise,</span></span><br><span class="line">        <span class="comment"># DistributedDataParallel will use all available devices.</span></span><br><span class="line">        <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">            <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                torch.cuda.set_device(args.gpu)</span><br><span class="line">                model.cuda(args.gpu)</span><br><span class="line">                <span class="comment"># When using a single GPU per process and per</span></span><br><span class="line">                <span class="comment"># DistributedDataParallel, we need to divide the batch size</span></span><br><span class="line">                <span class="comment"># ourselves based on the total number of GPUs of the current node.</span></span><br><span class="line">                args.batch_size = <span class="built_in">int</span>(args.batch_size / ngpus_per_node)</span><br><span class="line">                args.workers = <span class="built_in">int</span>((args.workers + ngpus_per_node - <span class="number">1</span>) / ngpus_per_node)</span><br><span class="line">                model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                model.cuda()</span><br><span class="line">                <span class="comment"># DistributedDataParallel will divide and allocate batch_size to all</span></span><br><span class="line">                <span class="comment"># available GPUs if device_ids are not set</span></span><br><span class="line">                model = torch.nn.parallel.DistributedDataParallel(model)</span><br><span class="line">    <span class="keyword">elif</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> torch.cuda.is_available():</span><br><span class="line">        torch.cuda.set_device(args.gpu)</span><br><span class="line">        model = model.cuda(args.gpu)</span><br><span class="line">    <span class="keyword">elif</span> torch.backends.mps.is_available():</span><br><span class="line">        device = torch.device(<span class="string">&quot;mps&quot;</span>)</span><br><span class="line">        model = model.to(device)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># DataParallel will divide and allocate batch_size to all available GPUs</span></span><br><span class="line">        <span class="keyword">if</span> args.arch.startswith(<span class="string">&#x27;alexnet&#x27;</span>) <span class="keyword">or</span> args.arch.startswith(<span class="string">&#x27;vgg&#x27;</span>):</span><br><span class="line">            model.features = torch.nn.DataParallel(model.features)</span><br><span class="line">            model.cuda()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            model = torch.nn.DataParallel(model).cuda()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        <span class="keyword">if</span> args.gpu:</span><br><span class="line">            device = torch.device(<span class="string">&#x27;cuda:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(args.gpu))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            device = torch.device(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> torch.backends.mps.is_available():</span><br><span class="line">        device = torch.device(<span class="string">&quot;mps&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        device = torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    <span class="comment"># define loss function (criterion), optimizer, and learning rate scheduler</span></span><br><span class="line">    criterion = nn.CrossEntropyLoss().to(device)</span><br><span class="line"></span><br><span class="line">    optimizer = torch.optim.SGD(model.parameters(), args.lr,</span><br><span class="line">                                momentum=args.momentum,</span><br><span class="line">                                weight_decay=args.weight_decay)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sets the learning rate to the initial LR decayed by 10 every 30 epochs&quot;&quot;&quot;</span></span><br><span class="line">    scheduler = StepLR(optimizer, step_size=<span class="number">30</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># optionally resume from a checkpoint</span></span><br><span class="line">    <span class="keyword">if</span> args.resume:</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(args.resume):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; loading checkpoint &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line">            <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                checkpoint = torch.load(args.resume)</span><br><span class="line">            <span class="keyword">elif</span> torch.cuda.is_available():</span><br><span class="line">                <span class="comment"># Map model to be loaded to specified single gpu.</span></span><br><span class="line">                loc = <span class="string">&#x27;cuda:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(args.gpu)</span><br><span class="line">                checkpoint = torch.load(args.resume, map_location=loc)</span><br><span class="line">            args.start_epoch = checkpoint[<span class="string">&#x27;epoch&#x27;</span>]</span><br><span class="line">            best_acc1 = checkpoint[<span class="string">&#x27;best_acc1&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># best_acc1 may be from a checkpoint from a different GPU</span></span><br><span class="line">                best_acc1 = best_acc1.to(args.gpu)</span><br><span class="line">            model.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line">            optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line">            scheduler.load_state_dict(checkpoint[<span class="string">&#x27;scheduler&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; loaded checkpoint &#x27;&#123;&#125;&#x27; (epoch &#123;&#125;)&quot;</span></span><br><span class="line">                  .<span class="built_in">format</span>(args.resume, checkpoint[<span class="string">&#x27;epoch&#x27;</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; no checkpoint found at &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Data loading code</span></span><br><span class="line">    <span class="keyword">if</span> args.dummy:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&gt; Dummy data is used!&quot;</span>)</span><br><span class="line">        train_dataset = datasets.FakeData(<span class="number">1281167</span>, (<span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>), <span class="number">1000</span>, transforms.ToTensor())</span><br><span class="line">        val_dataset = datasets.FakeData(<span class="number">50000</span>, (<span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>), <span class="number">1000</span>, transforms.ToTensor())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        normalize = transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                                         std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line"></span><br><span class="line">        train_dataset = datasets.ImageFolder(</span><br><span class="line">            <span class="string">&quot;数据集的路径：&quot;</span>,</span><br><span class="line">            transforms.Compose([</span><br><span class="line">                transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">                transforms.RandomHorizontalFlip(),</span><br><span class="line">                transforms.ToTensor(),</span><br><span class="line">                normalize,</span><br><span class="line">            ]))</span><br><span class="line"></span><br><span class="line">        val_dataset = datasets.ImageFolder(</span><br><span class="line">            <span class="string">&quot;测试集的路径：&quot;</span>,</span><br><span class="line">            transforms.Compose([</span><br><span class="line">                transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                transforms.ToTensor(),</span><br><span class="line">                normalize,</span><br><span class="line">            ]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)</span><br><span class="line">        val_sampler = torch.utils.data.distributed.DistributedSampler(val_dataset, shuffle=<span class="literal">False</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        train_sampler = <span class="literal">None</span></span><br><span class="line">        val_sampler = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(</span><br><span class="line">        train_dataset, batch_size=args.batch_size, shuffle=(train_sampler <span class="keyword">is</span> <span class="literal">None</span>),</span><br><span class="line">        num_workers=args.workers, pin_memory=<span class="literal">True</span>, sampler=train_sampler)</span><br><span class="line"></span><br><span class="line">    val_loader = torch.utils.data.DataLoader(</span><br><span class="line">        val_dataset, batch_size=args.batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">        num_workers=args.workers, pin_memory=<span class="literal">True</span>, sampler=val_sampler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.evaluate:</span><br><span class="line">        validate(val_loader, model, criterion, args)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(args.start_epoch, args.epochs):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> args.distributed:</span><br><span class="line">            train_sampler.set_epoch(epoch)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># train for one epoch</span></span><br><span class="line">        train(train_loader, model, criterion, optimizer, epoch, device, args, end)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># evaluate on validation set</span></span><br><span class="line">        acc1 = validate(val_loader, model, criterion, args, end)</span><br><span class="line"></span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># remember best acc@1 and save checkpoint</span></span><br><span class="line">        is_best = acc1 &gt; best_acc1</span><br><span class="line">        best_acc1 = <span class="built_in">max</span>(acc1, best_acc1)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.multiprocessing_distributed <span class="keyword">or</span> (args.multiprocessing_distributed</span><br><span class="line">                                                    <span class="keyword">and</span> args.rank % ngpus_per_node == <span class="number">0</span>):</span><br><span class="line">            save_checkpoint(&#123;</span><br><span class="line">                <span class="string">&#x27;epoch&#x27;</span>: epoch + <span class="number">1</span>,</span><br><span class="line">                <span class="string">&#x27;arch&#x27;</span>: args.arch,</span><br><span class="line">                <span class="string">&#x27;state_dict&#x27;</span>: model.state_dict(),</span><br><span class="line">                <span class="string">&#x27;best_acc1&#x27;</span>: best_acc1,</span><br><span class="line">                <span class="string">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),</span><br><span class="line">                <span class="string">&#x27;scheduler&#x27;</span>: scheduler.state_dict()</span><br><span class="line">            &#125;, is_best)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">train_loader, model, criterion, optimizer, epoch, device, args, end</span>):</span><br><span class="line">    losses = AverageMeter(<span class="string">&#x27;Loss&#x27;</span>, <span class="string">&#x27;:.4e&#x27;</span>)</span><br><span class="line">    top1 = AverageMeter(<span class="string">&#x27;Acc@1&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    top5 = AverageMeter(<span class="string">&#x27;Acc@5&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    progress = ProgressMeter(</span><br><span class="line">        <span class="built_in">len</span>(train_loader),</span><br><span class="line">        [losses, top1, top5],</span><br><span class="line">        prefix=<span class="string">&quot;Epoch: [&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to train mode</span></span><br><span class="line">    model.train()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, (images, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        <span class="comment"># measure data loading time</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># move data to the same device as model</span></span><br><span class="line">        images = images.to(device, non_blocking=<span class="literal">True</span>)</span><br><span class="line">        target = target.to(device, non_blocking=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute output</span></span><br><span class="line">        output = model(images)</span><br><span class="line">        loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">        acc1, acc5 = accuracy(output, target, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        losses.update(loss.item(), images.size(<span class="number">0</span>))</span><br><span class="line">        top1.update(acc1[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line">        top5.update(acc5[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute gradient and do SGD step</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure elapsed time</span></span><br><span class="line">        <span class="keyword">if</span> i % args.print_freq == <span class="number">0</span>:</span><br><span class="line">            progress.display(i + <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Time: %.2fs&quot;</span> % (time.time() - end))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">val_loader, model, criterion, args, end</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_validate</span>(<span class="params">loader, base_progress=<span class="number">0</span></span>):</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            end = time.time()</span><br><span class="line">            <span class="keyword">for</span> i, (images, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(loader):</span><br><span class="line">                i = base_progress + i</span><br><span class="line">                <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> torch.cuda.is_available():</span><br><span class="line">                    images = images.cuda(args.gpu, non_blocking=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">if</span> torch.backends.mps.is_available():</span><br><span class="line">                    images = images.to(<span class="string">&#x27;mps&#x27;</span>)</span><br><span class="line">                    target = target.to(<span class="string">&#x27;mps&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">                    target = target.cuda(args.gpu, non_blocking=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># compute output</span></span><br><span class="line">                output = model(images)</span><br><span class="line">                loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">                acc1, acc5 = accuracy(output, target, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">                losses.update(loss.item(), images.size(<span class="number">0</span>))</span><br><span class="line">                top1.update(acc1[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line">                top5.update(acc5[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># measure elapsed time</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> i % args.print_freq == <span class="number">0</span>:</span><br><span class="line">                    progress.display(i + <span class="number">1</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (time.time() - end))</span><br><span class="line"></span><br><span class="line">    losses = AverageMeter(<span class="string">&#x27;Loss&#x27;</span>, <span class="string">&#x27;:.4e&#x27;</span>, Summary.NONE)</span><br><span class="line">    top1 = AverageMeter(<span class="string">&#x27;Acc@1&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>, Summary.AVERAGE)</span><br><span class="line">    top5 = AverageMeter(<span class="string">&#x27;Acc@5&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>, Summary.AVERAGE)</span><br><span class="line">    progress = ProgressMeter(</span><br><span class="line">        <span class="built_in">len</span>(val_loader) + (args.distributed <span class="keyword">and</span> (<span class="built_in">len</span>(val_loader.sampler) * args.world_size &lt; <span class="built_in">len</span>(val_loader.dataset))),</span><br><span class="line">        [losses, top1, top5],</span><br><span class="line">        prefix=<span class="string">&#x27;Test: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to evaluate mode</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    run_validate(val_loader)</span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        top1.all_reduce()</span><br><span class="line">        top5.all_reduce()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.distributed <span class="keyword">and</span> (<span class="built_in">len</span>(val_loader.sampler) * args.world_size &lt; <span class="built_in">len</span>(val_loader.dataset)):</span><br><span class="line">        aux_val_dataset = Subset(val_loader.dataset,</span><br><span class="line">                                 <span class="built_in">range</span>(<span class="built_in">len</span>(val_loader.sampler) * args.world_size, <span class="built_in">len</span>(val_loader.dataset)))</span><br><span class="line">        aux_val_loader = torch.utils.data.DataLoader(</span><br><span class="line">            aux_val_dataset, batch_size=args.batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">            num_workers=args.workers, pin_memory=<span class="literal">True</span>)</span><br><span class="line">        run_validate(aux_val_loader, <span class="built_in">len</span>(val_loader))</span><br><span class="line"></span><br><span class="line">    progress.display_summary()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> top1.avg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_checkpoint</span>(<span class="params">state, is_best, filename=<span class="string">&#x27;../models/checkpoint_resnet34.pth.tar&#x27;</span></span>):</span><br><span class="line">    torch.save(state, filename)</span><br><span class="line">    <span class="keyword">if</span> is_best:</span><br><span class="line">        shutil.copyfile(filename, <span class="string">&#x27;../models/model_best_resnet34.pth.tar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Summary</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    NONE = <span class="number">0</span></span><br><span class="line">    AVERAGE = <span class="number">1</span></span><br><span class="line">    SUM = <span class="number">2</span></span><br><span class="line">    COUNT = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AverageMeter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes and stores the average and current value&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, fmt=<span class="string">&#x27;:f&#x27;</span>, summary_type=Summary.AVERAGE</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.fmt = fmt</span><br><span class="line">        self.summary_type = summary_type</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.val = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, val, n=<span class="number">1</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">sum</span> += val * n</span><br><span class="line">        self.count += n</span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all_reduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">            device = torch.device(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> torch.backends.mps.is_available():</span><br><span class="line">            device = torch.device(<span class="string">&quot;mps&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            device = torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">        total = torch.tensor([self.<span class="built_in">sum</span>, self.count], dtype=torch.float32, device=device)</span><br><span class="line">        dist.all_reduce(total, dist.ReduceOp.SUM, async_op=<span class="literal">False</span>)</span><br><span class="line">        self.<span class="built_in">sum</span>, self.count = total.tolist()</span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        fmtstr = <span class="string">&#x27;&#123;name&#125; &#123;val&#x27;</span> + self.fmt + <span class="string">&#x27;&#125; (&#123;avg&#x27;</span> + self.fmt + <span class="string">&#x27;&#125;)&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> fmtstr.<span class="built_in">format</span>(**self.__dict__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">summary</span>(<span class="params">self</span>):</span><br><span class="line">        fmtstr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.summary_type <span class="keyword">is</span> Summary.NONE:</span><br><span class="line">            fmtstr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.summary_type <span class="keyword">is</span> Summary.AVERAGE:</span><br><span class="line">            fmtstr = <span class="string">&#x27;&#123;name&#125; &#123;avg:.3f&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.summary_type <span class="keyword">is</span> Summary.SUM:</span><br><span class="line">            fmtstr = <span class="string">&#x27;&#123;name&#125; &#123;sum:.3f&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.summary_type <span class="keyword">is</span> Summary.COUNT:</span><br><span class="line">            fmtstr = <span class="string">&#x27;&#123;name&#125; &#123;count:.3f&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;invalid summary type %r&#x27;</span> % self.summary_type)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fmtstr.<span class="built_in">format</span>(**self.__dict__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressMeter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_batches, meters, prefix=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        self.batch_fmtstr = self._get_batch_fmtstr(num_batches)</span><br><span class="line">        self.meters = meters</span><br><span class="line">        self.prefix = prefix</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">self, batch</span>):</span><br><span class="line">        entries = [self.prefix + self.batch_fmtstr.<span class="built_in">format</span>(batch)]</span><br><span class="line">        entries += [<span class="built_in">str</span>(meter) <span class="keyword">for</span> meter <span class="keyword">in</span> self.meters]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\t&#x27;</span>.join(entries))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display_summary</span>(<span class="params">self</span>):</span><br><span class="line">        entries = [<span class="string">&quot; *&quot;</span>]</span><br><span class="line">        entries += [meter.summary() <span class="keyword">for</span> meter <span class="keyword">in</span> self.meters]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(entries))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_batch_fmtstr</span>(<span class="params">self, num_batches</span>):</span><br><span class="line">        num_digits = <span class="built_in">len</span>(<span class="built_in">str</span>(num_batches // <span class="number">1</span>))</span><br><span class="line">        fmt = <span class="string">&#x27;&#123;:&#x27;</span> + <span class="built_in">str</span>(num_digits) + <span class="string">&#x27;d&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[&#x27;</span> + fmt + <span class="string">&#x27;/&#x27;</span> + fmt.<span class="built_in">format</span>(num_batches) + <span class="string">&#x27;]&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">output, target, topk=(<span class="params"><span class="number">1</span>,</span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes the accuracy over the k top predictions for the specified values of k&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        maxk = <span class="built_in">max</span>(topk)</span><br><span class="line">        batch_size = target.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        _, pred = output.topk(maxk, <span class="number">1</span>, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">        pred = pred.t()</span><br><span class="line">        correct = pred.eq(target.view(<span class="number">1</span>, -<span class="number">1</span>).expand_as(pred))</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> topk:</span><br><span class="line">            correct_k = correct[:k].reshape(-<span class="number">1</span>).<span class="built_in">float</span>().<span class="built_in">sum</span>(<span class="number">0</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">            res.append(correct_k.mul_(<span class="number">100.0</span> / batch_size))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="三、小实践：可食用蘑菇识别分类模型">三、小实践：可食用蘑菇识别分类模型</h2><h3 id="训练代码：">训练代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抛出错误数据</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFile</span><br><span class="line">ImageFile.LOAD_TRUNCATED_IMAGES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置参量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        nn.init.xavier_normal_(m.weight)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        nn.init.kaiming_normal_(m.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>, nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)</span><br><span class="line">        nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>():</span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">299</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    train_set = torchvision.datasets.ImageFolder(root=<span class="string">&quot;E:\DeepLearning数据集\\archive (1)\\train&quot;</span>, transform=transform)</span><br><span class="line">    test_set = torchvision.datasets.ImageFolder(root=<span class="string">&quot;E:\DeepLearning数据集\\archive (1)\\test&quot;</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">True</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">64</span>, num_workers=<span class="number">4</span>, shuffle=<span class="literal">False</span>, pin_memory=<span class="literal">True</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入tensorboard</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;../train_ResNet_mushrooms&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_set)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_set)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    model = torchvision.models.resnet18()</span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># model.apply(weight_init)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录训练的轮数</span></span><br><span class="line">    total_train_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 记录测试的次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 控制训练轮数</span></span><br><span class="line">    epochs = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">1e-3</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">100</span>, eta_min=<span class="number">0.0001</span>, last_epoch=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练开始</span></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">global</span> train_loss</span><br><span class="line">        train_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criteon(outputs, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            train_loss += loss.item()</span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;train_loss:%.5f\n&quot;</span> % (train_loss / <span class="built_in">len</span>(train_set) * <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试开始</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        <span class="keyword">global</span> test_loss, correct</span><br><span class="line">        test_loss = <span class="number">0</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">                outputs = model(inputs)</span><br><span class="line">                test_loss += criteon(outputs, label)</span><br><span class="line">                predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">                total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_step))</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_loss:%.5f&quot;</span> % (test_loss * <span class="number">256</span> / <span class="built_in">len</span>(test_set)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;test_acc:&#123;&#125;%\n&quot;</span>.<span class="built_in">format</span>((correct / <span class="built_in">len</span>(test_set) * <span class="number">100.0</span>), <span class="string">&#x27;.2f&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;loss&#x27;</span>, train_loss / <span class="built_in">len</span>(train_loader), epoch)</span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;acc&#x27;</span>, correct / <span class="built_in">len</span>(test_set), epoch)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    torch.save(model, <span class="string">&#x27;../models/ResNet_mushrooms.pth&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---Finished Training---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试代码：">测试代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFile</span><br><span class="line">ImageFile.LOAD_TRUNCATED_IMAGES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="comment"># 转换输入图像</span></span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">            transforms.Resize(<span class="number">299</span>),</span><br><span class="line">            transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载测试集</span></span><br><span class="line">    test_set = torchvision.datasets.ImageFolder(root=<span class="string">&quot;E:\DeepLearning数据集\\archive (1)\\test&quot;</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建数据加载器</span></span><br><span class="line">    data_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class="number">1</span>, num_workers=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    model = torch.load(<span class="string">&quot;..\models\\ResNet_mushrooms.pth&quot;</span>)</span><br><span class="line">    model.to(device)</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行预测</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="built_in">list</span> = [<span class="string">&#x27;Agaricus&#x27;</span>,<span class="string">&#x27;Amanita&#x27;</span>,<span class="string">&#x27;Boletus&#x27;</span>,<span class="string">&#x27;Cortinarius&#x27;</span>,<span class="string">&#x27;Entoloma&#x27;</span>,<span class="string">&#x27;Hygrocybe&#x27;</span>,<span class="string">&#x27;Lactarius&#x27;</span>,<span class="string">&#x27;Russula&#x27;</span>,<span class="string">&#x27;Suillus&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> idx, (inputs, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            inputs, label = inputs.to(device), label.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">            correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">            <span class="keyword">if</span> torch.<span class="built_in">max</span>(outputs) &lt;= <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;drug&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">list</span>[predict])</span><br><span class="line">            correct += torch.eq(predict, label).<span class="built_in">sum</span>().item()</span><br><span class="line">            <span class="built_in">print</span>(outputs)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(correct)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_acc:&#123;&#125;%\n&quot;</span>.<span class="built_in">format</span>((correct / <span class="built_in">len</span>(test_set) * <span class="number">100.0</span>), <span class="string">&#x27;.2f&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Success!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Deeplearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Pytorch框架的深度学习入门基础</title>
      <link href="/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、脚本为本人总结，如有使用注明出处。</li><li>2、模型基于Pytorch框架实现及训练。</li><li>3、脚本内有注释。</li></ul><hr><h2 id="一、main-demo">一、main_demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个示例 Python 脚本。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按 Shift+F10 执行或将其替换为您的代码。</span></span><br><span class="line"><span class="comment"># 按 双击 Shift 在所有地方搜索类、文件、工具窗口、操作和设置。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_hi</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 在下面的代码行中使用断点来调试脚本。</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Hi, <span class="subst">&#123;name&#125;</span>&#x27;</span>)  <span class="comment"># 按 Ctrl+F8 切换断点。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按间距中的绿色按钮以运行脚本。</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print_hi(<span class="string">&#x27;PyCharm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 https://www.jetbrains.com/help/pycharm/ 获取 PyCharm 帮助</span></span><br></pre></td></tr></table></figure><h2 id="二、read-data（读取数据）">二、read_data（读取数据）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, label_dir</span>):</span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.label_dir = label_dir</span><br><span class="line">        self.path = os.path.join(self.root_dir, self.label_dir)</span><br><span class="line">        self.img_path = os.listdir(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据集</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_name = self.img_path[idx]</span><br><span class="line">        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_item_path)</span><br><span class="line">        lable = self.label_dir</span><br><span class="line">        <span class="keyword">return</span> img, lable</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取长度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root_dir = <span class="string">&quot;dataset/hymenoptera_data/train&quot;</span></span><br><span class="line"></span><br><span class="line">ants_label_dir = <span class="string">&quot;ants&quot;</span></span><br><span class="line">bees_label_dir = <span class="string">&quot;bees&quot;</span></span><br><span class="line"></span><br><span class="line">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class="line">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class="line"></span><br><span class="line">train_dataset = ants_dataset + bees_dataset</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、test-tb（简单测试）">三、test_tb（简单测试）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">image_path = <span class="string">&quot;dataset/hymenoptera_data/train/bees/16838648_415acd9e3f.jpg&quot;</span></span><br><span class="line">img_PIL = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">img_array = np.array(img_PIL)</span><br><span class="line"><span class="comment"># print(type(img_array))</span></span><br><span class="line"><span class="comment"># print(img_array.shape)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>, img_array, <span class="number">2</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line"><span class="comment"># y = x</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;y=2x&quot;</span>, <span class="number">2</span>*i, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h3 id="可视化页面展示：">可视化页面展示：</h3><p><img src="/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test1.png" alt="test1"></p><h2 id="四、Transforms（数据转换）">四、Transforms（数据转换）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python的用法 -&gt; tensor数据类型</span></span><br><span class="line"><span class="comment"># 通过 transforms.ToTensor看两个问题</span></span><br><span class="line"><span class="comment"># 1. transforms该如何使用？</span></span><br><span class="line"><span class="comment"># 2. 为什么我们需要Tensor数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绝对路径 C:\Users\Administrator\Desktop\编程代码\Python\pytorch深度学习\dataset\hymenoptera_data\train\ants\0013035.jpg</span></span><br><span class="line"><span class="comment"># 相对路径 dataset/hymenoptera_data/train/ants/0013035.jpg</span></span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&quot;dataset/hymenoptera_data/train/ants/0013035.jpg&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"></span><br><span class="line">tensor_trans = transforms.ToTensor()</span><br><span class="line">tensor_img = tensor_trans(img)</span><br><span class="line">writer.add_image(<span class="string">&quot;Tensor_img&quot;</span>, tensor_img)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="五、UseTransforms（使用数据转换）">五、UseTransforms（使用数据转换）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;images/桌面.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TpTensor的使用</span></span><br><span class="line">trans_totensor = transforms.ToTensor()</span><br><span class="line">img_tensor = trans_totensor(img)</span><br><span class="line">writer.add_image(<span class="string">&quot;Totensor&quot;</span>, img_tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Normalize</span></span><br><span class="line"><span class="built_in">print</span>(img_tensor[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">trans_norm = transforms.Normalize([<span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>], [<span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">img_norm = trans_norm(img_tensor)</span><br><span class="line"><span class="built_in">print</span>(img_norm[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">writer.add_image(<span class="string">&quot;Normalize&quot;</span>, img_norm, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Resize</span></span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line">trans_resize = transforms.Resize((<span class="number">512</span>, <span class="number">512</span>))</span><br><span class="line">img_resize = trans_resize(img)</span><br><span class="line">img_resize = trans_totensor(img_resize)</span><br><span class="line">writer.add_image(<span class="string">&quot;Resize&quot;</span>, img_resize, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(img_resize)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compose - resize - 2</span></span><br><span class="line">trans_resize_2 = transforms.Resize(<span class="number">512</span>)</span><br><span class="line">trans_compose = transforms.Compose([trans_resize_2, trans_totensor])</span><br><span class="line">img_resize_2 = trans_compose(img)</span><br><span class="line">writer.add_image(<span class="string">&quot;Resize&quot;</span>, img_resize_2, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># RandomCrop</span></span><br><span class="line">trans_random = transforms.RandomCrop(<span class="number">512</span>)</span><br><span class="line">trans_compose_2 = transforms.Compose([trans_random, trans_totensor])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img_crop = trans_compose_2(img)</span><br><span class="line">    writer.add_image(<span class="string">&quot;RandomCrop&quot;</span>, img_crop, i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="六、dataset-transforms（数据集使用）">六、dataset_transforms（数据集使用）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>, train=<span class="literal">True</span>, transform=dataset_transform, download=<span class="literal">True</span>)</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./dataset&quot;</span>, train=<span class="literal">False</span>, transform=dataset_transform, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(test_set[0])</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../p10&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img, target = test_set[i]</span><br><span class="line">    writer.add_image((<span class="string">&quot;test_set&quot;</span>, img, i))</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="七、read-data（读取数据）">七、read_data（读取数据）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, label_dir</span>):</span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.label_dir = label_dir</span><br><span class="line">        self.path = os.path.join(self.root_dir, self.label_dir)</span><br><span class="line">        self.img_path = os.listdir(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据集</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_name = self.img_path[idx]</span><br><span class="line">        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_item_path)</span><br><span class="line">        lable = self.label_dir</span><br><span class="line">        <span class="keyword">return</span> img, lable</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取长度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root_dir = <span class="string">&quot;../dataset/hymenoptera_data/train&quot;</span></span><br><span class="line">ants_label_dir = <span class="string">&quot;ants&quot;</span></span><br><span class="line">bees_label_dir = <span class="string">&quot;bees&quot;</span></span><br><span class="line">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class="line">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class="line"></span><br><span class="line">train_dataset = ants_dataset + bees_dataset</span><br></pre></td></tr></table></figure><h2 id="八、nn-module（模型基础）">八、nn_module（模型基础）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="built_in">input</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line">x = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">output = tudui(x)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><h2 id="九、nn-conv2d（卷积层）">九、nn_conv2d（卷积层）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">        transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.conv1 = Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs&quot;</span>)</span><br><span class="line"></span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    output = tudui(imgs)</span><br><span class="line">    <span class="comment"># print(imgs.shape)</span></span><br><span class="line">    <span class="comment"># print(output.shape)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># torch.Size([64, 3, 32, 32])</span></span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># torch.Size([64, 6, 30, 30]) -&gt; [xxx, 3, 30, 30]</span></span><br><span class="line">    output = torch.reshape(output, (-<span class="number">1</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line"></span><br><span class="line">    step += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="十、nn-maxpool（最大池化）">十、nn_maxpool（最大池化）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维矩阵最大池化</span></span><br><span class="line"><span class="comment"># input = torch.tensor([[1, 2, 0, 3, 1],</span></span><br><span class="line"><span class="comment">#                      [0, 1, 2, 3, 1],</span></span><br><span class="line"><span class="comment">#                      [1, 2, 1, 0, 0],</span></span><br><span class="line"><span class="comment">#                      [5, 2, 3, 1, 1],</span></span><br><span class="line"><span class="comment">#                      [2, 1, 0, 1, 1]], dtype=torch.float32)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># input = torch.reshape(input, (-1, 1, 5, 5))</span></span><br><span class="line"><span class="comment"># print(input.shape)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.maxpool1 = MaxPool2d(kernel_size=<span class="number">3</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = self.maxpool1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_maxpool&quot;</span>)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line">    output = tudui(imgs)</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line">    step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="十一、nn-relu（非线性激活）">十一、nn_relu（非线性激活）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> ReLU, Sigmoid</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>, -<span class="number">0.5</span>],</span><br><span class="line">                       [-<span class="number">1</span>, <span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.relu1 = ReLU()</span><br><span class="line">        self.sigmoid1 = Sigmoid()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = self.sigmoid1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line"><span class="comment"># output = tudui(input)</span></span><br><span class="line"><span class="comment"># print(output)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_relu&quot;</span>)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line">    output = tudui(imgs)</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line">    step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="十二、nn-linear（线性层）">十二、nn_linear（线性层）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.linear1 = Linear(<span class="number">196608</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = self.linear1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    <span class="built_in">print</span>(imgs.shape)</span><br><span class="line">    output = torch.reshape(imgs, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line">    output = tudui(output)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure><h2 id="十三、nn-seq（搭建小实战）">十三、nn_seq（搭建小实战）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.conv1 = Conv2d(3, 32, 5, padding=2)</span></span><br><span class="line">        <span class="comment"># self.maxpool1 = MaxPool2d(2)</span></span><br><span class="line">        <span class="comment"># self.conv2 = Conv2d(32, 32, 5, padding=2)</span></span><br><span class="line">        <span class="comment"># self.maxpool2 = MaxPool2d(2)</span></span><br><span class="line">        <span class="comment"># self.conv3 = Conv2d(32, 64, 5, padding=2)</span></span><br><span class="line">        <span class="comment"># self.maxpool3 = MaxPool2d(2)</span></span><br><span class="line">        <span class="comment"># self.flatten = Flatten()</span></span><br><span class="line">        <span class="comment"># self.linear1 = Linear(1024, 64)</span></span><br><span class="line">        <span class="comment"># self.linear2 = Linear(64, 10)</span></span><br><span class="line"></span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># x = self.conv1(x)</span></span><br><span class="line">        <span class="comment"># x = self.maxpool1(x)</span></span><br><span class="line">        <span class="comment"># x = self.conv2(x)</span></span><br><span class="line">        <span class="comment"># x = self.maxpool2(x)</span></span><br><span class="line">        <span class="comment"># x = self.conv3(x)</span></span><br><span class="line">        <span class="comment"># x = self.maxpool3(x)</span></span><br><span class="line">        <span class="comment"># x = self.flatten(x)</span></span><br><span class="line">        <span class="comment"># x = self.linear1(x)</span></span><br><span class="line">        <span class="comment"># x = self.linear2(x)</span></span><br><span class="line"></span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line"><span class="built_in">print</span>(tudui)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.ones((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">output = tudui(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_seq&quot;</span>)</span><br><span class="line">writer.add_graph(tudui, <span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="十四、损失函数与反向传播">十四、损失函数与反向传播</h2><h3 id="1-nn-loss">1.nn_loss</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inputs = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=torch.float32)</span><br><span class="line">targets = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], dtype=torch.float32)</span><br><span class="line"></span><br><span class="line">inputs = torch.reshape(inputs, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">targets = torch.reshape(targets, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss = L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">result = loss(inputs, targets)</span><br><span class="line"></span><br><span class="line">loss_mse = nn.MSELoss()</span><br><span class="line">result_mse = loss_mse(inputs, targets)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(result_mse)</span><br></pre></td></tr></table></figure><h3 id="2-nn-loss-network">2.nn_loss_network</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">        transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络模板</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算损失</span></span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">tudui = Tudui()</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    outputs = tudui(imgs)</span><br><span class="line">    result_loss = loss(outputs, targets)</span><br><span class="line">    result_loss.backward()</span><br></pre></td></tr></table></figure><h3 id="3-可视化页面展示">3.可视化页面展示</h3><p><img src="/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test2.png" alt="test2"></p><h2 id="十五、nn-optim（优化器）">十五、nn_optim（优化器）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络模板</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算损失、梯度下降</span></span><br><span class="line"></span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">tudui = Tudui()</span><br><span class="line">optim = torch.optim.SGD(tudui.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        outputs = tudui(imgs)</span><br><span class="line">        result_loss = loss(outputs, targets)</span><br><span class="line">        optim.zero_grad()</span><br><span class="line">        result_loss.backward()</span><br><span class="line">        optim.step()</span><br><span class="line">        running_loss += result_loss</span><br><span class="line">    <span class="built_in">print</span>(running_loss)</span><br></pre></td></tr></table></figure><h2 id="十六、model-pretrained（对现有网络模型进行修改-vgg16）">十六、model_pretrained（对现有网络模型进行修改.vgg16）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># train_data = torchvision.datasets.ImageNet(&quot;../data_image_net&quot;, split=&#x27;train&#x27;,</span></span><br><span class="line"><span class="comment">#                                            download=True, transform=torchvision.transforms.ToTensor())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vgg16_false = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">vgg16_true = torchvision.models.vgg16(pretrained=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vgg16_true.classifier.add_module(<span class="string">&#x27;add_linear&#x27;</span>, nn.Linear(<span class="number">1000</span>, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(vgg16_true)</span><br><span class="line"></span><br><span class="line">vgg16_false.classifier[<span class="number">6</span>] = nn.Linear(<span class="number">4096</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_false)</span><br></pre></td></tr></table></figure><h2 id="十七、模型的保存与读取">十七、模型的保存与读取</h2><h3 id="1-model-save">1.model_save</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存方式1:模型结构+模型参数</span></span><br><span class="line">torch.save(vgg16, <span class="string">&quot;vgg16_method1.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存方式2:模型参数（官方推荐）</span></span><br><span class="line">torch.save(vgg16.state_dict(), <span class="string">&quot;vgg16_method2.pth&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-model-load">2.model_load</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1：加载模型</span></span><br><span class="line"><span class="comment"># model = torch.load(&quot;vgg16_method1.pth&quot;)</span></span><br><span class="line"><span class="comment"># print(model)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2：加载模型</span></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">vgg16.load_state_dict(torch.load(<span class="string">&quot;vgg16_method2.pth&quot;</span>))</span><br><span class="line"><span class="comment"># model = torch.load(&quot;vgg16_method2.pth&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(vgg16)</span><br></pre></td></tr></table></figure><h2 id="十八、train（完整模型训练套路）">十八、train（完整模型训练套路）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                           download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                           download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 DataLoader 来加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(train_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络模型</span></span><br><span class="line">tudui = Tudui()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练网络的参数</span></span><br><span class="line"><span class="comment"># 记录训练的次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练的轮数</span></span><br><span class="line">epoch = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_train&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤开始</span></span><br><span class="line">    tudui.train()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        outputs = tudui(imgs)</span><br><span class="line">        loss = loss_fn(outputs,targets)</span><br><span class="line">        <span class="comment"># 优化器优化模型</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="comment"># 显示次数和损失loss</span></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(<span class="string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤开始</span></span><br><span class="line">    tudui.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs, targets = data</span><br><span class="line">            outputs = tudui(imgs)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss.item()</span><br><span class="line">            accuracy = (outputs.argmax(<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy/test_data_size))</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class="line">    total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># torch.save(tudui, &quot;model_classify_&#123;&#125;.pth&quot;.format(i))</span></span><br><span class="line">    <span class="comment"># print(&quot;模型已保存！&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h3 id="可视化页面展示：-2">可视化页面展示：</h3><p><img src="/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test3.png" alt="test3"></p><h2 id="十九、利用GPU训练">十九、利用GPU训练</h2><h3 id="1-train-gpu-1">1.train_gpu_1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                           download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                           download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 DataLoader 来加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(train_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络模型</span></span><br><span class="line">tudui = Tudui()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    tudui = tudui.cuda()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    loss_fn = loss_fn.cuda()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练网络的参数</span></span><br><span class="line"><span class="comment"># 记录训练的次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练的轮数</span></span><br><span class="line">epoch = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_train&quot;</span>)</span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤开始</span></span><br><span class="line">    tudui.train()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">            imgs = imgs.cuda()</span><br><span class="line">            targets = targets.cuda()</span><br><span class="line"></span><br><span class="line">        outputs = tudui(imgs)</span><br><span class="line">        loss = loss_fn(outputs,targets)</span><br><span class="line">        <span class="comment"># 优化器优化模型</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="comment"># 显示次数和损失loss</span></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            <span class="built_in">print</span>(end_time - start_time)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(<span class="string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤开始</span></span><br><span class="line">    tudui.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs, targets = data</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">                imgs = imgs.cuda()</span><br><span class="line">                targets = targets.cuda()</span><br><span class="line"></span><br><span class="line">            outputs = tudui(imgs)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss.item()</span><br><span class="line">            accuracy = (outputs.argmax(<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy/test_data_size))</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class="line">    total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">29</span>:</span><br><span class="line">        torch.save(tudui, <span class="string">&quot;model_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模型已保存！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h3 id="2-train-gpu-2">2.train_gpu_2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义训练设备</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                download=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 DataLoader 来加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(train_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络模型</span></span><br><span class="line">tudui = Tudui()</span><br><span class="line">tudui.to(device)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line">loss_fn.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练网络的参数</span></span><br><span class="line"><span class="comment"># 记录训练的次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练的轮数</span></span><br><span class="line">epoch = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_train&quot;</span>)</span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤开始</span></span><br><span class="line">    tudui.train()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line"></span><br><span class="line">        imgs = imgs.to(device)</span><br><span class="line">        targets = targets.to(device)</span><br><span class="line"></span><br><span class="line">        outputs = tudui(imgs)</span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line">        <span class="comment"># 优化器优化模型</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="comment"># 显示次数和损失loss</span></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            writer.add_scalar(<span class="string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤开始</span></span><br><span class="line">    tudui.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs, targets = data</span><br><span class="line"></span><br><span class="line">            imgs = imgs.to(device)</span><br><span class="line">            targets = targets.to(device)</span><br><span class="line"></span><br><span class="line">            outputs = tudui(imgs)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss.item()</span><br><span class="line">            accuracy = (outputs.argmax(<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;time: &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(end_time - start_time))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy/test_data_size))</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class="line">    total_test_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">29</span>:</span><br><span class="line">        torch.save(tudui, <span class="string">&quot;model_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模型已保存！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="二十、test（模型验证）">二十、test（模型验证）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&quot;../images/dog.png&quot;</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line"></span><br><span class="line">transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">                                            torchvision.transforms.ToTensor()])</span><br><span class="line"></span><br><span class="line">image = transform(image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">model = torch.load(<span class="string">&quot;model_30.pth&quot;</span>, map_location=torch.device(<span class="string">&#x27;cpu&#x27;</span>))</span><br><span class="line"></span><br><span class="line">image = torch.reshape(image, (<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    output = model(image)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output.argmax(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Deeplearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE5场景制作</title>
      <link href="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/"/>
      <url>/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、此为本人搭建场景，仅供参考~</li><li>2、如有使用注明出处~</li><li>3、如有不足，欢迎批评指正~</li></ul><hr><h1>一、场景Demo展示</h1><h2 id="1-日落">1.日落</h2><p><img src="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test1.png" alt="test1"></p><h2 id="2-山雾">2.山雾</h2><p><img src="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test2.png" alt="test2"></p><h2 id="3-地形">3.地形</h2><p><img src="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test3.png" alt="test3"></p><h2 id="4-光线">4.光线</h2><p><img src="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test4.jpg" alt="test4"></p><h2 id="5-洞穴">5.洞穴</h2><p><img src="/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test5.png" alt="test5"></p><hr>]]></content>
      
      
      <categories>
          
          <category> Gameproduction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>经验 or 小技巧</title>
      <link href="/2023/02/01/%E7%BB%8F%E9%AA%8C%20or%20%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/02/01/%E7%BB%8F%E9%AA%8C%20or%20%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、这为本人总结内容，主观性比较强，可以部分借鉴但不建议完全效仿；</li><li>2、如有使用或转载请注明出处；</li><li>3、如有不足，欢迎批评指正；</li></ul><hr><h1>时间复杂度 *</h1><p><img src="/2023/02/01/%E7%BB%8F%E9%AA%8C%20or%20%E5%B0%8F%E6%8A%80%E5%B7%A7/test1.png" alt></p><h1>空间复杂度</h1><p><img src="/2023/02/01/%E7%BB%8F%E9%AA%8C%20or%20%E5%B0%8F%E6%8A%80%E5%B7%A7/test2.png" alt></p><h1>小技巧</h1><h2 id="一、初始板子：">一、初始板子：</h2><ul><li>这是我的初始模板，里面的点已经写在注释上了，有需要的可以参考喔！</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span>   <span class="comment">// 万用头文件，所有库都在里面了</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first    <span class="comment">// pair类型为了方便二维平面上表示(x,y)坐标</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long  <span class="comment">// 经典！我是那种比较粗心的会经常忘记开longlong，</span></span></span><br><span class="line">                  <span class="comment">// 所以直接把所有int变为longlong，但是这样有时可能会常数过大从而导致TLE或MLE</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;  <span class="comment">// pair在树和图上经常用到，也经常在二维平面上表示(x,y)坐标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;   <span class="comment">// 可以ll代替longlong类型，少写一些字母</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;  <span class="comment">// 数组开到1e6可以应付绝大部分题目的数据量</span></span><br><span class="line">                     <span class="comment">// 从而保证不会RE和忘记修改数据，但是要注意空间复杂度</span></span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> T,n,m,k;         <span class="comment">// 可以事先列出常用的几个固定变量和数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 此处解题</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span>   <span class="comment">// 如果用了define int long long这里要改成signed</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 关闭同步流固定写法，优化cin和cout的时间，在数据1e6以上就非常需要</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>),cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="comment">// 现在遇到很多题目都是T组数据，写成函数的形式方便把每一组数据区分开</span></span><br><span class="line">    <span class="keyword">while</span>(T--) <span class="built_in">solve</span>();    <span class="comment">// 如果没有T组数据就只写solve()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、常用STL容器：">二、常用STL容器：</h2><h3 id="1、vector（变长数组）">1、vector（变长数组）</h3><p>首先 vector 是一个非常好用的东西，他俗名也叫【变长数组】，那就是说，它是一种空间可以灵活变通的类似于数组的一种数据结构。下面就来介绍几种 vector 的常见用法：</p><ul><li>定义：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一维</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; c;   <span class="comment">// vector&lt;类型名&gt; 变量名;</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(n+<span class="number">1</span>)</span></span>;  <span class="comment">// 固定长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; c[N];  <span class="comment">// vector&lt;类型名&gt; 数组;</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; c;  <span class="comment">// vector&lt;vector&lt;类型名&gt;&gt; 变量名;</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">c</span>(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>));  <span class="comment">// 二维n*m固定长度</span></span><br></pre></td></tr></table></figure><ul><li>基本用法：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; c;    <span class="comment">// 以容器变量为c举例</span></span><br><span class="line">c.<span class="built_in">size</span>()          <span class="comment">// c容器的长度</span></span><br><span class="line">c.<span class="built_in">push_back</span>(x);   <span class="comment">// 从vector后面存进去元素x</span></span><br><span class="line">c.<span class="built_in">pop_back</span>(x);    <span class="comment">// 从vector后面弹出元素x</span></span><br><span class="line">c.<span class="built_in">back</span>();         <span class="comment">// 取出容器最后的元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;c.<span class="built_in">size</span>();i++)  <span class="comment">// 遍历c中所有元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t:c)     <span class="comment">// 遍历vector内所有元素赋值到t里</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [x,y]:c) <span class="comment">// 二维遍历</span></span><br><span class="line"><span class="comment">// 注意：c++11以上才支持auto</span></span><br></pre></td></tr></table></figure><ul><li>因为 vector 可以访问最后的元素 + push进最后的位置 + 弹出最后面的元素，有时候可以利用这一特性用 vector 模拟栈；</li></ul><h3 id="2、string（字符串）">2、string（字符串）</h3><p>string 就是字符串，string s 也相当于char s[N]，但是里面有很多关于字符串操作的函数，所以比字符数组好用很多。下面就来介绍几种 string 的常见用法：</p><ul><li>定义：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一维</span></span><br><span class="line">string s;  <span class="comment">// string 变量名;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维</span></span><br><span class="line">string s[N];  <span class="comment">// string 数组;</span></span><br></pre></td></tr></table></figure><ul><li>基本用法：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string s;  <span class="comment">// 以变量名为s举例</span></span><br><span class="line">cin&gt;&gt;s;    <span class="comment">// 输入，遇到空格结束</span></span><br><span class="line"><span class="built_in">getline</span>(cin,s); <span class="comment">// 输入一整行</span></span><br><span class="line"></span><br><span class="line">s.<span class="built_in">size</span>()   <span class="comment">// 求字符串长度</span></span><br><span class="line">s=<span class="string">&#x27; &#x27;</span>+s;   <span class="comment">// 下标整体往后移</span></span><br><span class="line">string s=s1+s2;  <span class="comment">// 字符串相加</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());  <span class="comment">// 翻转字符串</span></span><br><span class="line">s.<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">1</span>);  <span class="comment">// substr是取出字串，用法s.substr(开头下标,字串长度)</span></span><br><span class="line">s1.<span class="built_in">find</span>(s2)!=srting::npos;  <span class="comment">// 在字符串s1里找字符串s2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)  <span class="comment">// 遍历字符串</span></span><br></pre></td></tr></table></figure><h3 id="3、map（映射）">3、map（映射）</h3><p>map 是一个很好用的东西，它是基于红黑树实现的，可以作为哈希表使用，增删查改的复杂度都是 O(logn)。下面就来介绍几种 map 的常见用法：</p><ul><li>定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;  <span class="comment">// map&lt;原类型，映射类型&gt; 变量名;</span></span><br><span class="line">map&lt;string,<span class="type">char</span>&gt; mp; <span class="comment">// 例：mp[&quot;nb&quot;]=&#x27;6&#x27;;</span></span><br><span class="line">map&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,string&gt; mp; <span class="comment">// 例：mp[&#123;1,1&#125;]=&quot;1025_xp&quot;;</span></span><br></pre></td></tr></table></figure><ul><li>用法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;  <span class="comment">// 以mp为变量名举例</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t:mp) cout&lt;&lt;t.x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;t.y&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;  <span class="comment">// 遍历map，x和y分别代表两维</span></span><br><span class="line">mp[i]++;  mp[i]=x;  mp[a[i]]--;  <span class="comment">// 直接赋值和加减记录</span></span><br></pre></td></tr></table></figure><h3 id="4、set（集合）">4、set（集合）</h3><p>set 是一种集合的容器，用于存储唯一的元素集合，并且也会根据键（key）自动排序。它基于二叉搜索树的数据结构实现，并且内部使用红黑树来维护顺序和唯一性。以下是 set 容器的一些常见用法示例：</p><ul><li>定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st;    <span class="comment">// 普通集合</span></span><br><span class="line">set&lt;string&gt; st;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; stt;  <span class="comment">// 多重集合</span></span><br></pre></td></tr></table></figure><ul><li>用法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">st.<span class="built_in">insert</span>(<span class="number">10</span>)   <span class="comment">// 插入一个元素</span></span><br><span class="line">st.<span class="built_in">erase</span>(<span class="number">10</span>)   <span class="comment">// 删除一个元素</span></span><br><span class="line"><span class="keyword">auto</span> it=st.<span class="built_in">find</span>(<span class="number">10</span>)  <span class="comment">// 查找一个元素</span></span><br><span class="line">stt.<span class="built_in">count</span>(<span class="number">10</span>)  <span class="comment">// 统计元素的个数（仅限于multset）</span></span><br><span class="line">st.<span class="built_in">size</span>()     <span class="comment">// 集合大小</span></span><br></pre></td></tr></table></figure><h3 id="5、stack（栈）">5、stack（栈）</h3><p>stack是一个比较简单易用的数据结构，其最大的特性就是先进后出。就好比一个桶，先放进出的数据就在底部，如果想要取出就先要把上面的数据取出。以下是 stack 容器的一些常见用法示例：</p><ul><li>定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">stack&lt;string&gt; stk;</span><br><span class="line">stack&lt;Node&gt; stk;   <span class="comment">// Node是结构体</span></span><br></pre></td></tr></table></figure><ul><li>用法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stk.<span class="built_in">empty</span>()   <span class="comment">//堆栈为空则返回真 </span></span><br><span class="line">stk.<span class="built_in">pop</span>()     <span class="comment">//移除栈顶元素 </span></span><br><span class="line">stk.<span class="built_in">push</span>()    <span class="comment">//在栈顶增加元素 </span></span><br><span class="line">stk.<span class="built_in">size</span>()    <span class="comment">//返回栈中元素数目 </span></span><br><span class="line">stk.<span class="built_in">top</span>()     <span class="comment">//返回栈顶元素 </span></span><br></pre></td></tr></table></figure><h3 id="6、queue（队列）、priority-queue（优先队列）">6、queue（队列）、priority_queue（优先队列）</h3><p>队列（queue）是一种线性数据结构，其特点是数据的插入和删除操作分别在不同的两端进行：插入操作在队列的尾部，删除操作在队列的头部。因此，队列遵循先进先出（FIFO, First In First Out）的原则，即最早进入队列的元素最先被处理。<br>而 优先队列（priority_queue） 是队列的一直优化，它是基于堆实现的，使得取出队列里最大最值元素优化到 $O(logn)$ 级别的复杂度。<br>以下是 queue、priority_queue 容器的一些常见用法示例：</p><ul><li>定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">queue&lt;string&gt; q;</span><br><span class="line">queue&lt;Node&gt; q;    <span class="comment">// Node是结构体</span></span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q; <span class="comment">// 优先队列（大根堆）</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt; q; <span class="comment">// 优先队列（小根堆）</span></span><br></pre></td></tr></table></figure><ul><li>用法1（queue）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">push</span>(<span class="string">&#x27;a&#x27;</span>);   <span class="comment">//入队</span></span><br><span class="line">q.<span class="built_in">pop</span>();       <span class="comment">//出队</span></span><br><span class="line">q.<span class="built_in">back</span>();      <span class="comment">//取队尾</span></span><br><span class="line">q.<span class="built_in">front</span>();     <span class="comment">//取队头</span></span><br><span class="line">q.<span class="built_in">empty</span>();     <span class="comment">//判空，返回bool值</span></span><br><span class="line">q.<span class="built_in">size</span>();      <span class="comment">//查询队列元素个数</span></span><br></pre></td></tr></table></figure><ul><li>用法2（priority_queue）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">empty</span>()    <span class="comment">// 如果优先队列为空，则返回真 </span></span><br><span class="line">q.<span class="built_in">pop</span>()      <span class="comment">// 删除第一个元素 </span></span><br><span class="line">q.<span class="built_in">push</span>()     <span class="comment">// 加入一个元素 </span></span><br><span class="line">q.<span class="built_in">size</span>()     <span class="comment">// 返回优先队列中拥有的元素的个数 </span></span><br><span class="line">q.<span class="built_in">top</span>()      <span class="comment">// 返回优先队列中有最高优先级的元素 </span></span><br></pre></td></tr></table></figure><h2 id="三、重载权值排序用法">三、重载权值排序用法</h2><h3 id="1、sort-重载排序函数">1、sort 重载排序函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从大到小排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从小到大排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先按第一权值x从小到大排序，然后按第二权值y从大到小排序（按自己需求修改符号和逻辑）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a,pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x==b.x) <span class="keyword">return</span> a.y&gt;b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br></pre></td></tr></table></figure><h3 id="2、priority-queue-重载排序函数">2、priority_queue 重载排序函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通自定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;y; <span class="comment">// 小的优先级高</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,cmp&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 友元函数重载</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">operator</span>&lt;(Node a,Node b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.x!=b.x) <span class="keyword">return</span> a.x&gt;b.x; <span class="comment">//x小的优先级高</span></span><br><span class="line">        <span class="keyword">return</span> a.y&lt;b.y; <span class="comment">//y大的优先级高</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;Node&gt; q;</span><br></pre></td></tr></table></figure><h2 id="四、增广数组">四、增广数组</h2><p>增广数组主要还是用于解决二维坐标的方位移动问题，以下是一些常见的坐标初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;  <span class="comment">// 上下左右四个方位</span></span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dxx[<span class="number">8</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;  <span class="comment">// 比上下左右多出了四个斜方位</span></span><br><span class="line"><span class="type">int</span> dyy[<span class="number">8</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用四个方位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a=x+dx[i];</span><br><span class="line">        <span class="type">int</span> b=y+dy[i];</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用八个方位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a=x+dx[i];</span><br><span class="line">        <span class="type">int</span> b=y+dy[i];</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Ps：如果大家想了解更多也可以上网搜其他的用法，有很多东西可能很高级但不一一介绍了，思维才是解题里面最重要的，会这些就已经足以应对-90-以上的问题了。">Ps：如果大家想了解更多也可以上网搜其他的用法，有很多东西可能很高级但不一一介绍了，思维才是解题里面最重要的，会这些就已经足以应对 90% 以上的问题了。</h4>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法竞赛模板</title>
      <link href="/2023/02/01/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/02/01/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、内容为本人常使用的算法竞赛模板；</li><li>2、如有使用注明出处；</li><li>3、如有改进地方欢迎批评指正；</li></ul><hr><h1>* 常用 ACM 竞赛模板</h1><h2 id="计算几何（常规）：">计算几何（常规）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Geometry</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line">    <span class="comment">// 点与向量</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> x, y;</span><br><span class="line">        <span class="built_in">Point</span>(<span class="type">double</span> x = <span class="number">0</span>, <span class="type">double</span> y = <span class="number">0</span>) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Point a) <span class="type">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">return</span> (<span class="built_in">fabs</span>(x - a.x) &lt;= eps &amp;&amp; <span class="built_in">fabs</span>(y - a.y) &lt;= eps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> Point Vector;</span><br><span class="line">    Vector <span class="keyword">operator</span>+(Vector A, Vector B)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(A.x + B.x, A.y + B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Vector <span class="keyword">operator</span>-(Vector A, Vector B)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(A.x - B.x, A.y - B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Vector <span class="keyword">operator</span>*(Vector A, <span class="type">double</span> p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(A.x * p, A.y * p);</span><br><span class="line">    &#125;</span><br><span class="line">    Vector <span class="keyword">operator</span>/(Vector A, <span class="type">double</span> p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(A.x / p, A.y / p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 符号函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 比较函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; y)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">dot</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 向量点积</span></span><br><span class="line">        <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">cross</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 向量叉积</span></span><br><span class="line">        <span class="keyword">return</span> a.x * b.y - b.x * a.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">get_length</span><span class="params">(Point a)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 求向量模长</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">dot</span>(a, a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">get_angle</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 求A-&gt;B的有向角</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">acos</span>(<span class="built_in">dot</span>(a, b) / <span class="built_in">get_length</span>(a) / <span class="built_in">get_length</span>(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span><span class="params">(Point a, Point b, Point c)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// A为顶点，向量AB与向量AC的叉积，即三角形ABC的面积的2倍（有向）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cross</span>(b - a, c - a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">rotate</span><span class="params">(Point a, <span class="type">double</span> angle)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 将向量A顺时针旋转angle度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(a.x * <span class="built_in">cos</span>(angle) + a.y * <span class="built_in">sin</span>(angle), -a.x * <span class="built_in">sin</span>(angle) + a.y * <span class="built_in">cos</span>(angle));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">get_line_intersection</span><span class="params">(Point p, Vector v, Point q, Vector w)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 两直线的交点</span></span><br><span class="line">        <span class="comment">// 使用前提，直线必须有交点</span></span><br><span class="line">        <span class="comment">// cross(v, w) == 0则两直线平行或者重合</span></span><br><span class="line">        Vector u = p - q;</span><br><span class="line">        <span class="type">double</span> t = <span class="built_in">cross</span>(w, u) / <span class="built_in">cross</span>(v, w);</span><br><span class="line">        <span class="keyword">return</span> p + v * t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">distance_to_line</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 点到直线的距离，直线为AB所在直线</span></span><br><span class="line">        Vector v1 = b - a, v2 = p - a;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">cross</span>(v1, v2) / <span class="built_in">get_length</span>(v1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">distance_to_segment</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 点到线段的距离，线段为线段AB</span></span><br><span class="line">        <span class="keyword">if</span> (a == b)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">get_length</span>(p - a);</span><br><span class="line"></span><br><span class="line">        Vector v1 = b - a, v2 = p - a, v3 = p - b;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sign</span>(<span class="built_in">dot</span>(v1, v2)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">get_length</span>(v2);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sign</span>(<span class="built_in">dot</span>(v1, v3)) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">get_length</span>(v3);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">distance_to_line</span>(p, a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">get_line_projection</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 点在直线上的投影，直线为AB所在直线</span></span><br><span class="line">        Vector v = b - a;</span><br><span class="line">        <span class="keyword">return</span> a + v * (<span class="built_in">dot</span>(v, p - a) / <span class="built_in">dot</span>(v, v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">on_segment</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 点是否在线段上</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sign</span>(<span class="built_in">cross</span>(p - a, p - b)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(<span class="built_in">dot</span>(p - a, p - b)) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">segment_intersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 判断两个线段是否相交</span></span><br><span class="line">        <span class="type">double</span> c1 = <span class="built_in">cross</span>(a2 - a1, b1 - a1), c2 = <span class="built_in">cross</span>(a2 - a1, b2 - a1);</span><br><span class="line">        <span class="type">double</span> c3 = <span class="built_in">cross</span>(b2 - b1, a2 - b1), c4 = <span class="built_in">cross</span>(b2 - b1, a1 - b1);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sign</span>(c1) * <span class="built_in">sign</span>(c2) &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(c3) * <span class="built_in">sign</span>(c4) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 多边形</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">polygon_area</span><span class="params">(Point p[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// 求多边形面积</span></span><br><span class="line">        <span class="type">double</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + <span class="number">1</span> &lt; n; i++)</span><br><span class="line">            s += <span class="built_in">cross</span>(p[i] - p[<span class="number">0</span>], p[i + <span class="number">1</span>] - p[i]);</span><br><span class="line">        <span class="keyword">return</span> s / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Geometry;</span><br></pre></td></tr></table></figure><h2 id="计算几何（极角排序）：">计算几何（极角排序）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="type">const</span> db EPS=<span class="number">1e-9</span>,Pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sign</span><span class="params">(db a)</span> </span>&#123; <span class="keyword">return</span> a &lt; -EPS ? <span class="number">-1</span> : a &gt; EPS; &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cmp</span><span class="params">(db a, db b)</span></span>&#123; <span class="keyword">return</span> <span class="built_in">sign</span>(a-b); &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">db x, y;</span><br><span class="line"><span class="built_in">P</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">P</span>(db _x, db _y) : <span class="built_in">x</span>(_x), <span class="built_in">y</span>(_y) &#123;&#125;</span><br><span class="line">P <span class="keyword">operator</span>+(P p) &#123; <span class="keyword">return</span> &#123;x + p.x, y + p.y&#125;; &#125;</span><br><span class="line">P <span class="keyword">operator</span>-(P p) &#123; <span class="keyword">return</span> &#123;x - p.x, y - p.y&#125;; &#125;</span><br><span class="line">P <span class="keyword">operator</span>*(db d) &#123; <span class="keyword">return</span> &#123;x * d, y * d&#125;; &#125;</span><br><span class="line">P <span class="keyword">operator</span>/(db d) &#123; <span class="keyword">return</span> &#123;x / d, y / d&#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(P p) <span class="type">const</span> &#123; </span><br><span class="line"><span class="type">int</span> c = <span class="built_in">cmp</span>(x, p.x);</span><br><span class="line"><span class="keyword">if</span> (c) <span class="keyword">return</span> c == <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cmp</span>(y, p.y) == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(P o) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cmp</span>(x,o.x) == <span class="number">0</span> &amp;&amp; <span class="built_in">cmp</span>(y,o.y) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">db <span class="title">dot</span><span class="params">(P p)</span> </span>&#123; <span class="keyword">return</span> x * p.x + y * p.y; &#125;</span><br><span class="line"><span class="function">db <span class="title">det</span><span class="params">(P p)</span> </span>&#123; <span class="keyword">return</span> x * p.y - y * p.x; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">db <span class="title">distTo</span><span class="params">(P p)</span> </span>&#123; <span class="keyword">return</span> (*<span class="keyword">this</span>-p).<span class="built_in">abs</span>(); &#125;</span><br><span class="line"><span class="function">db <span class="title">alpha</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">atan2</span>(y, x); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123; cin&gt;&gt;x&gt;&gt;y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line"><span class="function">db <span class="title">abs</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">abs2</span>());&#125;</span><br><span class="line"><span class="function">db <span class="title">abs2</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x * x + y * y; &#125;</span><br><span class="line"><span class="function">P <span class="title">rot90</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">P</span>(-y,x);&#125;</span><br><span class="line"><span class="function">P <span class="title">unit</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *<span class="keyword">this</span>/<span class="built_in">abs</span>(); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">quad</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sign</span>(y) == <span class="number">1</span> || (<span class="built_in">sign</span>(y) == <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(x) &gt;= <span class="number">0</span>); &#125;</span><br><span class="line"><span class="function">P <span class="title">rot</span><span class="params">(db an)</span></span>&#123; <span class="keyword">return</span> &#123;x*<span class="built_in">cos</span>(an) - y*<span class="built_in">sin</span>(an),x*<span class="built_in">sin</span>(an) + y*<span class="built_in">cos</span>(an)&#125;; &#125;</span><br><span class="line">&#125;l[N],r[N];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> crossOp(p1,p2,p3) sign(cross(p1,p2,p3))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 直线 p1p2, q1q2 是否恰有一个交点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chkLL</span><span class="params">(P p1, P p2, P q1, P q2)</span> </span>&#123;</span><br><span class="line">db a1 = <span class="built_in">cross</span>(q1, q2, p1), a2 = -<span class="built_in">cross</span>(q1, q2, p2);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sign</span>(a1+a2) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求直线 p1p2, q1q2 的交点</span></span><br><span class="line"><span class="function">P <span class="title">isLL</span><span class="params">(P p1, P p2, P q1, P q2)</span> </span>&#123;</span><br><span class="line">db a1 = <span class="built_in">cross</span>(q1, q2, p1), a2 = -<span class="built_in">cross</span>(q1, q2, p2);</span><br><span class="line"><span class="keyword">return</span> (p1 * a2 + p2 * a1) / (a1 + a2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断区间 [l1, r1], [l2, r2] 是否相交</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">intersect</span><span class="params">(db l1,db r1,db l2,db r2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l1&gt;r1) <span class="built_in">swap</span>(l1,r1); </span><br><span class="line"><span class="keyword">if</span> (l2&gt;r2) <span class="built_in">swap</span>(l2,r2); </span><br><span class="line"><span class="keyword">return</span> !( <span class="built_in">cmp</span>(r1,l2) == <span class="number">-1</span> || <span class="built_in">cmp</span>(r2,l1) == <span class="number">-1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线段 p1p2, q1q2 相交</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSS</span><span class="params">(P p1, P p2, P q1, P q2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">intersect</span>(p1.x,p2.x,q1.x,q2.x) &amp;&amp; <span class="built_in">intersect</span>(p1.y,p2.y,q1.y,q2.y) &amp;&amp; </span><br><span class="line"><span class="built_in">crossOp</span>(p1,p2,q1) * <span class="built_in">crossOp</span>(p1,p2,q2) &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">crossOp</span>(q1,q2,p1)</span><br><span class="line">* <span class="built_in">crossOp</span>(q1,q2,p2) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线段 p1p2, q1q2 严格相交  </span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSS_strict</span><span class="params">(P p1, P p2, P q1, P q2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">crossOp</span>(p1,p2,q1) * <span class="built_in">crossOp</span>(p1,p2,q2) &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">crossOp</span>(q1,q2,p1)</span><br><span class="line">* <span class="built_in">crossOp</span>(q1,q2,p2) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// m 在 a 和 b 之间</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isMiddle</span><span class="params">(db a, db m, db b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sign</span>(a - m) == <span class="number">0</span> || <span class="built_in">sign</span>(b - m) == <span class="number">0</span> || (a &lt; m != b &lt; m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isMiddle</span><span class="params">(P a, P m, P b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">isMiddle</span>(a.x, m.x, b.x) &amp;&amp; <span class="built_in">isMiddle</span>(a.y, m.y, b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点 p 在线段 p1p2 上</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">onSeg</span><span class="params">(P p1, P p2, P q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">crossOp</span>(p1,p2,q) == <span class="number">0</span> &amp;&amp; <span class="built_in">isMiddle</span>(p1, q, p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// q1q2 和 p1p2 的交点 在 p1p2 上？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点 p 严格在 p1p2 上</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">onSeg_strict</span><span class="params">(P p1, P p2, P q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">crossOp</span>(p1,p2,q) == <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>((q-p1).<span class="built_in">dot</span>(p1-p2)) * <span class="built_in">sign</span>((q-p2).<span class="built_in">dot</span>(p1-p2)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 q 到 直线p1p2 的投影（垂足） ⚠️ : p1 != p2</span></span><br><span class="line"><span class="function">P <span class="title">proj</span><span class="params">(P p1, P p2, P q)</span> </span>&#123;</span><br><span class="line">P dir = p2 - p1;</span><br><span class="line"><span class="keyword">return</span> p1 + dir * (dir.<span class="built_in">dot</span>(q - p1) / dir.<span class="built_in">abs2</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 q 以 直线p1p2 为轴的反射</span></span><br><span class="line"><span class="function">P <span class="title">reflect</span><span class="params">(P p1, P p2, P q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">proj</span>(p1,p2,q) * <span class="number">2</span> - q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 q 到 线段p1p2 的最小距离</span></span><br><span class="line"><span class="function">db <span class="title">nearest</span><span class="params">(P p1, P p2, P q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p1 == p2) <span class="keyword">return</span> p1.<span class="built_in">distTo</span>(q);</span><br><span class="line">P h = <span class="built_in">proj</span>(p1,p2,q);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isMiddle</span>(p1,h,p2))</span><br><span class="line"><span class="keyword">return</span> q.<span class="built_in">distTo</span>(h);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(p1.<span class="built_in">distTo</span>(q),p2.<span class="built_in">distTo</span>(q));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 线段p1p2 与 线段q1q2 的距离</span></span><br><span class="line"><span class="function">db <span class="title">disSS</span><span class="params">(P p1, P p2, P q1, P q2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isSS</span>(p1,p2,q1,q2)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">min</span>(<span class="built_in">nearest</span>(p1,p2,q1),<span class="built_in">nearest</span>(p1,p2,q2)), <span class="built_in">min</span>(<span class="built_in">nearest</span>(q1,q2,p1),<span class="built_in">nearest</span>(q1,q2,p2)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求三角形面积</span></span><br><span class="line"><span class="function">db <span class="title">get_s</span><span class="params">(P a,P b,P c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cross</span>(a,b,c)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 极角排序1</span></span><br><span class="line"><span class="comment">// sort(p, p + n, [&amp;](P a, P b) &#123;</span></span><br><span class="line"><span class="comment">// int qa = a.quad(), qb = b.quad();</span></span><br><span class="line"><span class="comment">// if (qa != qb) return qa &lt; qb;</span></span><br><span class="line"><span class="comment">// else return sign(a.det(b)) &gt; 0;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 极角排序2</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cross1</span><span class="params">(P a, P b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">up</span><span class="params">(P a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &gt; <span class="number">0</span> || (a.y == <span class="number">0</span> &amp;&amp; a.x &gt;= <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(p, p + n , [&amp;](P a, P b)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">up</span>(a) != <span class="built_in">up</span>(b)) <span class="keyword">return</span> <span class="built_in">up</span>(a) &gt; <span class="built_in">up</span>(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross1</span>(a, b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="向量叉积：">向量叉积：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义点结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="type">double</span> angle;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> point &amp;t)&#123;</span><br><span class="line">        <span class="keyword">return</span> angle&lt;t.angle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//求叉积</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cross</span><span class="params">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判定线线的位置关系</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(Point a,Point b,Point c,Point d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(a,b,c)*<span class="built_in">cross</span>(a,b,d)&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求两直线的交点</span></span><br><span class="line"><span class="function">Point <span class="title">getNode</span><span class="params">(Point a,Point u,Point b,Point v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> t=(a-b)*v/(v*u);</span><br><span class="line">    <span class="keyword">return</span> a+u*t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求三角形面积</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">get_s</span><span class="params">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(a,b,c)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//极角排序（atan2函数）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">atan2cmp</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.angle==b.angle) <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.angle&lt;a.angle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//极角排序（叉积）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">crosscmp</span><span class="params">(Point a,Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> f=<span class="built_in">cross</span>(p[pos],a,b);</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">0</span>) <span class="keyword">return</span> a.x-p[pos].x&lt;b.x-p[pos].x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(f&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="凸包-旋转卡壳：">凸包 + 旋转卡壳：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;p[N],s[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//求叉积</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cross</span><span class="params">(P a,P b,P c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求两点距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(P a,P b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(P a,P b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x==b.x) <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求凸包的Andrew算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Andrew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求上凸包</span></span><br><span class="line">    <span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;<span class="number">1</span>&amp;&amp;<span class="built_in">cross</span>(s[top<span class="number">-1</span>],s[top],p[i])&lt;=<span class="number">0</span>) top--</span><br><span class="line">        s[++top]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求下凸包</span></span><br><span class="line">    <span class="type">int</span> t=top;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(top&gt;t&amp;&amp;<span class="built_in">cross</span>(s[top<span class="number">-1</span>],s[top],p[i])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">        s[++top]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n=top<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//旋转卡壳</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rotating_calipers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cross</span>(s[i],s[i+<span class="number">1</span>],s[j])&lt;<span class="built_in">cross</span>(s[i],s[i+<span class="number">1</span>],s[j+<span class="number">1</span>])) j=j%n+<span class="number">1</span>;</span><br><span class="line">        res=<span class="built_in">max</span>(&#123;res,<span class="built_in">dis</span>(s[i],s[j]),<span class="built_in">dis</span>(s[i+<span class="number">1</span>],s[j])&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自适应辛普森积分：">自适应辛普森积分：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="type">double</span> l,r;</span><br><span class="line"></span><br><span class="line"><span class="comment">//积分函数</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x*x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辛普森公式</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">simpson</span><span class="params">(<span class="type">double</span> l,<span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">f</span>(l)+<span class="built_in">f</span>(r)+<span class="number">4</span>*<span class="built_in">f</span>((l+r)/<span class="number">2</span>))*(r-l)/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自适应</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">asr</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b,<span class="type">double</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> m=(l+r)/<span class="number">2</span>,a=<span class="built_in">simpson</span>(l,m),b=<span class="built_in">simpson</span>(m,r);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(a+b-ans)&lt;eps) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">asr</span>(l,m,a)+<span class="built_in">asr</span>(m,r,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合数（常规）：">组合数（常规）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速幂逆元求组合数</span></span><br><span class="line"><span class="type">int</span> fact[N], infact[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fact[a]*infact[a-b]%mod*infact[b]%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fact[a]*infact[a-b]%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆排列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Q</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fact[a]*infact[a-b]%mod*<span class="built_in">qmi</span>(m,mod<span class="number">-2</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错位排列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">D</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">0</span>,f[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++) f[i]=(i<span class="number">-1</span>)*(f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>])%mod;</span><br><span class="line">    <span class="keyword">return</span> f[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//预处理</span></span><br><span class="line">fact[<span class="number">0</span>]=infact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">    fact[i]=fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    infact[i]=infact[i<span class="number">-1</span>]*<span class="built_in">qmi</span>(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合数（优化）：">组合数（优化）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> i64 = <span class="type">int64_t</span>;</span><br><span class="line"><span class="keyword">constexpr</span> i64 mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">i64 <span class="title">fpow</span><span class="params">(i64 x, i64 r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    i64 result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (r &amp; <span class="number">1</span>)result = result * x % mod;</span><br><span class="line">        r &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> binom &#123;</span><br><span class="line">    i64 fac[N], ifac[N];</span><br><span class="line">    <span class="type">int</span> __ = []</span><br><span class="line">    &#123;</span><br><span class="line">        fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N - <span class="number">5</span>; i++)</span><br><span class="line">            fac[i] = fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        ifac[N - <span class="number">5</span>] = <span class="built_in">fpow</span>(fac[N - <span class="number">5</span>], mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">5</span>; i; i--)</span><br><span class="line">            ifac[i - <span class="number">1</span>] = ifac[i] * i % mod;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> i64 <span class="title">C</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> fac[n] * ifac[m] % mod * ifac[n - m] % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> i64 <span class="title">A</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> fac[n] * ifac[n - m] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> binom;</span><br></pre></td></tr></table></figure><h2 id="卡特兰数-C-2n-n-C-2n-n-1-：">卡特兰数  C(2<em>n,n)-C(2</em>n,n-1) ：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分解质因数求组合数（可适用于mod非质数）</span></span><br><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//筛质数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速幂</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分解质因数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=n;j;j/=p) s+=j/p;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分解质因数的方式求组合数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="type">int</span> p=primes[i];</span><br><span class="line">        <span class="type">int</span> s=<span class="built_in">get</span>(a,p)-<span class="built_in">get</span>(b,p)-<span class="built_in">get</span>(a-b,p);</span><br><span class="line">        res=res*<span class="built_in">qmi</span>(p,s)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;mod;</span><br><span class="line">    cout&lt;&lt;(<span class="built_in">C</span>(<span class="number">2</span>*n,n)-<span class="built_in">C</span>(<span class="number">2</span>*n,n+<span class="number">1</span>)+mod)%mod&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="欧拉、莫比乌斯函数-整数分块：">欧拉、莫比乌斯函数 + 整数分块：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="type">int</span> mobius[N],s[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//线性筛求欧拉函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">oula</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            primes[cnt++]=i;</span><br><span class="line">            phi[i]=i<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                phi[i*primes[j]]=phi[i]*primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[i*primes[j]]=phi[i]*(primes[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线性筛求莫比乌斯函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mobius[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            primes[cnt++]=i;</span><br><span class="line">            mobius[i]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                mobius[primes[j]*i]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mobius[primes[j]*i]=mobius[i]*<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="number">-1</span>]+mobius[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除数分块</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,d;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;d;</span><br><span class="line">    a/=d,b/=d;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>,n=<span class="built_in">min</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=<span class="built_in">min</span>(n,<span class="built_in">min</span>(a/(a/l),b/(b/l)));</span><br><span class="line">        res+=(s[r]-s[l<span class="number">-1</span>])*(a/l)*(b/l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;res&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂：">矩阵快速幂：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//矩阵运算</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a[][N],<span class="type">int</span> b[][N],<span class="type">int</span> c[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t[N][N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;N;k++)</span><br><span class="line">                t[i][j]=(t[i][j]+a[i][k]*b[k][j])%m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(c,t,<span class="keyword">sizeof</span> t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造系数矩阵</span></span><br><span class="line">    <span class="type">int</span> f1[N][N]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> a[N][N]=&#123;</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">         &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//快速幂</span></span><br><span class="line">    <span class="type">int</span> k=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span>) <span class="built_in">mul</span>(f1,a,f1);</span><br><span class="line">        <span class="built_in">mul</span>(a,a,a);</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;f1[<span class="number">2</span>]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记忆化搜索求期望：">记忆化搜索求期望：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;PII&gt; c[N];</span><br><span class="line"><span class="type">int</span> d[N],a[N];</span><br><span class="line"><span class="type">double</span> f[N];</span><br><span class="line"><span class="type">int</span> T,n,m,k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[u]&gt;<span class="number">0</span>) <span class="keyword">return</span> f[u];</span><br><span class="line">    <span class="keyword">if</span>(u==<span class="number">0</span>) <span class="keyword">return</span> f[u]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    f[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p:c[u])&#123;</span><br><span class="line">        <span class="type">int</span> i=p.x,j=p.y;</span><br><span class="line">        f[u]+=(<span class="built_in">dfs</span>(i)+j)*<span class="number">1.0</span>/d[u];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> u,v,w;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        c[u].<span class="built_in">push_back</span>(&#123;v,w&#125;);</span><br><span class="line">        d[u]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,<span class="built_in">dfs</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展欧几里得（exgcd）：">扩展欧几里得（exgcd）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展欧几里得</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求解不定方程ax+my==b;</span></span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(a,m,x,y);</span><br><span class="line">    <span class="comment">//求出ax+my==gcd(a,m),判断gcd(a,m)|b?</span></span><br><span class="line">    <span class="keyword">if</span>(b%d==<span class="number">0</span>) cout&lt;&lt;x*b/d%m&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">//求解乘法逆元：</span></span><br><span class="line">    cout&lt;&lt;(x%m+m)%m&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="扩展欧拉定理：">扩展欧拉定理：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求欧拉函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_phi</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m%i==<span class="number">0</span>)&#123;</span><br><span class="line">            res=res/i*(i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">while</span>(m%i==<span class="number">0</span>) m/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;<span class="number">1</span>) res=res*/m*(m<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//降幂</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">depow</span><span class="params">(<span class="type">int</span> phi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;s[i];i++)&#123;</span><br><span class="line">        b=b*<span class="number">10</span>+(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(b&gt;=phi) flag=<span class="literal">true</span>,b%=phi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) b+=phi;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容斥原理：">容斥原理：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n,m,primes[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//位运算求容斥原理，复杂度为 O(2^m)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i++)&#123; </span><br><span class="line">        <span class="type">int</span> t=<span class="number">1</span>,sign=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>&lt;&lt;j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t*primes[j]&gt;n) t=<span class="number">0</span>,<span class="keyword">break</span>;</span><br><span class="line">                t*=primes[j];</span><br><span class="line">                sign=-sign;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t) res+=n/t*sign;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sg-函数：">sg 函数：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sg</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x]!=<span class="number">-1</span>) <span class="keyword">return</span> f[x];</span><br><span class="line"></span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:c[x]) s.<span class="built_in">insert</span>(<span class="built_in">sg</span>(i));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;;i++)</span><br><span class="line">        <span class="keyword">if</span>(!s.<span class="built_in">count</span>(i))</span><br><span class="line">            <span class="keyword">return</span> f[x]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整数三分：">整数三分：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">2e9</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="type">int</span> t=(r-l)/<span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> mid1=l+t;</span><br><span class="line">    <span class="type">int</span> mid2=r-t;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid1)&gt;<span class="built_in">check</span>(mid2)) l=mid1;</span><br><span class="line">    <span class="keyword">else</span> r=mid2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小数三分：">小数三分：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> l=<span class="number">1</span>,r=<span class="number">2e9</span>;</span><br><span class="line"><span class="keyword">while</span>(r-l&gt;eps)&#123;</span><br><span class="line">    <span class="type">double</span> t=(r-l)/<span class="number">3</span>;</span><br><span class="line">    <span class="type">double</span> mid1=l+t;</span><br><span class="line">    <span class="type">double</span> mid2=r-t;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid1)&gt;<span class="built_in">check</span>(mid2)) l=mid1;</span><br><span class="line">    <span class="keyword">else</span> r=mid2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA（最近公共祖先）：">LCA（最近公共祖先）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u]=dep[father]+<span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>]=father;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:c[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v!=father)&#123; </span><br><span class="line">            <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(dep[fa[u][i]]&gt;=dep[v]) u=fa[u][i];</span><br><span class="line">    <span class="keyword">if</span>(u==v) <span class="keyword">return</span> v;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--) </span><br><span class="line">        <span class="keyword">if</span>(fa[u][i]!=fa[v][i]) </span><br><span class="line">            u=fa[u][i],v=fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity游戏控制基础脚本</title>
      <link href="/2023/02/01/Unity%E6%B8%B8%E6%88%8F%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/02/01/Unity%E6%B8%B8%E6%88%8F%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="首先声明！！！">首先声明！！！</h2><hr><ul><li>1、脚本为本人总结，如有使用注明出处</li><li>2、Unity采用C#编程语言编写脚本。</li><li>3、脚本内有注释。</li></ul><hr><h2 id="一、TimeTest（时间控制测试）">一、TimeTest（时间控制测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> JetBrains.Annotations;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TimeTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> GameObject Prefab;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计时器</span></span><br><span class="line">    <span class="built_in">float</span> timer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//游戏开始到现在所花的时间</span></span><br><span class="line">        Debug.Log(Time.time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//时间缩放值</span></span><br><span class="line">        Debug.Log(Time.timeScale);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//固定时间间隔</span></span><br><span class="line">        Debug.Log(Time.fixedDeltaTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GameObject p;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        timer = timer + Time.deltaTime;</span><br><span class="line">        <span class="comment">//每一帧所有的时间</span></span><br><span class="line">        <span class="comment">//Debug.Log(Time.deltaTime);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timer &gt; <span class="number">3</span>&amp;&amp; t == <span class="number">0</span>) &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;敌人出现了！&quot;</span>);</span><br><span class="line">            p = Instantiate(Prefab, Vector3.one, Quaternion.identity);</span><br><span class="line">            t = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timer &gt; <span class="number">6</span>)&#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;敌人消失了！&quot;</span>);</span><br><span class="line">            Destroy(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、SceneTest（场景测试）">二、SceneTest（场景测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SceneTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//场景类，场景管理类 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取当前场景</span></span><br><span class="line">        Scene scene = SceneManager.GetActiveScene();</span><br><span class="line">        Debug.Log(scene.name);  <span class="comment">//场景名称</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.场景是否已经加载</span></span><br><span class="line">        Debug.Log(scene.isLoaded);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.场景路径</span></span><br><span class="line">        Debug.Log(scene.path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.场景索引</span></span><br><span class="line">        Debug.Log(scene.buildIndex);</span><br><span class="line">        GameObject[] gos = scene.GetRootGameObjects();</span><br><span class="line">        Debug.Log(gos.Length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//场景管理类:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.直接创建一个新场景</span></span><br><span class="line">        Scene newScene = SceneManager.CreateScene(<span class="string">&quot;newScene&quot;</span>);</span><br><span class="line">        <span class="comment">//2.已加载场景个数</span></span><br><span class="line">        Debug.Log(SceneManager.sceneCount);</span><br><span class="line">        <span class="comment">//3.卸载场景</span></span><br><span class="line">        SceneManager.UnloadSceneAsync(newScene);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载场景</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.替换</span></span><br><span class="line">        <span class="comment">//SceneManager.LoadScene(&quot;MyScene&quot;,LoadSceneMode.Single);</span></span><br><span class="line">        <span class="comment">//2.添加（两个场景内容叠加）</span></span><br><span class="line">        SceneManager.LoadScene(<span class="string">&quot;MyScene&quot;</span>, LoadSceneMode.Additive);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、EmptyTest（空测试）">三、EmptyTest（空测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> JetBrains.Annotations;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmptyTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> GameObject Cube;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取预设体</span></span><br><span class="line">    <span class="keyword">public</span> GameObject Prefab;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//GameObject go=this.gameObject;</span></span><br><span class="line">        Debug.Log(gameObject.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//tag标签</span></span><br><span class="line">        Debug.Log(gameObject.tag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//layer图层</span></span><br><span class="line">        Debug.Log(gameObject.layer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//立方体的名称</span></span><br><span class="line">        Debug.Log(Cube.name);</span><br><span class="line">        <span class="comment">//当前真正的激活状态</span></span><br><span class="line">        Debug.Log(Cube.activeInHierarchy);</span><br><span class="line">        <span class="comment">//它自身的激活状态</span></span><br><span class="line">        Debug.Log(Cube.activeSelf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取位置信息</span></span><br><span class="line">        Debug.Log(transform.position);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取其他组件</span></span><br><span class="line">        BoxCollider bc = GetComponent&lt;BoxCollider&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加一个组件</span></span><br><span class="line">        Cube.AddComponent&lt;AudioSource&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过预设体来实例化一个物体</span></span><br><span class="line">        GameObject p = Instantiate(Prefab, Vector3.one, Quaternion.identity);</span><br><span class="line">        Instantiate(Prefab, Vector3.zero, Quaternion.identity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//销毁物体</span></span><br><span class="line">        Destroy(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、ApplicationTest（应用测试）">四、ApplicationTest（应用测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//游戏数据文件夹路径（只读，加密压缩）</span></span><br><span class="line">        Debug.Log(Application.dataPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//持久化文件夹路径</span></span><br><span class="line">        Debug.Log(Application.persistentDataPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//StreamingAssets文件夹路径（只读，配置文件）</span></span><br><span class="line">        Debug.Log(Application.streamingAssetsPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//临时文件夹</span></span><br><span class="line">        Debug.Log(Application.temporaryCachePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//控制是否在后台运行</span></span><br><span class="line">        Debug.Log(Application.runInBackground);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开url（即直接跳转网站）</span></span><br><span class="line">        <span class="comment">//Application.OpenURL(&quot;https://gitee.com/qq2607563994/algorithm-code&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//退出游戏</span></span><br><span class="line">        Application.Quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、TransformTest（坐标测试）">五、TransformTest（坐标测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TransformTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取位置</span></span><br><span class="line">        Debug.Log(transform.position);</span><br><span class="line">        Debug.Log(transform.localPosition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取旋转</span></span><br><span class="line">        Debug.Log(transform.rotation);</span><br><span class="line">        Debug.Log(transform.localRotation);</span><br><span class="line">        Debug.Log(transform.eulerAngles);</span><br><span class="line">        Debug.Log(transform.localEulerAngles);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取缩放</span></span><br><span class="line">        Debug.Log(transform.localScale);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向量</span></span><br><span class="line">        Debug.Log(transform.forward);</span><br><span class="line">        Debug.Log(transform.right);</span><br><span class="line">        Debug.Log(transform.up);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">//父子关系</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取父物体</span></span><br><span class="line">        <span class="comment">//GameObject t = transform.parent.gameObject;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//子物体个数</span></span><br><span class="line">        Debug.Log(transform.childCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解除父子关系</span></span><br><span class="line">        transform.DetachChildren();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取子物体</span></span><br><span class="line">        Transform trans = transform.Find(<span class="string">&quot;Child&quot;</span>);</span><br><span class="line">        trans = transform.GetChild(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断一个物体是不是另外一个物体的子物体</span></span><br><span class="line">        <span class="built_in">bool</span> res = transform.IsChildOf(transform);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//时刻看向原点</span></span><br><span class="line">        transform.LookAt(Vector3.zero);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//旋转</span></span><br><span class="line">        transform.Rotate(Vector3.up, <span class="number">0.5f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绕某个物体旋转</span></span><br><span class="line">        transform.RotateAround(Vector3.zero, Vector3.up, <span class="number">0.2f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动</span></span><br><span class="line">        <span class="comment">//transform.Translate(Vector3.forward * 0.1f);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="六、KeyTest（按键测试）">六、KeyTest（按键测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KeyTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//鼠标点击</span></span><br><span class="line">        <span class="comment">//按下鼠标 0左键 1右键 2滚轮</span></span><br><span class="line">        <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;按下了鼠标左键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//持续按下</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;持续按下了鼠标左键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//抬起按键</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonUp(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;抬起了鼠标左键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘点击</span></span><br><span class="line">        <span class="comment">//按下</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;按下了A&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKey(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;持续按下了A&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyUp(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;抬起了A&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="七、AsyncTest（异步加载测试）">七、AsyncTest（异步加载测试）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AsyncTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    AsyncOperation operation;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(loadScene());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//协程方法用来异步加载场景</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">loadScene</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        operation = SceneManager.LoadSceneAsync(<span class="string">&quot;MyScene&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载完场景不要自动跳转</span></span><br><span class="line">        operation.allowSceneActivation = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> operation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> timer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(operation.progress);</span><br><span class="line">        timer += Time.deltaTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果大于5秒后跳转</span></span><br><span class="line">        <span class="keyword">if</span>(timer &gt; <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            operation.allowSceneActivation = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Gameproduction </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
