{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/gallery.yml","hash":"d960e1cbded38fd36b48e2e2b2dd6a7e33a65778","modified":1675396634940},{"_id":"source/about/index.md","hash":"32883c38756dfd504fa5e98823f20be36d140542","modified":1718850798981},{"_id":"source/link/index.md","hash":"f1802b71e9178df7bf03acc7e9524e77f742d6e5","modified":1675437359939},{"_id":"source/archives/index.md","hash":"9db17b098198587716b949217eee14af8dbe657c","modified":1689331675561},{"_id":"source/categories/index.md","hash":"fc09caadc6a759777ac47b82af8e2fcd990b3c80","modified":1689331621791},{"_id":"source/_posts/Codeforces 0-1000.md","hash":"26e282533b78d70909d5ac1c9833067ebf431962","modified":1718888310058},{"_id":"source/_posts/Codeforces 1100-1400.md","hash":"27dd5f74c8f8ad96fa090f4c6b15d40d978cd335","modified":1718888315986},{"_id":"source/_posts/Codeforces 1900-2200.md","hash":"52e9460a38fd0182877d5fd17f10c6800a3f3bac","modified":1718888327815},{"_id":"source/_posts/Codeforces 1500-1800.md","hash":"98b03689e840f875758493acb1ee82e1fcbe1f54","modified":1718888322292},{"_id":"source/_posts/UE5场景制作.md","hash":"cd32398742bfeef20fec65851611edb5084041bc","modified":1689312895958},{"_id":"source/_posts/Unity游戏控制基础脚本.md","hash":"ca6e5274cf3d032d2034f16ba5d13f39745fd657","modified":1689305521444},{"_id":"source/_posts/csp-j1知识点.md","hash":"5ab54ab7f0e5ec7871bf8ca496d5ca3c81526c6f","modified":1718886518603},{"_id":"source/_posts/基于Pytorch框架的深度学习入门基础.md","hash":"a17af901380c73644f858edbcf1088c16debae0d","modified":1718888219288},{"_id":"source/_posts/基于Pytorch框架的深度学习图像分类模型.md","hash":"734970a298d1ec814fa7054603a408f6e53c37b0","modified":1718888225831},{"_id":"source/_posts/基于Pytorch框架的深度学习语言对话模型.md","hash":"7410cc73a9489f73dbc51b82148ee76d8f118d4f","modified":1718888210469},{"_id":"source/_posts/算法知识点.md","hash":"ad3332704352a39d517cf4f23b83a1a25c331120","modified":1718849835731},{"_id":"source/movie/index.md","hash":"bbc00cbc03a6eb8ef615f43d72d55ea32e44d185","modified":1689331153129},{"_id":"source/gallery/index.md","hash":"f807b7191a7c2a07c7e7c2e9bf589ddcd42d3015","modified":1689331114202},{"_id":"source/tags/index.md","hash":"b28e102e4e1db4eac10605e5187eef4685f28b1d","modified":1689331164075},{"_id":"source/music/index.md","hash":"828a7c364e3d3136279357ff5340b237d0b81f02","modified":1689331141304},{"_id":"source/_posts/csp-j1知识点/3.png","hash":"8a2861f1635a20c74901329530fc982c0d02f773","modified":1718864424419},{"_id":"source/_posts/csp-j1知识点/4.png","hash":"4a9b66abf19d9a688e26539f657b649279df64ee","modified":1718864441579},{"_id":"source/_posts/csp-j1知识点/2.png","hash":"5c5245c0d6cd97ff38680a297271f19b4552fdd3","modified":1718864409380},{"_id":"source/_posts/csp-j1知识点/5.png","hash":"5de0de88b45b9ab9bf7865e827fbf0c21004e2d6","modified":1718864456605},{"_id":"source/_posts/csp-j1知识点/6.png","hash":"4a9b66abf19d9a688e26539f657b649279df64ee","modified":1718864467158},{"_id":"source/_posts/csp-j1知识点/7.png","hash":"a89011c1b61bb149da261b123acbcee1506a7089","modified":1718864477347},{"_id":"source/_posts/csp-j1知识点/8.png","hash":"c99b5af0f16f0a8bde4eae7bf9a2535cd1ba7331","modified":1718864487519},{"_id":"source/_posts/算法模板.md","hash":"2b33b11ec9e917913d785acc26d9cab308ed0bd7","modified":1718849821874},{"_id":"source/_posts/csp-j1知识点/1.png","hash":"3659ae6d50ac3d00d15a0c504a994e98d76c5beb","modified":1718864286448},{"_id":"source/_posts/csp-j1知识点/10.jpg","hash":"e27ce89cb5002fb12e2477cd67e86ebb7bd400ee","modified":1718865307535},{"_id":"source/_posts/csp-j1知识点/11.png","hash":"96f7789543a35732d3bc539a19bf8d9e9f3cca3a","modified":1718884439378},{"_id":"source/_posts/基于Pytorch框架的深度学习语言对话模型/1.png","hash":"cf14ca2003499d61a8353c7c0ae30659d010d2ad","modified":1718888038931},{"_id":"source/_posts/基于Pytorch框架的深度学习语言对话模型/4.png","hash":"5eb296fc4df9c06baadc37f666440b534754f03e","modified":1718888125912},{"_id":"source/_posts/Pytorch框架深度学习入门基础/test1.png","hash":"4a0a7109ae2a9aa7f56d968cc5115d64b0edb925","modified":1675950633917},{"_id":"source/_posts/Pytorch框架深度学习入门基础/test4.png","hash":"d7fb314d459771e540e7a722d16c7a4dcc841999","modified":1676564325885},{"_id":"source/_posts/csp-j1知识点/9.jpg","hash":"83deec12ef16c0fabb774e39498ac2cd2a2cd9eb","modified":1718864580792},{"_id":"source/_posts/基于Pytorch框架的深度学习语言对话模型/3.png","hash":"7403dcc9b85fe380a2bd7bb8527ff8188360911d","modified":1718888101564},{"_id":"source/_posts/基于Pytorch框架的深度学习语言对话模型/2.png","hash":"e1c3eb09ae41c8cd9284b50edafcd03025988ec9","modified":1718888073503},{"_id":"source/_posts/算法知识点/test2.png","hash":"9c07fdfcc60ff6032ddff6b5b70dbeb570d2b3ba","modified":1675398453083},{"_id":"source/_posts/记录第一次打icpc区域赛的感受/test4.png","hash":"edd1a4c4735cac55737f7d4acd9d70830789db8f","modified":1703218675268},{"_id":"source/_posts/记录第一次打icpc区域赛的感受/test1.png","hash":"d49c54578810fef20df3f456107466dfa8afc6bb","modified":1703218425293},{"_id":"source/_posts/Pytorch框架深度学习入门基础/test3.png","hash":"5b13e7f02f2fe11629db47e0158ca3043eac4d63","modified":1676520246745},{"_id":"source/_posts/Pytorch框架深度学习入门基础/test2.png","hash":"f6bbbce1f47931f943dc649deecd6ac3f7db8da0","modified":1676557440979},{"_id":"source/_posts/算法模板/af26922d331d4e20a18842f5b0d4b8d0.png","hash":"54b41e2d1fd20eed32c534683f76b2ab7a47c487","modified":1675661852004},{"_id":"source/_posts/算法知识点/test1.png","hash":"051d04795972146593405ac3fefb21212ae5d3f3","modified":1675396671594},{"_id":"source/_posts/UE5场景制作/test4.jpg","hash":"6663886c8ff8927e3a7af3286016e8c8f40070ed","modified":1675949042588},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1675441386849},{"_id":"themes/butterfly/README.md","hash":"15e7f6386b4fd3fa4a6c179ddf641e1ae57eafa2","modified":1675441386849},{"_id":"themes/butterfly/README_CN.md","hash":"d0f7a24732855ae340f94e8286085d5387850cde","modified":1675441386850},{"_id":"themes/butterfly/_config.yml","hash":"9a8389db280546f622336ae32b7637fa56d90199","modified":1709869304274},{"_id":"themes/butterfly/plugins.yml","hash":"8e3b5e44ff0e7e9c5779234bf21e1e70aeec5ae8","modified":1675441386872},{"_id":"themes/butterfly/package.json","hash":"822d83111feefd6a026b14fedef7871960ab434f","modified":1675441386872},{"_id":"themes/butterfly/languages/en.yml","hash":"9d83a52e3fe3c086eadcdd9bca50829ca9b3a188","modified":1675441386850},{"_id":"themes/butterfly/languages/default.yml","hash":"a62bfe75c32dd0c2754b6fc70df027947ed1e711","modified":1675441386850},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"c2f1111d0cffddbf04248a7daa55c7895b9e4cf3","modified":1675441386851},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"30b69c969394392e4bdd3763873ceed0d473cfcb","modified":1675441386851},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1675441386851},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1675441386851},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1675441386871},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1675441386871},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1675441386871},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1675441386871},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1675441386849},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1675441386849},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1675441386849},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1675441386849},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1675441386849},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1675441386851},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1675441386852},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"bfc28cb79e81f55c09672fb8e4372a71e0994761","modified":1675441386852},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ab32b8d4ef682bd1d9b727b9d25a19dc06f3e68e","modified":1675441386852},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"25cd2d7c4d3f6836a157b73a2442a7712ff40b34","modified":1675441386855},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1675441386857},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1675441386858},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1675441386872},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"5f96a28a4eac046b68ccc10e8c24ab01525e3245","modified":1675441386858},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"39a2f0088841abb89b3b801469266cc9568fced0","modified":1675441386872},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1675441386872},{"_id":"themes/butterfly/scripts/events/init.js","hash":"72605a00bf623b6cbc9fa0f90069ea2ae584c5c0","modified":1675441386873},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1675441386873},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1675441386873},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"d33f0a055bacaa96ee5b69f821292d87658f4b0c","modified":1675441386873},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1675441386873},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1675441386874},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1675441386874},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1675441386874},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"40f85785d041b976f47a2828b0dc54346dcb62b0","modified":1675441386874},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1675441386875},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ade8ce15cc7f41587e616f8e40f565081aee1c37","modified":1675441386874},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1675441386875},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1675441386875},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1675441386876},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1675441386875},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"bc74b7701ac07ff679b699d63e706935b37a8b7b","modified":1675441386875},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1675441386875},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1675441386876},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1675441386877},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1675441386876},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1675441386876},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1675441386886},{"_id":"themes/butterfly/source/css/var.styl","hash":"63f12a6a847738b1479ce782c8caac5e0cf16a6b","modified":1675441386886},{"_id":"themes/butterfly/source/js/main.js","hash":"f049b166073c4bcdccc6d8348774941a4e2c6d7b","modified":1675441386888},{"_id":"themes/butterfly/source/js/utils.js","hash":"85a4f6e680ad2500ed114918158557ed85a8d89a","modified":1675441386889},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"c4dac81869b33fa1590fae60a45b2e915a59c3ec","modified":1675441386888},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1675441386886},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1675441386887},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1675441386887},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1675441386852},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1675441386852},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f4b80b4a3ff5dd877b447b42d078f01ee3ecab24","modified":1675441386853},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1675441386853},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1675441386853},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1675441386853},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1675441386853},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1675441386853},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1675441386854},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e9f952f1b66a0116fccb812b14db0f229666e586","modified":1675441386854},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1675441386854},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"40efa8e29460746b0d1253ce19b87eb035e25c47","modified":1675441386854},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1675441386855},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1675441386855},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"767ca9b4dad126ba5fbd2f3ea5ca8d07c0d2b32c","modified":1675441386855},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1675441386856},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"39847b8a1f0fad7889954a4ac936b7681949f16c","modified":1675441386856},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1675441386856},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"39c205027296dbd9fc9eb3cfd9d033bc5bd031b7","modified":1675441386856},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1675441386856},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1675441386857},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a60d9cc9083142e3d92b618561abd557fcab502b","modified":1675441386857},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1675441386857},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1675441386858},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1675441386864},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1675441386867},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1675441386867},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1675441386867},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d4836a2ce1c87a59cfa8e4986346bf353710277f","modified":1675441386868},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1675441386869},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1675441386869},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1675441386869},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1675441386869},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1675441386869},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1675441386869},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1675441386870},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1675441386870},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1675441386870},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1675441386870},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1675441386870},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1675441386870},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1675441386871},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1675441386857},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1675441386857},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"6a7a926b72c5083aa14051a0eca8d49e1c6261f1","modified":1675441386877},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c424b1a3119ffb8396d80bb3585f48bd6777c917","modified":1675441386877},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7a12719a1ef2bce7d4056f2241251a71e92cd72c","modified":1675441386880},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1675441386880},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1675441386880},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"077ce6932261cf51696834a25d1d988fec6cd7d0","modified":1675441386880},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d33f2d9001a82d9a72d6f4088743762fbd016e4c","modified":1675441386880},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1675441386880},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1675441386880},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1675441386880},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1675441386881},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1675441386881},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1675441386881},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1675441386881},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1675441386881},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1675441386878},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1675441386879},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1675441386882},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1675441386882},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1675441386882},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1675441386883},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1675441386883},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d83389e07f8851f1b9afafe0eacd1bf10ad334ef","modified":1675441386883},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1675441386883},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"5dabc3a5330cc28f0666d1cd8db0d67f553fd854","modified":1675441386882},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"d072872714854cdc3d2975fb131ac31cb82b13e3","modified":1675441386882},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"e3e1b234a2595824576b8c9ed87af6d933f4e125","modified":1675441386883},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1675441386884},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"72a38c1dad7f55564b02c7a23e6ef39219edcd80","modified":1675441386884},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1675441386884},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1675441386884},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1675441386884},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1675441386885},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1675441386885},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1675441386885},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1675441386885},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1675441386885},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1675441386885},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1675441386886},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"73027a5e8b49d62b5b5a4d51663d5189f8eb7b4c","modified":1675441386888},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"44b6d3fb2c9b437d85de751d83e2e92a0830451d","modified":1675441386888},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1675441386859},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1675441386859},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1675441386859},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1675441386859},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1675441386860},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1675441386860},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1675441386859},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3f59333064c4fc754c638f13a417b7be2569ca09","modified":1675441386860},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1675441386860},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1675441386860},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1675441386861},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1675441386861},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1675441386861},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1675441386861},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1675441386861},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"d6a2a828689d619943838d42f2c3a45551e2c6c4","modified":1675441386862},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1675441386862},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"ca1337586aafc85e7f6d730ed0a1984a1a12aba7","modified":1675441386862},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1675441386862},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1675441386862},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"77729ecfae68ad21ff1d22ff2c8aa212f4d405c6","modified":1675441386862},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1675441386863},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1675441386863},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1675441386863},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1675441386863},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1675441386863},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1675441386863},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1675441386864},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"6b0d28671afd5ed286a714f25ba16256a2e7d880","modified":1675441386864},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1675441386864},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1675441386864},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"2a39dd634a80a735359206a2481f8468f34a0b5c","modified":1675441386864},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1675441386865},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1675441386865},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1675441386865},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1675441386866},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1675441386866},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1675441386866},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1675441386866},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1675441386866},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"f434dce30f8faee0db5a8e4d2c81196b0e3605f4","modified":1675441386866},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1675441386867},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1675441386867},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1675441386867},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1675441386868},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1675441386868},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1675441386868},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1675441386868},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1675441386878},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1675441386878},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1675441386878},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1675441386879},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1675441386879},{"_id":"themes/butterfly/source/img/wechat.jpg","hash":"8a18be12f5169f4de8c0ca6f64feef61c5e0454e","modified":1675484189539},{"_id":"source/_posts/csp-j1知识点/12.png","hash":"7f85006837b3aed48f3d3fee83f5721f12260ea8","modified":1718884450394},{"_id":"source/_posts/UE5场景制作/test2.png","hash":"df0984a7f5438d19584279264669f7115de3b3fa","modified":1675949006455},{"_id":"source/_posts/UE5场景制作/test1.png","hash":"34d8df7216f5b274ab06c2e13f42ec8a5540e042","modified":1675949033252},{"_id":"source/_posts/UE5场景制作/test3.png","hash":"ac9db30d05c2bcdba9b31c563c31abf16929fdf7","modified":1675948999118},{"_id":"source/_posts/UE5场景制作/test5.png","hash":"9a547ff2c283f443fd31448c3630f737c569347e","modified":1675949197017},{"_id":"public/search.xml","hash":"541ae06a1ff8fd003be6aeaac337c5acd3a45fab","modified":1718888400275},{"_id":"public/404.html","hash":"f0a946e39eba6d70e79590a04eecdd1525498906","modified":1718888400275},{"_id":"public/archives/index.html","hash":"2eecc2c90e539491564e99ba921a2d882b866edb","modified":1718888400275},{"_id":"public/link/index.html","hash":"8c1139d2edc51e94ce21131c743c16edc12954e2","modified":1718888400275},{"_id":"public/about/index.html","hash":"199a0e78e9fba88f1317a21edfa073401e594f73","modified":1718888400275},{"_id":"public/movie/index.html","hash":"a8d9248a900c42dba0fc22d860cd64fa809b1336","modified":1718888400275},{"_id":"public/categories/index.html","hash":"35b3487ecda4dbada2b432c8276d43d2de7c010e","modified":1718888400275},{"_id":"public/gallery/index.html","hash":"71c323d4fc4e844102ddd2e98fe32d60f96c37e4","modified":1718888400275},{"_id":"public/tags/index.html","hash":"93feb389d199875e60d089acf911054ed1216670","modified":1718888400275},{"_id":"public/music/index.html","hash":"0264864de6fdf9ab9a84786a6f491c628b053d47","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/index.html","hash":"1bbdc741f8ce23b261ccb11cfd2bed32b3610f3c","modified":1718888400275},{"_id":"public/2024/06/14/Codeforces 0-1000/index.html","hash":"cd9ab1db374bf9ef664da37a14901ac5077e56c3","modified":1718888400275},{"_id":"public/2024/06/12/Codeforces 1100-1400/index.html","hash":"5e83b4cb0dfbcfda950ee620d6a10127928b8e0e","modified":1718888400275},{"_id":"public/2024/06/10/Codeforces 1500-1800/index.html","hash":"8c217138f81dca744f046ab03c0a85a9abcc7387","modified":1718888400275},{"_id":"public/2024/06/06/Codeforces 1900-2200/index.html","hash":"4eaf1d97e056497044d3013631cce8dcf3a53243","modified":1718888400275},{"_id":"public/2023/03/16/基于Pytorch框架的深度学习语言对话模型/index.html","hash":"06c80b9c387e3eb478b2cd91f8528e64e32253e4","modified":1718888400275},{"_id":"public/2023/03/15/基于Pytorch框架的深度学习图像分类模型/index.html","hash":"879014be23e5f683f3e4ada734cbcccff1ee2956","modified":1718888400275},{"_id":"public/2023/02/02/UE5场景制作/index.html","hash":"37daac77e2c60700d05012776b7c787baf4cefeb","modified":1718888400275},{"_id":"public/2023/03/14/基于Pytorch框架的深度学习入门基础/index.html","hash":"8da2c0ada2f01f64faddd9ebafc2691b38f3865a","modified":1718888400275},{"_id":"public/2023/02/01/算法知识点/index.html","hash":"0bb675bff1a9e395d6dcb978c131cddb4f480a7f","modified":1718888400275},{"_id":"public/2023/02/01/算法模板/index.html","hash":"209d0085908a49cd62ea09b604dc4c3bec032d72","modified":1718888400275},{"_id":"public/2023/02/01/Unity游戏控制基础脚本/index.html","hash":"248a9bc1dfa40aba6d94414a97c47fe2bfeac745","modified":1718888400275},{"_id":"public/archives/page/2/index.html","hash":"db148922c581c39769cc4bbf3a204ee90ceecbc7","modified":1718888400275},{"_id":"public/archives/2023/index.html","hash":"1b2878e0de8927efdc80263b79f2b7197764311f","modified":1718888400275},{"_id":"public/archives/2023/02/index.html","hash":"9395c08f953aacb43376d3a91deb63db69a79df6","modified":1718888400275},{"_id":"public/archives/2023/03/index.html","hash":"2a03cfc57e2a9124549db417928e7d39376b25cf","modified":1718888400275},{"_id":"public/archives/2024/06/index.html","hash":"193acaf83c8b2558938a72047eef2da19dde981d","modified":1718888400275},{"_id":"public/archives/2024/index.html","hash":"9883a51dbd9a62127a2f1413ac0f967fd323cd04","modified":1718888400275},{"_id":"public/categories/Codeforces/index.html","hash":"47cfcc3607b8054b4167d1a893261d38849dbe15","modified":1718888400275},{"_id":"public/categories/Gameproduction/index.html","hash":"1b0d9d4671c3863d51410d98f8d466789bd6f381","modified":1718888400275},{"_id":"public/categories/CSP-J-S/index.html","hash":"581c6792ff2d9cc120ad53f24027f5e0c19ebb90","modified":1718888400275},{"_id":"public/index.html","hash":"deec97405c1360ce16ca7f2eb7d34de83c444b35","modified":1718888400275},{"_id":"public/categories/Algorithm/index.html","hash":"6ae8b14b91beb7f65cb7a0664fe7fc26d50f50c4","modified":1718888400275},{"_id":"public/categories/Deeplearn/index.html","hash":"8792c13296f5fed435b6392e44a7d24bee4f68c3","modified":1718888400275},{"_id":"public/page/2/index.html","hash":"4260f7ce6702fb89d4d930388fc8c7fa1b7ed632","modified":1718888400275},{"_id":"public/tags/题解/index.html","hash":"329a532bf0994988eadb78896f6cfa7f54d3d4e5","modified":1718888400275},{"_id":"public/tags/算法/index.html","hash":"89f8c8071e4d272d3db956ea8846424f609fb928","modified":1718888400275},{"_id":"public/tags/深度学习/index.html","hash":"001bae7a396d0b859216ba7190fee32be0d40b06","modified":1718888400275},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1718888400275},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1718888400275},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/2.png","hash":"5c5245c0d6cd97ff38680a297271f19b4552fdd3","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/3.png","hash":"8a2861f1635a20c74901329530fc982c0d02f773","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/4.png","hash":"4a9b66abf19d9a688e26539f657b649279df64ee","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/5.png","hash":"5de0de88b45b9ab9bf7865e827fbf0c21004e2d6","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/6.png","hash":"4a9b66abf19d9a688e26539f657b649279df64ee","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/7.png","hash":"a89011c1b61bb149da261b123acbcee1506a7089","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/8.png","hash":"c99b5af0f16f0a8bde4eae7bf9a2535cd1ba7331","modified":1718888400275},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1718888400275},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1718888400275},{"_id":"public/img/wechat.jpg","hash":"8a18be12f5169f4de8c0ca6f64feef61c5e0454e","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/1.png","hash":"3659ae6d50ac3d00d15a0c504a994e98d76c5beb","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/11.png","hash":"96f7789543a35732d3bc539a19bf8d9e9f3cca3a","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/10.jpg","hash":"e27ce89cb5002fb12e2477cd67e86ebb7bd400ee","modified":1718888400275},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1718888400275},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1718888400275},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1718888400275},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1718888400275},{"_id":"public/js/utils.js","hash":"c9b4d8ec10a74f29cf1f9c4275f0cae3bd93b427","modified":1718888400275},{"_id":"public/js/search/local-search.js","hash":"ee86f52bb6558c51a6f31402c2e4ec1dcb81bb55","modified":1718888400275},{"_id":"public/css/index.css","hash":"6e2306ec6e56683a85eee636a5df84dee3e7eda7","modified":1718888400275},{"_id":"public/js/main.js","hash":"c0a3093c2485fa2121c10741e256170f211c7398","modified":1718888400275},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1718888400275},{"_id":"public/2023/03/16/基于Pytorch框架的深度学习语言对话模型/1.png","hash":"cf14ca2003499d61a8353c7c0ae30659d010d2ad","modified":1718888400275},{"_id":"public/2023/03/16/基于Pytorch框架的深度学习语言对话模型/4.png","hash":"5eb296fc4df9c06baadc37f666440b534754f03e","modified":1718888400275},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1718888400275},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1718888400275},{"_id":"public/2023/03/16/基于Pytorch框架的深度学习语言对话模型/2.png","hash":"e1c3eb09ae41c8cd9284b50edafcd03025988ec9","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/9.jpg","hash":"83deec12ef16c0fabb774e39498ac2cd2a2cd9eb","modified":1718888400275},{"_id":"public/2023/03/16/基于Pytorch框架的深度学习语言对话模型/3.png","hash":"7403dcc9b85fe380a2bd7bb8527ff8188360911d","modified":1718888400275},{"_id":"public/2023/02/01/算法知识点/test2.png","hash":"9c07fdfcc60ff6032ddff6b5b70dbeb570d2b3ba","modified":1718888400275},{"_id":"public/2023/02/01/算法模板/af26922d331d4e20a18842f5b0d4b8d0.png","hash":"54b41e2d1fd20eed32c534683f76b2ab7a47c487","modified":1718888400275},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1718888400275},{"_id":"public/2023/02/01/算法知识点/test1.png","hash":"051d04795972146593405ac3fefb21212ae5d3f3","modified":1718888400275},{"_id":"public/2023/02/02/UE5场景制作/test4.jpg","hash":"6663886c8ff8927e3a7af3286016e8c8f40070ed","modified":1718888400275},{"_id":"public/2024/06/20/csp-j1知识点/12.png","hash":"7f85006837b3aed48f3d3fee83f5721f12260ea8","modified":1718888400275},{"_id":"public/2023/02/02/UE5场景制作/test2.png","hash":"df0984a7f5438d19584279264669f7115de3b3fa","modified":1718888400275},{"_id":"public/2023/02/02/UE5场景制作/test1.png","hash":"34d8df7216f5b274ab06c2e13f42ec8a5540e042","modified":1718888400275},{"_id":"public/2023/02/02/UE5场景制作/test3.png","hash":"ac9db30d05c2bcdba9b31c563c31abf16929fdf7","modified":1718888400275},{"_id":"public/2023/02/02/UE5场景制作/test5.png","hash":"9a547ff2c283f443fd31448c3630f737c569347e","modified":1718888400275}],"Category":[{"name":"Codeforces","_id":"clxn9rvny0004hwtv3qpp4qwj"},{"name":"Gameproduction","_id":"clxn9rvo0000bhwtv2uszhvcz"},{"name":"CSP-J/S","_id":"clxn9rvo8000shwtv97zve3bd"},{"name":"Deeplearn","_id":"clxn9rvoa000yhwtv71kce6lp"},{"name":"Algorithm","_id":"clxn9rvoc001fhwtv8ver3y2o"}],"Data":[{"_id":"gallery","data":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}],"Page":[{"title":"介绍","date":"2023-02-02T03:24:09.000Z","layout":"about","_content":"\n\n\n# 个人博客\n\n\n\n### 介绍\n\n* 喜欢用cin和cout的程序猿小白(,,Ծ‸Ծ,, )\n* 致力于更有效的学习！！！\n* 博客记录学习的过程碎片~\n\n\n\n\n###  我的初始板子(๑¯ω¯๑)：\n\n```c++\n#include <bits/stdc++.h>\n\n#define x first\n#define y second\n\n#define int long long\n\nusing namespace std;\n\ntypedef pair<int,int> PII;\n\ntypedef long long LL;\n\nconst int N=1e6+10;\n\nint a[N],b[N];\nint T,n,m,k;   \n\n\nvoid slove()\n{\n    //此处解题\n}\n\n\nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin.tie(nullptr),cout.tie(nullptr);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n  \n\n### 使用说明\n\n1. 转发注明出处！！！\n2. 自己使用的模板，望大家批评指正~\n3. 可供学习参考。\n\n\n\n### 主要功能\n\n1. Fork 本仓库；\n2. 使用 master 分支；\n3. 提交参考代码；\n4. 有问题反馈评论；\n5. 不得发表不正当言论！！！\n6. 还有好多内容没有完善。。。敬请谅解~\n\n---\n\n\n\n### 提供git上传仓库教程：\n\n* git下载地址：https://npm.taobao.org/mirrors/git-for-windows/\n\n  \n\n### 基于git搭建hexo博客教程\n\n* 1.右键打开Git Bash，输入如下命令，配置git操作的用户名、邮箱：\n    $ git config --global user.name \"你的名字或昵称\"\n    $ git config --global user.email \"你的邮箱\"\n* 2.配置ssh公钥：\n    在Git Bash中输入如下命令，生成SSH key：\n    $ ssh-keygen -t rsa -C \"你的邮箱\"\n* 3.输入如下第1行命令，打印刚才生成的SSH key：\n    $ cat ~/.ssh/id_rsa.pub\n* 4.主页右上角 「个人设置」->「安全设置」->「SSH公钥」->「添加公钥」 ，复制生成的 public key，添加到当前账户中。\n\n* 5.测试SSH key是否配置ok：\n   $ ssh -T git@github.com\n   Hi XXX! You've successfully authenticated, but GITEE.COM does not provide shell access.\n\n### 上传文件操作\n* $ git add .                          #将当前目录所有文件添加到git暂存区\n* $ git commit -m \"my commit\"          #提交并备注提交信息\n* $ git push                           #将本地提交推送到远程仓库\n\n\n### 下载文件操作\n* 打开==自己账号==下的仓库，点击 “克隆/下载” 按钮，选择 “SSH”, 点击“复制”\n* $ git clone git@github.com\n\n### hexo 部署命令：\n* $ cd 你的博客文件夹\n* $ hexo cl && hexo g && hexo s \n* $ hexo d （部署）  \n","source":"about/index.md","raw":"---\ntitle: 介绍\ndate: 2023-02-02 11:24:09\nlayout: \"about\"\n\n---\n\n\n\n# 个人博客\n\n\n\n### 介绍\n\n* 喜欢用cin和cout的程序猿小白(,,Ծ‸Ծ,, )\n* 致力于更有效的学习！！！\n* 博客记录学习的过程碎片~\n\n\n\n\n###  我的初始板子(๑¯ω¯๑)：\n\n```c++\n#include <bits/stdc++.h>\n\n#define x first\n#define y second\n\n#define int long long\n\nusing namespace std;\n\ntypedef pair<int,int> PII;\n\ntypedef long long LL;\n\nconst int N=1e6+10;\n\nint a[N],b[N];\nint T,n,m,k;   \n\n\nvoid slove()\n{\n    //此处解题\n}\n\n\nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin.tie(nullptr),cout.tie(nullptr);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n  \n\n### 使用说明\n\n1. 转发注明出处！！！\n2. 自己使用的模板，望大家批评指正~\n3. 可供学习参考。\n\n\n\n### 主要功能\n\n1. Fork 本仓库；\n2. 使用 master 分支；\n3. 提交参考代码；\n4. 有问题反馈评论；\n5. 不得发表不正当言论！！！\n6. 还有好多内容没有完善。。。敬请谅解~\n\n---\n\n\n\n### 提供git上传仓库教程：\n\n* git下载地址：https://npm.taobao.org/mirrors/git-for-windows/\n\n  \n\n### 基于git搭建hexo博客教程\n\n* 1.右键打开Git Bash，输入如下命令，配置git操作的用户名、邮箱：\n    $ git config --global user.name \"你的名字或昵称\"\n    $ git config --global user.email \"你的邮箱\"\n* 2.配置ssh公钥：\n    在Git Bash中输入如下命令，生成SSH key：\n    $ ssh-keygen -t rsa -C \"你的邮箱\"\n* 3.输入如下第1行命令，打印刚才生成的SSH key：\n    $ cat ~/.ssh/id_rsa.pub\n* 4.主页右上角 「个人设置」->「安全设置」->「SSH公钥」->「添加公钥」 ，复制生成的 public key，添加到当前账户中。\n\n* 5.测试SSH key是否配置ok：\n   $ ssh -T git@github.com\n   Hi XXX! You've successfully authenticated, but GITEE.COM does not provide shell access.\n\n### 上传文件操作\n* $ git add .                          #将当前目录所有文件添加到git暂存区\n* $ git commit -m \"my commit\"          #提交并备注提交信息\n* $ git push                           #将本地提交推送到远程仓库\n\n\n### 下载文件操作\n* 打开==自己账号==下的仓库，点击 “克隆/下载” 按钮，选择 “SSH”, 点击“复制”\n* $ git clone git@github.com\n\n### hexo 部署命令：\n* $ cd 你的博客文件夹\n* $ hexo cl && hexo g && hexo s \n* $ hexo d （部署）  \n","updated":"2024-06-20T02:33:18.981Z","path":"about/index.html","comments":1,"_id":"clxn9rvnt0000hwtv5mtdbddw","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>个人博客</h1>\n<h3 id=\"介绍\">介绍</h3>\n<ul>\n<li>喜欢用cin和cout的程序猿小白(,Ծ‸Ծ, )</li>\n<li>致力于更有效的学习！！！</li>\n<li>博客记录学习的过程碎片~</li>\n</ul>\n<h3 id=\"我的初始板子-๑¯ω¯๑-：\">我的初始板子(๑¯ω¯๑)：</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//此处解题</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>),cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用说明\">使用说明</h3>\n<ol>\n<li>转发注明出处！！！</li>\n<li>自己使用的模板，望大家批评指正~</li>\n<li>可供学习参考。</li>\n</ol>\n<h3 id=\"主要功能\">主要功能</h3>\n<ol>\n<li>Fork 本仓库；</li>\n<li>使用 master 分支；</li>\n<li>提交参考代码；</li>\n<li>有问题反馈评论；</li>\n<li>不得发表不正当言论！！！</li>\n<li>还有好多内容没有完善。。。敬请谅解~</li>\n</ol>\n<hr>\n<h3 id=\"提供git上传仓库教程：\">提供git上传仓库教程：</h3>\n<ul>\n<li>git下载地址：<a href=\"https://npm.taobao.org/mirrors/git-for-windows/\">https://npm.taobao.org/mirrors/git-for-windows/</a></li>\n</ul>\n<h3 id=\"基于git搭建hexo博客教程\">基于git搭建hexo博客教程</h3>\n<ul>\n<li>\n<p>1.右键打开Git Bash，输入如下命令，配置git操作的用户名、邮箱：<br>\n$ git config --global <a href=\"http://user.name\">user.name</a> “你的名字或昵称”<br>\n$ git config --global user.email “你的邮箱”</p>\n</li>\n<li>\n<p>2.配置ssh公钥：<br>\n在Git Bash中输入如下命令，生成SSH key：<br>\n$ ssh-keygen -t rsa -C “你的邮箱”</p>\n</li>\n<li>\n<p>3.输入如下第1行命令，打印刚才生成的SSH key：<br>\n$ cat ~/.ssh/id_rsa.pub</p>\n</li>\n<li>\n<p>4.主页右上角 「个人设置」-&gt;「安全设置」-&gt;「SSH公钥」-&gt;「添加公钥」 ，复制生成的 public key，添加到当前账户中。</p>\n</li>\n<li>\n<p>5.测试SSH key是否配置ok：<br>\n$ ssh -T <a href=\"mailto:git@github.com\">git@github.com</a><br>\nHi XXX! You’ve successfully authenticated, but <a href=\"http://GITEE.COM\">GITEE.COM</a> does not provide shell access.</p>\n</li>\n</ul>\n<h3 id=\"上传文件操作\">上传文件操作</h3>\n<ul>\n<li>$ git add .                          #将当前目录所有文件添加到git暂存区</li>\n<li>$ git commit -m “my commit”          #提交并备注提交信息</li>\n<li>$ git push                           #将本地提交推送到远程仓库</li>\n</ul>\n<h3 id=\"下载文件操作\">下载文件操作</h3>\n<ul>\n<li>打开==自己账号==下的仓库，点击 “克隆/下载” 按钮，选择 “SSH”, 点击“复制”</li>\n<li>$ git clone <a href=\"mailto:git@github.com\">git@github.com</a></li>\n</ul>\n<h3 id=\"hexo-部署命令：\">hexo 部署命令：</h3>\n<ul>\n<li>$ cd 你的博客文件夹</li>\n<li>$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</li>\n<li>$ hexo d （部署）</li>\n</ul>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.MFXfj-kEFh8zKZRt_5azpQHaEK?w=303&h=180&c=7&r=0&o=5&dpr=1.4&pid=1.7","cover_type":"img","excerpt":"","more":"<h1>个人博客</h1>\n<h3 id=\"介绍\">介绍</h3>\n<ul>\n<li>喜欢用cin和cout的程序猿小白(,Ծ‸Ծ, )</li>\n<li>致力于更有效的学习！！！</li>\n<li>博客记录学习的过程碎片~</li>\n</ul>\n<h3 id=\"我的初始板子-๑¯ω¯๑-：\">我的初始板子(๑¯ω¯๑)：</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//此处解题</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>),cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用说明\">使用说明</h3>\n<ol>\n<li>转发注明出处！！！</li>\n<li>自己使用的模板，望大家批评指正~</li>\n<li>可供学习参考。</li>\n</ol>\n<h3 id=\"主要功能\">主要功能</h3>\n<ol>\n<li>Fork 本仓库；</li>\n<li>使用 master 分支；</li>\n<li>提交参考代码；</li>\n<li>有问题反馈评论；</li>\n<li>不得发表不正当言论！！！</li>\n<li>还有好多内容没有完善。。。敬请谅解~</li>\n</ol>\n<hr>\n<h3 id=\"提供git上传仓库教程：\">提供git上传仓库教程：</h3>\n<ul>\n<li>git下载地址：<a href=\"https://npm.taobao.org/mirrors/git-for-windows/\">https://npm.taobao.org/mirrors/git-for-windows/</a></li>\n</ul>\n<h3 id=\"基于git搭建hexo博客教程\">基于git搭建hexo博客教程</h3>\n<ul>\n<li>\n<p>1.右键打开Git Bash，输入如下命令，配置git操作的用户名、邮箱：<br>\n$ git config --global <a href=\"http://user.name\">user.name</a> “你的名字或昵称”<br>\n$ git config --global user.email “你的邮箱”</p>\n</li>\n<li>\n<p>2.配置ssh公钥：<br>\n在Git Bash中输入如下命令，生成SSH key：<br>\n$ ssh-keygen -t rsa -C “你的邮箱”</p>\n</li>\n<li>\n<p>3.输入如下第1行命令，打印刚才生成的SSH key：<br>\n$ cat ~/.ssh/id_rsa.pub</p>\n</li>\n<li>\n<p>4.主页右上角 「个人设置」-&gt;「安全设置」-&gt;「SSH公钥」-&gt;「添加公钥」 ，复制生成的 public key，添加到当前账户中。</p>\n</li>\n<li>\n<p>5.测试SSH key是否配置ok：<br>\n$ ssh -T <a href=\"mailto:git@github.com\">git@github.com</a><br>\nHi XXX! You’ve successfully authenticated, but <a href=\"http://GITEE.COM\">GITEE.COM</a> does not provide shell access.</p>\n</li>\n</ul>\n<h3 id=\"上传文件操作\">上传文件操作</h3>\n<ul>\n<li>$ git add .                          #将当前目录所有文件添加到git暂存区</li>\n<li>$ git commit -m “my commit”          #提交并备注提交信息</li>\n<li>$ git push                           #将本地提交推送到远程仓库</li>\n</ul>\n<h3 id=\"下载文件操作\">下载文件操作</h3>\n<ul>\n<li>打开==自己账号==下的仓库，点击 “克隆/下载” 按钮，选择 “SSH”, 点击“复制”</li>\n<li>$ git clone <a href=\"mailto:git@github.com\">git@github.com</a></li>\n</ul>\n<h3 id=\"hexo-部署命令：\">hexo 部署命令：</h3>\n<ul>\n<li>$ cd 你的博客文件夹</li>\n<li>$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</li>\n<li>$ hexo d （部署）</li>\n</ul>\n"},{"title":"link","date":"2023-02-03T15:15:47.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-02-03 23:15:47\ntype: \"link\"\n---\n","updated":"2023-02-03T15:15:59.939Z","path":"link/index.html","comments":1,"layout":"page","_id":"clxn9rvnx0002hwtvh24lf5q8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover":"https://tse2-mm.cn.bing.net/th/id/OIP-C.2oEK87SAE06A7EYuDqjHswHaDe?w=330&h=163&c=7&r=0&o=5&dpr=1.4&pid=1.7","cover_type":"img","excerpt":"","more":""},{"title":"档案","date":"2023-02-03T12:50:59.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: 档案\ndate: 2023-02-03 20:50:59\ntype: \"archives\"\n---\n","updated":"2023-07-14T10:47:55.561Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clxn9rvnz0006hwtv5lnh4a7r","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover":"https://tse2-mm.cn.bing.net/th/id/OIP-C.2oEK87SAE06A7EYuDqjHswHaDe?w=330&h=163&c=7&r=0&o=5&dpr=1.4&pid=1.7","cover_type":"img","excerpt":"","more":""},{"title":"视频","date":"2023-02-04T03:38:20.000Z","_content":"","source":"movie/index.md","raw":"---\ntitle: 视频\ndate: 2023-02-04 11:38:20\n---\n","updated":"2023-07-14T10:39:13.129Z","path":"movie/index.html","comments":1,"layout":"page","_id":"clxn9rvnz0008hwtvex6d109o","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.MFXfj-kEFh8zKZRt_5azpQHaEK?w=303&h=180&c=7&r=0&o=5&dpr=1.4&pid=1.7","cover_type":"img","excerpt":"","more":""},{"title":"分类","date":"2023-02-03T08:16:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-02-03 16:16:00\ntype: \"categories\"\n---\n","updated":"2023-07-14T10:47:01.791Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clxn9rvo0000ahwtvbstk9lst","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover":"https://tse2-mm.cn.bing.net/th/id/OIP-C.2oEK87SAE06A7EYuDqjHswHaDe?w=330&h=163&c=7&r=0&o=5&dpr=1.4&pid=1.7","cover_type":"img","excerpt":"","more":""},{"title":"收藏图片","date":"2023-02-02T03:34:45.000Z","layout":"gallery","_content":"\n","source":"gallery/index.md","raw":"---\ntitle: 收藏图片\ndate: 2023-02-02 11:34:45\nlayout: \"gallery\"\n---\n\n","updated":"2023-07-14T10:38:34.202Z","path":"gallery/index.html","comments":1,"_id":"clxn9rvo1000ehwtvgm6he9gh","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.MFXfj-kEFh8zKZRt_5azpQHaEK?w=303&h=180&c=7&r=0&o=5&dpr=1.4&pid=1.7","cover_type":"img","excerpt":"","more":""},{"title":"标签","date":"2023-02-03T12:33:21.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-02-03 20:33:21\nlayout: \"tags\"\n---\n","updated":"2023-07-14T10:39:24.075Z","path":"tags/index.html","comments":1,"_id":"clxn9rvo2000fhwtv7vpmcd4x","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover":"https://tse2-mm.cn.bing.net/th/id/OIP-C.2oEK87SAE06A7EYuDqjHswHaDe?w=330&h=163&c=7&r=0&o=5&dpr=1.4&pid=1.7","cover_type":"img","excerpt":"","more":""},{"title":"音乐","date":"2023-02-04T03:37:54.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2023-02-04 11:37:54\n---\n","updated":"2023-07-14T10:39:01.304Z","path":"music/index.html","comments":1,"layout":"page","_id":"clxn9rvo2000jhwtv1gaf876g","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover":"https://tse2-mm.cn.bing.net/th/id/OIP-C.2oEK87SAE06A7EYuDqjHswHaDe?w=330&h=163&c=7&r=0&o=5&dpr=1.4&pid=1.7","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"Codeforces 0-1000","date":"2024-06-14T13:06:41.000Z","cover":"https://th.bing.com/th/id/R.8764d162d1e9be6b2cf6d348e2da99f0?rik=TLZjyw4Nspa%2b0w&riu=http%3a%2f%2fpic.616pic.com%2fys_bnew_img%2f00%2f62%2f36%2fr9dfcyoyjR.jpg&ehk=SdJuWe8fxNWlX58TeKImDSWatngZpwGh6ann2DJ%2fXN0%3d&risl=&pid=ImgRaw&r=0","_content":"\n\n## 首先声明！！！\n\n---\n* 1.题解为本人原作，如有使用注明出处。\n* 2.如有改进地方欢迎批评指正~\n\n---\n\n\n\n## 题目1：https://codeforces.com/contest/1845/problem/A\n\n### 主要思路：先判断不满足条件的特殊值，然后偶数直接构造2，奇数最后一位构造3。\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint a[N],b[N];\nint T,n,x,k;\n \n \nvoid slove()\n{\n    cin>>n>>k>>x;\n    if(x==1&&n%k==1&&k==2||k==1) cout<<\"NO\"<<'\\n';\n    else if(x!=1){\n        cout<<\"YES\"<<'\\n';\n        cout<<n<<'\\n';\n        for(int i=1;i<=n;i++) cout<<1<<' ';\n        cout<<'\\n';\n    }\n    else{\n        cout<<\"YES\"<<'\\n';\n        cout<<n/2<<'\\n';\n        for(int i=1;i<=n/2-1;i++) cout<<2<<' ';\n        if(n%2) cout<<3<<' ';\n        else cout<<2<<' ';\n        cout<<'\\n';\n    }\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目2：https://codeforces.com/contest/1845/problem/B\n\n### 主要思路：分别判断横纵坐标是否位于起点的同一侧，符合条件即累加其与起点之间的最小值，答案为累加后的结果。\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint a[N],b[N];\nint T,n,m,k;\n \n \nvoid slove()\n{\n    int xa,xb,xc,ya,yb,yc;\n    cin>>xa>>ya>>xb>>yb>>xc>>yc;\n    \n    int sum=1;\n    if(xb<xa&&xc<xa||xb>xa&&xc>xa) sum+=min(abs(xa-xb),abs(xa-xc));\n    if(yb<ya&&yc<ya||yb>ya&&yc>ya) sum+=min(abs(ya-yb),abs(ya-yc));\n    cout<<sum<<'\\n';\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目3：https://codeforces.com/problemset/problem/1744/C\n\n### 主要思路：首先把输入字符串复制一倍加在原来的字符串中（为了解决环的问题），而后双指针从开头字符c判断，不断取最小值，如果开头字符为g则输出0，否则输出最小值。\n\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define x first\n#define y second\n#define int long long\n\nusing namespace std;\n\ntypedef long long LL;\n\ntypedef pair<int,int> PII;\n\nconst int N=1e6+10;\n\nint a[N],b[N];\nint T,n,m,k;\n\n\nvoid slove()\n{\n    char c;\n    string s;\n    cin>>n>>c>>s;\n\t\n    s+=s;\n    int sum=0;\n    for(int i=0;i<2*n;i++){\n        if(s[i]==c){\n            int j=i+1;\n            while(j<2*n&&s[j]!='g') j++;\n            sum=max(sum,j-i);\n            i=j-1;\n        }\n    }\n\t\n    if(c=='g') sum=0;\n    cout<<sum<<'\\n';\n}\n\n\nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n---\n\n","source":"_posts/Codeforces 0-1000.md","raw":"---\ntitle: Codeforces 0-1000\ndate: 2024/6/14 21:06:41\ncategories:\n  - Codeforces\ntags:\n  - 题解\ncover: https://th.bing.com/th/id/R.8764d162d1e9be6b2cf6d348e2da99f0?rik=TLZjyw4Nspa%2b0w&riu=http%3a%2f%2fpic.616pic.com%2fys_bnew_img%2f00%2f62%2f36%2fr9dfcyoyjR.jpg&ehk=SdJuWe8fxNWlX58TeKImDSWatngZpwGh6ann2DJ%2fXN0%3d&risl=&pid=ImgRaw&r=0\n---\n\n\n## 首先声明！！！\n\n---\n* 1.题解为本人原作，如有使用注明出处。\n* 2.如有改进地方欢迎批评指正~\n\n---\n\n\n\n## 题目1：https://codeforces.com/contest/1845/problem/A\n\n### 主要思路：先判断不满足条件的特殊值，然后偶数直接构造2，奇数最后一位构造3。\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint a[N],b[N];\nint T,n,x,k;\n \n \nvoid slove()\n{\n    cin>>n>>k>>x;\n    if(x==1&&n%k==1&&k==2||k==1) cout<<\"NO\"<<'\\n';\n    else if(x!=1){\n        cout<<\"YES\"<<'\\n';\n        cout<<n<<'\\n';\n        for(int i=1;i<=n;i++) cout<<1<<' ';\n        cout<<'\\n';\n    }\n    else{\n        cout<<\"YES\"<<'\\n';\n        cout<<n/2<<'\\n';\n        for(int i=1;i<=n/2-1;i++) cout<<2<<' ';\n        if(n%2) cout<<3<<' ';\n        else cout<<2<<' ';\n        cout<<'\\n';\n    }\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目2：https://codeforces.com/contest/1845/problem/B\n\n### 主要思路：分别判断横纵坐标是否位于起点的同一侧，符合条件即累加其与起点之间的最小值，答案为累加后的结果。\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint a[N],b[N];\nint T,n,m,k;\n \n \nvoid slove()\n{\n    int xa,xb,xc,ya,yb,yc;\n    cin>>xa>>ya>>xb>>yb>>xc>>yc;\n    \n    int sum=1;\n    if(xb<xa&&xc<xa||xb>xa&&xc>xa) sum+=min(abs(xa-xb),abs(xa-xc));\n    if(yb<ya&&yc<ya||yb>ya&&yc>ya) sum+=min(abs(ya-yb),abs(ya-yc));\n    cout<<sum<<'\\n';\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目3：https://codeforces.com/problemset/problem/1744/C\n\n### 主要思路：首先把输入字符串复制一倍加在原来的字符串中（为了解决环的问题），而后双指针从开头字符c判断，不断取最小值，如果开头字符为g则输出0，否则输出最小值。\n\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define x first\n#define y second\n#define int long long\n\nusing namespace std;\n\ntypedef long long LL;\n\ntypedef pair<int,int> PII;\n\nconst int N=1e6+10;\n\nint a[N],b[N];\nint T,n,m,k;\n\n\nvoid slove()\n{\n    char c;\n    string s;\n    cin>>n>>c>>s;\n\t\n    s+=s;\n    int sum=0;\n    for(int i=0;i<2*n;i++){\n        if(s[i]==c){\n            int j=i+1;\n            while(j<2*n&&s[j]!='g') j++;\n            sum=max(sum,j-i);\n            i=j-1;\n        }\n    }\n\t\n    if(c=='g') sum=0;\n    cout<<sum<<'\\n';\n}\n\n\nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n---\n\n","slug":"Codeforces 0-1000","published":1,"updated":"2024-06-20T12:58:30.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvnv0001hwtveq3kdsbx","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.题解为本人原作，如有使用注明出处。</li>\n<li>2.如有改进地方欢迎批评指正~</li>\n</ul>\n<hr>\n<h2 id=\"题目1：https-codeforces-com-contest-1845-problem-A\">题目1：<a href=\"https://codeforces.com/contest/1845/problem/A\">https://codeforces.com/contest/1845/problem/A</a></h2>\n<h3 id=\"主要思路：先判断不满足条件的特殊值，然后偶数直接构造2，奇数最后一位构造3。\">主要思路：先判断不满足条件的特殊值，然后偶数直接构造2，奇数最后一位构造3。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,x,k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k&gt;&gt;x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>&amp;&amp;n%k==<span class=\"number\">1</span>&amp;&amp;k==<span class=\"number\">2</span>||k==<span class=\"number\">1</span>) cout&lt;&lt;<span class=\"string\">&quot;NO&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        cout&lt;&lt;n&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cout&lt;&lt;<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        cout&lt;&lt;n/<span class=\"number\">2</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n/<span class=\"number\">2</span><span class=\"number\">-1</span>;i++) cout&lt;&lt;<span class=\"number\">2</span>&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n%<span class=\"number\">2</span>) cout&lt;&lt;<span class=\"number\">3</span>&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"number\">2</span>&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目2：https-codeforces-com-contest-1845-problem-B\">题目2：<a href=\"https://codeforces.com/contest/1845/problem/B\">https://codeforces.com/contest/1845/problem/B</a></h2>\n<h3 id=\"主要思路：分别判断横纵坐标是否位于起点的同一侧，符合条件即累加其与起点之间的最小值，答案为累加后的结果。\">主要思路：分别判断横纵坐标是否位于起点的同一侧，符合条件即累加其与起点之间的最小值，答案为累加后的结果。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> xa,xb,xc,ya,yb,yc;</span><br><span class=\"line\">    cin&gt;&gt;xa&gt;&gt;ya&gt;&gt;xb&gt;&gt;yb&gt;&gt;xc&gt;&gt;yc;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xb&lt;xa&amp;&amp;xc&lt;xa||xb&gt;xa&amp;&amp;xc&gt;xa) sum+=<span class=\"built_in\">min</span>(<span class=\"built_in\">abs</span>(xa-xb),<span class=\"built_in\">abs</span>(xa-xc));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(yb&lt;ya&amp;&amp;yc&lt;ya||yb&gt;ya&amp;&amp;yc&gt;ya) sum+=<span class=\"built_in\">min</span>(<span class=\"built_in\">abs</span>(ya-yb),<span class=\"built_in\">abs</span>(ya-yc));</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目3：https-codeforces-com-problemset-problem-1744-C\">题目3：<a href=\"https://codeforces.com/problemset/problem/1744/C\">https://codeforces.com/problemset/problem/1744/C</a></h2>\n<h3 id=\"主要思路：首先把输入字符串复制一倍加在原来的字符串中（为了解决环的问题），而后双指针从开头字符c判断，不断取最小值，如果开头字符为g则输出0，否则输出最小值。\">主要思路：首先把输入字符串复制一倍加在原来的字符串中（为了解决环的问题），而后双指针从开头字符c判断，不断取最小值，如果开头字符为g则输出0，否则输出最小值。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;c&gt;&gt;s;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    s+=s;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>*n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i]==c)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j&lt;<span class=\"number\">2</span>*n&amp;&amp;s[j]!=<span class=\"string\">&#x27;g&#x27;</span>) j++;</span><br><span class=\"line\">            sum=<span class=\"built_in\">max</span>(sum,j-i);</span><br><span class=\"line\">            i=j<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;g&#x27;</span>) sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.题解为本人原作，如有使用注明出处。</li>\n<li>2.如有改进地方欢迎批评指正~</li>\n</ul>\n<hr>\n<h2 id=\"题目1：https-codeforces-com-contest-1845-problem-A\">题目1：<a href=\"https://codeforces.com/contest/1845/problem/A\">https://codeforces.com/contest/1845/problem/A</a></h2>\n<h3 id=\"主要思路：先判断不满足条件的特殊值，然后偶数直接构造2，奇数最后一位构造3。\">主要思路：先判断不满足条件的特殊值，然后偶数直接构造2，奇数最后一位构造3。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,x,k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k&gt;&gt;x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>&amp;&amp;n%k==<span class=\"number\">1</span>&amp;&amp;k==<span class=\"number\">2</span>||k==<span class=\"number\">1</span>) cout&lt;&lt;<span class=\"string\">&quot;NO&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        cout&lt;&lt;n&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cout&lt;&lt;<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        cout&lt;&lt;n/<span class=\"number\">2</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n/<span class=\"number\">2</span><span class=\"number\">-1</span>;i++) cout&lt;&lt;<span class=\"number\">2</span>&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n%<span class=\"number\">2</span>) cout&lt;&lt;<span class=\"number\">3</span>&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"number\">2</span>&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目2：https-codeforces-com-contest-1845-problem-B\">题目2：<a href=\"https://codeforces.com/contest/1845/problem/B\">https://codeforces.com/contest/1845/problem/B</a></h2>\n<h3 id=\"主要思路：分别判断横纵坐标是否位于起点的同一侧，符合条件即累加其与起点之间的最小值，答案为累加后的结果。\">主要思路：分别判断横纵坐标是否位于起点的同一侧，符合条件即累加其与起点之间的最小值，答案为累加后的结果。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> xa,xb,xc,ya,yb,yc;</span><br><span class=\"line\">    cin&gt;&gt;xa&gt;&gt;ya&gt;&gt;xb&gt;&gt;yb&gt;&gt;xc&gt;&gt;yc;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xb&lt;xa&amp;&amp;xc&lt;xa||xb&gt;xa&amp;&amp;xc&gt;xa) sum+=<span class=\"built_in\">min</span>(<span class=\"built_in\">abs</span>(xa-xb),<span class=\"built_in\">abs</span>(xa-xc));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(yb&lt;ya&amp;&amp;yc&lt;ya||yb&gt;ya&amp;&amp;yc&gt;ya) sum+=<span class=\"built_in\">min</span>(<span class=\"built_in\">abs</span>(ya-yb),<span class=\"built_in\">abs</span>(ya-yc));</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目3：https-codeforces-com-problemset-problem-1744-C\">题目3：<a href=\"https://codeforces.com/problemset/problem/1744/C\">https://codeforces.com/problemset/problem/1744/C</a></h2>\n<h3 id=\"主要思路：首先把输入字符串复制一倍加在原来的字符串中（为了解决环的问题），而后双指针从开头字符c判断，不断取最小值，如果开头字符为g则输出0，否则输出最小值。\">主要思路：首先把输入字符串复制一倍加在原来的字符串中（为了解决环的问题），而后双指针从开头字符c判断，不断取最小值，如果开头字符为g则输出0，否则输出最小值。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;c&gt;&gt;s;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    s+=s;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>*n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i]==c)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j&lt;<span class=\"number\">2</span>*n&amp;&amp;s[j]!=<span class=\"string\">&#x27;g&#x27;</span>) j++;</span><br><span class=\"line\">            sum=<span class=\"built_in\">max</span>(sum,j-i);</span><br><span class=\"line\">            i=j<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;g&#x27;</span>) sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"UE5场景制作","date":"2023-02-02T04:03:41.000Z","description":"利用虚幻5独有的lumen全局光照和Nanite模型优化打造的写实场景~","cover":"https://ts1.cn.mm.bing.net/th/id/R-C.9acd6237941f1cda9a0585c00e8b283c?rik=Smfw4igBg%2byE9g&riu=http%3a%2f%2fi3.cdn.yzz.cn%2fpub%2fimgx2020%2f05%2f14%2f503_122145_b046a.jpg&ehk=24tkq1K1Yleh66Wu2qTnv5lJGKblfB0wMWeoC6bGTdo%3d&risl=&pid=ImgRaw&r=0","_content":"\n\n\n## 首先声明！！！\n\n---\n* 1.此为本人搭建场景，仅供参考~\n* 2.如有使用注明出处~\n* 3.如有不足，欢迎批评指正~\n\n---\n\n\n\n\n\n# 一、场景Demo展示\n\n\n\n## 1.日落\n\n![test1](test1.png)\n\n\n\n## 2.山雾\n\n![test2](test2.png)\n\n\n\n## 3.地形\n\n![test3](test3.png)\n\n\n\n## 4.光线\n\n![test4](test4.jpg)\n\n\n\n## 5.洞穴\n\n![test5](test5.png)\n\n\n\n\n\n\n\n\n\n---\n\n","source":"_posts/UE5场景制作.md","raw":"---\ntitle: UE5场景制作\ndate: 2023/2/2 12:03:41\ndescription: 利用虚幻5独有的lumen全局光照和Nanite模型优化打造的写实场景~\n\ncategories: Gameproduction\ncover: https://ts1.cn.mm.bing.net/th/id/R-C.9acd6237941f1cda9a0585c00e8b283c?rik=Smfw4igBg%2byE9g&riu=http%3a%2f%2fi3.cdn.yzz.cn%2fpub%2fimgx2020%2f05%2f14%2f503_122145_b046a.jpg&ehk=24tkq1K1Yleh66Wu2qTnv5lJGKblfB0wMWeoC6bGTdo%3d&risl=&pid=ImgRaw&r=0\n---\n\n\n\n## 首先声明！！！\n\n---\n* 1.此为本人搭建场景，仅供参考~\n* 2.如有使用注明出处~\n* 3.如有不足，欢迎批评指正~\n\n---\n\n\n\n\n\n# 一、场景Demo展示\n\n\n\n## 1.日落\n\n![test1](test1.png)\n\n\n\n## 2.山雾\n\n![test2](test2.png)\n\n\n\n## 3.地形\n\n![test3](test3.png)\n\n\n\n## 4.光线\n\n![test4](test4.jpg)\n\n\n\n## 5.洞穴\n\n![test5](test5.png)\n\n\n\n\n\n\n\n\n\n---\n\n","slug":"UE5场景制作","published":1,"updated":"2023-07-14T05:34:55.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvnx0003hwtv1ta86jlj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.此为本人搭建场景，仅供参考~</li>\n<li>2.如有使用注明出处~</li>\n<li>3.如有不足，欢迎批评指正~</li>\n</ul>\n<hr>\n<h1>一、场景Demo展示</h1>\n<h2 id=\"1-日落\">1.日落</h2>\n<p><img src=\"/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test1.png\" alt=\"test1\"></p>\n<h2 id=\"2-山雾\">2.山雾</h2>\n<p><img src=\"/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test2.png\" alt=\"test2\"></p>\n<h2 id=\"3-地形\">3.地形</h2>\n<p><img src=\"/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test3.png\" alt=\"test3\"></p>\n<h2 id=\"4-光线\">4.光线</h2>\n<p><img src=\"/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test4.jpg\" alt=\"test4\"></p>\n<h2 id=\"5-洞穴\">5.洞穴</h2>\n<p><img src=\"/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test5.png\" alt=\"test5\"></p>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.此为本人搭建场景，仅供参考~</li>\n<li>2.如有使用注明出处~</li>\n<li>3.如有不足，欢迎批评指正~</li>\n</ul>\n<hr>\n<h1>一、场景Demo展示</h1>\n<h2 id=\"1-日落\">1.日落</h2>\n<p><img src=\"/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test1.png\" alt=\"test1\"></p>\n<h2 id=\"2-山雾\">2.山雾</h2>\n<p><img src=\"/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test2.png\" alt=\"test2\"></p>\n<h2 id=\"3-地形\">3.地形</h2>\n<p><img src=\"/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test3.png\" alt=\"test3\"></p>\n<h2 id=\"4-光线\">4.光线</h2>\n<p><img src=\"/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test4.jpg\" alt=\"test4\"></p>\n<h2 id=\"5-洞穴\">5.洞穴</h2>\n<p><img src=\"/2023/02/02/UE5%E5%9C%BA%E6%99%AF%E5%88%B6%E4%BD%9C/test5.png\" alt=\"test5\"></p>\n<hr>\n"},{"title":"Codeforces 1900-2200","date":"2024-06-06T13:06:41.000Z","cover":"https://th.bing.com/th/id/R.8764d162d1e9be6b2cf6d348e2da99f0?rik=TLZjyw4Nspa%2b0w&riu=http%3a%2f%2fpic.616pic.com%2fys_bnew_img%2f00%2f62%2f36%2fr9dfcyoyjR.jpg&ehk=SdJuWe8fxNWlX58TeKImDSWatngZpwGh6ann2DJ%2fXN0%3d&risl=&pid=ImgRaw&r=0","_content":"\n\n## 首先声明！！！\n\n---\n* 1.题解为本人原作，如有使用注明出处。\n* 2.如有改进地方欢迎批评指正~\n\n---\n\n\n\n## 题目一：[Problem - 1925D - Codeforces](https://codeforces.com/problemset/problem/1925/D)\n\n\n\n### 介绍一种二项式组合数方法：\n\n\n#### 众所周知，$期望 = 概率 * 值$。\n#### 我们设期望为 $E$，总概率为 $p$，总值为 $sum$。则：\n$$\nE=p\\times sum\n$$\n\n#### 由于 $k$ 的次数是固定的，则设\n$$\ns=\\sum_{i=1}^m{f_i}\n$$\n\n#### 且 $s$ 每回合每个固定增加 $1$ （类似于等差数列求和的过程），则有：\n$$\nsum\\gets s+sum \n$$\n$$\ns\\gets s+m\n$$\n\n#### 解决完 $sum$ 后，我们还剩下 $p$ 没有搞定，那么总概率 $p$ 怎么求呢？\n\n#### 因为每一个个体选中的概率是相等的，且都为\n$$\n\\frac{1}{C_{n}^{2}}=\\frac{2}{n(n-1)}\n$$\n\n#### 所以我们可以先设选中的概率为 $x$，没被选中的概率为 $y$。\n\n#### 根据二项式定理得：\n$$\np=\\sum_{i=1}^k{C_{k}^{i}}x^iy^{k-i}\n$$\n\n$$\nx=\\frac{2}{n(n-1)},y=1-x\n$$\n\n#### 因为事件是独立的，每个值对应着对应的概率，则总式为：\n\n$$\nsum_i\\gets s+sum_{i-1}\n$$\n\n$$\n\\sum_{i=1}^k{E} \\gets C_{k}^{i}x^iy^{k-i}\\times sum_i\n$$\n\n$$\ns\\gets s+m\n$$\n\n#### 最后我们把公式实现一下就搞定了，时间复杂度为：\n$$\nO(m+k\\log mod)\n$$\n\n#### 注意：有数据点当 $n$ 为 100000 时，数据会爆 longlong，所以算 $x$ 时先取模（我就是因为这个而 wa6 了 ~T_T~）。\n\n\n\n\n### MainCode：\n```cpp\nvoid solve()\n{\n    cin>>n>>m>>k;\n    for(int i=1;i<=m;i++) cin>>a[i]>>b[i]>>f[i];\n    \n    int s=0;\n    for(int i=1;i<=m;i++) s=(s+f[i])%mod;\n    \n    int sum=0,res=0,p=(n-1)*n/2%mod;   //p记得取模\n    int x=qmi(p,mod-2),y=(1-x+mod)%mod;  \n    for(int i=1;i<=k;i++){\n        sum=(s+sum)%mod;\n        res=(res+C(k,i)*qmi(x,i)%mod*qmi(y,k-i)%mod*sum%mod)%mod;\n        s=(s+m)%mod;\n    }\n    cout<<res<<'\\n';\n}\n```\n\n---\n","source":"_posts/Codeforces 1900-2200.md","raw":"---\ntitle: Codeforces 1900-2200\ndate: 2024/6/6 21:06:41\ncategories:\n  - Codeforces\ntags:\n  - 题解\ncover: https://th.bing.com/th/id/R.8764d162d1e9be6b2cf6d348e2da99f0?rik=TLZjyw4Nspa%2b0w&riu=http%3a%2f%2fpic.616pic.com%2fys_bnew_img%2f00%2f62%2f36%2fr9dfcyoyjR.jpg&ehk=SdJuWe8fxNWlX58TeKImDSWatngZpwGh6ann2DJ%2fXN0%3d&risl=&pid=ImgRaw&r=0\n\n---\n\n\n## 首先声明！！！\n\n---\n* 1.题解为本人原作，如有使用注明出处。\n* 2.如有改进地方欢迎批评指正~\n\n---\n\n\n\n## 题目一：[Problem - 1925D - Codeforces](https://codeforces.com/problemset/problem/1925/D)\n\n\n\n### 介绍一种二项式组合数方法：\n\n\n#### 众所周知，$期望 = 概率 * 值$。\n#### 我们设期望为 $E$，总概率为 $p$，总值为 $sum$。则：\n$$\nE=p\\times sum\n$$\n\n#### 由于 $k$ 的次数是固定的，则设\n$$\ns=\\sum_{i=1}^m{f_i}\n$$\n\n#### 且 $s$ 每回合每个固定增加 $1$ （类似于等差数列求和的过程），则有：\n$$\nsum\\gets s+sum \n$$\n$$\ns\\gets s+m\n$$\n\n#### 解决完 $sum$ 后，我们还剩下 $p$ 没有搞定，那么总概率 $p$ 怎么求呢？\n\n#### 因为每一个个体选中的概率是相等的，且都为\n$$\n\\frac{1}{C_{n}^{2}}=\\frac{2}{n(n-1)}\n$$\n\n#### 所以我们可以先设选中的概率为 $x$，没被选中的概率为 $y$。\n\n#### 根据二项式定理得：\n$$\np=\\sum_{i=1}^k{C_{k}^{i}}x^iy^{k-i}\n$$\n\n$$\nx=\\frac{2}{n(n-1)},y=1-x\n$$\n\n#### 因为事件是独立的，每个值对应着对应的概率，则总式为：\n\n$$\nsum_i\\gets s+sum_{i-1}\n$$\n\n$$\n\\sum_{i=1}^k{E} \\gets C_{k}^{i}x^iy^{k-i}\\times sum_i\n$$\n\n$$\ns\\gets s+m\n$$\n\n#### 最后我们把公式实现一下就搞定了，时间复杂度为：\n$$\nO(m+k\\log mod)\n$$\n\n#### 注意：有数据点当 $n$ 为 100000 时，数据会爆 longlong，所以算 $x$ 时先取模（我就是因为这个而 wa6 了 ~T_T~）。\n\n\n\n\n### MainCode：\n```cpp\nvoid solve()\n{\n    cin>>n>>m>>k;\n    for(int i=1;i<=m;i++) cin>>a[i]>>b[i]>>f[i];\n    \n    int s=0;\n    for(int i=1;i<=m;i++) s=(s+f[i])%mod;\n    \n    int sum=0,res=0,p=(n-1)*n/2%mod;   //p记得取模\n    int x=qmi(p,mod-2),y=(1-x+mod)%mod;  \n    for(int i=1;i<=k;i++){\n        sum=(s+sum)%mod;\n        res=(res+C(k,i)*qmi(x,i)%mod*qmi(y,k-i)%mod*sum%mod)%mod;\n        s=(s+m)%mod;\n    }\n    cout<<res<<'\\n';\n}\n```\n\n---\n","slug":"Codeforces 1900-2200","published":1,"updated":"2024-06-20T12:58:47.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvnz0007hwtv2og423ke","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.题解为本人原作，如有使用注明出处。</li>\n<li>2.如有改进地方欢迎批评指正~</li>\n</ul>\n<hr>\n<h2 id=\"题目一：Problem-1925D-Codeforces\">题目一：<a href=\"https://codeforces.com/problemset/problem/1925/D\">Problem - 1925D - Codeforces</a></h2>\n<h3 id=\"介绍一种二项式组合数方法：\">介绍一种二项式组合数方法：</h3>\n<h4 id=\"众所周知，-期望-概率-值-。\">众所周知，$期望 = 概率 * 值$。</h4>\n<h4 id=\"我们设期望为-E-，总概率为-p-，总值为-sum-。则：\">我们设期望为 $E$，总概率为 $p$，总值为 $sum$。则：</h4>\n<p>$$<br>\nE=p\\times sum<br>\n$$</p>\n<h4 id=\"由于-k-的次数是固定的，则设\">由于 $k$ 的次数是固定的，则设</h4>\n<p>$$<br>\ns=\\sum_{i=1}^m{f_i}<br>\n$$</p>\n<h4 id=\"且-s-每回合每个固定增加-1-（类似于等差数列求和的过程），则有：\">且 $s$ 每回合每个固定增加 $1$ （类似于等差数列求和的过程），则有：</h4>\n<p>$$<br>\nsum\\gets s+sum<br>\n$$<br>\n$$<br>\ns\\gets s+m<br>\n$$</p>\n<h4 id=\"解决完-sum-后，我们还剩下-p-没有搞定，那么总概率-p-怎么求呢？\">解决完 $sum$ 后，我们还剩下 $p$ 没有搞定，那么总概率 $p$ 怎么求呢？</h4>\n<h4 id=\"因为每一个个体选中的概率是相等的，且都为\">因为每一个个体选中的概率是相等的，且都为</h4>\n<p>$$<br>\n\\frac{1}{C_{n}^{2}}=\\frac{2}{n(n-1)}<br>\n$$</p>\n<h4 id=\"所以我们可以先设选中的概率为-x-，没被选中的概率为-y-。\">所以我们可以先设选中的概率为 $x$，没被选中的概率为 $y$。</h4>\n<h4 id=\"根据二项式定理得：\">根据二项式定理得：</h4>\n<p>$$<br>\np=\\sum_{i=1}^k{C_{k}^{i}}x^iy^{k-i}<br>\n$$</p>\n<p>$$<br>\nx=\\frac{2}{n(n-1)},y=1-x<br>\n$$</p>\n<h4 id=\"因为事件是独立的，每个值对应着对应的概率，则总式为：\">因为事件是独立的，每个值对应着对应的概率，则总式为：</h4>\n<p>$$<br>\nsum_i\\gets s+sum_{i-1}<br>\n$$</p>\n<p>$$<br>\n\\sum_{i=1}^k{E} \\gets C_{k}^{i}x^iy^{k-i}\\times sum_i<br>\n$$</p>\n<p>$$<br>\ns\\gets s+m<br>\n$$</p>\n<h4 id=\"最后我们把公式实现一下就搞定了，时间复杂度为：\">最后我们把公式实现一下就搞定了，时间复杂度为：</h4>\n<p>$$<br>\nO(m+k\\log mod)<br>\n$$</p>\n<h4 id=\"注意：有数据点当-n-为-100000-时，数据会爆-longlong，所以算-x-时先取模（我就是因为这个而-wa6-了-T-T-）。\">注意：有数据点当 $n$ 为 100000 时，数据会爆 longlong，所以算 $x$ 时先取模（我就是因为这个而 wa6 了 ~T_T~）。</h4>\n<h3 id=\"MainCode：\">MainCode：</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;f[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) s=(s+f[i])%mod;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>,res=<span class=\"number\">0</span>,p=(n<span class=\"number\">-1</span>)*n/<span class=\"number\">2</span>%mod;   <span class=\"comment\">//p记得取模</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"built_in\">qmi</span>(p,mod<span class=\"number\">-2</span>),y=(<span class=\"number\">1</span>-x+mod)%mod;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=k;i++)&#123;</span><br><span class=\"line\">        sum=(s+sum)%mod;</span><br><span class=\"line\">        res=(res+<span class=\"built_in\">C</span>(k,i)*<span class=\"built_in\">qmi</span>(x,i)%mod*<span class=\"built_in\">qmi</span>(y,k-i)%mod*sum%mod)%mod;</span><br><span class=\"line\">        s=(s+m)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;res&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.题解为本人原作，如有使用注明出处。</li>\n<li>2.如有改进地方欢迎批评指正~</li>\n</ul>\n<hr>\n<h2 id=\"题目一：Problem-1925D-Codeforces\">题目一：<a href=\"https://codeforces.com/problemset/problem/1925/D\">Problem - 1925D - Codeforces</a></h2>\n<h3 id=\"介绍一种二项式组合数方法：\">介绍一种二项式组合数方法：</h3>\n<h4 id=\"众所周知，-期望-概率-值-。\">众所周知，$期望 = 概率 * 值$。</h4>\n<h4 id=\"我们设期望为-E-，总概率为-p-，总值为-sum-。则：\">我们设期望为 $E$，总概率为 $p$，总值为 $sum$。则：</h4>\n<p>$$<br>\nE=p\\times sum<br>\n$$</p>\n<h4 id=\"由于-k-的次数是固定的，则设\">由于 $k$ 的次数是固定的，则设</h4>\n<p>$$<br>\ns=\\sum_{i=1}^m{f_i}<br>\n$$</p>\n<h4 id=\"且-s-每回合每个固定增加-1-（类似于等差数列求和的过程），则有：\">且 $s$ 每回合每个固定增加 $1$ （类似于等差数列求和的过程），则有：</h4>\n<p>$$<br>\nsum\\gets s+sum<br>\n$$<br>\n$$<br>\ns\\gets s+m<br>\n$$</p>\n<h4 id=\"解决完-sum-后，我们还剩下-p-没有搞定，那么总概率-p-怎么求呢？\">解决完 $sum$ 后，我们还剩下 $p$ 没有搞定，那么总概率 $p$ 怎么求呢？</h4>\n<h4 id=\"因为每一个个体选中的概率是相等的，且都为\">因为每一个个体选中的概率是相等的，且都为</h4>\n<p>$$<br>\n\\frac{1}{C_{n}^{2}}=\\frac{2}{n(n-1)}<br>\n$$</p>\n<h4 id=\"所以我们可以先设选中的概率为-x-，没被选中的概率为-y-。\">所以我们可以先设选中的概率为 $x$，没被选中的概率为 $y$。</h4>\n<h4 id=\"根据二项式定理得：\">根据二项式定理得：</h4>\n<p>$$<br>\np=\\sum_{i=1}^k{C_{k}^{i}}x^iy^{k-i}<br>\n$$</p>\n<p>$$<br>\nx=\\frac{2}{n(n-1)},y=1-x<br>\n$$</p>\n<h4 id=\"因为事件是独立的，每个值对应着对应的概率，则总式为：\">因为事件是独立的，每个值对应着对应的概率，则总式为：</h4>\n<p>$$<br>\nsum_i\\gets s+sum_{i-1}<br>\n$$</p>\n<p>$$<br>\n\\sum_{i=1}^k{E} \\gets C_{k}^{i}x^iy^{k-i}\\times sum_i<br>\n$$</p>\n<p>$$<br>\ns\\gets s+m<br>\n$$</p>\n<h4 id=\"最后我们把公式实现一下就搞定了，时间复杂度为：\">最后我们把公式实现一下就搞定了，时间复杂度为：</h4>\n<p>$$<br>\nO(m+k\\log mod)<br>\n$$</p>\n<h4 id=\"注意：有数据点当-n-为-100000-时，数据会爆-longlong，所以算-x-时先取模（我就是因为这个而-wa6-了-T-T-）。\">注意：有数据点当 $n$ 为 100000 时，数据会爆 longlong，所以算 $x$ 时先取模（我就是因为这个而 wa6 了 ~T_T~）。</h4>\n<h3 id=\"MainCode：\">MainCode：</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;f[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) s=(s+f[i])%mod;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>,res=<span class=\"number\">0</span>,p=(n<span class=\"number\">-1</span>)*n/<span class=\"number\">2</span>%mod;   <span class=\"comment\">//p记得取模</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"built_in\">qmi</span>(p,mod<span class=\"number\">-2</span>),y=(<span class=\"number\">1</span>-x+mod)%mod;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=k;i++)&#123;</span><br><span class=\"line\">        sum=(s+sum)%mod;</span><br><span class=\"line\">        res=(res+<span class=\"built_in\">C</span>(k,i)*<span class=\"built_in\">qmi</span>(x,i)%mod*<span class=\"built_in\">qmi</span>(y,k-i)%mod*sum%mod)%mod;</span><br><span class=\"line\">        s=(s+m)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;res&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"Unity游戏控制基础脚本","date":"2023-02-01T05:52:41.000Z","description":"最基础的unity游戏制作，对游戏物体进行控制的脚本。","cover":"https://cdn.wallpapersafari.com/55/68/ZOeNnY.jpg","_content":"\n\n\n## 首先声明！！！\n\n---\n* 1.脚本为本人总结，如有使用注明出处\n* 2.Unity采用C#编程语言编写脚本。\n* 3.脚本内有注释。\n\n---\n\n\n\n## 一、TimeTest（时间控制测试）\n\n\n```c#\nusing JetBrains.Annotations;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing UnityEngine;\n\npublic class TimeTest : MonoBehaviour\n{\n    public GameObject Prefab;\n\n    //计时器\n    float timer = 0;\n\n    int t = 0;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        //游戏开始到现在所花的时间\n        Debug.Log(Time.time);\n\n        //时间缩放值\n        Debug.Log(Time.timeScale);\n\n        //固定时间间隔\n        Debug.Log(Time.fixedDeltaTime);\n    }\n\n    GameObject p;\n    // Update is called once per frame\n    void Update()\n    {\n        timer = timer + Time.deltaTime;\n        //每一帧所有的时间\n        //Debug.Log(Time.deltaTime);\n\n        if (timer > 3&& t == 0) {\n            Debug.Log(\"敌人出现了！\");\n            p = Instantiate(Prefab, Vector3.one, Quaternion.identity);\n            t = 1;\n        }\n\n        if (timer > 6){\n            Debug.Log(\"敌人消失了！\");\n            Destroy(p);\n        }\n    }\n\n    private void FixedUpdate()\n    {\n        \n    }\n}\n```\n---\n\n\n\n## 二、SceneTest（场景测试）\n\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class SceneTest : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        //场景类，场景管理类 \n\n        //1.获取当前场景\n        Scene scene = SceneManager.GetActiveScene();\n        Debug.Log(scene.name);  //场景名称\n\n        //2.场景是否已经加载\n        Debug.Log(scene.isLoaded);\n\n        //3.场景路径\n        Debug.Log(scene.path);\n\n        //4.场景索引\n        Debug.Log(scene.buildIndex);\n        GameObject[] gos = scene.GetRootGameObjects();\n        Debug.Log(gos.Length);\n\n        //场景管理类:\n\n        //1.直接创建一个新场景\n        Scene newScene = SceneManager.CreateScene(\"newScene\");\n        //2.已加载场景个数\n        Debug.Log(SceneManager.sceneCount);\n        //3.卸载场景\n        SceneManager.UnloadSceneAsync(newScene);\n\n        //加载场景\n\n        //1.替换\n        //SceneManager.LoadScene(\"MyScene\",LoadSceneMode.Single);\n        //2.添加（两个场景内容叠加）\n        SceneManager.LoadScene(\"MyScene\", LoadSceneMode.Additive);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n```\n---\n\n\n\n## 三、EmptyTest（空测试）\n\n```c#\nusing JetBrains.Annotations;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class EmptyTest : MonoBehaviour\n{\n    public GameObject Cube;\n\n    //获取预设体\n    public GameObject Prefab;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        //GameObject go=this.gameObject;\n        Debug.Log(gameObject.name);\n\n        //tag标签\n        Debug.Log(gameObject.tag);\n\n        //layer图层\n        Debug.Log(gameObject.layer);\n\n        //立方体的名称\n        Debug.Log(Cube.name);\n        //当前真正的激活状态\n        Debug.Log(Cube.activeInHierarchy);\n        //它自身的激活状态\n        Debug.Log(Cube.activeSelf);\n\n        //获取位置信息\n        Debug.Log(transform.position);\n\n        //获取其他组件\n        BoxCollider bc = GetComponent<BoxCollider>();\n\n        //添加一个组件\n        Cube.AddComponent<AudioSource>();\n\n        //通过预设体来实例化一个物体\n        GameObject p = Instantiate(Prefab, Vector3.one, Quaternion.identity);\n        Instantiate(Prefab, Vector3.zero, Quaternion.identity);\n\n        //销毁物体\n        Destroy(p);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n```\n---\n\n\n\n## 四、ApplicationTest（应用测试）\n\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ApplicationTest : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        //游戏数据文件夹路径（只读，加密压缩）\n        Debug.Log(Application.dataPath);\n\n        //持久化文件夹路径\n        Debug.Log(Application.persistentDataPath);\n\n        //StreamingAssets文件夹路径（只读，配置文件）\n        Debug.Log(Application.streamingAssetsPath);\n\n        //临时文件夹\n        Debug.Log(Application.temporaryCachePath);\n\n        //控制是否在后台运行\n        Debug.Log(Application.runInBackground);\n\n        //打开url（即直接跳转网站）\n        //Application.OpenURL(\"https://gitee.com/qq2607563994/algorithm-code\");\n\n        //退出游戏\n        Application.Quit();\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n```\n---\n\n\n\n## 五、TransformTest（坐标测试）\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TransformTest : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        //获取位置\n        Debug.Log(transform.position);\n        Debug.Log(transform.localPosition);\n\n        //获取旋转\n        Debug.Log(transform.rotation);\n        Debug.Log(transform.localRotation);\n        Debug.Log(transform.eulerAngles);\n        Debug.Log(transform.localEulerAngles);\n\n        //获取缩放\n        Debug.Log(transform.localScale);\n\n        //向量\n        Debug.Log(transform.forward);\n        Debug.Log(transform.right);\n        Debug.Log(transform.up);\n        \n\n        //父子关系\n\n        //获取父物体\n        //GameObject t = transform.parent.gameObject;\n\n        //子物体个数\n        Debug.Log(transform.childCount);\n\n        //解除父子关系\n        transform.DetachChildren();\n\n        //获取子物体\n        Transform trans = transform.Find(\"Child\");\n        trans = transform.GetChild(0);\n\n        //判断一个物体是不是另外一个物体的子物体\n        bool res = transform.IsChildOf(transform);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        //时刻看向原点\n        transform.LookAt(Vector3.zero);\n\n        //旋转\n        transform.Rotate(Vector3.up, 0.5f);\n\n        //绕某个物体旋转\n        transform.RotateAround(Vector3.zero, Vector3.up, 0.2f);\n\n        //移动\n        //transform.Translate(Vector3.forward * 0.1f);\n    }\n}\n\n```\n---\n\n\n\n## 六、KeyTest（按键测试）\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class KeyTest : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        \n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        //鼠标点击\n        //按下鼠标 0左键 1右键 2滚轮\n        if(Input.GetMouseButtonDown(0))\n        {\n            Debug.Log(\"按下了鼠标左键\");\n        }\n        //持续按下\n        if (Input.GetMouseButton(0))\n        {\n            Debug.Log(\"持续按下了鼠标左键\");\n        }\n        //抬起按键\n        if (Input.GetMouseButtonUp(0))\n        {\n            Debug.Log(\"抬起了鼠标左键\");\n        }\n\n        //键盘点击\n        //按下\n        if (Input.GetKeyDown(KeyCode.A))\n        {\n            Debug.Log(\"按下了A\");\n        }\n        if (Input.GetKey(KeyCode.A))\n        {\n            Debug.Log(\"持续按下了A\");\n        }\n        if (Input.GetKeyUp(KeyCode.A))\n        {\n            Debug.Log(\"抬起了A\");\n        }\n    }\n}\n\n```\n---\n\n\n\n## 七、AsyncTest（异步加载测试）\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class AsyncTest : MonoBehaviour\n{\n    AsyncOperation operation;\n\n    void Start()\n    {\n        StartCoroutine(loadScene());\n    }\n\n    //协程方法用来异步加载场景\n    IEnumerator loadScene()\n    {\n        operation = SceneManager.LoadSceneAsync(\"MyScene\");\n\n        //加载完场景不要自动跳转\n        operation.allowSceneActivation = false;\n\n        yield return operation;\n    }\n\n    float timer;\n\n    void Update()\n    {\n        Debug.Log(operation.progress);\n        timer += Time.deltaTime;\n\n        //如果大于5秒后跳转\n        if(timer > 5)\n        {\n            operation.allowSceneActivation = true;\n        }\n    }\n}\n\n```\n---\n","source":"_posts/Unity游戏控制基础脚本.md","raw":"---\ntitle: Unity游戏控制基础脚本\ndate: 2023/2/1 13:52:41\ndescription: 最基础的unity游戏制作，对游戏物体进行控制的脚本。\n\ncategories: Gameproduction\ncover: https://cdn.wallpapersafari.com/55/68/ZOeNnY.jpg\n---\n\n\n\n## 首先声明！！！\n\n---\n* 1.脚本为本人总结，如有使用注明出处\n* 2.Unity采用C#编程语言编写脚本。\n* 3.脚本内有注释。\n\n---\n\n\n\n## 一、TimeTest（时间控制测试）\n\n\n```c#\nusing JetBrains.Annotations;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing UnityEngine;\n\npublic class TimeTest : MonoBehaviour\n{\n    public GameObject Prefab;\n\n    //计时器\n    float timer = 0;\n\n    int t = 0;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        //游戏开始到现在所花的时间\n        Debug.Log(Time.time);\n\n        //时间缩放值\n        Debug.Log(Time.timeScale);\n\n        //固定时间间隔\n        Debug.Log(Time.fixedDeltaTime);\n    }\n\n    GameObject p;\n    // Update is called once per frame\n    void Update()\n    {\n        timer = timer + Time.deltaTime;\n        //每一帧所有的时间\n        //Debug.Log(Time.deltaTime);\n\n        if (timer > 3&& t == 0) {\n            Debug.Log(\"敌人出现了！\");\n            p = Instantiate(Prefab, Vector3.one, Quaternion.identity);\n            t = 1;\n        }\n\n        if (timer > 6){\n            Debug.Log(\"敌人消失了！\");\n            Destroy(p);\n        }\n    }\n\n    private void FixedUpdate()\n    {\n        \n    }\n}\n```\n---\n\n\n\n## 二、SceneTest（场景测试）\n\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class SceneTest : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        //场景类，场景管理类 \n\n        //1.获取当前场景\n        Scene scene = SceneManager.GetActiveScene();\n        Debug.Log(scene.name);  //场景名称\n\n        //2.场景是否已经加载\n        Debug.Log(scene.isLoaded);\n\n        //3.场景路径\n        Debug.Log(scene.path);\n\n        //4.场景索引\n        Debug.Log(scene.buildIndex);\n        GameObject[] gos = scene.GetRootGameObjects();\n        Debug.Log(gos.Length);\n\n        //场景管理类:\n\n        //1.直接创建一个新场景\n        Scene newScene = SceneManager.CreateScene(\"newScene\");\n        //2.已加载场景个数\n        Debug.Log(SceneManager.sceneCount);\n        //3.卸载场景\n        SceneManager.UnloadSceneAsync(newScene);\n\n        //加载场景\n\n        //1.替换\n        //SceneManager.LoadScene(\"MyScene\",LoadSceneMode.Single);\n        //2.添加（两个场景内容叠加）\n        SceneManager.LoadScene(\"MyScene\", LoadSceneMode.Additive);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n```\n---\n\n\n\n## 三、EmptyTest（空测试）\n\n```c#\nusing JetBrains.Annotations;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class EmptyTest : MonoBehaviour\n{\n    public GameObject Cube;\n\n    //获取预设体\n    public GameObject Prefab;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        //GameObject go=this.gameObject;\n        Debug.Log(gameObject.name);\n\n        //tag标签\n        Debug.Log(gameObject.tag);\n\n        //layer图层\n        Debug.Log(gameObject.layer);\n\n        //立方体的名称\n        Debug.Log(Cube.name);\n        //当前真正的激活状态\n        Debug.Log(Cube.activeInHierarchy);\n        //它自身的激活状态\n        Debug.Log(Cube.activeSelf);\n\n        //获取位置信息\n        Debug.Log(transform.position);\n\n        //获取其他组件\n        BoxCollider bc = GetComponent<BoxCollider>();\n\n        //添加一个组件\n        Cube.AddComponent<AudioSource>();\n\n        //通过预设体来实例化一个物体\n        GameObject p = Instantiate(Prefab, Vector3.one, Quaternion.identity);\n        Instantiate(Prefab, Vector3.zero, Quaternion.identity);\n\n        //销毁物体\n        Destroy(p);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n```\n---\n\n\n\n## 四、ApplicationTest（应用测试）\n\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ApplicationTest : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        //游戏数据文件夹路径（只读，加密压缩）\n        Debug.Log(Application.dataPath);\n\n        //持久化文件夹路径\n        Debug.Log(Application.persistentDataPath);\n\n        //StreamingAssets文件夹路径（只读，配置文件）\n        Debug.Log(Application.streamingAssetsPath);\n\n        //临时文件夹\n        Debug.Log(Application.temporaryCachePath);\n\n        //控制是否在后台运行\n        Debug.Log(Application.runInBackground);\n\n        //打开url（即直接跳转网站）\n        //Application.OpenURL(\"https://gitee.com/qq2607563994/algorithm-code\");\n\n        //退出游戏\n        Application.Quit();\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n```\n---\n\n\n\n## 五、TransformTest（坐标测试）\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TransformTest : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        //获取位置\n        Debug.Log(transform.position);\n        Debug.Log(transform.localPosition);\n\n        //获取旋转\n        Debug.Log(transform.rotation);\n        Debug.Log(transform.localRotation);\n        Debug.Log(transform.eulerAngles);\n        Debug.Log(transform.localEulerAngles);\n\n        //获取缩放\n        Debug.Log(transform.localScale);\n\n        //向量\n        Debug.Log(transform.forward);\n        Debug.Log(transform.right);\n        Debug.Log(transform.up);\n        \n\n        //父子关系\n\n        //获取父物体\n        //GameObject t = transform.parent.gameObject;\n\n        //子物体个数\n        Debug.Log(transform.childCount);\n\n        //解除父子关系\n        transform.DetachChildren();\n\n        //获取子物体\n        Transform trans = transform.Find(\"Child\");\n        trans = transform.GetChild(0);\n\n        //判断一个物体是不是另外一个物体的子物体\n        bool res = transform.IsChildOf(transform);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        //时刻看向原点\n        transform.LookAt(Vector3.zero);\n\n        //旋转\n        transform.Rotate(Vector3.up, 0.5f);\n\n        //绕某个物体旋转\n        transform.RotateAround(Vector3.zero, Vector3.up, 0.2f);\n\n        //移动\n        //transform.Translate(Vector3.forward * 0.1f);\n    }\n}\n\n```\n---\n\n\n\n## 六、KeyTest（按键测试）\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class KeyTest : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        \n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        //鼠标点击\n        //按下鼠标 0左键 1右键 2滚轮\n        if(Input.GetMouseButtonDown(0))\n        {\n            Debug.Log(\"按下了鼠标左键\");\n        }\n        //持续按下\n        if (Input.GetMouseButton(0))\n        {\n            Debug.Log(\"持续按下了鼠标左键\");\n        }\n        //抬起按键\n        if (Input.GetMouseButtonUp(0))\n        {\n            Debug.Log(\"抬起了鼠标左键\");\n        }\n\n        //键盘点击\n        //按下\n        if (Input.GetKeyDown(KeyCode.A))\n        {\n            Debug.Log(\"按下了A\");\n        }\n        if (Input.GetKey(KeyCode.A))\n        {\n            Debug.Log(\"持续按下了A\");\n        }\n        if (Input.GetKeyUp(KeyCode.A))\n        {\n            Debug.Log(\"抬起了A\");\n        }\n    }\n}\n\n```\n---\n\n\n\n## 七、AsyncTest（异步加载测试）\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class AsyncTest : MonoBehaviour\n{\n    AsyncOperation operation;\n\n    void Start()\n    {\n        StartCoroutine(loadScene());\n    }\n\n    //协程方法用来异步加载场景\n    IEnumerator loadScene()\n    {\n        operation = SceneManager.LoadSceneAsync(\"MyScene\");\n\n        //加载完场景不要自动跳转\n        operation.allowSceneActivation = false;\n\n        yield return operation;\n    }\n\n    float timer;\n\n    void Update()\n    {\n        Debug.Log(operation.progress);\n        timer += Time.deltaTime;\n\n        //如果大于5秒后跳转\n        if(timer > 5)\n        {\n            operation.allowSceneActivation = true;\n        }\n    }\n}\n\n```\n---\n","slug":"Unity游戏控制基础脚本","published":1,"updated":"2023-07-14T03:32:01.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvo00009hwtv4gpb7n7y","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.脚本为本人总结，如有使用注明出处</li>\n<li>2.Unity采用C#编程语言编写脚本。</li>\n<li>3.脚本内有注释。</li>\n</ul>\n<hr>\n<h2 id=\"一、TimeTest（时间控制测试）\">一、TimeTest（时间控制测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> JetBrains.Annotations;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TimeTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> GameObject Prefab;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计时器</span></span><br><span class=\"line\">    <span class=\"built_in\">float</span> timer = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//游戏开始到现在所花的时间</span></span><br><span class=\"line\">        Debug.Log(Time.time);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//时间缩放值</span></span><br><span class=\"line\">        Debug.Log(Time.timeScale);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//固定时间间隔</span></span><br><span class=\"line\">        Debug.Log(Time.fixedDeltaTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    GameObject p;</span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        timer = timer + Time.deltaTime;</span><br><span class=\"line\">        <span class=\"comment\">//每一帧所有的时间</span></span><br><span class=\"line\">        <span class=\"comment\">//Debug.Log(Time.deltaTime);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer &gt; <span class=\"number\">3</span>&amp;&amp; t == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;敌人出现了！&quot;</span>);</span><br><span class=\"line\">            p = Instantiate(Prefab, Vector3.one, Quaternion.identity);</span><br><span class=\"line\">            t = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer &gt; <span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;敌人消失了！&quot;</span>);</span><br><span class=\"line\">            Destroy(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FixedUpdate</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"二、SceneTest（场景测试）\">二、SceneTest（场景测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine.SceneManagement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SceneTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//场景类，场景管理类 </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.获取当前场景</span></span><br><span class=\"line\">        Scene scene = SceneManager.GetActiveScene();</span><br><span class=\"line\">        Debug.Log(scene.name);  <span class=\"comment\">//场景名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.场景是否已经加载</span></span><br><span class=\"line\">        Debug.Log(scene.isLoaded);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.场景路径</span></span><br><span class=\"line\">        Debug.Log(scene.path);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.场景索引</span></span><br><span class=\"line\">        Debug.Log(scene.buildIndex);</span><br><span class=\"line\">        GameObject[] gos = scene.GetRootGameObjects();</span><br><span class=\"line\">        Debug.Log(gos.Length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//场景管理类:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.直接创建一个新场景</span></span><br><span class=\"line\">        Scene newScene = SceneManager.CreateScene(<span class=\"string\">&quot;newScene&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.已加载场景个数</span></span><br><span class=\"line\">        Debug.Log(SceneManager.sceneCount);</span><br><span class=\"line\">        <span class=\"comment\">//3.卸载场景</span></span><br><span class=\"line\">        SceneManager.UnloadSceneAsync(newScene);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加载场景</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.替换</span></span><br><span class=\"line\">        <span class=\"comment\">//SceneManager.LoadScene(&quot;MyScene&quot;,LoadSceneMode.Single);</span></span><br><span class=\"line\">        <span class=\"comment\">//2.添加（两个场景内容叠加）</span></span><br><span class=\"line\">        SceneManager.LoadScene(<span class=\"string\">&quot;MyScene&quot;</span>, LoadSceneMode.Additive);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"三、EmptyTest（空测试）\">三、EmptyTest（空测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> JetBrains.Annotations;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmptyTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> GameObject Cube;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取预设体</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> GameObject Prefab;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//GameObject go=this.gameObject;</span></span><br><span class=\"line\">        Debug.Log(gameObject.name);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//tag标签</span></span><br><span class=\"line\">        Debug.Log(gameObject.tag);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//layer图层</span></span><br><span class=\"line\">        Debug.Log(gameObject.layer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//立方体的名称</span></span><br><span class=\"line\">        Debug.Log(Cube.name);</span><br><span class=\"line\">        <span class=\"comment\">//当前真正的激活状态</span></span><br><span class=\"line\">        Debug.Log(Cube.activeInHierarchy);</span><br><span class=\"line\">        <span class=\"comment\">//它自身的激活状态</span></span><br><span class=\"line\">        Debug.Log(Cube.activeSelf);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取位置信息</span></span><br><span class=\"line\">        Debug.Log(transform.position);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取其他组件</span></span><br><span class=\"line\">        BoxCollider bc = GetComponent&lt;BoxCollider&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加一个组件</span></span><br><span class=\"line\">        Cube.AddComponent&lt;AudioSource&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过预设体来实例化一个物体</span></span><br><span class=\"line\">        GameObject p = Instantiate(Prefab, Vector3.one, Quaternion.identity);</span><br><span class=\"line\">        Instantiate(Prefab, Vector3.zero, Quaternion.identity);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//销毁物体</span></span><br><span class=\"line\">        Destroy(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"四、ApplicationTest（应用测试）\">四、ApplicationTest（应用测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApplicationTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//游戏数据文件夹路径（只读，加密压缩）</span></span><br><span class=\"line\">        Debug.Log(Application.dataPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//持久化文件夹路径</span></span><br><span class=\"line\">        Debug.Log(Application.persistentDataPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//StreamingAssets文件夹路径（只读，配置文件）</span></span><br><span class=\"line\">        Debug.Log(Application.streamingAssetsPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//临时文件夹</span></span><br><span class=\"line\">        Debug.Log(Application.temporaryCachePath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//控制是否在后台运行</span></span><br><span class=\"line\">        Debug.Log(Application.runInBackground);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//打开url（即直接跳转网站）</span></span><br><span class=\"line\">        <span class=\"comment\">//Application.OpenURL(&quot;https://gitee.com/qq2607563994/algorithm-code&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//退出游戏</span></span><br><span class=\"line\">        Application.Quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"五、TransformTest（坐标测试）\">五、TransformTest（坐标测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TransformTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取位置</span></span><br><span class=\"line\">        Debug.Log(transform.position);</span><br><span class=\"line\">        Debug.Log(transform.localPosition);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取旋转</span></span><br><span class=\"line\">        Debug.Log(transform.rotation);</span><br><span class=\"line\">        Debug.Log(transform.localRotation);</span><br><span class=\"line\">        Debug.Log(transform.eulerAngles);</span><br><span class=\"line\">        Debug.Log(transform.localEulerAngles);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取缩放</span></span><br><span class=\"line\">        Debug.Log(transform.localScale);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向量</span></span><br><span class=\"line\">        Debug.Log(transform.forward);</span><br><span class=\"line\">        Debug.Log(transform.right);</span><br><span class=\"line\">        Debug.Log(transform.up);</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//父子关系</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取父物体</span></span><br><span class=\"line\">        <span class=\"comment\">//GameObject t = transform.parent.gameObject;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//子物体个数</span></span><br><span class=\"line\">        Debug.Log(transform.childCount);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//解除父子关系</span></span><br><span class=\"line\">        transform.DetachChildren();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取子物体</span></span><br><span class=\"line\">        Transform trans = transform.Find(<span class=\"string\">&quot;Child&quot;</span>);</span><br><span class=\"line\">        trans = transform.GetChild(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断一个物体是不是另外一个物体的子物体</span></span><br><span class=\"line\">        <span class=\"built_in\">bool</span> res = transform.IsChildOf(transform);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//时刻看向原点</span></span><br><span class=\"line\">        transform.LookAt(Vector3.zero);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//旋转</span></span><br><span class=\"line\">        transform.Rotate(Vector3.up, <span class=\"number\">0.5f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绕某个物体旋转</span></span><br><span class=\"line\">        transform.RotateAround(Vector3.zero, Vector3.up, <span class=\"number\">0.2f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//移动</span></span><br><span class=\"line\">        <span class=\"comment\">//transform.Translate(Vector3.forward * 0.1f);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"六、KeyTest（按键测试）\">六、KeyTest（按键测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">KeyTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//鼠标点击</span></span><br><span class=\"line\">        <span class=\"comment\">//按下鼠标 0左键 1右键 2滚轮</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Input.GetMouseButtonDown(<span class=\"number\">0</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;按下了鼠标左键&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//持续按下</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Input.GetMouseButton(<span class=\"number\">0</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;持续按下了鼠标左键&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//抬起按键</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Input.GetMouseButtonUp(<span class=\"number\">0</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;抬起了鼠标左键&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//键盘点击</span></span><br><span class=\"line\">        <span class=\"comment\">//按下</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Input.GetKeyDown(KeyCode.A))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;按下了A&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Input.GetKey(KeyCode.A))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;持续按下了A&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Input.GetKeyUp(KeyCode.A))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;抬起了A&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"七、AsyncTest（异步加载测试）\">七、AsyncTest（异步加载测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine.SceneManagement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AsyncTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    AsyncOperation operation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        StartCoroutine(loadScene());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//协程方法用来异步加载场景</span></span><br><span class=\"line\">    <span class=\"function\">IEnumerator <span class=\"title\">loadScene</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        operation = SceneManager.LoadSceneAsync(<span class=\"string\">&quot;MyScene&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加载完场景不要自动跳转</span></span><br><span class=\"line\">        operation.allowSceneActivation = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> operation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">float</span> timer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Debug.Log(operation.progress);</span><br><span class=\"line\">        timer += Time.deltaTime;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果大于5秒后跳转</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer &gt; <span class=\"number\">5</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            operation.allowSceneActivation = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.脚本为本人总结，如有使用注明出处</li>\n<li>2.Unity采用C#编程语言编写脚本。</li>\n<li>3.脚本内有注释。</li>\n</ul>\n<hr>\n<h2 id=\"一、TimeTest（时间控制测试）\">一、TimeTest（时间控制测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> JetBrains.Annotations;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TimeTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> GameObject Prefab;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计时器</span></span><br><span class=\"line\">    <span class=\"built_in\">float</span> timer = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//游戏开始到现在所花的时间</span></span><br><span class=\"line\">        Debug.Log(Time.time);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//时间缩放值</span></span><br><span class=\"line\">        Debug.Log(Time.timeScale);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//固定时间间隔</span></span><br><span class=\"line\">        Debug.Log(Time.fixedDeltaTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    GameObject p;</span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        timer = timer + Time.deltaTime;</span><br><span class=\"line\">        <span class=\"comment\">//每一帧所有的时间</span></span><br><span class=\"line\">        <span class=\"comment\">//Debug.Log(Time.deltaTime);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer &gt; <span class=\"number\">3</span>&amp;&amp; t == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;敌人出现了！&quot;</span>);</span><br><span class=\"line\">            p = Instantiate(Prefab, Vector3.one, Quaternion.identity);</span><br><span class=\"line\">            t = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer &gt; <span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;敌人消失了！&quot;</span>);</span><br><span class=\"line\">            Destroy(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FixedUpdate</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"二、SceneTest（场景测试）\">二、SceneTest（场景测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine.SceneManagement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SceneTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//场景类，场景管理类 </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.获取当前场景</span></span><br><span class=\"line\">        Scene scene = SceneManager.GetActiveScene();</span><br><span class=\"line\">        Debug.Log(scene.name);  <span class=\"comment\">//场景名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.场景是否已经加载</span></span><br><span class=\"line\">        Debug.Log(scene.isLoaded);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.场景路径</span></span><br><span class=\"line\">        Debug.Log(scene.path);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.场景索引</span></span><br><span class=\"line\">        Debug.Log(scene.buildIndex);</span><br><span class=\"line\">        GameObject[] gos = scene.GetRootGameObjects();</span><br><span class=\"line\">        Debug.Log(gos.Length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//场景管理类:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.直接创建一个新场景</span></span><br><span class=\"line\">        Scene newScene = SceneManager.CreateScene(<span class=\"string\">&quot;newScene&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.已加载场景个数</span></span><br><span class=\"line\">        Debug.Log(SceneManager.sceneCount);</span><br><span class=\"line\">        <span class=\"comment\">//3.卸载场景</span></span><br><span class=\"line\">        SceneManager.UnloadSceneAsync(newScene);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加载场景</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.替换</span></span><br><span class=\"line\">        <span class=\"comment\">//SceneManager.LoadScene(&quot;MyScene&quot;,LoadSceneMode.Single);</span></span><br><span class=\"line\">        <span class=\"comment\">//2.添加（两个场景内容叠加）</span></span><br><span class=\"line\">        SceneManager.LoadScene(<span class=\"string\">&quot;MyScene&quot;</span>, LoadSceneMode.Additive);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"三、EmptyTest（空测试）\">三、EmptyTest（空测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> JetBrains.Annotations;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EmptyTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> GameObject Cube;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取预设体</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> GameObject Prefab;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//GameObject go=this.gameObject;</span></span><br><span class=\"line\">        Debug.Log(gameObject.name);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//tag标签</span></span><br><span class=\"line\">        Debug.Log(gameObject.tag);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//layer图层</span></span><br><span class=\"line\">        Debug.Log(gameObject.layer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//立方体的名称</span></span><br><span class=\"line\">        Debug.Log(Cube.name);</span><br><span class=\"line\">        <span class=\"comment\">//当前真正的激活状态</span></span><br><span class=\"line\">        Debug.Log(Cube.activeInHierarchy);</span><br><span class=\"line\">        <span class=\"comment\">//它自身的激活状态</span></span><br><span class=\"line\">        Debug.Log(Cube.activeSelf);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取位置信息</span></span><br><span class=\"line\">        Debug.Log(transform.position);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取其他组件</span></span><br><span class=\"line\">        BoxCollider bc = GetComponent&lt;BoxCollider&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加一个组件</span></span><br><span class=\"line\">        Cube.AddComponent&lt;AudioSource&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过预设体来实例化一个物体</span></span><br><span class=\"line\">        GameObject p = Instantiate(Prefab, Vector3.one, Quaternion.identity);</span><br><span class=\"line\">        Instantiate(Prefab, Vector3.zero, Quaternion.identity);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//销毁物体</span></span><br><span class=\"line\">        Destroy(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"四、ApplicationTest（应用测试）\">四、ApplicationTest（应用测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApplicationTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//游戏数据文件夹路径（只读，加密压缩）</span></span><br><span class=\"line\">        Debug.Log(Application.dataPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//持久化文件夹路径</span></span><br><span class=\"line\">        Debug.Log(Application.persistentDataPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//StreamingAssets文件夹路径（只读，配置文件）</span></span><br><span class=\"line\">        Debug.Log(Application.streamingAssetsPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//临时文件夹</span></span><br><span class=\"line\">        Debug.Log(Application.temporaryCachePath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//控制是否在后台运行</span></span><br><span class=\"line\">        Debug.Log(Application.runInBackground);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//打开url（即直接跳转网站）</span></span><br><span class=\"line\">        <span class=\"comment\">//Application.OpenURL(&quot;https://gitee.com/qq2607563994/algorithm-code&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//退出游戏</span></span><br><span class=\"line\">        Application.Quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"五、TransformTest（坐标测试）\">五、TransformTest（坐标测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TransformTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取位置</span></span><br><span class=\"line\">        Debug.Log(transform.position);</span><br><span class=\"line\">        Debug.Log(transform.localPosition);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取旋转</span></span><br><span class=\"line\">        Debug.Log(transform.rotation);</span><br><span class=\"line\">        Debug.Log(transform.localRotation);</span><br><span class=\"line\">        Debug.Log(transform.eulerAngles);</span><br><span class=\"line\">        Debug.Log(transform.localEulerAngles);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取缩放</span></span><br><span class=\"line\">        Debug.Log(transform.localScale);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向量</span></span><br><span class=\"line\">        Debug.Log(transform.forward);</span><br><span class=\"line\">        Debug.Log(transform.right);</span><br><span class=\"line\">        Debug.Log(transform.up);</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//父子关系</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取父物体</span></span><br><span class=\"line\">        <span class=\"comment\">//GameObject t = transform.parent.gameObject;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//子物体个数</span></span><br><span class=\"line\">        Debug.Log(transform.childCount);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//解除父子关系</span></span><br><span class=\"line\">        transform.DetachChildren();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取子物体</span></span><br><span class=\"line\">        Transform trans = transform.Find(<span class=\"string\">&quot;Child&quot;</span>);</span><br><span class=\"line\">        trans = transform.GetChild(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断一个物体是不是另外一个物体的子物体</span></span><br><span class=\"line\">        <span class=\"built_in\">bool</span> res = transform.IsChildOf(transform);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//时刻看向原点</span></span><br><span class=\"line\">        transform.LookAt(Vector3.zero);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//旋转</span></span><br><span class=\"line\">        transform.Rotate(Vector3.up, <span class=\"number\">0.5f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//绕某个物体旋转</span></span><br><span class=\"line\">        transform.RotateAround(Vector3.zero, Vector3.up, <span class=\"number\">0.2f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//移动</span></span><br><span class=\"line\">        <span class=\"comment\">//transform.Translate(Vector3.forward * 0.1f);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"六、KeyTest（按键测试）\">六、KeyTest（按键测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">KeyTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Start is called before the first frame update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//鼠标点击</span></span><br><span class=\"line\">        <span class=\"comment\">//按下鼠标 0左键 1右键 2滚轮</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Input.GetMouseButtonDown(<span class=\"number\">0</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;按下了鼠标左键&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//持续按下</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Input.GetMouseButton(<span class=\"number\">0</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;持续按下了鼠标左键&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//抬起按键</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Input.GetMouseButtonUp(<span class=\"number\">0</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;抬起了鼠标左键&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//键盘点击</span></span><br><span class=\"line\">        <span class=\"comment\">//按下</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Input.GetKeyDown(KeyCode.A))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;按下了A&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Input.GetKey(KeyCode.A))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;持续按下了A&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Input.GetKeyUp(KeyCode.A))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.Log(<span class=\"string\">&quot;抬起了A&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"七、AsyncTest（异步加载测试）\">七、AsyncTest（异步加载测试）</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine.SceneManagement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AsyncTest</span> : <span class=\"title\">MonoBehaviour</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    AsyncOperation operation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        StartCoroutine(loadScene());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//协程方法用来异步加载场景</span></span><br><span class=\"line\">    <span class=\"function\">IEnumerator <span class=\"title\">loadScene</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        operation = SceneManager.LoadSceneAsync(<span class=\"string\">&quot;MyScene&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加载完场景不要自动跳转</span></span><br><span class=\"line\">        operation.allowSceneActivation = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> operation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">float</span> timer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Debug.Log(operation.progress);</span><br><span class=\"line\">        timer += Time.deltaTime;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果大于5秒后跳转</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer &gt; <span class=\"number\">5</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            operation.allowSceneActivation = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"Codeforces 1100-1400","date":"2024-06-12T13:06:41.000Z","cover":"https://th.bing.com/th/id/R.8764d162d1e9be6b2cf6d348e2da99f0?rik=TLZjyw4Nspa%2b0w&riu=http%3a%2f%2fpic.616pic.com%2fys_bnew_img%2f00%2f62%2f36%2fr9dfcyoyjR.jpg&ehk=SdJuWe8fxNWlX58TeKImDSWatngZpwGh6ann2DJ%2fXN0%3d&risl=&pid=ImgRaw&r=0","_content":"\n## 首先声明！！！\n\n---\n* 1.题解为本人原作，如有使用注明出处。\n* 2.如有改进地方欢迎批评指正~\n\n---\n\n\n\n## 题目1：https://codeforces.com/contest/1845/problem/C\n\n### 主要思路：对于l和r的每一位进行暴搜，cnt数组记录，如果每一位存在则t右移，当t==m时不符合条件输出NO，反之输出YES。\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint a[N],cnt[10];\nint T,n,m,k;\n \n \nbool check(int l,int r)\n{\n    for(int i=l;i<=r;i++)\n        if(!cnt[i])\n            return false;\n\t\n    return true;\n}\n \n \nvoid slove()\n{\n    string s,l,r;\n    cin>>s>>m>>l>>r;\n    \n    fill(cnt,cnt+10,0);\n    \n    int t=0;\n    for(int i=0;i<s.size();i++){\n        int k=s[i]-'0';\n        cnt[k]++;\n    \t\n        int x=l[t]-'0',y=r[t]-'0';\n        if(check(x,y)){\n            fill(cnt,cnt+10,0);\n            t++;\n        }\n    }\n    \n    if(t==m) cout<<\"NO\"<<'\\n';\n    else cout<<\"YES\"<<'\\n';\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目2：https://codeforces.com/problemset/problem/1794/C\n\n### 主要思路：先遍历子序列的终点，而后从后往前二分查找起点，再把子序列个数累加即可。\n\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint a[N],b[N];\nint T,n,m,k;\n \n \nvoid slove()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>a[i];\n\t\n    int res=1;\n    for(int i=0;i<n;i++){\n        int l=0,r=i;\n        while(l<r){\n            int mid=l+r>>1;\n            if(a[mid]>=i-mid+1) r=mid;\n            else l=mid+1;\n        }\n        res=max(res,i-l+1);\n        cout<<res<<' ';\n    }\n\t\n    cout<<'\\n';\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目3：https://codeforces.com/problemset/problem/1692/F\n\n### 主要思路：由于数据量2*10^5直接暴力枚举肯定会超时，换个方向枚举，先把每一个元素的个位存进来，而后暴力枚举三位相加取余10后符合的情况，而后判断是否存在就可以了。\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint cnt[N];\nint T,n,m,k;\n \n \nint get(int i,int j,int k){\n    return (i==j)+(i==j&&j==k)+1;\n}\n\n \nvoid slove()\n{\n    fill(cnt,cnt+20,0);\n\t\n    cin>>n;\n    for(int i=0;i<n;i++){\n        int x;\n        cin>>x;\n        cnt[x%10]++;\n    }\n\t\n    for(int i=0;i<10;i++)\n        for(int j=0;j<10;j++)\n            for(int k=0;k<10;k++)\n                if((i+j+k)%10==3){\n                    cnt[i]--,cnt[j]--,cnt[k]--;\n                    if(cnt[i]>=0&&cnt[j]>=0&&cnt[k]>=0){\n                        cout<<\"YES\"<<endl;\n                        return;\n                    }\n                    cnt[i]++,cnt[j]++,cnt[k]++;\n                }\n\t\t\t\t\n    cout<<\"NO\"<<'\\n';\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n---\n\n","source":"_posts/Codeforces 1100-1400.md","raw":"---\ntitle: Codeforces 1100-1400\ndate: 2024/6/12 21:06:41\ncategories:\n  - Codeforces\ntags:\n  - 题解\ncover: https://th.bing.com/th/id/R.8764d162d1e9be6b2cf6d348e2da99f0?rik=TLZjyw4Nspa%2b0w&riu=http%3a%2f%2fpic.616pic.com%2fys_bnew_img%2f00%2f62%2f36%2fr9dfcyoyjR.jpg&ehk=SdJuWe8fxNWlX58TeKImDSWatngZpwGh6ann2DJ%2fXN0%3d&risl=&pid=ImgRaw&r=0\n---\n\n## 首先声明！！！\n\n---\n* 1.题解为本人原作，如有使用注明出处。\n* 2.如有改进地方欢迎批评指正~\n\n---\n\n\n\n## 题目1：https://codeforces.com/contest/1845/problem/C\n\n### 主要思路：对于l和r的每一位进行暴搜，cnt数组记录，如果每一位存在则t右移，当t==m时不符合条件输出NO，反之输出YES。\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint a[N],cnt[10];\nint T,n,m,k;\n \n \nbool check(int l,int r)\n{\n    for(int i=l;i<=r;i++)\n        if(!cnt[i])\n            return false;\n\t\n    return true;\n}\n \n \nvoid slove()\n{\n    string s,l,r;\n    cin>>s>>m>>l>>r;\n    \n    fill(cnt,cnt+10,0);\n    \n    int t=0;\n    for(int i=0;i<s.size();i++){\n        int k=s[i]-'0';\n        cnt[k]++;\n    \t\n        int x=l[t]-'0',y=r[t]-'0';\n        if(check(x,y)){\n            fill(cnt,cnt+10,0);\n            t++;\n        }\n    }\n    \n    if(t==m) cout<<\"NO\"<<'\\n';\n    else cout<<\"YES\"<<'\\n';\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目2：https://codeforces.com/problemset/problem/1794/C\n\n### 主要思路：先遍历子序列的终点，而后从后往前二分查找起点，再把子序列个数累加即可。\n\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint a[N],b[N];\nint T,n,m,k;\n \n \nvoid slove()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>a[i];\n\t\n    int res=1;\n    for(int i=0;i<n;i++){\n        int l=0,r=i;\n        while(l<r){\n            int mid=l+r>>1;\n            if(a[mid]>=i-mid+1) r=mid;\n            else l=mid+1;\n        }\n        res=max(res,i-l+1);\n        cout<<res<<' ';\n    }\n\t\n    cout<<'\\n';\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目3：https://codeforces.com/problemset/problem/1692/F\n\n### 主要思路：由于数据量2*10^5直接暴力枚举肯定会超时，换个方向枚举，先把每一个元素的个位存进来，而后暴力枚举三位相加取余10后符合的情况，而后判断是否存在就可以了。\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint cnt[N];\nint T,n,m,k;\n \n \nint get(int i,int j,int k){\n    return (i==j)+(i==j&&j==k)+1;\n}\n\n \nvoid slove()\n{\n    fill(cnt,cnt+20,0);\n\t\n    cin>>n;\n    for(int i=0;i<n;i++){\n        int x;\n        cin>>x;\n        cnt[x%10]++;\n    }\n\t\n    for(int i=0;i<10;i++)\n        for(int j=0;j<10;j++)\n            for(int k=0;k<10;k++)\n                if((i+j+k)%10==3){\n                    cnt[i]--,cnt[j]--,cnt[k]--;\n                    if(cnt[i]>=0&&cnt[j]>=0&&cnt[k]>=0){\n                        cout<<\"YES\"<<endl;\n                        return;\n                    }\n                    cnt[i]++,cnt[j]++,cnt[k]++;\n                }\n\t\t\t\t\n    cout<<\"NO\"<<'\\n';\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n---\n\n","slug":"Codeforces 1100-1400","published":1,"updated":"2024-06-20T12:58:35.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvo7000ohwtv76pz2new","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.题解为本人原作，如有使用注明出处。</li>\n<li>2.如有改进地方欢迎批评指正~</li>\n</ul>\n<hr>\n<h2 id=\"题目1：https-codeforces-com-contest-1845-problem-C\">题目1：<a href=\"https://codeforces.com/contest/1845/problem/C\">https://codeforces.com/contest/1845/problem/C</a></h2>\n<h3 id=\"主要思路：对于l和r的每一位进行暴搜，cnt数组记录，如果每一位存在则t右移，当t-m时不符合条件输出NO，反之输出YES。\">主要思路：对于l和r的每一位进行暴搜，cnt数组记录，如果每一位存在则t右移，当t==m时不符合条件输出NO，反之输出YES。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> a[N],cnt[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=r;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!cnt[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string s,l,r;</span><br><span class=\"line\">    cin&gt;&gt;s&gt;&gt;m&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(cnt,cnt+<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=s[i]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        cnt[k]++;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">        <span class=\"type\">int</span> x=l[t]-<span class=\"string\">&#x27;0&#x27;</span>,y=r[t]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(x,y))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">fill</span>(cnt,cnt+<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t==m) cout&lt;&lt;<span class=\"string\">&quot;NO&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目2：https-codeforces-com-problemset-problem-1794-C\">题目2：<a href=\"https://codeforces.com/problemset/problem/1794/C\">https://codeforces.com/problemset/problem/1794/C</a></h2>\n<h3 id=\"主要思路：先遍历子序列的终点，而后从后往前二分查找起点，再把子序列个数累加即可。\">主要思路：先遍历子序列的终点，而后从后往前二分查找起点，再把子序列个数累加即可。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[mid]&gt;=i-mid+<span class=\"number\">1</span>) r=mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res=<span class=\"built_in\">max</span>(res,i-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">        cout&lt;&lt;res&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目3：https-codeforces-com-problemset-problem-1692-F\">题目3：<a href=\"https://codeforces.com/problemset/problem/1692/F\">https://codeforces.com/problemset/problem/1692/F</a></h2>\n<h3 id=\"主要思路：由于数据量2-10-5直接暴力枚举肯定会超时，换个方向枚举，先把每一个元素的个位存进来，而后暴力枚举三位相加取余10后符合的情况，而后判断是否存在就可以了。\">主要思路：由于数据量2*10^5直接暴力枚举肯定会超时，换个方向枚举，先把每一个元素的个位存进来，而后暴力枚举三位相加取余10后符合的情况，而后判断是否存在就可以了。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> cnt[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (i==j)+(i==j&amp;&amp;j==k)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(cnt,cnt+<span class=\"number\">20</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        cnt[x%<span class=\"number\">10</span>]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">10</span>;k++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((i+j+k)%<span class=\"number\">10</span>==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                    cnt[i]--,cnt[j]--,cnt[k]--;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt[i]&gt;=<span class=\"number\">0</span>&amp;&amp;cnt[j]&gt;=<span class=\"number\">0</span>&amp;&amp;cnt[k]&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        cout&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    cnt[i]++,cnt[j]++,cnt[k]++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;NO&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.题解为本人原作，如有使用注明出处。</li>\n<li>2.如有改进地方欢迎批评指正~</li>\n</ul>\n<hr>\n<h2 id=\"题目1：https-codeforces-com-contest-1845-problem-C\">题目1：<a href=\"https://codeforces.com/contest/1845/problem/C\">https://codeforces.com/contest/1845/problem/C</a></h2>\n<h3 id=\"主要思路：对于l和r的每一位进行暴搜，cnt数组记录，如果每一位存在则t右移，当t-m时不符合条件输出NO，反之输出YES。\">主要思路：对于l和r的每一位进行暴搜，cnt数组记录，如果每一位存在则t右移，当t==m时不符合条件输出NO，反之输出YES。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> a[N],cnt[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=l;i&lt;=r;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!cnt[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string s,l,r;</span><br><span class=\"line\">    cin&gt;&gt;s&gt;&gt;m&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(cnt,cnt+<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=s[i]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        cnt[k]++;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">        <span class=\"type\">int</span> x=l[t]-<span class=\"string\">&#x27;0&#x27;</span>,y=r[t]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(x,y))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">fill</span>(cnt,cnt+<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t==m) cout&lt;&lt;<span class=\"string\">&quot;NO&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目2：https-codeforces-com-problemset-problem-1794-C\">题目2：<a href=\"https://codeforces.com/problemset/problem/1794/C\">https://codeforces.com/problemset/problem/1794/C</a></h2>\n<h3 id=\"主要思路：先遍历子序列的终点，而后从后往前二分查找起点，再把子序列个数累加即可。\">主要思路：先遍历子序列的终点，而后从后往前二分查找起点，再把子序列个数累加即可。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[mid]&gt;=i-mid+<span class=\"number\">1</span>) r=mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res=<span class=\"built_in\">max</span>(res,i-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">        cout&lt;&lt;res&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目3：https-codeforces-com-problemset-problem-1692-F\">题目3：<a href=\"https://codeforces.com/problemset/problem/1692/F\">https://codeforces.com/problemset/problem/1692/F</a></h2>\n<h3 id=\"主要思路：由于数据量2-10-5直接暴力枚举肯定会超时，换个方向枚举，先把每一个元素的个位存进来，而后暴力枚举三位相加取余10后符合的情况，而后判断是否存在就可以了。\">主要思路：由于数据量2*10^5直接暴力枚举肯定会超时，换个方向枚举，先把每一个元素的个位存进来，而后暴力枚举三位相加取余10后符合的情况，而后判断是否存在就可以了。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> cnt[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (i==j)+(i==j&amp;&amp;j==k)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(cnt,cnt+<span class=\"number\">20</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        cnt[x%<span class=\"number\">10</span>]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">10</span>;k++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((i+j+k)%<span class=\"number\">10</span>==<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                    cnt[i]--,cnt[j]--,cnt[k]--;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt[i]&gt;=<span class=\"number\">0</span>&amp;&amp;cnt[j]&gt;=<span class=\"number\">0</span>&amp;&amp;cnt[k]&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        cout&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    cnt[i]++,cnt[j]++,cnt[k]++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;NO&quot;</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"CSP-J第一轮知识点总结","date":"2024-06-20T02:23:56.000Z","description":"对学习算法的一些总结和摘抄~","sticky":1,"cover":"https://cdn.china-scratch.com/timg/191028/131045Aa-0.jpg","_content":"\n\n\n\n\n# CSP-J 第一轮知识点总结\n\n\n\n------\n\n## * 题目类型整理\n\n| **题型**     | **知识点类型**     | **题目**数量 |\n| ------------ | ------------------ | ------------ |\n| 单选         | 信息学史&基本知识  | 8-10         |\n| 单选         | C++语法知识点      | 2-3          |\n| 单选         | 数据结构&算法      | 3-4          |\n| 单选         | 数学&逻辑学&运筹学 | 3-4          |\n| 单选         | 比赛相关知识       | 1-2          |\n| 问题求解     | 数学               | 1            |\n| 问题求解     | 数据结构           | 1            |\n| 模拟程序运行 | C++语法&算法       | 4            |\n| 完善程序     | C++语法&算法       | 2            |\n\n---\n\n\n\n\n\n## 一、信息学及计算机史\n\n- **计算机的顶级奖项**：图灵奖、冯·诺依曼奖\n\n图灵奖：由ACM（美国计算机协会）设立于1966年。是“计算机界的诺贝尔奖”。\n\n冯·诺依曼奖：由IEEE设立。\n\n- **对信息科学做出突出贡献的大神**：图灵（所以才有个奖），冯 · 诺伊曼\n- **中国获图灵奖的大神**：姚期智（清华就有姚班，就是以他的名字命名的）\n- **世界第一台电子计算机**：埃尼阿克（𝐸𝑁𝐼𝐴𝐶），于1946年2月14日在美国宾夕法尼亚大学诞生。又被叫做电子管计算机。\n\n---\n\n\n\n\n\n## 二、关于编程\n\n- **编程语言**：\n\n分两类：面向对象和面向过程。\n\n- **高级语言和低级语言的区别**：\n\n高级语言需要编译运行，常数较大，运行速度慢。而低级语言常数极小，运行速度快。此外，高级语言更容易移植。\n\n- **常见低级语言**：\n\n汇编\n\n- **面向对象的高级语言**：\n\nC++，Java，EIFFEL，Simula 67等。\n\n- **面向过程的高级语言**：\n\nC，Fortran语言。\n\n- **递归编程**：\n\n递归是指一种通过重复将问题分解为同类的子问题而解决问题的方法。递归式方法可以被用于解决很多的计算机科学问题。简单来讲，就是“自身调用自身”（在函数中）。\n\n- **P类/NP类/NPC类问题**：\n\n1、P类问题：如果一个问题能找到一个在多项式时间内解决它的算法，那么这个问题就是P问题。\n\n2、NP类问题：注意：NP问题**不是非P类问题**，而是在多项式时间内验证一个解的问题。或者，我们可以将其理解为在多项式时间内猜出一个解的问题。\n\n3、NPC类问题：定义如下：如果一个问题是NP问题，而且所有的NP问题都可以约化到它。那么它就是NPC类问题。再来介绍一下关于约化的定义：如果一个问题A可以约化为问题B，含义就是这个问题A可以用问题B的解法来解决。\n\n\n\n### *NOIP / CSP等的历史、大事件、参赛要求（每年都考）\n\n- NOI：中国计算机学会于1984年（当年，*提出计算机要从娃娃抓起）创办全国青少年计算机程序设计竞赛，即全国青少年信息学奥林匹克竞赛，是国内包括港澳在内的省级代表队最高水平的大赛。\n\n- NOIP：中国计算机学会于1995年创办全国青少年信息学奥林匹克联赛。NOIP在同一时间、不同地点以各省市为单位由特派员组织。全国统一大纲、统一试卷，初、高中或其他中等专业学校的学生可报名参加。联赛分初赛和复赛，初赛考察通用和实用的计算机科学知识，以笔试为主。复赛为程序设计，须在计算机上调试完成。参加初赛者须达到一定分数线后才有资格参加复赛。联赛分普及组和提高组两个组别，难度不同，分别面向初中和高中阶段的学生。\n\n- 从2005年开始，NOIP不再支持Basic；从2022年开始，不再支持Pascal。\n\n- 选手进入考场时，只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，NOI各省特派员可直接取消违规选手的参赛资格。\n\n- CCSP：大学生计算机系统与程序设计竞赛，由中国计算机学会(CCF)于2016年发起的一个面向大学生的竞赛，每年举办一次，考察的是算法、编程以及计算机系统设计能力，旨在进一步提高计算机教育质量，使学生通过竞赛进一步学习和掌握计算机系统知识，同时对高校计算机教育产生引领作用。\n\n- CSP：中国计算机学会于2014年推出CCF计算机软件能力认证，该项认证重点考察软件开发者实际编程能力，由中国计算机学会统一命题、统一评测，委托各地设立的考试机构进行认证考试。该项认证每年大约3、9、12月各举办一次。认证者不限年龄，不限学历，不限报考次数，不限国籍 ，在报名官网注册账户后均可报名参加认证。语言：C/C++(Dev-CPP 5.4.0 (Min GW 4.7.2))，Java(Eclipse (Java SDK 1.7.0_15))，Python(3.6.5) 浏览器：Chrome\n\n  > CSP认证考试可以带纸质资料进入考场，不过只能是常用语言的程序设计基础书、数据结构的相关书籍。不允许U盘、手机等电子设备进入考场。\n  >\n  > CSP-S/J：认证开始15分钟后，认证者不能再进入认证点。如有认证者提前离开认证点，除身体特别原因外，须在认证进行2小时后方可准予离开。在第一轮认证期间，任何人不得将试卷携带出考场。认证者进入考场时，监考检查认证者携带物品。认证者只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，CSP-J/S认证总负责人可直接取消违规认证者的参加资格。\n\n  CSP-S/J：认证开始15分钟后，认证者不能再进入认证点。如有认证者提前离开认证点，除身体特别原因外，须在认证进行2小时后方可准予离开。在第一轮认证期间，任何人不得将试卷携带出考场。认证者进入考场时，监考检查认证者携带物品。认证者只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，CSP-J/S认证总负责人可直接取消违规认证者的参加资格。\n\n---\n\n\n\n\n\n## 三、关于计算机\n\n先上张大图：\n\n![](1.png)\n\n- **重要设备**：\n\n  硬件组成：\n\n  1. 控制器(Control):是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。\n  2. 运算器(Datapath):运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。\n  3. 存储器(Memory):存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。\n  4. 输入设备(Input system):输入设备是计算机的重要组成部分，输入设备与输出设备合称为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。\n  5. 输出设备(Output system):输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。\n\n- **CPU及存储**：\n\nCPU（中央处理器）=运算器+控制器+寄存器\n\n运算器=算术逻辑运算单元（ALU）及浮点运算单元（FPU）\n\n存储器=内存储器+外存储器\n\nBIOS是英文\"Basic Input Output System\"的缩略语，直译过来后中文名称就是\"基本输入输出系统\"。其实，它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、系统设置信息、开机后自检程序和系统自启动程序。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。\n\n随机存储器RAM的“随机”指“随时访问”\n\n所以，我们记下来以下知识点：\n\n**断电后可以保存数据：硬盘，ROM**\n\n**断电后不可以保存数据：显存（显卡内存），RAM，CPU**\n\n- **计算机各存储单位及进位关系**：\n\n计算机的存储单位有以下几种：\n$$\n𝑇𝐵/𝐺𝐵/𝑀𝐵/𝐾𝐵/𝐵\n$$\n他们之间的进位关系为 $1024$\n\n特殊地，$1B=8(bit)$ ，这里的 $𝑏𝑖𝑡$ 是二进制下的一位内存。\n\n\n\n### * 机内代码及其运算\n\n原码：设X，若为非负数，则符号位为0，其余各位取值不变，否则符号位为1。如：\n\nX=+1110001，则[X]原=01110001；X=-1110001，则[X]原=11110001。\n\n反码：设X，若为非负数，则与原码相同，否则符号位为1，其余各位取值求反。如：\n\nX=+1110001，则[X]反=01110001；X=-1110001，则[X]反=10001110。\n\n补码：设X，若为非负数，则与原码相同，若为负数，则为反码加1。如：\n\nX=+1110001，则[X]补=01110001；X=-1110001，则[X]补=10001111。\n\n负补：对补码（包括符号位）的每一位求反，且最低位加1。如：\n\nX=+1110001，[-X]补=10001111。\n\n[X+Y]补=[X]补+[Y]补，[X-Y]补=[X]补-[Y]补=[X]补+[-Y]补（最高位产生的进位要丢掉）\n\n\n\n\n\n\n------\n\n## 四、进制及进制转化\n\n#### 十进制转任意进制\n\n将十进制转换成N𝑁进制，只需把十进制数每次除N𝑁求余数，然后把余数逆序写出来。\n\n看不懂就看图：\n\n![](2.png)\n\n这是二进制的图，其他进制就类比推一下就可以了。如果这个看不懂的话就不要参加初赛了，50块钱买点啥不好...\n\n#### 任意进制转十进制\n\n简单说就是：按位转，第i𝑖位的数字乘以要转换的进制的𝑛−1次幂即可。\n\n还是上图：\n\n![](3.png)\n\n#### 任意进制互相转化\n\n这里考虑用十进制做中转，先把A𝐴进制转十进制，再把十进制转B𝐵进制。\n\n#### 关于小数的进制转换\n\n十进制转任意进制的小数不进行除法运算，而进行乘法运算后取整，取整后从前向后排列。\n\n任意进制转十进制的小数只需要乘上负指数，最后算出来即可。\n\n#### 各进制的字母表达\n\n$𝐻(𝐻𝑒𝑥𝑎𝑑𝑒𝑐𝑖𝑚𝑎𝑙)——16进制$\n\n$𝐷(𝐷𝑒𝑐𝑖𝑚𝑎𝑙)——10进制$\n\n$𝑂(𝑂𝑐𝑡𝑜𝑛𝑎𝑟𝑦)——8进制$\n\n$𝐵(𝐵𝑖𝑛𝑎𝑟𝑦)——2进制$\n\n#### 二进制的相关知识\n\n二进制是计算机进行计算所使用的工具，自然也是非常常考的要点。二进制的相关知识有许多，甚至算法中的位运算也是二进制的相关内容，但为了过第一轮初赛，我们只介绍一些理论知识。关于位运算的相关知识请有兴趣的同学自己学习。\n\n- **1、原码**\n\n顾名思义，原码就是十进制数直接转换成二进制之后直接形成的二进制编码。\n\n- **2、补码**\n\n正数的补码是本身，负数的补码是其**反码加一**。\n\n- **3、反码**\n\n顾名思义：正数的反码是本身，负数的反码是其除符号位之外的所有位按位取反的结果。\n\n#### 附：ASCII码\n\nASCII（American Standard Code for Information Interchange，美国标准信息交流码）码是目前微型计算机中使用最广泛的一种字符编码，用7位二进制数来编码（占一个字节），可表示128个字符，最高位为0或作奇偶校验用。\n\n![](10.jpg)\n\n\n\n\n\n------\n\n## 五、位运算\n\n位运算不仅在初赛中是一个知识点分类，在复赛（即真正的程序设计与运用）的时候也有很大的一个应用。而且，位运算的相关知识是计算机运算的灵魂，更是每个程序猿应该理解的一种基本操作。\n\n\n\n### 1、与(&)运算\n\n#### (1)运算法则\n\n两个二进制数进行与&运算，如果对应位都为1则结果为1，否则为0.\n\n#### (2)技巧及用途\n\n**与运算常常用于二进制下的取位操作。**想要知道二进制下的某位是否是1，就&上这个位数对应的十进制数。假如返回的是这个十进制数本身，则这个位的确是1，反之就是0.\n\n比如：\n\n我们要取第三位是否为1，我们只需要与&上第三位（二进制表示为100）对应的二进制数4，如果返回值为4，就代表第三位为1，反之就是0.\n\n最常用的是取二进制下的最末位，即a&1。这样的技巧可以用于**判断奇偶**，根据二进制常识，尾数为1则为奇数，反之为偶数。\n\n\n\n### 2、或(|)运算\n\n#### (1)运算法则\n\n两个二进制数进行或|运算，如果对应位有一个为1，结果就为1.只有在两个数的对应位置都是0的时候，结果才为0.\n\n#### (2)技巧及用途\n\n**或运算常用于二进制特定位的赋值**。想把哪个位强行变成1，就用这个数|上这个位数对应的二进制数。\n\n还是上面那个例子，我们想让00000的第三位变成1.即十进制变4，我们直接|上4就可以。\n\n当然，不同于&运算，我们很少用|运算进行任意位赋值。通常来讲，我们只使用a|1把a的最后一位强行变成1，其实质意义是**把原数加一**。或者使用a|1-1再把它变为0.这个技巧通常用于**把它变成它最接近的偶数**。\n\n\n\n### 3、异或(^)(xor)运算\n\n#### (1)运算法则\n\n两个二进制数进行异或(^)运算，如果对应位相同，不管是0或者是1，都返回1，反之返回0.\n\n#### (2)技巧及用途\n\n其实没啥用途...\n\n好吧，我介绍一个性质：一个数经过两次异或之后等于原数。\n\n（很好理解）\n\n\n\n### 4、非(~)运算\n\n#### (1)运算法则\n\n把给定二进制数全部取反。\n\n#### (2)技巧及用途\n\n其实没什么运算上的用途，本蒟蒻曾看见一些大佬用这个运算判断输入是否为0...\n\n大约长这个样子：\n\n```c++\nwhile(~scanf(\"%d\",&n))\n```\n\n\n\n### 5、左移(<<)运算\n\n#### (1)运算法则\n\na<<b表示把a的二进制位向左移动b位，低位用0补上。\n\n#### (2)技巧及用途\n\n根据二进制的常识，我们会发现，二进制第k位上的数就等于2k2𝑘。（从0开始计位）\n\n比如，二进制下的100就是2k=2=42𝑘=2=4。\n\n所以我们发现，左移运算a<<b的实质就是a×2b𝑎×2𝑏。\n\n左移运算最常用的技巧就是用来代替×2的整数次幂的乘法运算。因为我们普遍认为，位运算是要比四则运算加减乘除及模运算更快一些的运算。\n\n\n\n### 6、右移(>>)运算\n\n#### (1)运算法则\n\na>>b就是把a的二进制位向右移动b位，溢出的舍去。\n\n#### (2)技巧及用途\n\n类比于左移运算，我们发现右移运算就是把a除以2的整数次幂。这就是右移运算的用途——优化除法运算。\n\n这里需要特殊说明的是，右移算法可以用在数学知识中的求最大公约数的程序块上。因为mod运算的效率慢的出奇，所以我们可以用右移运算来进行除以2的操作。据说可以提高百分之60的效率。\n\n\n\n### 7、位运算优先级\n\n位运算的优先级是我们在处理位运算的时候常常要考虑的问题，诚然，我们可以用括号强制位运算的顺序，但是，我们还是应该学会位运算的优先级（这应该是常识）。\n\n位运算的优先级如下：\n\n**按位反（~）>位移运算（<<,>>）>按位与（&）>按位异或（^）>按位或（|）**\n\n### 附：位运算在状压DP的用法\n\n众所周知，状压DP就是把状态压缩成一个01串（其实就是一个二进制数），用以减少DP数组的维数。但是我们在DP的时候就要按照01串来进行状态的转移。所以位运算是状压DP的基础知识和必备知识。所以我在本篇随笔的末尾还附上了状压DP中比较常用的操作及其二进制实现的方式。\n\n正文：（本文中的a表示十进制下的整数）\n\n**1、获得第i位的数字**：(a>>i)&1 或者 a&(1<<i)\n\n很好理解，我们知道可以用&1来提取最后一位的数，那么我们现在要提取第i位数，就直接把第i位数变成最后一位即可（直接右移）。或者，我们可以直接&上1左移i位，也能达到我们的目的。\n\n**2、设置第i位为1**：a=a|(1<<i)\n\n我们知道强制赋值用|运算，所以就直接强制|上第i位即可。\n\n**3、设置第i位为0**：a=a&(~(1<<i))\n\n这里比较难以理解。其实很简单，我们知道非~运算是按位取反，(1<<i)非一下就变成了第i为是0，其它全是1的二进制串。这样再一与原数进行&运算，原数的第i位无论是什么都会变成0，而其他位不会改变（实在不明白的可以用纸笔进行推演）。\n\n**4、把第i位取反**：a=a^(1<<i)\n\n1左移i位之后再进行异或，我们就会发现，如果原数第i位是0，一异或就变成1，否则变成0。\n\n**5、取出一个数的最后一个1**：a&(-a)\n\n学过树状数组的同学会发现，这就是树状数组的lowbit。事实上，这和树状数组的原理是一样的。我想，不需要我多解释。\n\n为了应对初赛的笔试题，建议读者在阅读完这篇博客之后至少应该掌握：**各种位运算的运算法则以及位运算优先级**。\n\n#### 另外，对于位运算的优先级，本蒟蒻在后面的逻辑运算部分还会有详细的解析。\n\n### 逻辑运算\n\n#### 逻辑运算\n\n逻辑运算一共有三种，每种都有两种写法：\n\n**逻辑非**：！或 ┐\n\n**逻辑与**：&& 或 ∧\n\n**逻辑或**：|| 或 ∨\n\n#### 逻辑运算的优先级\n\n非>>与>>或\n\n#### 位运算+逻辑运算的优先级\n\n**逻辑非（！，┐）=按位反（~）>位移运算（<<,>>）>不等号（>=,<=）>等号（==,!=）>按位与（&）>按位异或（^）>按位或（|）>逻辑与（&&，∧）>逻辑或（||，∨）**\n\n#### 逻辑表达式\n\n由逻辑运算复合而成，只有两种结果：𝑡𝑟𝑢𝑒和𝑓𝑎𝑙𝑠𝑒，在C/C++中，返回的值以0表示假，以1表示真。\n\n#### 条件表达式\n\n条件表达式的基本形式如下：\n\n<表达式1>？<表达式2>：<表达式3>\n\n其表达意义是：如果表达式1成立，则执行表达式2，否则执行表达式3。其实也等价于𝑖𝑓−𝑒𝑙𝑠𝑒条件语句。例如下：\n\n```cpp\n#define Min(a,b) a<b?a:b\n```\n\n**注意：**如果条件表达式有多个进行复合，那么在执行的时候需要从由往左依次判断最后得出一个结果。即：**右结合性**。\n\n比如：\n\n<表达式1>？<表达式2>：<表达式3>？<表达式4>：<表达式5>\n\n那么，在执行的时候是从3开始判断是否为真，然后执行某一个表达式，依次向上回溯。\n\n\n\n\n\n------\n\n## 六、简单数据结构基本理论\n\n### 1、链表\n\n本篇随笔就数据结构——链表进行讲解。链表是一种特别实用的数据结构，我把它理解为**数组的升级版**，也就是在数组的基础上，它能做到在任意位置添加或者删除元素，而不影响其他元素。链表还是我们进行图论学习时，图的常用存储方式——邻接表（链式前向星）的实现基础。学习链表需要读者具有一定的语法基础，最好会一点点指针。（不会也没关系，我们主要讲解数组模拟链表）\n\n#### 什么是链表\n\n链表，顾名思义，就是带链的表。我已经说过，链表属于数组的加强版。那我们可以借助数组来理解链表：如果说数组是一长排连在一起的“方块”的话，那么链表就是把这些方块“拉开“，每个方块还有两个箭头，分别指向这个方块前面的方块和后面的方块。\n\n这样我们就可以理解，为什么链表可以支持随机插入和删除了。从某种意义上来说，这里的每一个方块都是离散的，我们在某两点插入的时候，只需要把要插入的元素，这个元素目标位置前面的元素、后面的元素的箭头改一下，就做到了插入的操作。删除同理。\n\n#### 链表的实现原理\n\n根据刚才的理解，我们可以发现，我们可以用一个结构体来模拟每一个方块，结构体中存一个元素和两个指针，指针分别指向上一个元素的位置和下一个元素的位置。但是蒟蒻不会指针指针的实现比较麻烦，而且在调试的时候也不是很理想。所以我们来想指针的本质就是告诉你一个位置，那么针对于”加强数组“链表来讲，这个位置可以用什么来表示呢？\n\n**对，数组下标。**\n\n所以我们刚才的结构体就可以简化，变成存一个元素和两个int变量（存储数组下标）。这样，我们就可以用结构体数组模拟链表的实现。\n\n\n\n### 2、栈\n\n想象一个桶，你从上面往里扔砖，然后你想把某一块砖拿出来，你需要先拿出来你后扔进去的砖。这就是栈。栈的基本原则是：后进先出\n\n来一发图示？\n\n![](7.png)\n\n#### 浅谈前、中、后缀表达式\n\n前、中、后缀表达式是信息学奥林匹克竞赛中比较鸡肋的知识点。但是知识点在考纲范围内，而且中缀表达式转后缀表达式是比较有用的知识。所以在这里为大家简单介绍一下。\n\n\n#### 前缀表达式（少用）\n\n又称波兰式（Polish Notation），操作符以前缀形式位于两个运算数前（如：3+2的前缀表达形式就是+ 3 2）。\n\n#### 中缀表达式\n\n操作符以中缀形式位于运算数中间（如：3+2），是我们日常通用的算术和逻辑公式表示方法。\n\n例子：\n$$\n6×12+9−14。\n$$\n\n#### 后缀表达式\n\n又称逆波兰式（Reverse Polish Notation - RPN），操作符以后缀形式位于两个运算数后（如：3+2的后缀表达形式就是3 2 +）。\n\n例子：（注意！正常写是没有逗号的，这里方便区分）\n$$\n6 ，12 ，× ，9 ，+ ，14 ，-\n$$\n\n#### 后缀表达式转中缀表达式的实现：\n\n从左至右依次遍历后缀表达式各个字符（需要准备一个运算数栈存储运算数和操作结果）\n\n1、字符为 运算数 ：\n\n直接入栈（注：需要先分析出完整的运算数并将其转换为对应的数据类型）\n\n2、字符为 操作符 ：\n\n连续出栈两次，使用出栈的两个数据进行相应计算，并将计算结果入栈\n\n注意：第一个出栈的运算数为 a ，第二个出栈的运算数为 b ，此时的操作符为 - ，则计算 b-a  （注：a和b顺序不能反），并将结果入栈。\n\n3、重复以上步骤直至遍历完成后缀表达式，最后栈中的数据就是中缀表达式的计算结果。\n\n还拿上面的例子：\n\n$$\n6 ，12 ，× ，9 ，+ ，14 ，-\n$$\n\n上面的式子就可以写成如下的中缀表达式：\n\n$$\n6×12+9−14。\n$$\n\n* 特别注意：针对一个确定的中缀表达式，其所对应的后缀表达式不唯一；而针对一个确定的后缀表达式，其对应的中缀表达式是唯一的。\n\n\n\n### 3、队列\n\n想象你在排队买票，这个队伍中的人都非常有素质，都自觉排队而且不会提前离开队伍。这样就只能从队首买完票再离开，从队尾进入队伍。队列的基本原则是：先进先出。\n\n再来一发图示：\n\n![](8.png)\n\n\n\n### 4、字符串\n\n字符串子串的概念：字符串是一串字符（废话），它的子串被定义为：字符串中**任意个连续的字符组成的子序列**。\n\n字符串子串个数的计算公式：\n$$\n\\frac{n×(n+1)}{2}+1\n$$\n\n（就是字符串长度等差数列）\n\n如果是非空子串，就把那个一减去即可（子串个数的公式加一就是考虑空子串的情况）。\n\n\n\n### 5.树\n\nemmm...直观来讲，就是一张长得像树的图。定义是任意两点之间的简单路径有且只有一条。树是一棵连通且无环的图。它的边数是𝑛−1。\n\n#### 二叉树的遍历\n\n二叉树有不同的遍历方式，一般来讲，我们将其分成三类：先序遍历（也叫先根遍历）、中序遍历（中根遍历）以及后序遍历（后根遍历）。\n\n- **先序遍历**：遍历方式如下：根—左儿子—右儿子\n- **中序遍历**：遍历方式如下：左儿子—根—右儿子\n- **后序遍历**：遍历方式如下：左儿子—右儿子—根\n\n我们用一张图来理解一下这几种遍历方式。\n\n![](4.png)\n\n这张图的先序遍历：1245367\n\n中序遍历：4251637\n\n后序遍历：4526731\n\n- **一个推论**：\n\n  先序遍历+中序遍历=一棵确定的二叉树\n\n  后序遍历+中序遍历=一棵确定的二叉树\n\n  先序遍历+后序遍历=啥也不是\n\n#### 特殊二叉树及其性质\n\n- **完全二叉树**：只有最后一层不是满的，且最后一层的所有节点均集中在左侧。\n\n图例如下：\n\n![](5.png)\n\n- **满二叉树**：节点个数已满。\n\n图例如下：\n\n![](6.png)\n\n- **特殊二叉树的性质**：\n\n1、对于一棵完全二叉树来讲，它的叶子节点为 $𝑛$，则节点总数为 $2×𝑛−1$。此结论可逆。\n\n2、对于一棵满二叉树来讲，它的层数（深度）为 $𝑘$，则它的节点总数为 $2×𝑘−1$。此结论可逆。\n\n#### 拓扑排序（这个先不讲）\n\n\n\n### 6.图论\n\n\n图（Graph）是图论中的一个重要概念，用于描述由节点（顶点）和连接这些节点的边（或弧）组成的非线性数据结构。\n\n\n#### 图的基本概念：\n\n- 顶点（Vertex）：图中的基本单位，通常用于表示实体或节点。\n\n\n- 边（Edge）：连接图中两个顶点的关系。边可以是有向的（有方向性，称为弧）或无向的（无方向性）。\n\n\n- 路径（Path）：顶点序列，其中每两个相邻的顶点通过一条边连接。\n\n\n- 环（Cycle）：路径中第一个顶点等于最后一个顶点的路径。\n\n\n- **连通图**：顾名思义，连通图就是连通的图，即任意两点都能**直接或间接**到达，这就区别于完全图必须直接用边到达的定义。\n  \n- **完全图**：任意两点都有边相连，我们很容易推出来，一张完全图的边数为（𝑛为节点个数）\n\n$$\n\\frac{n×(n−1)}{2}\n$$\n\n\n- 无向图（Undirected Graph）：所有边没有方向的图。\n\n\n- 有向图（Directed Graph）：图中的边有方向性的图。\n\n- 权重（Weight）：边或弧上关联的数值，通常用于表示边的成本或距离。\n\n  \n\n#### 图的邻接矩阵存储：\n邻接矩阵是用二维数组表示图的一种常见方法，其中数组元素表示顶点之间的连接关系。\n\n定义：对于一个有n个顶点的图，邻接矩阵是一个n x n的矩阵，其中元素 a[i][j] 表示顶点 i 和顶点 j 之间是否有边或弧。如果是无向图，通常用1表示连接，0表示没有连接；如果是有向图，可以用1表示有边，0表示没有边，或者用权值表示边的权重。\n\n优点：\n* 简单直观，易于理解和实现。\n* 方便查找任意两个顶点之间是否有边。\n\n缺点：\n* 浪费空间：对于稀疏图（边数量远少于顶点数量），大部分矩阵元素为0，造成空间浪费。\n* 不适合大规模图：当顶点数量非常大时，邻接矩阵的空间消耗会很大。\n\n#### 图的邻接表存储：\n邻接表是用链表或者类似的数据结构表示图的另一种常见方法，适合表示稀疏图。\n\n定义：使用数组和链表的结合来表示图。数组的每个元素对应一个顶点，每个元素存储与该顶点相邻的所有顶点（即与其有边直接连接的顶点）的链表或者列表。\n\n优点：\n* 省空间：对于稀疏图，只存储存在的边，节省了空间。\n* 插入和删除效率高：对于边的插入和删除操作，相较于邻接矩阵更加高效。\n\n缺点：\n* 不便于查找任意两个顶点之间的关系：需要遍历链表来确定两个顶点是否相连，效率低于邻接矩阵。\n\n* 需要额外空间来存储链表或列表。\n\n  \n\n#### 在实际应用中，选择邻接矩阵还是邻接表取决于图的稀疏程度和需要的操作类型。稠密图适合用邻接矩阵表示，而稀疏图通常用邻接表表示。\n\n\n\n\n\n------\n\n## 七、时空复杂度的计算\n\n- **时间复杂度**：渐进时间复杂度用符号 $𝑂$  表示。一个程序的语句执行次数可以用一个代数式表示，那么我们取这个代数式的最高次项且忽略此项系数作为时间复杂度。如果一个程序的语句执行次数为 $2𝑛^3+3𝑛^2+𝑛+7$，那么这个程序的渐进时间复杂度为 $𝑂(𝑛^3)$ 。\n- **计算非递归程序的时间复杂度**：简单粗暴，数循环。\n- **常数**：常数即为我们忽略掉的𝑂中最高次项的系数与低次项所带来的时间消耗。\n- **空间复杂度**：类比时间复杂度。看开空间开了多大。\n- **计算空间占用量**：根据我们以上说过的计算机存储单位的知识：一个𝑖𝑛𝑡占用的内存是4𝐵，所以我们把开的𝑖𝑛𝑡乘上4，再除以1024就是𝐾𝐵，同理，再除1024就是𝑀𝐵。\n\n公式：𝑛为元素个数，𝑀为最终答案（以𝑀𝐵为单位）\n\n$$\nM=\\frac{4𝑛}{1024×1024}\n$$\n$PS:一般来讲，比赛中所给的 256𝑀𝐵 内存可以开 6×10^7 个 𝑖𝑛𝑡 类型的变量。另外，大数组必须开全局变量。如果扔在主函数里极容易爆栈。$\n\n\n\n\n\n------\n\n## 八、数学、逻辑学及运筹学知识\n\n\n  ### 1、排列和组合的定义\n\n  #### (1)排列的定义\n\n  从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素按照一定顺序排成一列，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个排列。\n\n  #### (2)排列数的定义\n\n  从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有排列的个数，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的排列数。\n\n  #### (3)全排列的定义\n\n  当 $𝑛=𝑚$ 时所有的排列情况叫做**全排列**。\n\n  #### (4)组合的定义\n\n  从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素并成一组，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个组合。\n\n  #### (5)组合数的定义\n\n  从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有组合的个数，叫做从 $𝑛$ 个不同元素中取出 $m$ 个元素的组合数。\n\n  #### (6)排列&组合的区别\n\n  通俗地说，组合不分顺序，而排列分顺序，也就是说，对于数列 $1，2$ ，有以下两种排列：$1，2$ 和 $2，1$ ，但是仅有一种组合 $1，2$ 或 $2，1$ 。\n\n  ### 2、排列&组合的公式\n\n  #### (1)关于排列的公式\n\n  从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的排列数，数学表示为：$𝐴_{𝑛}^𝑚$.\n\n  计算公式如下：\n\n\n$$\n𝐴_{𝑛}^𝑚=𝑛(𝑛−1)(𝑛−2)⋯(𝑛−𝑚+1)=\\frac{𝑛!}{(𝑛−𝑚)!}\n$$\n\n  #### (2)关于组合的公式\n\n  从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的组合数，数学表示为：$𝐶_{𝑛}^𝑚$.\n\n  计算公式如下：\n\n$$\n𝐶_{𝑛}^𝑚=\\frac{𝐴_{𝑛}^𝑚}{𝑚!}=\\frac{𝑛!}{𝑚!(𝑛−𝑚)!}\n$$\n\n  #### (3)关于全排列的公式\n\n  某个数列的全排列数 $𝑓(𝑛)$，计算公式如下：\n\n$$\n𝑓(𝑛)=𝑛!\n$$\n\n\n  ### 3、全排列的求法\n\n  例题：生成全排列（深搜基础题）\n\n  [题目链接](https://neooj.com/oldoj/problem.php?id=1742)\n\n  给定 $𝑛$ ,生成 $1−𝑛$ 的全排列。\n\n  我们考虑用递归来解决全排列问题：\n\n  递归出口是当 $x==n+1$ 地时候，绝对不能仅仅等于 $n！$ \n\n  我们的递归部分使用标记数组和数列数组实现，具体实现方法可以参照下图：\n  ![](9.jpg)\n\n---\n\n\n\n\n\n## 九、算法\n\n### 1.算法的基本概念\n\n算法的特征：有穷性，确切性，至少一个输出，可行性\n\n表示方法：自然语言法，程序流程图法（顺序结构，选择结构，循环结构），程序法\n\n\n\n### 2.排序\n- $选择排序：对待排序的记录序列进行n-1遍的处理。第一遍处理是将L[1..n]中最小者与L[1]交换位置，第二遍处理是将L[2..n]中最小者与L[2]交换位置，以此类推，时间复杂度为O(n^{2}) )。选择排序是稳定排序。$\n- $插入排序：经过i-1遍处理后，L[1..i-1]已排好序。第i遍处理仅将L[i]插入L[1..i-1]的适当位置p，原来p后的元素一一向右移动一个位置，使得L[1..i]又是排好序的序列，时间复杂度为O(n^2 )。插入排序是稳定排序。$\n- $冒泡排序：又称交换排序。对待排序的记录的关键字进行两两比较，如果发现是反序的，则进行交换，时间复杂度为O( n^2 )。冒泡排序是稳定排序。$\n- $希尔排序：先将待排序列进行预排序，使待排序列接近有序，然后再对该序列进行一次插入排序，此时插入排序的时间复杂度为O(n)，$\n- $快速排序：先从数据序列中选一个元素，并将序列中所有比该元素小的元素都放在它的一边，再对左右两边分别用同样的方法处理，直到每一个待处理的序列长度为1，处理结束。时间复杂度下限为O(nlogn)，上限为O( n^2 )。快速排序是不稳定排序，基于分治思想。$\n- $归并排序：归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。时间复杂度为O(nlogn)$\n\n![](11.png)\n\n![](12.png)\n\n### 考试用到的其他基础算法板子将在我另外一篇博客里。\n\n---\n\n\n\n\n\n## 十、程序阅读\n\n### 阅读程序及完善程序题答题方法\n\n### （1）阅读程序和完善程序两个大题在CSP考试当中占据70分，也就是一多半。所以，前面的选择题全对也只能得个30分。这种题不要求必须全对，但是想进入普及组复赛，必须保证拿到70%~80%（约合49~56分）的分值\n\n### （2）题型：\n\n ① 阅读程序先给一个完整的程序，再给2~3个判断题和1~2个选择题，类似于阅读理解。除特殊说明外，判断题一个1.5分，选择题一个3分。\n ②完善程序先给一个有残缺部分的程序，再把合适的代码依次填入空中，均为选择题（一个题3分）。类似于完形填空\n\n### （3）答题技巧\n\n① 拿到卷子不用先看代码，先看题，在根据题干有目的地阅读代码的相应片段\n② 不要一上来就先看第一题，第一题不会就死磕。先找突破口，就是那种非常好填的空，先填上后再加分析，推出其他题的答案。有的代码前后有关联，可以根据前后联系推出答案\n③ 碰到特别长的程序千万不要惊慌。出一条长代码可能有这几点原因：1.这个程序所涉及的算法确实需要很长的代码；2.故意的，写一个特别长的代码纯粹就是一个考验，看看哪些人遇到这样的题不会慌张。也就是，有的长代码就是个纸老虎，静下心好好分析，不难。\n④ 这种题也要看平时的积累以及扎实程度。多背一些算法的模板代码及例题，这种题拿五十多分也并非难事\n\n---\n\n","source":"_posts/csp-j1知识点.md","raw":"---\ntitle: CSP-J第一轮知识点总结\ndate: 2024/6/20 10:23:56 \ndescription: 对学习算法的一些总结和摘抄~\n\nsticky: 1\ncategories: CSP-J/S\ntags:\n  - 算法\ncover: https://cdn.china-scratch.com/timg/191028/131045Aa-0.jpg\n---\n\n\n\n\n\n# CSP-J 第一轮知识点总结\n\n\n\n------\n\n## * 题目类型整理\n\n| **题型**     | **知识点类型**     | **题目**数量 |\n| ------------ | ------------------ | ------------ |\n| 单选         | 信息学史&基本知识  | 8-10         |\n| 单选         | C++语法知识点      | 2-3          |\n| 单选         | 数据结构&算法      | 3-4          |\n| 单选         | 数学&逻辑学&运筹学 | 3-4          |\n| 单选         | 比赛相关知识       | 1-2          |\n| 问题求解     | 数学               | 1            |\n| 问题求解     | 数据结构           | 1            |\n| 模拟程序运行 | C++语法&算法       | 4            |\n| 完善程序     | C++语法&算法       | 2            |\n\n---\n\n\n\n\n\n## 一、信息学及计算机史\n\n- **计算机的顶级奖项**：图灵奖、冯·诺依曼奖\n\n图灵奖：由ACM（美国计算机协会）设立于1966年。是“计算机界的诺贝尔奖”。\n\n冯·诺依曼奖：由IEEE设立。\n\n- **对信息科学做出突出贡献的大神**：图灵（所以才有个奖），冯 · 诺伊曼\n- **中国获图灵奖的大神**：姚期智（清华就有姚班，就是以他的名字命名的）\n- **世界第一台电子计算机**：埃尼阿克（𝐸𝑁𝐼𝐴𝐶），于1946年2月14日在美国宾夕法尼亚大学诞生。又被叫做电子管计算机。\n\n---\n\n\n\n\n\n## 二、关于编程\n\n- **编程语言**：\n\n分两类：面向对象和面向过程。\n\n- **高级语言和低级语言的区别**：\n\n高级语言需要编译运行，常数较大，运行速度慢。而低级语言常数极小，运行速度快。此外，高级语言更容易移植。\n\n- **常见低级语言**：\n\n汇编\n\n- **面向对象的高级语言**：\n\nC++，Java，EIFFEL，Simula 67等。\n\n- **面向过程的高级语言**：\n\nC，Fortran语言。\n\n- **递归编程**：\n\n递归是指一种通过重复将问题分解为同类的子问题而解决问题的方法。递归式方法可以被用于解决很多的计算机科学问题。简单来讲，就是“自身调用自身”（在函数中）。\n\n- **P类/NP类/NPC类问题**：\n\n1、P类问题：如果一个问题能找到一个在多项式时间内解决它的算法，那么这个问题就是P问题。\n\n2、NP类问题：注意：NP问题**不是非P类问题**，而是在多项式时间内验证一个解的问题。或者，我们可以将其理解为在多项式时间内猜出一个解的问题。\n\n3、NPC类问题：定义如下：如果一个问题是NP问题，而且所有的NP问题都可以约化到它。那么它就是NPC类问题。再来介绍一下关于约化的定义：如果一个问题A可以约化为问题B，含义就是这个问题A可以用问题B的解法来解决。\n\n\n\n### *NOIP / CSP等的历史、大事件、参赛要求（每年都考）\n\n- NOI：中国计算机学会于1984年（当年，*提出计算机要从娃娃抓起）创办全国青少年计算机程序设计竞赛，即全国青少年信息学奥林匹克竞赛，是国内包括港澳在内的省级代表队最高水平的大赛。\n\n- NOIP：中国计算机学会于1995年创办全国青少年信息学奥林匹克联赛。NOIP在同一时间、不同地点以各省市为单位由特派员组织。全国统一大纲、统一试卷，初、高中或其他中等专业学校的学生可报名参加。联赛分初赛和复赛，初赛考察通用和实用的计算机科学知识，以笔试为主。复赛为程序设计，须在计算机上调试完成。参加初赛者须达到一定分数线后才有资格参加复赛。联赛分普及组和提高组两个组别，难度不同，分别面向初中和高中阶段的学生。\n\n- 从2005年开始，NOIP不再支持Basic；从2022年开始，不再支持Pascal。\n\n- 选手进入考场时，只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，NOI各省特派员可直接取消违规选手的参赛资格。\n\n- CCSP：大学生计算机系统与程序设计竞赛，由中国计算机学会(CCF)于2016年发起的一个面向大学生的竞赛，每年举办一次，考察的是算法、编程以及计算机系统设计能力，旨在进一步提高计算机教育质量，使学生通过竞赛进一步学习和掌握计算机系统知识，同时对高校计算机教育产生引领作用。\n\n- CSP：中国计算机学会于2014年推出CCF计算机软件能力认证，该项认证重点考察软件开发者实际编程能力，由中国计算机学会统一命题、统一评测，委托各地设立的考试机构进行认证考试。该项认证每年大约3、9、12月各举办一次。认证者不限年龄，不限学历，不限报考次数，不限国籍 ，在报名官网注册账户后均可报名参加认证。语言：C/C++(Dev-CPP 5.4.0 (Min GW 4.7.2))，Java(Eclipse (Java SDK 1.7.0_15))，Python(3.6.5) 浏览器：Chrome\n\n  > CSP认证考试可以带纸质资料进入考场，不过只能是常用语言的程序设计基础书、数据结构的相关书籍。不允许U盘、手机等电子设备进入考场。\n  >\n  > CSP-S/J：认证开始15分钟后，认证者不能再进入认证点。如有认证者提前离开认证点，除身体特别原因外，须在认证进行2小时后方可准予离开。在第一轮认证期间，任何人不得将试卷携带出考场。认证者进入考场时，监考检查认证者携带物品。认证者只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，CSP-J/S认证总负责人可直接取消违规认证者的参加资格。\n\n  CSP-S/J：认证开始15分钟后，认证者不能再进入认证点。如有认证者提前离开认证点，除身体特别原因外，须在认证进行2小时后方可准予离开。在第一轮认证期间，任何人不得将试卷携带出考场。认证者进入考场时，监考检查认证者携带物品。认证者只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，CSP-J/S认证总负责人可直接取消违规认证者的参加资格。\n\n---\n\n\n\n\n\n## 三、关于计算机\n\n先上张大图：\n\n![](1.png)\n\n- **重要设备**：\n\n  硬件组成：\n\n  1. 控制器(Control):是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。\n  2. 运算器(Datapath):运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。\n  3. 存储器(Memory):存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。\n  4. 输入设备(Input system):输入设备是计算机的重要组成部分，输入设备与输出设备合称为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。\n  5. 输出设备(Output system):输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。\n\n- **CPU及存储**：\n\nCPU（中央处理器）=运算器+控制器+寄存器\n\n运算器=算术逻辑运算单元（ALU）及浮点运算单元（FPU）\n\n存储器=内存储器+外存储器\n\nBIOS是英文\"Basic Input Output System\"的缩略语，直译过来后中文名称就是\"基本输入输出系统\"。其实，它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、系统设置信息、开机后自检程序和系统自启动程序。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。\n\n随机存储器RAM的“随机”指“随时访问”\n\n所以，我们记下来以下知识点：\n\n**断电后可以保存数据：硬盘，ROM**\n\n**断电后不可以保存数据：显存（显卡内存），RAM，CPU**\n\n- **计算机各存储单位及进位关系**：\n\n计算机的存储单位有以下几种：\n$$\n𝑇𝐵/𝐺𝐵/𝑀𝐵/𝐾𝐵/𝐵\n$$\n他们之间的进位关系为 $1024$\n\n特殊地，$1B=8(bit)$ ，这里的 $𝑏𝑖𝑡$ 是二进制下的一位内存。\n\n\n\n### * 机内代码及其运算\n\n原码：设X，若为非负数，则符号位为0，其余各位取值不变，否则符号位为1。如：\n\nX=+1110001，则[X]原=01110001；X=-1110001，则[X]原=11110001。\n\n反码：设X，若为非负数，则与原码相同，否则符号位为1，其余各位取值求反。如：\n\nX=+1110001，则[X]反=01110001；X=-1110001，则[X]反=10001110。\n\n补码：设X，若为非负数，则与原码相同，若为负数，则为反码加1。如：\n\nX=+1110001，则[X]补=01110001；X=-1110001，则[X]补=10001111。\n\n负补：对补码（包括符号位）的每一位求反，且最低位加1。如：\n\nX=+1110001，[-X]补=10001111。\n\n[X+Y]补=[X]补+[Y]补，[X-Y]补=[X]补-[Y]补=[X]补+[-Y]补（最高位产生的进位要丢掉）\n\n\n\n\n\n\n------\n\n## 四、进制及进制转化\n\n#### 十进制转任意进制\n\n将十进制转换成N𝑁进制，只需把十进制数每次除N𝑁求余数，然后把余数逆序写出来。\n\n看不懂就看图：\n\n![](2.png)\n\n这是二进制的图，其他进制就类比推一下就可以了。如果这个看不懂的话就不要参加初赛了，50块钱买点啥不好...\n\n#### 任意进制转十进制\n\n简单说就是：按位转，第i𝑖位的数字乘以要转换的进制的𝑛−1次幂即可。\n\n还是上图：\n\n![](3.png)\n\n#### 任意进制互相转化\n\n这里考虑用十进制做中转，先把A𝐴进制转十进制，再把十进制转B𝐵进制。\n\n#### 关于小数的进制转换\n\n十进制转任意进制的小数不进行除法运算，而进行乘法运算后取整，取整后从前向后排列。\n\n任意进制转十进制的小数只需要乘上负指数，最后算出来即可。\n\n#### 各进制的字母表达\n\n$𝐻(𝐻𝑒𝑥𝑎𝑑𝑒𝑐𝑖𝑚𝑎𝑙)——16进制$\n\n$𝐷(𝐷𝑒𝑐𝑖𝑚𝑎𝑙)——10进制$\n\n$𝑂(𝑂𝑐𝑡𝑜𝑛𝑎𝑟𝑦)——8进制$\n\n$𝐵(𝐵𝑖𝑛𝑎𝑟𝑦)——2进制$\n\n#### 二进制的相关知识\n\n二进制是计算机进行计算所使用的工具，自然也是非常常考的要点。二进制的相关知识有许多，甚至算法中的位运算也是二进制的相关内容，但为了过第一轮初赛，我们只介绍一些理论知识。关于位运算的相关知识请有兴趣的同学自己学习。\n\n- **1、原码**\n\n顾名思义，原码就是十进制数直接转换成二进制之后直接形成的二进制编码。\n\n- **2、补码**\n\n正数的补码是本身，负数的补码是其**反码加一**。\n\n- **3、反码**\n\n顾名思义：正数的反码是本身，负数的反码是其除符号位之外的所有位按位取反的结果。\n\n#### 附：ASCII码\n\nASCII（American Standard Code for Information Interchange，美国标准信息交流码）码是目前微型计算机中使用最广泛的一种字符编码，用7位二进制数来编码（占一个字节），可表示128个字符，最高位为0或作奇偶校验用。\n\n![](10.jpg)\n\n\n\n\n\n------\n\n## 五、位运算\n\n位运算不仅在初赛中是一个知识点分类，在复赛（即真正的程序设计与运用）的时候也有很大的一个应用。而且，位运算的相关知识是计算机运算的灵魂，更是每个程序猿应该理解的一种基本操作。\n\n\n\n### 1、与(&)运算\n\n#### (1)运算法则\n\n两个二进制数进行与&运算，如果对应位都为1则结果为1，否则为0.\n\n#### (2)技巧及用途\n\n**与运算常常用于二进制下的取位操作。**想要知道二进制下的某位是否是1，就&上这个位数对应的十进制数。假如返回的是这个十进制数本身，则这个位的确是1，反之就是0.\n\n比如：\n\n我们要取第三位是否为1，我们只需要与&上第三位（二进制表示为100）对应的二进制数4，如果返回值为4，就代表第三位为1，反之就是0.\n\n最常用的是取二进制下的最末位，即a&1。这样的技巧可以用于**判断奇偶**，根据二进制常识，尾数为1则为奇数，反之为偶数。\n\n\n\n### 2、或(|)运算\n\n#### (1)运算法则\n\n两个二进制数进行或|运算，如果对应位有一个为1，结果就为1.只有在两个数的对应位置都是0的时候，结果才为0.\n\n#### (2)技巧及用途\n\n**或运算常用于二进制特定位的赋值**。想把哪个位强行变成1，就用这个数|上这个位数对应的二进制数。\n\n还是上面那个例子，我们想让00000的第三位变成1.即十进制变4，我们直接|上4就可以。\n\n当然，不同于&运算，我们很少用|运算进行任意位赋值。通常来讲，我们只使用a|1把a的最后一位强行变成1，其实质意义是**把原数加一**。或者使用a|1-1再把它变为0.这个技巧通常用于**把它变成它最接近的偶数**。\n\n\n\n### 3、异或(^)(xor)运算\n\n#### (1)运算法则\n\n两个二进制数进行异或(^)运算，如果对应位相同，不管是0或者是1，都返回1，反之返回0.\n\n#### (2)技巧及用途\n\n其实没啥用途...\n\n好吧，我介绍一个性质：一个数经过两次异或之后等于原数。\n\n（很好理解）\n\n\n\n### 4、非(~)运算\n\n#### (1)运算法则\n\n把给定二进制数全部取反。\n\n#### (2)技巧及用途\n\n其实没什么运算上的用途，本蒟蒻曾看见一些大佬用这个运算判断输入是否为0...\n\n大约长这个样子：\n\n```c++\nwhile(~scanf(\"%d\",&n))\n```\n\n\n\n### 5、左移(<<)运算\n\n#### (1)运算法则\n\na<<b表示把a的二进制位向左移动b位，低位用0补上。\n\n#### (2)技巧及用途\n\n根据二进制的常识，我们会发现，二进制第k位上的数就等于2k2𝑘。（从0开始计位）\n\n比如，二进制下的100就是2k=2=42𝑘=2=4。\n\n所以我们发现，左移运算a<<b的实质就是a×2b𝑎×2𝑏。\n\n左移运算最常用的技巧就是用来代替×2的整数次幂的乘法运算。因为我们普遍认为，位运算是要比四则运算加减乘除及模运算更快一些的运算。\n\n\n\n### 6、右移(>>)运算\n\n#### (1)运算法则\n\na>>b就是把a的二进制位向右移动b位，溢出的舍去。\n\n#### (2)技巧及用途\n\n类比于左移运算，我们发现右移运算就是把a除以2的整数次幂。这就是右移运算的用途——优化除法运算。\n\n这里需要特殊说明的是，右移算法可以用在数学知识中的求最大公约数的程序块上。因为mod运算的效率慢的出奇，所以我们可以用右移运算来进行除以2的操作。据说可以提高百分之60的效率。\n\n\n\n### 7、位运算优先级\n\n位运算的优先级是我们在处理位运算的时候常常要考虑的问题，诚然，我们可以用括号强制位运算的顺序，但是，我们还是应该学会位运算的优先级（这应该是常识）。\n\n位运算的优先级如下：\n\n**按位反（~）>位移运算（<<,>>）>按位与（&）>按位异或（^）>按位或（|）**\n\n### 附：位运算在状压DP的用法\n\n众所周知，状压DP就是把状态压缩成一个01串（其实就是一个二进制数），用以减少DP数组的维数。但是我们在DP的时候就要按照01串来进行状态的转移。所以位运算是状压DP的基础知识和必备知识。所以我在本篇随笔的末尾还附上了状压DP中比较常用的操作及其二进制实现的方式。\n\n正文：（本文中的a表示十进制下的整数）\n\n**1、获得第i位的数字**：(a>>i)&1 或者 a&(1<<i)\n\n很好理解，我们知道可以用&1来提取最后一位的数，那么我们现在要提取第i位数，就直接把第i位数变成最后一位即可（直接右移）。或者，我们可以直接&上1左移i位，也能达到我们的目的。\n\n**2、设置第i位为1**：a=a|(1<<i)\n\n我们知道强制赋值用|运算，所以就直接强制|上第i位即可。\n\n**3、设置第i位为0**：a=a&(~(1<<i))\n\n这里比较难以理解。其实很简单，我们知道非~运算是按位取反，(1<<i)非一下就变成了第i为是0，其它全是1的二进制串。这样再一与原数进行&运算，原数的第i位无论是什么都会变成0，而其他位不会改变（实在不明白的可以用纸笔进行推演）。\n\n**4、把第i位取反**：a=a^(1<<i)\n\n1左移i位之后再进行异或，我们就会发现，如果原数第i位是0，一异或就变成1，否则变成0。\n\n**5、取出一个数的最后一个1**：a&(-a)\n\n学过树状数组的同学会发现，这就是树状数组的lowbit。事实上，这和树状数组的原理是一样的。我想，不需要我多解释。\n\n为了应对初赛的笔试题，建议读者在阅读完这篇博客之后至少应该掌握：**各种位运算的运算法则以及位运算优先级**。\n\n#### 另外，对于位运算的优先级，本蒟蒻在后面的逻辑运算部分还会有详细的解析。\n\n### 逻辑运算\n\n#### 逻辑运算\n\n逻辑运算一共有三种，每种都有两种写法：\n\n**逻辑非**：！或 ┐\n\n**逻辑与**：&& 或 ∧\n\n**逻辑或**：|| 或 ∨\n\n#### 逻辑运算的优先级\n\n非>>与>>或\n\n#### 位运算+逻辑运算的优先级\n\n**逻辑非（！，┐）=按位反（~）>位移运算（<<,>>）>不等号（>=,<=）>等号（==,!=）>按位与（&）>按位异或（^）>按位或（|）>逻辑与（&&，∧）>逻辑或（||，∨）**\n\n#### 逻辑表达式\n\n由逻辑运算复合而成，只有两种结果：𝑡𝑟𝑢𝑒和𝑓𝑎𝑙𝑠𝑒，在C/C++中，返回的值以0表示假，以1表示真。\n\n#### 条件表达式\n\n条件表达式的基本形式如下：\n\n<表达式1>？<表达式2>：<表达式3>\n\n其表达意义是：如果表达式1成立，则执行表达式2，否则执行表达式3。其实也等价于𝑖𝑓−𝑒𝑙𝑠𝑒条件语句。例如下：\n\n```cpp\n#define Min(a,b) a<b?a:b\n```\n\n**注意：**如果条件表达式有多个进行复合，那么在执行的时候需要从由往左依次判断最后得出一个结果。即：**右结合性**。\n\n比如：\n\n<表达式1>？<表达式2>：<表达式3>？<表达式4>：<表达式5>\n\n那么，在执行的时候是从3开始判断是否为真，然后执行某一个表达式，依次向上回溯。\n\n\n\n\n\n------\n\n## 六、简单数据结构基本理论\n\n### 1、链表\n\n本篇随笔就数据结构——链表进行讲解。链表是一种特别实用的数据结构，我把它理解为**数组的升级版**，也就是在数组的基础上，它能做到在任意位置添加或者删除元素，而不影响其他元素。链表还是我们进行图论学习时，图的常用存储方式——邻接表（链式前向星）的实现基础。学习链表需要读者具有一定的语法基础，最好会一点点指针。（不会也没关系，我们主要讲解数组模拟链表）\n\n#### 什么是链表\n\n链表，顾名思义，就是带链的表。我已经说过，链表属于数组的加强版。那我们可以借助数组来理解链表：如果说数组是一长排连在一起的“方块”的话，那么链表就是把这些方块“拉开“，每个方块还有两个箭头，分别指向这个方块前面的方块和后面的方块。\n\n这样我们就可以理解，为什么链表可以支持随机插入和删除了。从某种意义上来说，这里的每一个方块都是离散的，我们在某两点插入的时候，只需要把要插入的元素，这个元素目标位置前面的元素、后面的元素的箭头改一下，就做到了插入的操作。删除同理。\n\n#### 链表的实现原理\n\n根据刚才的理解，我们可以发现，我们可以用一个结构体来模拟每一个方块，结构体中存一个元素和两个指针，指针分别指向上一个元素的位置和下一个元素的位置。但是蒟蒻不会指针指针的实现比较麻烦，而且在调试的时候也不是很理想。所以我们来想指针的本质就是告诉你一个位置，那么针对于”加强数组“链表来讲，这个位置可以用什么来表示呢？\n\n**对，数组下标。**\n\n所以我们刚才的结构体就可以简化，变成存一个元素和两个int变量（存储数组下标）。这样，我们就可以用结构体数组模拟链表的实现。\n\n\n\n### 2、栈\n\n想象一个桶，你从上面往里扔砖，然后你想把某一块砖拿出来，你需要先拿出来你后扔进去的砖。这就是栈。栈的基本原则是：后进先出\n\n来一发图示？\n\n![](7.png)\n\n#### 浅谈前、中、后缀表达式\n\n前、中、后缀表达式是信息学奥林匹克竞赛中比较鸡肋的知识点。但是知识点在考纲范围内，而且中缀表达式转后缀表达式是比较有用的知识。所以在这里为大家简单介绍一下。\n\n\n#### 前缀表达式（少用）\n\n又称波兰式（Polish Notation），操作符以前缀形式位于两个运算数前（如：3+2的前缀表达形式就是+ 3 2）。\n\n#### 中缀表达式\n\n操作符以中缀形式位于运算数中间（如：3+2），是我们日常通用的算术和逻辑公式表示方法。\n\n例子：\n$$\n6×12+9−14。\n$$\n\n#### 后缀表达式\n\n又称逆波兰式（Reverse Polish Notation - RPN），操作符以后缀形式位于两个运算数后（如：3+2的后缀表达形式就是3 2 +）。\n\n例子：（注意！正常写是没有逗号的，这里方便区分）\n$$\n6 ，12 ，× ，9 ，+ ，14 ，-\n$$\n\n#### 后缀表达式转中缀表达式的实现：\n\n从左至右依次遍历后缀表达式各个字符（需要准备一个运算数栈存储运算数和操作结果）\n\n1、字符为 运算数 ：\n\n直接入栈（注：需要先分析出完整的运算数并将其转换为对应的数据类型）\n\n2、字符为 操作符 ：\n\n连续出栈两次，使用出栈的两个数据进行相应计算，并将计算结果入栈\n\n注意：第一个出栈的运算数为 a ，第二个出栈的运算数为 b ，此时的操作符为 - ，则计算 b-a  （注：a和b顺序不能反），并将结果入栈。\n\n3、重复以上步骤直至遍历完成后缀表达式，最后栈中的数据就是中缀表达式的计算结果。\n\n还拿上面的例子：\n\n$$\n6 ，12 ，× ，9 ，+ ，14 ，-\n$$\n\n上面的式子就可以写成如下的中缀表达式：\n\n$$\n6×12+9−14。\n$$\n\n* 特别注意：针对一个确定的中缀表达式，其所对应的后缀表达式不唯一；而针对一个确定的后缀表达式，其对应的中缀表达式是唯一的。\n\n\n\n### 3、队列\n\n想象你在排队买票，这个队伍中的人都非常有素质，都自觉排队而且不会提前离开队伍。这样就只能从队首买完票再离开，从队尾进入队伍。队列的基本原则是：先进先出。\n\n再来一发图示：\n\n![](8.png)\n\n\n\n### 4、字符串\n\n字符串子串的概念：字符串是一串字符（废话），它的子串被定义为：字符串中**任意个连续的字符组成的子序列**。\n\n字符串子串个数的计算公式：\n$$\n\\frac{n×(n+1)}{2}+1\n$$\n\n（就是字符串长度等差数列）\n\n如果是非空子串，就把那个一减去即可（子串个数的公式加一就是考虑空子串的情况）。\n\n\n\n### 5.树\n\nemmm...直观来讲，就是一张长得像树的图。定义是任意两点之间的简单路径有且只有一条。树是一棵连通且无环的图。它的边数是𝑛−1。\n\n#### 二叉树的遍历\n\n二叉树有不同的遍历方式，一般来讲，我们将其分成三类：先序遍历（也叫先根遍历）、中序遍历（中根遍历）以及后序遍历（后根遍历）。\n\n- **先序遍历**：遍历方式如下：根—左儿子—右儿子\n- **中序遍历**：遍历方式如下：左儿子—根—右儿子\n- **后序遍历**：遍历方式如下：左儿子—右儿子—根\n\n我们用一张图来理解一下这几种遍历方式。\n\n![](4.png)\n\n这张图的先序遍历：1245367\n\n中序遍历：4251637\n\n后序遍历：4526731\n\n- **一个推论**：\n\n  先序遍历+中序遍历=一棵确定的二叉树\n\n  后序遍历+中序遍历=一棵确定的二叉树\n\n  先序遍历+后序遍历=啥也不是\n\n#### 特殊二叉树及其性质\n\n- **完全二叉树**：只有最后一层不是满的，且最后一层的所有节点均集中在左侧。\n\n图例如下：\n\n![](5.png)\n\n- **满二叉树**：节点个数已满。\n\n图例如下：\n\n![](6.png)\n\n- **特殊二叉树的性质**：\n\n1、对于一棵完全二叉树来讲，它的叶子节点为 $𝑛$，则节点总数为 $2×𝑛−1$。此结论可逆。\n\n2、对于一棵满二叉树来讲，它的层数（深度）为 $𝑘$，则它的节点总数为 $2×𝑘−1$。此结论可逆。\n\n#### 拓扑排序（这个先不讲）\n\n\n\n### 6.图论\n\n\n图（Graph）是图论中的一个重要概念，用于描述由节点（顶点）和连接这些节点的边（或弧）组成的非线性数据结构。\n\n\n#### 图的基本概念：\n\n- 顶点（Vertex）：图中的基本单位，通常用于表示实体或节点。\n\n\n- 边（Edge）：连接图中两个顶点的关系。边可以是有向的（有方向性，称为弧）或无向的（无方向性）。\n\n\n- 路径（Path）：顶点序列，其中每两个相邻的顶点通过一条边连接。\n\n\n- 环（Cycle）：路径中第一个顶点等于最后一个顶点的路径。\n\n\n- **连通图**：顾名思义，连通图就是连通的图，即任意两点都能**直接或间接**到达，这就区别于完全图必须直接用边到达的定义。\n  \n- **完全图**：任意两点都有边相连，我们很容易推出来，一张完全图的边数为（𝑛为节点个数）\n\n$$\n\\frac{n×(n−1)}{2}\n$$\n\n\n- 无向图（Undirected Graph）：所有边没有方向的图。\n\n\n- 有向图（Directed Graph）：图中的边有方向性的图。\n\n- 权重（Weight）：边或弧上关联的数值，通常用于表示边的成本或距离。\n\n  \n\n#### 图的邻接矩阵存储：\n邻接矩阵是用二维数组表示图的一种常见方法，其中数组元素表示顶点之间的连接关系。\n\n定义：对于一个有n个顶点的图，邻接矩阵是一个n x n的矩阵，其中元素 a[i][j] 表示顶点 i 和顶点 j 之间是否有边或弧。如果是无向图，通常用1表示连接，0表示没有连接；如果是有向图，可以用1表示有边，0表示没有边，或者用权值表示边的权重。\n\n优点：\n* 简单直观，易于理解和实现。\n* 方便查找任意两个顶点之间是否有边。\n\n缺点：\n* 浪费空间：对于稀疏图（边数量远少于顶点数量），大部分矩阵元素为0，造成空间浪费。\n* 不适合大规模图：当顶点数量非常大时，邻接矩阵的空间消耗会很大。\n\n#### 图的邻接表存储：\n邻接表是用链表或者类似的数据结构表示图的另一种常见方法，适合表示稀疏图。\n\n定义：使用数组和链表的结合来表示图。数组的每个元素对应一个顶点，每个元素存储与该顶点相邻的所有顶点（即与其有边直接连接的顶点）的链表或者列表。\n\n优点：\n* 省空间：对于稀疏图，只存储存在的边，节省了空间。\n* 插入和删除效率高：对于边的插入和删除操作，相较于邻接矩阵更加高效。\n\n缺点：\n* 不便于查找任意两个顶点之间的关系：需要遍历链表来确定两个顶点是否相连，效率低于邻接矩阵。\n\n* 需要额外空间来存储链表或列表。\n\n  \n\n#### 在实际应用中，选择邻接矩阵还是邻接表取决于图的稀疏程度和需要的操作类型。稠密图适合用邻接矩阵表示，而稀疏图通常用邻接表表示。\n\n\n\n\n\n------\n\n## 七、时空复杂度的计算\n\n- **时间复杂度**：渐进时间复杂度用符号 $𝑂$  表示。一个程序的语句执行次数可以用一个代数式表示，那么我们取这个代数式的最高次项且忽略此项系数作为时间复杂度。如果一个程序的语句执行次数为 $2𝑛^3+3𝑛^2+𝑛+7$，那么这个程序的渐进时间复杂度为 $𝑂(𝑛^3)$ 。\n- **计算非递归程序的时间复杂度**：简单粗暴，数循环。\n- **常数**：常数即为我们忽略掉的𝑂中最高次项的系数与低次项所带来的时间消耗。\n- **空间复杂度**：类比时间复杂度。看开空间开了多大。\n- **计算空间占用量**：根据我们以上说过的计算机存储单位的知识：一个𝑖𝑛𝑡占用的内存是4𝐵，所以我们把开的𝑖𝑛𝑡乘上4，再除以1024就是𝐾𝐵，同理，再除1024就是𝑀𝐵。\n\n公式：𝑛为元素个数，𝑀为最终答案（以𝑀𝐵为单位）\n\n$$\nM=\\frac{4𝑛}{1024×1024}\n$$\n$PS:一般来讲，比赛中所给的 256𝑀𝐵 内存可以开 6×10^7 个 𝑖𝑛𝑡 类型的变量。另外，大数组必须开全局变量。如果扔在主函数里极容易爆栈。$\n\n\n\n\n\n------\n\n## 八、数学、逻辑学及运筹学知识\n\n\n  ### 1、排列和组合的定义\n\n  #### (1)排列的定义\n\n  从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素按照一定顺序排成一列，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个排列。\n\n  #### (2)排列数的定义\n\n  从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有排列的个数，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的排列数。\n\n  #### (3)全排列的定义\n\n  当 $𝑛=𝑚$ 时所有的排列情况叫做**全排列**。\n\n  #### (4)组合的定义\n\n  从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素并成一组，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个组合。\n\n  #### (5)组合数的定义\n\n  从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有组合的个数，叫做从 $𝑛$ 个不同元素中取出 $m$ 个元素的组合数。\n\n  #### (6)排列&组合的区别\n\n  通俗地说，组合不分顺序，而排列分顺序，也就是说，对于数列 $1，2$ ，有以下两种排列：$1，2$ 和 $2，1$ ，但是仅有一种组合 $1，2$ 或 $2，1$ 。\n\n  ### 2、排列&组合的公式\n\n  #### (1)关于排列的公式\n\n  从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的排列数，数学表示为：$𝐴_{𝑛}^𝑚$.\n\n  计算公式如下：\n\n\n$$\n𝐴_{𝑛}^𝑚=𝑛(𝑛−1)(𝑛−2)⋯(𝑛−𝑚+1)=\\frac{𝑛!}{(𝑛−𝑚)!}\n$$\n\n  #### (2)关于组合的公式\n\n  从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的组合数，数学表示为：$𝐶_{𝑛}^𝑚$.\n\n  计算公式如下：\n\n$$\n𝐶_{𝑛}^𝑚=\\frac{𝐴_{𝑛}^𝑚}{𝑚!}=\\frac{𝑛!}{𝑚!(𝑛−𝑚)!}\n$$\n\n  #### (3)关于全排列的公式\n\n  某个数列的全排列数 $𝑓(𝑛)$，计算公式如下：\n\n$$\n𝑓(𝑛)=𝑛!\n$$\n\n\n  ### 3、全排列的求法\n\n  例题：生成全排列（深搜基础题）\n\n  [题目链接](https://neooj.com/oldoj/problem.php?id=1742)\n\n  给定 $𝑛$ ,生成 $1−𝑛$ 的全排列。\n\n  我们考虑用递归来解决全排列问题：\n\n  递归出口是当 $x==n+1$ 地时候，绝对不能仅仅等于 $n！$ \n\n  我们的递归部分使用标记数组和数列数组实现，具体实现方法可以参照下图：\n  ![](9.jpg)\n\n---\n\n\n\n\n\n## 九、算法\n\n### 1.算法的基本概念\n\n算法的特征：有穷性，确切性，至少一个输出，可行性\n\n表示方法：自然语言法，程序流程图法（顺序结构，选择结构，循环结构），程序法\n\n\n\n### 2.排序\n- $选择排序：对待排序的记录序列进行n-1遍的处理。第一遍处理是将L[1..n]中最小者与L[1]交换位置，第二遍处理是将L[2..n]中最小者与L[2]交换位置，以此类推，时间复杂度为O(n^{2}) )。选择排序是稳定排序。$\n- $插入排序：经过i-1遍处理后，L[1..i-1]已排好序。第i遍处理仅将L[i]插入L[1..i-1]的适当位置p，原来p后的元素一一向右移动一个位置，使得L[1..i]又是排好序的序列，时间复杂度为O(n^2 )。插入排序是稳定排序。$\n- $冒泡排序：又称交换排序。对待排序的记录的关键字进行两两比较，如果发现是反序的，则进行交换，时间复杂度为O( n^2 )。冒泡排序是稳定排序。$\n- $希尔排序：先将待排序列进行预排序，使待排序列接近有序，然后再对该序列进行一次插入排序，此时插入排序的时间复杂度为O(n)，$\n- $快速排序：先从数据序列中选一个元素，并将序列中所有比该元素小的元素都放在它的一边，再对左右两边分别用同样的方法处理，直到每一个待处理的序列长度为1，处理结束。时间复杂度下限为O(nlogn)，上限为O( n^2 )。快速排序是不稳定排序，基于分治思想。$\n- $归并排序：归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。时间复杂度为O(nlogn)$\n\n![](11.png)\n\n![](12.png)\n\n### 考试用到的其他基础算法板子将在我另外一篇博客里。\n\n---\n\n\n\n\n\n## 十、程序阅读\n\n### 阅读程序及完善程序题答题方法\n\n### （1）阅读程序和完善程序两个大题在CSP考试当中占据70分，也就是一多半。所以，前面的选择题全对也只能得个30分。这种题不要求必须全对，但是想进入普及组复赛，必须保证拿到70%~80%（约合49~56分）的分值\n\n### （2）题型：\n\n ① 阅读程序先给一个完整的程序，再给2~3个判断题和1~2个选择题，类似于阅读理解。除特殊说明外，判断题一个1.5分，选择题一个3分。\n ②完善程序先给一个有残缺部分的程序，再把合适的代码依次填入空中，均为选择题（一个题3分）。类似于完形填空\n\n### （3）答题技巧\n\n① 拿到卷子不用先看代码，先看题，在根据题干有目的地阅读代码的相应片段\n② 不要一上来就先看第一题，第一题不会就死磕。先找突破口，就是那种非常好填的空，先填上后再加分析，推出其他题的答案。有的代码前后有关联，可以根据前后联系推出答案\n③ 碰到特别长的程序千万不要惊慌。出一条长代码可能有这几点原因：1.这个程序所涉及的算法确实需要很长的代码；2.故意的，写一个特别长的代码纯粹就是一个考验，看看哪些人遇到这样的题不会慌张。也就是，有的长代码就是个纸老虎，静下心好好分析，不难。\n④ 这种题也要看平时的积累以及扎实程度。多背一些算法的模板代码及例题，这种题拿五十多分也并非难事\n\n---\n\n","slug":"csp-j1知识点","published":1,"updated":"2024-06-20T12:28:38.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvo8000phwtvavj847pf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1>CSP-J 第一轮知识点总结</h1>\n<hr>\n<h2 id=\"题目类型整理\">* 题目类型整理</h2>\n<table>\n<thead>\n<tr>\n<th><strong>题型</strong></th>\n<th><strong>知识点类型</strong></th>\n<th><strong>题目</strong>数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单选</td>\n<td>信息学史&amp;基本知识</td>\n<td>8-10</td>\n</tr>\n<tr>\n<td>单选</td>\n<td>C++语法知识点</td>\n<td>2-3</td>\n</tr>\n<tr>\n<td>单选</td>\n<td>数据结构&amp;算法</td>\n<td>3-4</td>\n</tr>\n<tr>\n<td>单选</td>\n<td>数学&amp;逻辑学&amp;运筹学</td>\n<td>3-4</td>\n</tr>\n<tr>\n<td>单选</td>\n<td>比赛相关知识</td>\n<td>1-2</td>\n</tr>\n<tr>\n<td>问题求解</td>\n<td>数学</td>\n<td>1</td>\n</tr>\n<tr>\n<td>问题求解</td>\n<td>数据结构</td>\n<td>1</td>\n</tr>\n<tr>\n<td>模拟程序运行</td>\n<td>C++语法&amp;算法</td>\n<td>4</td>\n</tr>\n<tr>\n<td>完善程序</td>\n<td>C++语法&amp;算法</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"一、信息学及计算机史\">一、信息学及计算机史</h2>\n<ul>\n<li><strong>计算机的顶级奖项</strong>：图灵奖、冯·诺依曼奖</li>\n</ul>\n<p>图灵奖：由ACM（美国计算机协会）设立于1966年。是“计算机界的诺贝尔奖”。</p>\n<p>冯·诺依曼奖：由IEEE设立。</p>\n<ul>\n<li><strong>对信息科学做出突出贡献的大神</strong>：图灵（所以才有个奖），冯 · 诺伊曼</li>\n<li><strong>中国获图灵奖的大神</strong>：姚期智（清华就有姚班，就是以他的名字命名的）</li>\n<li><strong>世界第一台电子计算机</strong>：埃尼阿克（𝐸𝑁𝐼𝐴𝐶），于1946年2月14日在美国宾夕法尼亚大学诞生。又被叫做电子管计算机。</li>\n</ul>\n<hr>\n<h2 id=\"二、关于编程\">二、关于编程</h2>\n<ul>\n<li><strong>编程语言</strong>：</li>\n</ul>\n<p>分两类：面向对象和面向过程。</p>\n<ul>\n<li><strong>高级语言和低级语言的区别</strong>：</li>\n</ul>\n<p>高级语言需要编译运行，常数较大，运行速度慢。而低级语言常数极小，运行速度快。此外，高级语言更容易移植。</p>\n<ul>\n<li><strong>常见低级语言</strong>：</li>\n</ul>\n<p>汇编</p>\n<ul>\n<li><strong>面向对象的高级语言</strong>：</li>\n</ul>\n<p>C++，Java，EIFFEL，Simula 67等。</p>\n<ul>\n<li><strong>面向过程的高级语言</strong>：</li>\n</ul>\n<p>C，Fortran语言。</p>\n<ul>\n<li><strong>递归编程</strong>：</li>\n</ul>\n<p>递归是指一种通过重复将问题分解为同类的子问题而解决问题的方法。递归式方法可以被用于解决很多的计算机科学问题。简单来讲，就是“自身调用自身”（在函数中）。</p>\n<ul>\n<li><strong>P类/NP类/NPC类问题</strong>：</li>\n</ul>\n<p>1、P类问题：如果一个问题能找到一个在多项式时间内解决它的算法，那么这个问题就是P问题。</p>\n<p>2、NP类问题：注意：NP问题<strong>不是非P类问题</strong>，而是在多项式时间内验证一个解的问题。或者，我们可以将其理解为在多项式时间内猜出一个解的问题。</p>\n<p>3、NPC类问题：定义如下：如果一个问题是NP问题，而且所有的NP问题都可以约化到它。那么它就是NPC类问题。再来介绍一下关于约化的定义：如果一个问题A可以约化为问题B，含义就是这个问题A可以用问题B的解法来解决。</p>\n<h3 id=\"NOIP-CSP等的历史、大事件、参赛要求（每年都考）\">*NOIP / CSP等的历史、大事件、参赛要求（每年都考）</h3>\n<ul>\n<li>\n<p>NOI：中国计算机学会于1984年（当年，*提出计算机要从娃娃抓起）创办全国青少年计算机程序设计竞赛，即全国青少年信息学奥林匹克竞赛，是国内包括港澳在内的省级代表队最高水平的大赛。</p>\n</li>\n<li>\n<p>NOIP：中国计算机学会于1995年创办全国青少年信息学奥林匹克联赛。NOIP在同一时间、不同地点以各省市为单位由特派员组织。全国统一大纲、统一试卷，初、高中或其他中等专业学校的学生可报名参加。联赛分初赛和复赛，初赛考察通用和实用的计算机科学知识，以笔试为主。复赛为程序设计，须在计算机上调试完成。参加初赛者须达到一定分数线后才有资格参加复赛。联赛分普及组和提高组两个组别，难度不同，分别面向初中和高中阶段的学生。</p>\n</li>\n<li>\n<p>从2005年开始，NOIP不再支持Basic；从2022年开始，不再支持Pascal。</p>\n</li>\n<li>\n<p>选手进入考场时，只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，NOI各省特派员可直接取消违规选手的参赛资格。</p>\n</li>\n<li>\n<p>CCSP：大学生计算机系统与程序设计竞赛，由中国计算机学会(CCF)于2016年发起的一个面向大学生的竞赛，每年举办一次，考察的是算法、编程以及计算机系统设计能力，旨在进一步提高计算机教育质量，使学生通过竞赛进一步学习和掌握计算机系统知识，同时对高校计算机教育产生引领作用。</p>\n</li>\n<li>\n<p>CSP：中国计算机学会于2014年推出CCF计算机软件能力认证，该项认证重点考察软件开发者实际编程能力，由中国计算机学会统一命题、统一评测，委托各地设立的考试机构进行认证考试。该项认证每年大约3、9、12月各举办一次。认证者不限年龄，不限学历，不限报考次数，不限国籍 ，在报名官网注册账户后均可报名参加认证。语言：C/C++(Dev-CPP 5.4.0 (Min GW 4.7.2))，Java(Eclipse (Java SDK 1.7.0_15))，Python(3.6.5) 浏览器：Chrome</p>\n<blockquote>\n<p>CSP认证考试可以带纸质资料进入考场，不过只能是常用语言的程序设计基础书、数据结构的相关书籍。不允许U盘、手机等电子设备进入考场。</p>\n<p>CSP-S/J：认证开始15分钟后，认证者不能再进入认证点。如有认证者提前离开认证点，除身体特别原因外，须在认证进行2小时后方可准予离开。在第一轮认证期间，任何人不得将试卷携带出考场。认证者进入考场时，监考检查认证者携带物品。认证者只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，CSP-J/S认证总负责人可直接取消违规认证者的参加资格。</p>\n</blockquote>\n<p>CSP-S/J：认证开始15分钟后，认证者不能再进入认证点。如有认证者提前离开认证点，除身体特别原因外，须在认证进行2小时后方可准予离开。在第一轮认证期间，任何人不得将试卷携带出考场。认证者进入考场时，监考检查认证者携带物品。认证者只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，CSP-J/S认证总负责人可直接取消违规认证者的参加资格。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"三、关于计算机\">三、关于计算机</h2>\n<p>先上张大图：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/1.png\" alt></p>\n<ul>\n<li>\n<p><strong>重要设备</strong>：</p>\n<p>硬件组成：</p>\n<ol>\n<li>控制器(Control):是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。</li>\n<li>运算器(Datapath):运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。</li>\n<li>存储器(Memory):存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。</li>\n<li>输入设备(Input system):输入设备是计算机的重要组成部分，输入设备与输出设备合称为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。</li>\n<li>输出设备(Output system):输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。</li>\n</ol>\n</li>\n<li>\n<p><strong>CPU及存储</strong>：</p>\n</li>\n</ul>\n<p>CPU（中央处理器）=运算器+控制器+寄存器</p>\n<p>运算器=算术逻辑运算单元（ALU）及浮点运算单元（FPU）</p>\n<p>存储器=内存储器+外存储器</p>\n<p>BIOS是英文&quot;Basic Input Output System&quot;的缩略语，直译过来后中文名称就是&quot;基本输入输出系统&quot;。其实，它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、系统设置信息、开机后自检程序和系统自启动程序。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。</p>\n<p>随机存储器RAM的“随机”指“随时访问”</p>\n<p>所以，我们记下来以下知识点：</p>\n<p><strong>断电后可以保存数据：硬盘，ROM</strong></p>\n<p><strong>断电后不可以保存数据：显存（显卡内存），RAM，CPU</strong></p>\n<ul>\n<li><strong>计算机各存储单位及进位关系</strong>：</li>\n</ul>\n<p>计算机的存储单位有以下几种：<br>\n$$<br>\n𝑇𝐵/𝐺𝐵/𝑀𝐵/𝐾𝐵/𝐵<br>\n$$<br>\n他们之间的进位关系为 $1024$</p>\n<p>特殊地，$1B=8(bit)$ ，这里的 $𝑏𝑖𝑡$ 是二进制下的一位内存。</p>\n<h3 id=\"机内代码及其运算\">* 机内代码及其运算</h3>\n<p>原码：设X，若为非负数，则符号位为0，其余各位取值不变，否则符号位为1。如：</p>\n<p>X=+1110001，则[X]原=01110001；X=-1110001，则[X]原=11110001。</p>\n<p>反码：设X，若为非负数，则与原码相同，否则符号位为1，其余各位取值求反。如：</p>\n<p>X=+1110001，则[X]反=01110001；X=-1110001，则[X]反=10001110。</p>\n<p>补码：设X，若为非负数，则与原码相同，若为负数，则为反码加1。如：</p>\n<p>X=+1110001，则[X]补=01110001；X=-1110001，则[X]补=10001111。</p>\n<p>负补：对补码（包括符号位）的每一位求反，且最低位加1。如：</p>\n<p>X=+1110001，[-X]补=10001111。</p>\n<p>[X+Y]补=[X]补+[Y]补，[X-Y]补=[X]补-[Y]补=[X]补+[-Y]补（最高位产生的进位要丢掉）</p>\n<hr>\n<h2 id=\"四、进制及进制转化\">四、进制及进制转化</h2>\n<h4 id=\"十进制转任意进制\">十进制转任意进制</h4>\n<p>将十进制转换成N𝑁进制，只需把十进制数每次除N𝑁求余数，然后把余数逆序写出来。</p>\n<p>看不懂就看图：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/2.png\" alt></p>\n<p>这是二进制的图，其他进制就类比推一下就可以了。如果这个看不懂的话就不要参加初赛了，50块钱买点啥不好…</p>\n<h4 id=\"任意进制转十进制\">任意进制转十进制</h4>\n<p>简单说就是：按位转，第i𝑖位的数字乘以要转换的进制的𝑛−1次幂即可。</p>\n<p>还是上图：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/3.png\" alt></p>\n<h4 id=\"任意进制互相转化\">任意进制互相转化</h4>\n<p>这里考虑用十进制做中转，先把A𝐴进制转十进制，再把十进制转B𝐵进制。</p>\n<h4 id=\"关于小数的进制转换\">关于小数的进制转换</h4>\n<p>十进制转任意进制的小数不进行除法运算，而进行乘法运算后取整，取整后从前向后排列。</p>\n<p>任意进制转十进制的小数只需要乘上负指数，最后算出来即可。</p>\n<h4 id=\"各进制的字母表达\">各进制的字母表达</h4>\n<p>$𝐻(𝐻𝑒𝑥𝑎𝑑𝑒𝑐𝑖𝑚𝑎𝑙)——16进制$</p>\n<p>$𝐷(𝐷𝑒𝑐𝑖𝑚𝑎𝑙)——10进制$</p>\n<p>$𝑂(𝑂𝑐𝑡𝑜𝑛𝑎𝑟𝑦)——8进制$</p>\n<p>$𝐵(𝐵𝑖𝑛𝑎𝑟𝑦)——2进制$</p>\n<h4 id=\"二进制的相关知识\">二进制的相关知识</h4>\n<p>二进制是计算机进行计算所使用的工具，自然也是非常常考的要点。二进制的相关知识有许多，甚至算法中的位运算也是二进制的相关内容，但为了过第一轮初赛，我们只介绍一些理论知识。关于位运算的相关知识请有兴趣的同学自己学习。</p>\n<ul>\n<li><strong>1、原码</strong></li>\n</ul>\n<p>顾名思义，原码就是十进制数直接转换成二进制之后直接形成的二进制编码。</p>\n<ul>\n<li><strong>2、补码</strong></li>\n</ul>\n<p>正数的补码是本身，负数的补码是其<strong>反码加一</strong>。</p>\n<ul>\n<li><strong>3、反码</strong></li>\n</ul>\n<p>顾名思义：正数的反码是本身，负数的反码是其除符号位之外的所有位按位取反的结果。</p>\n<h4 id=\"附：ASCII码\">附：ASCII码</h4>\n<p>ASCII（American Standard Code for Information Interchange，美国标准信息交流码）码是目前微型计算机中使用最广泛的一种字符编码，用7位二进制数来编码（占一个字节），可表示128个字符，最高位为0或作奇偶校验用。</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/10.jpg\" alt></p>\n<hr>\n<h2 id=\"五、位运算\">五、位运算</h2>\n<p>位运算不仅在初赛中是一个知识点分类，在复赛（即真正的程序设计与运用）的时候也有很大的一个应用。而且，位运算的相关知识是计算机运算的灵魂，更是每个程序猿应该理解的一种基本操作。</p>\n<h3 id=\"1、与-运算\">1、与(&amp;)运算</h3>\n<h4 id=\"1-运算法则\">(1)运算法则</h4>\n<p>两个二进制数进行与&amp;运算，如果对应位都为1则结果为1，否则为0.</p>\n<h4 id=\"2-技巧及用途\">(2)技巧及用途</h4>\n<p>**与运算常常用于二进制下的取位操作。**想要知道二进制下的某位是否是1，就&amp;上这个位数对应的十进制数。假如返回的是这个十进制数本身，则这个位的确是1，反之就是0.</p>\n<p>比如：</p>\n<p>我们要取第三位是否为1，我们只需要与&amp;上第三位（二进制表示为100）对应的二进制数4，如果返回值为4，就代表第三位为1，反之就是0.</p>\n<p>最常用的是取二进制下的最末位，即a&amp;1。这样的技巧可以用于<strong>判断奇偶</strong>，根据二进制常识，尾数为1则为奇数，反之为偶数。</p>\n<h3 id=\"2、或-运算\">2、或(|)运算</h3>\n<h4 id=\"1-运算法则-2\">(1)运算法则</h4>\n<p>两个二进制数进行或|运算，如果对应位有一个为1，结果就为1.只有在两个数的对应位置都是0的时候，结果才为0.</p>\n<h4 id=\"2-技巧及用途-2\">(2)技巧及用途</h4>\n<p><strong>或运算常用于二进制特定位的赋值</strong>。想把哪个位强行变成1，就用这个数|上这个位数对应的二进制数。</p>\n<p>还是上面那个例子，我们想让00000的第三位变成1.即十进制变4，我们直接|上4就可以。</p>\n<p>当然，不同于&amp;运算，我们很少用|运算进行任意位赋值。通常来讲，我们只使用a|1把a的最后一位强行变成1，其实质意义是<strong>把原数加一</strong>。或者使用a|1-1再把它变为0.这个技巧通常用于<strong>把它变成它最接近的偶数</strong>。</p>\n<h3 id=\"3、异或-xor-运算\">3、异或(^)(xor)运算</h3>\n<h4 id=\"1-运算法则-3\">(1)运算法则</h4>\n<p>两个二进制数进行异或(^)运算，如果对应位相同，不管是0或者是1，都返回1，反之返回0.</p>\n<h4 id=\"2-技巧及用途-3\">(2)技巧及用途</h4>\n<p>其实没啥用途…</p>\n<p>好吧，我介绍一个性质：一个数经过两次异或之后等于原数。</p>\n<p>（很好理解）</p>\n<h3 id=\"4、非-运算\">4、非(~)运算</h3>\n<h4 id=\"1-运算法则-4\">(1)运算法则</h4>\n<p>把给定二进制数全部取反。</p>\n<h4 id=\"2-技巧及用途-4\">(2)技巧及用途</h4>\n<p>其实没什么运算上的用途，本蒟蒻曾看见一些大佬用这个运算判断输入是否为0…</p>\n<p>大约长这个样子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n))</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、左移-运算\">5、左移(&lt;&lt;)运算</h3>\n<h4 id=\"1-运算法则-5\">(1)运算法则</h4>\n<p>a&lt;&lt;b表示把a的二进制位向左移动b位，低位用0补上。</p>\n<h4 id=\"2-技巧及用途-5\">(2)技巧及用途</h4>\n<p>根据二进制的常识，我们会发现，二进制第k位上的数就等于2k2𝑘。（从0开始计位）</p>\n<p>比如，二进制下的100就是2k=2=42𝑘=2=4。</p>\n<p>所以我们发现，左移运算a&lt;&lt;b的实质就是a×2b𝑎×2𝑏。</p>\n<p>左移运算最常用的技巧就是用来代替×2的整数次幂的乘法运算。因为我们普遍认为，位运算是要比四则运算加减乘除及模运算更快一些的运算。</p>\n<h3 id=\"6、右移-运算\">6、右移(&gt;&gt;)运算</h3>\n<h4 id=\"1-运算法则-6\">(1)运算法则</h4>\n<p>a&gt;&gt;b就是把a的二进制位向右移动b位，溢出的舍去。</p>\n<h4 id=\"2-技巧及用途-6\">(2)技巧及用途</h4>\n<p>类比于左移运算，我们发现右移运算就是把a除以2的整数次幂。这就是右移运算的用途——优化除法运算。</p>\n<p>这里需要特殊说明的是，右移算法可以用在数学知识中的求最大公约数的程序块上。因为mod运算的效率慢的出奇，所以我们可以用右移运算来进行除以2的操作。据说可以提高百分之60的效率。</p>\n<h3 id=\"7、位运算优先级\">7、位运算优先级</h3>\n<p>位运算的优先级是我们在处理位运算的时候常常要考虑的问题，诚然，我们可以用括号强制位运算的顺序，但是，我们还是应该学会位运算的优先级（这应该是常识）。</p>\n<p>位运算的优先级如下：</p>\n<p><strong>按位反（~）&gt;位移运算（&lt;&lt;,&gt;&gt;）&gt;按位与（&amp;）&gt;按位异或（^）&gt;按位或（|）</strong></p>\n<h3 id=\"附：位运算在状压DP的用法\">附：位运算在状压DP的用法</h3>\n<p>众所周知，状压DP就是把状态压缩成一个01串（其实就是一个二进制数），用以减少DP数组的维数。但是我们在DP的时候就要按照01串来进行状态的转移。所以位运算是状压DP的基础知识和必备知识。所以我在本篇随笔的末尾还附上了状压DP中比较常用的操作及其二进制实现的方式。</p>\n<p>正文：（本文中的a表示十进制下的整数）</p>\n<p><strong>1、获得第i位的数字</strong>：(a&gt;&gt;i)&amp;1 或者 a&amp;(1&lt;&lt;i)</p>\n<p>很好理解，我们知道可以用&amp;1来提取最后一位的数，那么我们现在要提取第i位数，就直接把第i位数变成最后一位即可（直接右移）。或者，我们可以直接&amp;上1左移i位，也能达到我们的目的。</p>\n<p><strong>2、设置第i位为1</strong>：a=a|(1&lt;&lt;i)</p>\n<p>我们知道强制赋值用|运算，所以就直接强制|上第i位即可。</p>\n<p><strong>3、设置第i位为0</strong>：a=a&amp;(~(1&lt;&lt;i))</p>\n<p>这里比较难以理解。其实很简单，我们知道非~运算是按位取反，(1&lt;&lt;i)非一下就变成了第i为是0，其它全是1的二进制串。这样再一与原数进行&amp;运算，原数的第i位无论是什么都会变成0，而其他位不会改变（实在不明白的可以用纸笔进行推演）。</p>\n<p><strong>4、把第i位取反</strong>：a=a^(1&lt;&lt;i)</p>\n<p>1左移i位之后再进行异或，我们就会发现，如果原数第i位是0，一异或就变成1，否则变成0。</p>\n<p><strong>5、取出一个数的最后一个1</strong>：a&amp;(-a)</p>\n<p>学过树状数组的同学会发现，这就是树状数组的lowbit。事实上，这和树状数组的原理是一样的。我想，不需要我多解释。</p>\n<p>为了应对初赛的笔试题，建议读者在阅读完这篇博客之后至少应该掌握：<strong>各种位运算的运算法则以及位运算优先级</strong>。</p>\n<h4 id=\"另外，对于位运算的优先级，本蒟蒻在后面的逻辑运算部分还会有详细的解析。\">另外，对于位运算的优先级，本蒟蒻在后面的逻辑运算部分还会有详细的解析。</h4>\n<h3 id=\"逻辑运算\">逻辑运算</h3>\n<h4 id=\"逻辑运算-2\">逻辑运算</h4>\n<p>逻辑运算一共有三种，每种都有两种写法：</p>\n<p><strong>逻辑非</strong>：！或 ┐</p>\n<p><strong>逻辑与</strong>：&amp;&amp; 或 ∧</p>\n<p><strong>逻辑或</strong>：|| 或 ∨</p>\n<h4 id=\"逻辑运算的优先级\">逻辑运算的优先级</h4>\n<p>非&gt;&gt;与&gt;&gt;或</p>\n<h4 id=\"位运算-逻辑运算的优先级\">位运算+逻辑运算的优先级</h4>\n<p><strong>逻辑非（！，┐）=按位反（~）&gt;位移运算（&lt;&lt;,&gt;&gt;）&gt;不等号（&gt;=,&lt;=）&gt;等号（==,!=）&gt;按位与（&amp;）&gt;按位异或（^）&gt;按位或（|）&gt;逻辑与（&amp;&amp;，∧）&gt;逻辑或（||，∨）</strong></p>\n<h4 id=\"逻辑表达式\">逻辑表达式</h4>\n<p>由逻辑运算复合而成，只有两种结果：𝑡𝑟𝑢𝑒和𝑓𝑎𝑙𝑠𝑒，在C/C++中，返回的值以0表示假，以1表示真。</p>\n<h4 id=\"条件表达式\">条件表达式</h4>\n<p>条件表达式的基本形式如下：</p>\n<p>&lt;表达式1&gt;？&lt;表达式2&gt;：&lt;表达式3&gt;</p>\n<p>其表达意义是：如果表达式1成立，则执行表达式2，否则执行表达式3。其实也等价于𝑖𝑓−𝑒𝑙𝑠𝑒条件语句。例如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Min(a,b) a&lt;b?a:b</span></span><br></pre></td></tr></table></figure>\n<p>**注意：**如果条件表达式有多个进行复合，那么在执行的时候需要从由往左依次判断最后得出一个结果。即：<strong>右结合性</strong>。</p>\n<p>比如：</p>\n<p>&lt;表达式1&gt;？&lt;表达式2&gt;：&lt;表达式3&gt;？&lt;表达式4&gt;：&lt;表达式5&gt;</p>\n<p>那么，在执行的时候是从3开始判断是否为真，然后执行某一个表达式，依次向上回溯。</p>\n<hr>\n<h2 id=\"六、简单数据结构基本理论\">六、简单数据结构基本理论</h2>\n<h3 id=\"1、链表\">1、链表</h3>\n<p>本篇随笔就数据结构——链表进行讲解。链表是一种特别实用的数据结构，我把它理解为<strong>数组的升级版</strong>，也就是在数组的基础上，它能做到在任意位置添加或者删除元素，而不影响其他元素。链表还是我们进行图论学习时，图的常用存储方式——邻接表（链式前向星）的实现基础。学习链表需要读者具有一定的语法基础，最好会一点点指针。（不会也没关系，我们主要讲解数组模拟链表）</p>\n<h4 id=\"什么是链表\">什么是链表</h4>\n<p>链表，顾名思义，就是带链的表。我已经说过，链表属于数组的加强版。那我们可以借助数组来理解链表：如果说数组是一长排连在一起的“方块”的话，那么链表就是把这些方块“拉开“，每个方块还有两个箭头，分别指向这个方块前面的方块和后面的方块。</p>\n<p>这样我们就可以理解，为什么链表可以支持随机插入和删除了。从某种意义上来说，这里的每一个方块都是离散的，我们在某两点插入的时候，只需要把要插入的元素，这个元素目标位置前面的元素、后面的元素的箭头改一下，就做到了插入的操作。删除同理。</p>\n<h4 id=\"链表的实现原理\">链表的实现原理</h4>\n<p>根据刚才的理解，我们可以发现，我们可以用一个结构体来模拟每一个方块，结构体中存一个元素和两个指针，指针分别指向上一个元素的位置和下一个元素的位置。但是蒟蒻不会指针指针的实现比较麻烦，而且在调试的时候也不是很理想。所以我们来想指针的本质就是告诉你一个位置，那么针对于”加强数组“链表来讲，这个位置可以用什么来表示呢？</p>\n<p><strong>对，数组下标。</strong></p>\n<p>所以我们刚才的结构体就可以简化，变成存一个元素和两个int变量（存储数组下标）。这样，我们就可以用结构体数组模拟链表的实现。</p>\n<h3 id=\"2、栈\">2、栈</h3>\n<p>想象一个桶，你从上面往里扔砖，然后你想把某一块砖拿出来，你需要先拿出来你后扔进去的砖。这就是栈。栈的基本原则是：后进先出</p>\n<p>来一发图示？</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/7.png\" alt></p>\n<h4 id=\"浅谈前、中、后缀表达式\">浅谈前、中、后缀表达式</h4>\n<p>前、中、后缀表达式是信息学奥林匹克竞赛中比较鸡肋的知识点。但是知识点在考纲范围内，而且中缀表达式转后缀表达式是比较有用的知识。所以在这里为大家简单介绍一下。</p>\n<h4 id=\"前缀表达式（少用）\">前缀表达式（少用）</h4>\n<p>又称波兰式（Polish Notation），操作符以前缀形式位于两个运算数前（如：3+2的前缀表达形式就是+ 3 2）。</p>\n<h4 id=\"中缀表达式\">中缀表达式</h4>\n<p>操作符以中缀形式位于运算数中间（如：3+2），是我们日常通用的算术和逻辑公式表示方法。</p>\n<p>例子：<br>\n$$<br>\n6×12+9−14。<br>\n$$</p>\n<h4 id=\"后缀表达式\">后缀表达式</h4>\n<p>又称逆波兰式（Reverse Polish Notation - RPN），操作符以后缀形式位于两个运算数后（如：3+2的后缀表达形式就是3 2 +）。</p>\n<p>例子：（注意！正常写是没有逗号的，这里方便区分）<br>\n$$<br>\n6 ，12 ，× ，9 ，+ ，14 ，-<br>\n$$</p>\n<h4 id=\"后缀表达式转中缀表达式的实现：\">后缀表达式转中缀表达式的实现：</h4>\n<p>从左至右依次遍历后缀表达式各个字符（需要准备一个运算数栈存储运算数和操作结果）</p>\n<p>1、字符为 运算数 ：</p>\n<p>直接入栈（注：需要先分析出完整的运算数并将其转换为对应的数据类型）</p>\n<p>2、字符为 操作符 ：</p>\n<p>连续出栈两次，使用出栈的两个数据进行相应计算，并将计算结果入栈</p>\n<p>注意：第一个出栈的运算数为 a ，第二个出栈的运算数为 b ，此时的操作符为 - ，则计算 b-a  （注：a和b顺序不能反），并将结果入栈。</p>\n<p>3、重复以上步骤直至遍历完成后缀表达式，最后栈中的数据就是中缀表达式的计算结果。</p>\n<p>还拿上面的例子：</p>\n<p>$$<br>\n6 ，12 ，× ，9 ，+ ，14 ，-<br>\n$$</p>\n<p>上面的式子就可以写成如下的中缀表达式：</p>\n<p>$$<br>\n6×12+9−14。<br>\n$$</p>\n<ul>\n<li>特别注意：针对一个确定的中缀表达式，其所对应的后缀表达式不唯一；而针对一个确定的后缀表达式，其对应的中缀表达式是唯一的。</li>\n</ul>\n<h3 id=\"3、队列\">3、队列</h3>\n<p>想象你在排队买票，这个队伍中的人都非常有素质，都自觉排队而且不会提前离开队伍。这样就只能从队首买完票再离开，从队尾进入队伍。队列的基本原则是：先进先出。</p>\n<p>再来一发图示：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/8.png\" alt></p>\n<h3 id=\"4、字符串\">4、字符串</h3>\n<p>字符串子串的概念：字符串是一串字符（废话），它的子串被定义为：字符串中<strong>任意个连续的字符组成的子序列</strong>。</p>\n<p>字符串子串个数的计算公式：<br>\n$$<br>\n\\frac{n×(n+1)}{2}+1<br>\n$$</p>\n<p>（就是字符串长度等差数列）</p>\n<p>如果是非空子串，就把那个一减去即可（子串个数的公式加一就是考虑空子串的情况）。</p>\n<h3 id=\"5-树\">5.树</h3>\n<p>emmm…直观来讲，就是一张长得像树的图。定义是任意两点之间的简单路径有且只有一条。树是一棵连通且无环的图。它的边数是𝑛−1。</p>\n<h4 id=\"二叉树的遍历\">二叉树的遍历</h4>\n<p>二叉树有不同的遍历方式，一般来讲，我们将其分成三类：先序遍历（也叫先根遍历）、中序遍历（中根遍历）以及后序遍历（后根遍历）。</p>\n<ul>\n<li><strong>先序遍历</strong>：遍历方式如下：根—左儿子—右儿子</li>\n<li><strong>中序遍历</strong>：遍历方式如下：左儿子—根—右儿子</li>\n<li><strong>后序遍历</strong>：遍历方式如下：左儿子—右儿子—根</li>\n</ul>\n<p>我们用一张图来理解一下这几种遍历方式。</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/4.png\" alt></p>\n<p>这张图的先序遍历：1245367</p>\n<p>中序遍历：4251637</p>\n<p>后序遍历：4526731</p>\n<ul>\n<li>\n<p><strong>一个推论</strong>：</p>\n<p>先序遍历+中序遍历=一棵确定的二叉树</p>\n<p>后序遍历+中序遍历=一棵确定的二叉树</p>\n<p>先序遍历+后序遍历=啥也不是</p>\n</li>\n</ul>\n<h4 id=\"特殊二叉树及其性质\">特殊二叉树及其性质</h4>\n<ul>\n<li><strong>完全二叉树</strong>：只有最后一层不是满的，且最后一层的所有节点均集中在左侧。</li>\n</ul>\n<p>图例如下：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/5.png\" alt></p>\n<ul>\n<li><strong>满二叉树</strong>：节点个数已满。</li>\n</ul>\n<p>图例如下：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/6.png\" alt></p>\n<ul>\n<li><strong>特殊二叉树的性质</strong>：</li>\n</ul>\n<p>1、对于一棵完全二叉树来讲，它的叶子节点为 $𝑛$，则节点总数为 $2×𝑛−1$。此结论可逆。</p>\n<p>2、对于一棵满二叉树来讲，它的层数（深度）为 $𝑘$，则它的节点总数为 $2×𝑘−1$。此结论可逆。</p>\n<h4 id=\"拓扑排序（这个先不讲）\">拓扑排序（这个先不讲）</h4>\n<h3 id=\"6-图论\">6.图论</h3>\n<p>图（Graph）是图论中的一个重要概念，用于描述由节点（顶点）和连接这些节点的边（或弧）组成的非线性数据结构。</p>\n<h4 id=\"图的基本概念：\">图的基本概念：</h4>\n<ul>\n<li>\n<p>顶点（Vertex）：图中的基本单位，通常用于表示实体或节点。</p>\n</li>\n<li>\n<p>边（Edge）：连接图中两个顶点的关系。边可以是有向的（有方向性，称为弧）或无向的（无方向性）。</p>\n</li>\n<li>\n<p>路径（Path）：顶点序列，其中每两个相邻的顶点通过一条边连接。</p>\n</li>\n<li>\n<p>环（Cycle）：路径中第一个顶点等于最后一个顶点的路径。</p>\n</li>\n<li>\n<p><strong>连通图</strong>：顾名思义，连通图就是连通的图，即任意两点都能<strong>直接或间接</strong>到达，这就区别于完全图必须直接用边到达的定义。</p>\n</li>\n<li>\n<p><strong>完全图</strong>：任意两点都有边相连，我们很容易推出来，一张完全图的边数为（𝑛为节点个数）</p>\n</li>\n</ul>\n<p>$$<br>\n\\frac{n×(n−1)}{2}<br>\n$$</p>\n<ul>\n<li>\n<p>无向图（Undirected Graph）：所有边没有方向的图。</p>\n</li>\n<li>\n<p>有向图（Directed Graph）：图中的边有方向性的图。</p>\n</li>\n<li>\n<p>权重（Weight）：边或弧上关联的数值，通常用于表示边的成本或距离。</p>\n</li>\n</ul>\n<h4 id=\"图的邻接矩阵存储：\">图的邻接矩阵存储：</h4>\n<p>邻接矩阵是用二维数组表示图的一种常见方法，其中数组元素表示顶点之间的连接关系。</p>\n<p>定义：对于一个有n个顶点的图，邻接矩阵是一个n x n的矩阵，其中元素 a[i][j] 表示顶点 i 和顶点 j 之间是否有边或弧。如果是无向图，通常用1表示连接，0表示没有连接；如果是有向图，可以用1表示有边，0表示没有边，或者用权值表示边的权重。</p>\n<p>优点：</p>\n<ul>\n<li>简单直观，易于理解和实现。</li>\n<li>方便查找任意两个顶点之间是否有边。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>浪费空间：对于稀疏图（边数量远少于顶点数量），大部分矩阵元素为0，造成空间浪费。</li>\n<li>不适合大规模图：当顶点数量非常大时，邻接矩阵的空间消耗会很大。</li>\n</ul>\n<h4 id=\"图的邻接表存储：\">图的邻接表存储：</h4>\n<p>邻接表是用链表或者类似的数据结构表示图的另一种常见方法，适合表示稀疏图。</p>\n<p>定义：使用数组和链表的结合来表示图。数组的每个元素对应一个顶点，每个元素存储与该顶点相邻的所有顶点（即与其有边直接连接的顶点）的链表或者列表。</p>\n<p>优点：</p>\n<ul>\n<li>省空间：对于稀疏图，只存储存在的边，节省了空间。</li>\n<li>插入和删除效率高：对于边的插入和删除操作，相较于邻接矩阵更加高效。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>\n<p>不便于查找任意两个顶点之间的关系：需要遍历链表来确定两个顶点是否相连，效率低于邻接矩阵。</p>\n</li>\n<li>\n<p>需要额外空间来存储链表或列表。</p>\n</li>\n</ul>\n<h4 id=\"在实际应用中，选择邻接矩阵还是邻接表取决于图的稀疏程度和需要的操作类型。稠密图适合用邻接矩阵表示，而稀疏图通常用邻接表表示。\">在实际应用中，选择邻接矩阵还是邻接表取决于图的稀疏程度和需要的操作类型。稠密图适合用邻接矩阵表示，而稀疏图通常用邻接表表示。</h4>\n<hr>\n<h2 id=\"七、时空复杂度的计算\">七、时空复杂度的计算</h2>\n<ul>\n<li><strong>时间复杂度</strong>：渐进时间复杂度用符号 $𝑂$  表示。一个程序的语句执行次数可以用一个代数式表示，那么我们取这个代数式的最高次项且忽略此项系数作为时间复杂度。如果一个程序的语句执行次数为 $2𝑛^3+3𝑛^2+𝑛+7$，那么这个程序的渐进时间复杂度为 $𝑂(𝑛^3)$ 。</li>\n<li><strong>计算非递归程序的时间复杂度</strong>：简单粗暴，数循环。</li>\n<li><strong>常数</strong>：常数即为我们忽略掉的𝑂中最高次项的系数与低次项所带来的时间消耗。</li>\n<li><strong>空间复杂度</strong>：类比时间复杂度。看开空间开了多大。</li>\n<li><strong>计算空间占用量</strong>：根据我们以上说过的计算机存储单位的知识：一个𝑖𝑛𝑡占用的内存是4𝐵，所以我们把开的𝑖𝑛𝑡乘上4，再除以1024就是𝐾𝐵，同理，再除1024就是𝑀𝐵。</li>\n</ul>\n<p>公式：𝑛为元素个数，𝑀为最终答案（以𝑀𝐵为单位）</p>\n<p>$$<br>\nM=\\frac{4𝑛}{1024×1024}<br>\n$$<br>\n$PS:一般来讲，比赛中所给的 256𝑀𝐵 内存可以开 6×10^7 个 𝑖𝑛𝑡 类型的变量。另外，大数组必须开全局变量。如果扔在主函数里极容易爆栈。$</p>\n<hr>\n<h2 id=\"八、数学、逻辑学及运筹学知识\">八、数学、逻辑学及运筹学知识</h2>\n<h3 id=\"1、排列和组合的定义\">1、排列和组合的定义</h3>\n<h4 id=\"1-排列的定义\">(1)排列的定义</h4>\n<p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素按照一定顺序排成一列，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个排列。</p>\n<h4 id=\"2-排列数的定义\">(2)排列数的定义</h4>\n<p>从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有排列的个数，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的排列数。</p>\n<h4 id=\"3-全排列的定义\">(3)全排列的定义</h4>\n<p>当 $𝑛=𝑚$ 时所有的排列情况叫做<strong>全排列</strong>。</p>\n<h4 id=\"4-组合的定义\">(4)组合的定义</h4>\n<p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素并成一组，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个组合。</p>\n<h4 id=\"5-组合数的定义\">(5)组合数的定义</h4>\n<p>从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有组合的个数，叫做从 $𝑛$ 个不同元素中取出 $m$ 个元素的组合数。</p>\n<h4 id=\"6-排列-组合的区别\">(6)排列&amp;组合的区别</h4>\n<p>通俗地说，组合不分顺序，而排列分顺序，也就是说，对于数列 $1，2$ ，有以下两种排列：$1，2$ 和 $2，1$ ，但是仅有一种组合 $1，2$ 或 $2，1$ 。</p>\n<h3 id=\"2、排列-组合的公式\">2、排列&amp;组合的公式</h3>\n<h4 id=\"1-关于排列的公式\">(1)关于排列的公式</h4>\n<p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的排列数，数学表示为：$𝐴_{𝑛}^𝑚$.</p>\n<p>计算公式如下：</p>\n<p>$$<br>\n𝐴_{𝑛}^𝑚=𝑛(𝑛−1)(𝑛−2)⋯(𝑛−𝑚+1)=\\frac{𝑛!}{(𝑛−𝑚)!}<br>\n$$</p>\n<h4 id=\"2-关于组合的公式\">(2)关于组合的公式</h4>\n<p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的组合数，数学表示为：$𝐶_{𝑛}^𝑚$.</p>\n<p>计算公式如下：</p>\n<p>$$<br>\n𝐶_{𝑛}^𝑚=\\frac{𝐴_{𝑛}^𝑚}{𝑚!}=\\frac{𝑛!}{𝑚!(𝑛−𝑚)!}<br>\n$$</p>\n<h4 id=\"3-关于全排列的公式\">(3)关于全排列的公式</h4>\n<p>某个数列的全排列数 $𝑓(𝑛)$，计算公式如下：</p>\n<p>$$<br>\n𝑓(𝑛)=𝑛!<br>\n$$</p>\n<h3 id=\"3、全排列的求法\">3、全排列的求法</h3>\n<p>例题：生成全排列（深搜基础题）</p>\n<p><a href=\"https://neooj.com/oldoj/problem.php?id=1742\">题目链接</a></p>\n<p>给定 $𝑛$ ,生成 $1−𝑛$ 的全排列。</p>\n<p>我们考虑用递归来解决全排列问题：</p>\n<p>递归出口是当 $x==n+1$ 地时候，绝对不能仅仅等于 $n！$</p>\n<p>我们的递归部分使用标记数组和数列数组实现，具体实现方法可以参照下图：<br>\n<img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/9.jpg\" alt></p>\n<hr>\n<h2 id=\"九、算法\">九、算法</h2>\n<h3 id=\"1-算法的基本概念\">1.算法的基本概念</h3>\n<p>算法的特征：有穷性，确切性，至少一个输出，可行性</p>\n<p>表示方法：自然语言法，程序流程图法（顺序结构，选择结构，循环结构），程序法</p>\n<h3 id=\"2-排序\">2.排序</h3>\n<ul>\n<li>$选择排序：对待排序的记录序列进行n-1遍的处理。第一遍处理是将L[1…n]中最小者与L[1]交换位置，第二遍处理是将L[2…n]中最小者与L[2]交换位置，以此类推，时间复杂度为O(n^{2}) )。选择排序是稳定排序。$</li>\n<li>$插入排序：经过i-1遍处理后，L[1…i-1]已排好序。第i遍处理仅将L[i]插入L[1…i-1]的适当位置p，原来p后的元素一一向右移动一个位置，使得L[1…i]又是排好序的序列，时间复杂度为O(n^2 )。插入排序是稳定排序。$</li>\n<li>$冒泡排序：又称交换排序。对待排序的记录的关键字进行两两比较，如果发现是反序的，则进行交换，时间复杂度为O( n^2 )。冒泡排序是稳定排序。$</li>\n<li>$希尔排序：先将待排序列进行预排序，使待排序列接近有序，然后再对该序列进行一次插入排序，此时插入排序的时间复杂度为O(n)，$</li>\n<li>$快速排序：先从数据序列中选一个元素，并将序列中所有比该元素小的元素都放在它的一边，再对左右两边分别用同样的方法处理，直到每一个待处理的序列长度为1，处理结束。时间复杂度下限为O(nlogn)，上限为O( n^2 )。快速排序是不稳定排序，基于分治思想。$</li>\n<li>$归并排序：归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。时间复杂度为O(nlogn)$</li>\n</ul>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/11.png\" alt></p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/12.png\" alt></p>\n<h3 id=\"考试用到的其他基础算法板子将在我另外一篇博客里。\">考试用到的其他基础算法板子将在我另外一篇博客里。</h3>\n<hr>\n<h2 id=\"十、程序阅读\">十、程序阅读</h2>\n<h3 id=\"阅读程序及完善程序题答题方法\">阅读程序及完善程序题答题方法</h3>\n<h3 id=\"（1）阅读程序和完善程序两个大题在CSP考试当中占据70分，也就是一多半。所以，前面的选择题全对也只能得个30分。这种题不要求必须全对，但是想进入普及组复赛，必须保证拿到70-80-（约合49-56分）的分值\">（1）阅读程序和完善程序两个大题在CSP考试当中占据70分，也就是一多半。所以，前面的选择题全对也只能得个30分。这种题不要求必须全对，但是想进入普及组复赛，必须保证拿到70%~80%（约合49~56分）的分值</h3>\n<h3 id=\"（2）题型：\">（2）题型：</h3>\n<p>① 阅读程序先给一个完整的程序，再给2~3个判断题和1~2个选择题，类似于阅读理解。除特殊说明外，判断题一个1.5分，选择题一个3分。<br>\n②完善程序先给一个有残缺部分的程序，再把合适的代码依次填入空中，均为选择题（一个题3分）。类似于完形填空</p>\n<h3 id=\"（3）答题技巧\">（3）答题技巧</h3>\n<p>① 拿到卷子不用先看代码，先看题，在根据题干有目的地阅读代码的相应片段<br>\n② 不要一上来就先看第一题，第一题不会就死磕。先找突破口，就是那种非常好填的空，先填上后再加分析，推出其他题的答案。有的代码前后有关联，可以根据前后联系推出答案<br>\n③ 碰到特别长的程序千万不要惊慌。出一条长代码可能有这几点原因：1.这个程序所涉及的算法确实需要很长的代码；2.故意的，写一个特别长的代码纯粹就是一个考验，看看哪些人遇到这样的题不会慌张。也就是，有的长代码就是个纸老虎，静下心好好分析，不难。<br>\n④ 这种题也要看平时的积累以及扎实程度。多背一些算法的模板代码及例题，这种题拿五十多分也并非难事</p>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h1>CSP-J 第一轮知识点总结</h1>\n<hr>\n<h2 id=\"题目类型整理\">* 题目类型整理</h2>\n<table>\n<thead>\n<tr>\n<th><strong>题型</strong></th>\n<th><strong>知识点类型</strong></th>\n<th><strong>题目</strong>数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单选</td>\n<td>信息学史&amp;基本知识</td>\n<td>8-10</td>\n</tr>\n<tr>\n<td>单选</td>\n<td>C++语法知识点</td>\n<td>2-3</td>\n</tr>\n<tr>\n<td>单选</td>\n<td>数据结构&amp;算法</td>\n<td>3-4</td>\n</tr>\n<tr>\n<td>单选</td>\n<td>数学&amp;逻辑学&amp;运筹学</td>\n<td>3-4</td>\n</tr>\n<tr>\n<td>单选</td>\n<td>比赛相关知识</td>\n<td>1-2</td>\n</tr>\n<tr>\n<td>问题求解</td>\n<td>数学</td>\n<td>1</td>\n</tr>\n<tr>\n<td>问题求解</td>\n<td>数据结构</td>\n<td>1</td>\n</tr>\n<tr>\n<td>模拟程序运行</td>\n<td>C++语法&amp;算法</td>\n<td>4</td>\n</tr>\n<tr>\n<td>完善程序</td>\n<td>C++语法&amp;算法</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"一、信息学及计算机史\">一、信息学及计算机史</h2>\n<ul>\n<li><strong>计算机的顶级奖项</strong>：图灵奖、冯·诺依曼奖</li>\n</ul>\n<p>图灵奖：由ACM（美国计算机协会）设立于1966年。是“计算机界的诺贝尔奖”。</p>\n<p>冯·诺依曼奖：由IEEE设立。</p>\n<ul>\n<li><strong>对信息科学做出突出贡献的大神</strong>：图灵（所以才有个奖），冯 · 诺伊曼</li>\n<li><strong>中国获图灵奖的大神</strong>：姚期智（清华就有姚班，就是以他的名字命名的）</li>\n<li><strong>世界第一台电子计算机</strong>：埃尼阿克（𝐸𝑁𝐼𝐴𝐶），于1946年2月14日在美国宾夕法尼亚大学诞生。又被叫做电子管计算机。</li>\n</ul>\n<hr>\n<h2 id=\"二、关于编程\">二、关于编程</h2>\n<ul>\n<li><strong>编程语言</strong>：</li>\n</ul>\n<p>分两类：面向对象和面向过程。</p>\n<ul>\n<li><strong>高级语言和低级语言的区别</strong>：</li>\n</ul>\n<p>高级语言需要编译运行，常数较大，运行速度慢。而低级语言常数极小，运行速度快。此外，高级语言更容易移植。</p>\n<ul>\n<li><strong>常见低级语言</strong>：</li>\n</ul>\n<p>汇编</p>\n<ul>\n<li><strong>面向对象的高级语言</strong>：</li>\n</ul>\n<p>C++，Java，EIFFEL，Simula 67等。</p>\n<ul>\n<li><strong>面向过程的高级语言</strong>：</li>\n</ul>\n<p>C，Fortran语言。</p>\n<ul>\n<li><strong>递归编程</strong>：</li>\n</ul>\n<p>递归是指一种通过重复将问题分解为同类的子问题而解决问题的方法。递归式方法可以被用于解决很多的计算机科学问题。简单来讲，就是“自身调用自身”（在函数中）。</p>\n<ul>\n<li><strong>P类/NP类/NPC类问题</strong>：</li>\n</ul>\n<p>1、P类问题：如果一个问题能找到一个在多项式时间内解决它的算法，那么这个问题就是P问题。</p>\n<p>2、NP类问题：注意：NP问题<strong>不是非P类问题</strong>，而是在多项式时间内验证一个解的问题。或者，我们可以将其理解为在多项式时间内猜出一个解的问题。</p>\n<p>3、NPC类问题：定义如下：如果一个问题是NP问题，而且所有的NP问题都可以约化到它。那么它就是NPC类问题。再来介绍一下关于约化的定义：如果一个问题A可以约化为问题B，含义就是这个问题A可以用问题B的解法来解决。</p>\n<h3 id=\"NOIP-CSP等的历史、大事件、参赛要求（每年都考）\">*NOIP / CSP等的历史、大事件、参赛要求（每年都考）</h3>\n<ul>\n<li>\n<p>NOI：中国计算机学会于1984年（当年，*提出计算机要从娃娃抓起）创办全国青少年计算机程序设计竞赛，即全国青少年信息学奥林匹克竞赛，是国内包括港澳在内的省级代表队最高水平的大赛。</p>\n</li>\n<li>\n<p>NOIP：中国计算机学会于1995年创办全国青少年信息学奥林匹克联赛。NOIP在同一时间、不同地点以各省市为单位由特派员组织。全国统一大纲、统一试卷，初、高中或其他中等专业学校的学生可报名参加。联赛分初赛和复赛，初赛考察通用和实用的计算机科学知识，以笔试为主。复赛为程序设计，须在计算机上调试完成。参加初赛者须达到一定分数线后才有资格参加复赛。联赛分普及组和提高组两个组别，难度不同，分别面向初中和高中阶段的学生。</p>\n</li>\n<li>\n<p>从2005年开始，NOIP不再支持Basic；从2022年开始，不再支持Pascal。</p>\n</li>\n<li>\n<p>选手进入考场时，只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，NOI各省特派员可直接取消违规选手的参赛资格。</p>\n</li>\n<li>\n<p>CCSP：大学生计算机系统与程序设计竞赛，由中国计算机学会(CCF)于2016年发起的一个面向大学生的竞赛，每年举办一次，考察的是算法、编程以及计算机系统设计能力，旨在进一步提高计算机教育质量，使学生通过竞赛进一步学习和掌握计算机系统知识，同时对高校计算机教育产生引领作用。</p>\n</li>\n<li>\n<p>CSP：中国计算机学会于2014年推出CCF计算机软件能力认证，该项认证重点考察软件开发者实际编程能力，由中国计算机学会统一命题、统一评测，委托各地设立的考试机构进行认证考试。该项认证每年大约3、9、12月各举办一次。认证者不限年龄，不限学历，不限报考次数，不限国籍 ，在报名官网注册账户后均可报名参加认证。语言：C/C++(Dev-CPP 5.4.0 (Min GW 4.7.2))，Java(Eclipse (Java SDK 1.7.0_15))，Python(3.6.5) 浏览器：Chrome</p>\n<blockquote>\n<p>CSP认证考试可以带纸质资料进入考场，不过只能是常用语言的程序设计基础书、数据结构的相关书籍。不允许U盘、手机等电子设备进入考场。</p>\n<p>CSP-S/J：认证开始15分钟后，认证者不能再进入认证点。如有认证者提前离开认证点，除身体特别原因外，须在认证进行2小时后方可准予离开。在第一轮认证期间，任何人不得将试卷携带出考场。认证者进入考场时，监考检查认证者携带物品。认证者只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，CSP-J/S认证总负责人可直接取消违规认证者的参加资格。</p>\n</blockquote>\n<p>CSP-S/J：认证开始15分钟后，认证者不能再进入认证点。如有认证者提前离开认证点，除身体特别原因外，须在认证进行2小时后方可准予离开。在第一轮认证期间，任何人不得将试卷携带出考场。认证者进入考场时，监考检查认证者携带物品。认证者只许携带笔、橡皮等非电子文具入场。禁止携带任何电子产品或机器设备入场，无存储功能的手表除外；手机（关机）、U盘或移动硬盘、键盘、鼠标、闹钟、计算器、书籍、草稿纸及背包等物品必须存放在考场外。如有违规带入的，一经发现，CSP-J/S认证总负责人可直接取消违规认证者的参加资格。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"三、关于计算机\">三、关于计算机</h2>\n<p>先上张大图：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/1.png\" alt></p>\n<ul>\n<li>\n<p><strong>重要设备</strong>：</p>\n<p>硬件组成：</p>\n<ol>\n<li>控制器(Control):是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。</li>\n<li>运算器(Datapath):运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。</li>\n<li>存储器(Memory):存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。</li>\n<li>输入设备(Input system):输入设备是计算机的重要组成部分，输入设备与输出设备合称为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。</li>\n<li>输出设备(Output system):输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。</li>\n</ol>\n</li>\n<li>\n<p><strong>CPU及存储</strong>：</p>\n</li>\n</ul>\n<p>CPU（中央处理器）=运算器+控制器+寄存器</p>\n<p>运算器=算术逻辑运算单元（ALU）及浮点运算单元（FPU）</p>\n<p>存储器=内存储器+外存储器</p>\n<p>BIOS是英文&quot;Basic Input Output System&quot;的缩略语，直译过来后中文名称就是&quot;基本输入输出系统&quot;。其实，它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、系统设置信息、开机后自检程序和系统自启动程序。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。</p>\n<p>随机存储器RAM的“随机”指“随时访问”</p>\n<p>所以，我们记下来以下知识点：</p>\n<p><strong>断电后可以保存数据：硬盘，ROM</strong></p>\n<p><strong>断电后不可以保存数据：显存（显卡内存），RAM，CPU</strong></p>\n<ul>\n<li><strong>计算机各存储单位及进位关系</strong>：</li>\n</ul>\n<p>计算机的存储单位有以下几种：<br>\n$$<br>\n𝑇𝐵/𝐺𝐵/𝑀𝐵/𝐾𝐵/𝐵<br>\n$$<br>\n他们之间的进位关系为 $1024$</p>\n<p>特殊地，$1B=8(bit)$ ，这里的 $𝑏𝑖𝑡$ 是二进制下的一位内存。</p>\n<h3 id=\"机内代码及其运算\">* 机内代码及其运算</h3>\n<p>原码：设X，若为非负数，则符号位为0，其余各位取值不变，否则符号位为1。如：</p>\n<p>X=+1110001，则[X]原=01110001；X=-1110001，则[X]原=11110001。</p>\n<p>反码：设X，若为非负数，则与原码相同，否则符号位为1，其余各位取值求反。如：</p>\n<p>X=+1110001，则[X]反=01110001；X=-1110001，则[X]反=10001110。</p>\n<p>补码：设X，若为非负数，则与原码相同，若为负数，则为反码加1。如：</p>\n<p>X=+1110001，则[X]补=01110001；X=-1110001，则[X]补=10001111。</p>\n<p>负补：对补码（包括符号位）的每一位求反，且最低位加1。如：</p>\n<p>X=+1110001，[-X]补=10001111。</p>\n<p>[X+Y]补=[X]补+[Y]补，[X-Y]补=[X]补-[Y]补=[X]补+[-Y]补（最高位产生的进位要丢掉）</p>\n<hr>\n<h2 id=\"四、进制及进制转化\">四、进制及进制转化</h2>\n<h4 id=\"十进制转任意进制\">十进制转任意进制</h4>\n<p>将十进制转换成N𝑁进制，只需把十进制数每次除N𝑁求余数，然后把余数逆序写出来。</p>\n<p>看不懂就看图：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/2.png\" alt></p>\n<p>这是二进制的图，其他进制就类比推一下就可以了。如果这个看不懂的话就不要参加初赛了，50块钱买点啥不好…</p>\n<h4 id=\"任意进制转十进制\">任意进制转十进制</h4>\n<p>简单说就是：按位转，第i𝑖位的数字乘以要转换的进制的𝑛−1次幂即可。</p>\n<p>还是上图：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/3.png\" alt></p>\n<h4 id=\"任意进制互相转化\">任意进制互相转化</h4>\n<p>这里考虑用十进制做中转，先把A𝐴进制转十进制，再把十进制转B𝐵进制。</p>\n<h4 id=\"关于小数的进制转换\">关于小数的进制转换</h4>\n<p>十进制转任意进制的小数不进行除法运算，而进行乘法运算后取整，取整后从前向后排列。</p>\n<p>任意进制转十进制的小数只需要乘上负指数，最后算出来即可。</p>\n<h4 id=\"各进制的字母表达\">各进制的字母表达</h4>\n<p>$𝐻(𝐻𝑒𝑥𝑎𝑑𝑒𝑐𝑖𝑚𝑎𝑙)——16进制$</p>\n<p>$𝐷(𝐷𝑒𝑐𝑖𝑚𝑎𝑙)——10进制$</p>\n<p>$𝑂(𝑂𝑐𝑡𝑜𝑛𝑎𝑟𝑦)——8进制$</p>\n<p>$𝐵(𝐵𝑖𝑛𝑎𝑟𝑦)——2进制$</p>\n<h4 id=\"二进制的相关知识\">二进制的相关知识</h4>\n<p>二进制是计算机进行计算所使用的工具，自然也是非常常考的要点。二进制的相关知识有许多，甚至算法中的位运算也是二进制的相关内容，但为了过第一轮初赛，我们只介绍一些理论知识。关于位运算的相关知识请有兴趣的同学自己学习。</p>\n<ul>\n<li><strong>1、原码</strong></li>\n</ul>\n<p>顾名思义，原码就是十进制数直接转换成二进制之后直接形成的二进制编码。</p>\n<ul>\n<li><strong>2、补码</strong></li>\n</ul>\n<p>正数的补码是本身，负数的补码是其<strong>反码加一</strong>。</p>\n<ul>\n<li><strong>3、反码</strong></li>\n</ul>\n<p>顾名思义：正数的反码是本身，负数的反码是其除符号位之外的所有位按位取反的结果。</p>\n<h4 id=\"附：ASCII码\">附：ASCII码</h4>\n<p>ASCII（American Standard Code for Information Interchange，美国标准信息交流码）码是目前微型计算机中使用最广泛的一种字符编码，用7位二进制数来编码（占一个字节），可表示128个字符，最高位为0或作奇偶校验用。</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/10.jpg\" alt></p>\n<hr>\n<h2 id=\"五、位运算\">五、位运算</h2>\n<p>位运算不仅在初赛中是一个知识点分类，在复赛（即真正的程序设计与运用）的时候也有很大的一个应用。而且，位运算的相关知识是计算机运算的灵魂，更是每个程序猿应该理解的一种基本操作。</p>\n<h3 id=\"1、与-运算\">1、与(&amp;)运算</h3>\n<h4 id=\"1-运算法则\">(1)运算法则</h4>\n<p>两个二进制数进行与&amp;运算，如果对应位都为1则结果为1，否则为0.</p>\n<h4 id=\"2-技巧及用途\">(2)技巧及用途</h4>\n<p>**与运算常常用于二进制下的取位操作。**想要知道二进制下的某位是否是1，就&amp;上这个位数对应的十进制数。假如返回的是这个十进制数本身，则这个位的确是1，反之就是0.</p>\n<p>比如：</p>\n<p>我们要取第三位是否为1，我们只需要与&amp;上第三位（二进制表示为100）对应的二进制数4，如果返回值为4，就代表第三位为1，反之就是0.</p>\n<p>最常用的是取二进制下的最末位，即a&amp;1。这样的技巧可以用于<strong>判断奇偶</strong>，根据二进制常识，尾数为1则为奇数，反之为偶数。</p>\n<h3 id=\"2、或-运算\">2、或(|)运算</h3>\n<h4 id=\"1-运算法则-2\">(1)运算法则</h4>\n<p>两个二进制数进行或|运算，如果对应位有一个为1，结果就为1.只有在两个数的对应位置都是0的时候，结果才为0.</p>\n<h4 id=\"2-技巧及用途-2\">(2)技巧及用途</h4>\n<p><strong>或运算常用于二进制特定位的赋值</strong>。想把哪个位强行变成1，就用这个数|上这个位数对应的二进制数。</p>\n<p>还是上面那个例子，我们想让00000的第三位变成1.即十进制变4，我们直接|上4就可以。</p>\n<p>当然，不同于&amp;运算，我们很少用|运算进行任意位赋值。通常来讲，我们只使用a|1把a的最后一位强行变成1，其实质意义是<strong>把原数加一</strong>。或者使用a|1-1再把它变为0.这个技巧通常用于<strong>把它变成它最接近的偶数</strong>。</p>\n<h3 id=\"3、异或-xor-运算\">3、异或(^)(xor)运算</h3>\n<h4 id=\"1-运算法则-3\">(1)运算法则</h4>\n<p>两个二进制数进行异或(^)运算，如果对应位相同，不管是0或者是1，都返回1，反之返回0.</p>\n<h4 id=\"2-技巧及用途-3\">(2)技巧及用途</h4>\n<p>其实没啥用途…</p>\n<p>好吧，我介绍一个性质：一个数经过两次异或之后等于原数。</p>\n<p>（很好理解）</p>\n<h3 id=\"4、非-运算\">4、非(~)运算</h3>\n<h4 id=\"1-运算法则-4\">(1)运算法则</h4>\n<p>把给定二进制数全部取反。</p>\n<h4 id=\"2-技巧及用途-4\">(2)技巧及用途</h4>\n<p>其实没什么运算上的用途，本蒟蒻曾看见一些大佬用这个运算判断输入是否为0…</p>\n<p>大约长这个样子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n))</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、左移-运算\">5、左移(&lt;&lt;)运算</h3>\n<h4 id=\"1-运算法则-5\">(1)运算法则</h4>\n<p>a&lt;&lt;b表示把a的二进制位向左移动b位，低位用0补上。</p>\n<h4 id=\"2-技巧及用途-5\">(2)技巧及用途</h4>\n<p>根据二进制的常识，我们会发现，二进制第k位上的数就等于2k2𝑘。（从0开始计位）</p>\n<p>比如，二进制下的100就是2k=2=42𝑘=2=4。</p>\n<p>所以我们发现，左移运算a&lt;&lt;b的实质就是a×2b𝑎×2𝑏。</p>\n<p>左移运算最常用的技巧就是用来代替×2的整数次幂的乘法运算。因为我们普遍认为，位运算是要比四则运算加减乘除及模运算更快一些的运算。</p>\n<h3 id=\"6、右移-运算\">6、右移(&gt;&gt;)运算</h3>\n<h4 id=\"1-运算法则-6\">(1)运算法则</h4>\n<p>a&gt;&gt;b就是把a的二进制位向右移动b位，溢出的舍去。</p>\n<h4 id=\"2-技巧及用途-6\">(2)技巧及用途</h4>\n<p>类比于左移运算，我们发现右移运算就是把a除以2的整数次幂。这就是右移运算的用途——优化除法运算。</p>\n<p>这里需要特殊说明的是，右移算法可以用在数学知识中的求最大公约数的程序块上。因为mod运算的效率慢的出奇，所以我们可以用右移运算来进行除以2的操作。据说可以提高百分之60的效率。</p>\n<h3 id=\"7、位运算优先级\">7、位运算优先级</h3>\n<p>位运算的优先级是我们在处理位运算的时候常常要考虑的问题，诚然，我们可以用括号强制位运算的顺序，但是，我们还是应该学会位运算的优先级（这应该是常识）。</p>\n<p>位运算的优先级如下：</p>\n<p><strong>按位反（~）&gt;位移运算（&lt;&lt;,&gt;&gt;）&gt;按位与（&amp;）&gt;按位异或（^）&gt;按位或（|）</strong></p>\n<h3 id=\"附：位运算在状压DP的用法\">附：位运算在状压DP的用法</h3>\n<p>众所周知，状压DP就是把状态压缩成一个01串（其实就是一个二进制数），用以减少DP数组的维数。但是我们在DP的时候就要按照01串来进行状态的转移。所以位运算是状压DP的基础知识和必备知识。所以我在本篇随笔的末尾还附上了状压DP中比较常用的操作及其二进制实现的方式。</p>\n<p>正文：（本文中的a表示十进制下的整数）</p>\n<p><strong>1、获得第i位的数字</strong>：(a&gt;&gt;i)&amp;1 或者 a&amp;(1&lt;&lt;i)</p>\n<p>很好理解，我们知道可以用&amp;1来提取最后一位的数，那么我们现在要提取第i位数，就直接把第i位数变成最后一位即可（直接右移）。或者，我们可以直接&amp;上1左移i位，也能达到我们的目的。</p>\n<p><strong>2、设置第i位为1</strong>：a=a|(1&lt;&lt;i)</p>\n<p>我们知道强制赋值用|运算，所以就直接强制|上第i位即可。</p>\n<p><strong>3、设置第i位为0</strong>：a=a&amp;(~(1&lt;&lt;i))</p>\n<p>这里比较难以理解。其实很简单，我们知道非~运算是按位取反，(1&lt;&lt;i)非一下就变成了第i为是0，其它全是1的二进制串。这样再一与原数进行&amp;运算，原数的第i位无论是什么都会变成0，而其他位不会改变（实在不明白的可以用纸笔进行推演）。</p>\n<p><strong>4、把第i位取反</strong>：a=a^(1&lt;&lt;i)</p>\n<p>1左移i位之后再进行异或，我们就会发现，如果原数第i位是0，一异或就变成1，否则变成0。</p>\n<p><strong>5、取出一个数的最后一个1</strong>：a&amp;(-a)</p>\n<p>学过树状数组的同学会发现，这就是树状数组的lowbit。事实上，这和树状数组的原理是一样的。我想，不需要我多解释。</p>\n<p>为了应对初赛的笔试题，建议读者在阅读完这篇博客之后至少应该掌握：<strong>各种位运算的运算法则以及位运算优先级</strong>。</p>\n<h4 id=\"另外，对于位运算的优先级，本蒟蒻在后面的逻辑运算部分还会有详细的解析。\">另外，对于位运算的优先级，本蒟蒻在后面的逻辑运算部分还会有详细的解析。</h4>\n<h3 id=\"逻辑运算\">逻辑运算</h3>\n<h4 id=\"逻辑运算-2\">逻辑运算</h4>\n<p>逻辑运算一共有三种，每种都有两种写法：</p>\n<p><strong>逻辑非</strong>：！或 ┐</p>\n<p><strong>逻辑与</strong>：&amp;&amp; 或 ∧</p>\n<p><strong>逻辑或</strong>：|| 或 ∨</p>\n<h4 id=\"逻辑运算的优先级\">逻辑运算的优先级</h4>\n<p>非&gt;&gt;与&gt;&gt;或</p>\n<h4 id=\"位运算-逻辑运算的优先级\">位运算+逻辑运算的优先级</h4>\n<p><strong>逻辑非（！，┐）=按位反（~）&gt;位移运算（&lt;&lt;,&gt;&gt;）&gt;不等号（&gt;=,&lt;=）&gt;等号（==,!=）&gt;按位与（&amp;）&gt;按位异或（^）&gt;按位或（|）&gt;逻辑与（&amp;&amp;，∧）&gt;逻辑或（||，∨）</strong></p>\n<h4 id=\"逻辑表达式\">逻辑表达式</h4>\n<p>由逻辑运算复合而成，只有两种结果：𝑡𝑟𝑢𝑒和𝑓𝑎𝑙𝑠𝑒，在C/C++中，返回的值以0表示假，以1表示真。</p>\n<h4 id=\"条件表达式\">条件表达式</h4>\n<p>条件表达式的基本形式如下：</p>\n<p>&lt;表达式1&gt;？&lt;表达式2&gt;：&lt;表达式3&gt;</p>\n<p>其表达意义是：如果表达式1成立，则执行表达式2，否则执行表达式3。其实也等价于𝑖𝑓−𝑒𝑙𝑠𝑒条件语句。例如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Min(a,b) a&lt;b?a:b</span></span><br></pre></td></tr></table></figure>\n<p>**注意：**如果条件表达式有多个进行复合，那么在执行的时候需要从由往左依次判断最后得出一个结果。即：<strong>右结合性</strong>。</p>\n<p>比如：</p>\n<p>&lt;表达式1&gt;？&lt;表达式2&gt;：&lt;表达式3&gt;？&lt;表达式4&gt;：&lt;表达式5&gt;</p>\n<p>那么，在执行的时候是从3开始判断是否为真，然后执行某一个表达式，依次向上回溯。</p>\n<hr>\n<h2 id=\"六、简单数据结构基本理论\">六、简单数据结构基本理论</h2>\n<h3 id=\"1、链表\">1、链表</h3>\n<p>本篇随笔就数据结构——链表进行讲解。链表是一种特别实用的数据结构，我把它理解为<strong>数组的升级版</strong>，也就是在数组的基础上，它能做到在任意位置添加或者删除元素，而不影响其他元素。链表还是我们进行图论学习时，图的常用存储方式——邻接表（链式前向星）的实现基础。学习链表需要读者具有一定的语法基础，最好会一点点指针。（不会也没关系，我们主要讲解数组模拟链表）</p>\n<h4 id=\"什么是链表\">什么是链表</h4>\n<p>链表，顾名思义，就是带链的表。我已经说过，链表属于数组的加强版。那我们可以借助数组来理解链表：如果说数组是一长排连在一起的“方块”的话，那么链表就是把这些方块“拉开“，每个方块还有两个箭头，分别指向这个方块前面的方块和后面的方块。</p>\n<p>这样我们就可以理解，为什么链表可以支持随机插入和删除了。从某种意义上来说，这里的每一个方块都是离散的，我们在某两点插入的时候，只需要把要插入的元素，这个元素目标位置前面的元素、后面的元素的箭头改一下，就做到了插入的操作。删除同理。</p>\n<h4 id=\"链表的实现原理\">链表的实现原理</h4>\n<p>根据刚才的理解，我们可以发现，我们可以用一个结构体来模拟每一个方块，结构体中存一个元素和两个指针，指针分别指向上一个元素的位置和下一个元素的位置。但是蒟蒻不会指针指针的实现比较麻烦，而且在调试的时候也不是很理想。所以我们来想指针的本质就是告诉你一个位置，那么针对于”加强数组“链表来讲，这个位置可以用什么来表示呢？</p>\n<p><strong>对，数组下标。</strong></p>\n<p>所以我们刚才的结构体就可以简化，变成存一个元素和两个int变量（存储数组下标）。这样，我们就可以用结构体数组模拟链表的实现。</p>\n<h3 id=\"2、栈\">2、栈</h3>\n<p>想象一个桶，你从上面往里扔砖，然后你想把某一块砖拿出来，你需要先拿出来你后扔进去的砖。这就是栈。栈的基本原则是：后进先出</p>\n<p>来一发图示？</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/7.png\" alt></p>\n<h4 id=\"浅谈前、中、后缀表达式\">浅谈前、中、后缀表达式</h4>\n<p>前、中、后缀表达式是信息学奥林匹克竞赛中比较鸡肋的知识点。但是知识点在考纲范围内，而且中缀表达式转后缀表达式是比较有用的知识。所以在这里为大家简单介绍一下。</p>\n<h4 id=\"前缀表达式（少用）\">前缀表达式（少用）</h4>\n<p>又称波兰式（Polish Notation），操作符以前缀形式位于两个运算数前（如：3+2的前缀表达形式就是+ 3 2）。</p>\n<h4 id=\"中缀表达式\">中缀表达式</h4>\n<p>操作符以中缀形式位于运算数中间（如：3+2），是我们日常通用的算术和逻辑公式表示方法。</p>\n<p>例子：<br>\n$$<br>\n6×12+9−14。<br>\n$$</p>\n<h4 id=\"后缀表达式\">后缀表达式</h4>\n<p>又称逆波兰式（Reverse Polish Notation - RPN），操作符以后缀形式位于两个运算数后（如：3+2的后缀表达形式就是3 2 +）。</p>\n<p>例子：（注意！正常写是没有逗号的，这里方便区分）<br>\n$$<br>\n6 ，12 ，× ，9 ，+ ，14 ，-<br>\n$$</p>\n<h4 id=\"后缀表达式转中缀表达式的实现：\">后缀表达式转中缀表达式的实现：</h4>\n<p>从左至右依次遍历后缀表达式各个字符（需要准备一个运算数栈存储运算数和操作结果）</p>\n<p>1、字符为 运算数 ：</p>\n<p>直接入栈（注：需要先分析出完整的运算数并将其转换为对应的数据类型）</p>\n<p>2、字符为 操作符 ：</p>\n<p>连续出栈两次，使用出栈的两个数据进行相应计算，并将计算结果入栈</p>\n<p>注意：第一个出栈的运算数为 a ，第二个出栈的运算数为 b ，此时的操作符为 - ，则计算 b-a  （注：a和b顺序不能反），并将结果入栈。</p>\n<p>3、重复以上步骤直至遍历完成后缀表达式，最后栈中的数据就是中缀表达式的计算结果。</p>\n<p>还拿上面的例子：</p>\n<p>$$<br>\n6 ，12 ，× ，9 ，+ ，14 ，-<br>\n$$</p>\n<p>上面的式子就可以写成如下的中缀表达式：</p>\n<p>$$<br>\n6×12+9−14。<br>\n$$</p>\n<ul>\n<li>特别注意：针对一个确定的中缀表达式，其所对应的后缀表达式不唯一；而针对一个确定的后缀表达式，其对应的中缀表达式是唯一的。</li>\n</ul>\n<h3 id=\"3、队列\">3、队列</h3>\n<p>想象你在排队买票，这个队伍中的人都非常有素质，都自觉排队而且不会提前离开队伍。这样就只能从队首买完票再离开，从队尾进入队伍。队列的基本原则是：先进先出。</p>\n<p>再来一发图示：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/8.png\" alt></p>\n<h3 id=\"4、字符串\">4、字符串</h3>\n<p>字符串子串的概念：字符串是一串字符（废话），它的子串被定义为：字符串中<strong>任意个连续的字符组成的子序列</strong>。</p>\n<p>字符串子串个数的计算公式：<br>\n$$<br>\n\\frac{n×(n+1)}{2}+1<br>\n$$</p>\n<p>（就是字符串长度等差数列）</p>\n<p>如果是非空子串，就把那个一减去即可（子串个数的公式加一就是考虑空子串的情况）。</p>\n<h3 id=\"5-树\">5.树</h3>\n<p>emmm…直观来讲，就是一张长得像树的图。定义是任意两点之间的简单路径有且只有一条。树是一棵连通且无环的图。它的边数是𝑛−1。</p>\n<h4 id=\"二叉树的遍历\">二叉树的遍历</h4>\n<p>二叉树有不同的遍历方式，一般来讲，我们将其分成三类：先序遍历（也叫先根遍历）、中序遍历（中根遍历）以及后序遍历（后根遍历）。</p>\n<ul>\n<li><strong>先序遍历</strong>：遍历方式如下：根—左儿子—右儿子</li>\n<li><strong>中序遍历</strong>：遍历方式如下：左儿子—根—右儿子</li>\n<li><strong>后序遍历</strong>：遍历方式如下：左儿子—右儿子—根</li>\n</ul>\n<p>我们用一张图来理解一下这几种遍历方式。</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/4.png\" alt></p>\n<p>这张图的先序遍历：1245367</p>\n<p>中序遍历：4251637</p>\n<p>后序遍历：4526731</p>\n<ul>\n<li>\n<p><strong>一个推论</strong>：</p>\n<p>先序遍历+中序遍历=一棵确定的二叉树</p>\n<p>后序遍历+中序遍历=一棵确定的二叉树</p>\n<p>先序遍历+后序遍历=啥也不是</p>\n</li>\n</ul>\n<h4 id=\"特殊二叉树及其性质\">特殊二叉树及其性质</h4>\n<ul>\n<li><strong>完全二叉树</strong>：只有最后一层不是满的，且最后一层的所有节点均集中在左侧。</li>\n</ul>\n<p>图例如下：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/5.png\" alt></p>\n<ul>\n<li><strong>满二叉树</strong>：节点个数已满。</li>\n</ul>\n<p>图例如下：</p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/6.png\" alt></p>\n<ul>\n<li><strong>特殊二叉树的性质</strong>：</li>\n</ul>\n<p>1、对于一棵完全二叉树来讲，它的叶子节点为 $𝑛$，则节点总数为 $2×𝑛−1$。此结论可逆。</p>\n<p>2、对于一棵满二叉树来讲，它的层数（深度）为 $𝑘$，则它的节点总数为 $2×𝑘−1$。此结论可逆。</p>\n<h4 id=\"拓扑排序（这个先不讲）\">拓扑排序（这个先不讲）</h4>\n<h3 id=\"6-图论\">6.图论</h3>\n<p>图（Graph）是图论中的一个重要概念，用于描述由节点（顶点）和连接这些节点的边（或弧）组成的非线性数据结构。</p>\n<h4 id=\"图的基本概念：\">图的基本概念：</h4>\n<ul>\n<li>\n<p>顶点（Vertex）：图中的基本单位，通常用于表示实体或节点。</p>\n</li>\n<li>\n<p>边（Edge）：连接图中两个顶点的关系。边可以是有向的（有方向性，称为弧）或无向的（无方向性）。</p>\n</li>\n<li>\n<p>路径（Path）：顶点序列，其中每两个相邻的顶点通过一条边连接。</p>\n</li>\n<li>\n<p>环（Cycle）：路径中第一个顶点等于最后一个顶点的路径。</p>\n</li>\n<li>\n<p><strong>连通图</strong>：顾名思义，连通图就是连通的图，即任意两点都能<strong>直接或间接</strong>到达，这就区别于完全图必须直接用边到达的定义。</p>\n</li>\n<li>\n<p><strong>完全图</strong>：任意两点都有边相连，我们很容易推出来，一张完全图的边数为（𝑛为节点个数）</p>\n</li>\n</ul>\n<p>$$<br>\n\\frac{n×(n−1)}{2}<br>\n$$</p>\n<ul>\n<li>\n<p>无向图（Undirected Graph）：所有边没有方向的图。</p>\n</li>\n<li>\n<p>有向图（Directed Graph）：图中的边有方向性的图。</p>\n</li>\n<li>\n<p>权重（Weight）：边或弧上关联的数值，通常用于表示边的成本或距离。</p>\n</li>\n</ul>\n<h4 id=\"图的邻接矩阵存储：\">图的邻接矩阵存储：</h4>\n<p>邻接矩阵是用二维数组表示图的一种常见方法，其中数组元素表示顶点之间的连接关系。</p>\n<p>定义：对于一个有n个顶点的图，邻接矩阵是一个n x n的矩阵，其中元素 a[i][j] 表示顶点 i 和顶点 j 之间是否有边或弧。如果是无向图，通常用1表示连接，0表示没有连接；如果是有向图，可以用1表示有边，0表示没有边，或者用权值表示边的权重。</p>\n<p>优点：</p>\n<ul>\n<li>简单直观，易于理解和实现。</li>\n<li>方便查找任意两个顶点之间是否有边。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>浪费空间：对于稀疏图（边数量远少于顶点数量），大部分矩阵元素为0，造成空间浪费。</li>\n<li>不适合大规模图：当顶点数量非常大时，邻接矩阵的空间消耗会很大。</li>\n</ul>\n<h4 id=\"图的邻接表存储：\">图的邻接表存储：</h4>\n<p>邻接表是用链表或者类似的数据结构表示图的另一种常见方法，适合表示稀疏图。</p>\n<p>定义：使用数组和链表的结合来表示图。数组的每个元素对应一个顶点，每个元素存储与该顶点相邻的所有顶点（即与其有边直接连接的顶点）的链表或者列表。</p>\n<p>优点：</p>\n<ul>\n<li>省空间：对于稀疏图，只存储存在的边，节省了空间。</li>\n<li>插入和删除效率高：对于边的插入和删除操作，相较于邻接矩阵更加高效。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>\n<p>不便于查找任意两个顶点之间的关系：需要遍历链表来确定两个顶点是否相连，效率低于邻接矩阵。</p>\n</li>\n<li>\n<p>需要额外空间来存储链表或列表。</p>\n</li>\n</ul>\n<h4 id=\"在实际应用中，选择邻接矩阵还是邻接表取决于图的稀疏程度和需要的操作类型。稠密图适合用邻接矩阵表示，而稀疏图通常用邻接表表示。\">在实际应用中，选择邻接矩阵还是邻接表取决于图的稀疏程度和需要的操作类型。稠密图适合用邻接矩阵表示，而稀疏图通常用邻接表表示。</h4>\n<hr>\n<h2 id=\"七、时空复杂度的计算\">七、时空复杂度的计算</h2>\n<ul>\n<li><strong>时间复杂度</strong>：渐进时间复杂度用符号 $𝑂$  表示。一个程序的语句执行次数可以用一个代数式表示，那么我们取这个代数式的最高次项且忽略此项系数作为时间复杂度。如果一个程序的语句执行次数为 $2𝑛^3+3𝑛^2+𝑛+7$，那么这个程序的渐进时间复杂度为 $𝑂(𝑛^3)$ 。</li>\n<li><strong>计算非递归程序的时间复杂度</strong>：简单粗暴，数循环。</li>\n<li><strong>常数</strong>：常数即为我们忽略掉的𝑂中最高次项的系数与低次项所带来的时间消耗。</li>\n<li><strong>空间复杂度</strong>：类比时间复杂度。看开空间开了多大。</li>\n<li><strong>计算空间占用量</strong>：根据我们以上说过的计算机存储单位的知识：一个𝑖𝑛𝑡占用的内存是4𝐵，所以我们把开的𝑖𝑛𝑡乘上4，再除以1024就是𝐾𝐵，同理，再除1024就是𝑀𝐵。</li>\n</ul>\n<p>公式：𝑛为元素个数，𝑀为最终答案（以𝑀𝐵为单位）</p>\n<p>$$<br>\nM=\\frac{4𝑛}{1024×1024}<br>\n$$<br>\n$PS:一般来讲，比赛中所给的 256𝑀𝐵 内存可以开 6×10^7 个 𝑖𝑛𝑡 类型的变量。另外，大数组必须开全局变量。如果扔在主函数里极容易爆栈。$</p>\n<hr>\n<h2 id=\"八、数学、逻辑学及运筹学知识\">八、数学、逻辑学及运筹学知识</h2>\n<h3 id=\"1、排列和组合的定义\">1、排列和组合的定义</h3>\n<h4 id=\"1-排列的定义\">(1)排列的定义</h4>\n<p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素按照一定顺序排成一列，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个排列。</p>\n<h4 id=\"2-排列数的定义\">(2)排列数的定义</h4>\n<p>从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有排列的个数，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的排列数。</p>\n<h4 id=\"3-全排列的定义\">(3)全排列的定义</h4>\n<p>当 $𝑛=𝑚$ 时所有的排列情况叫做<strong>全排列</strong>。</p>\n<h4 id=\"4-组合的定义\">(4)组合的定义</h4>\n<p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素并成一组，叫做从 $𝑛$ 个不同元素中取出 $𝑚$ 个元素的一个组合。</p>\n<h4 id=\"5-组合数的定义\">(5)组合数的定义</h4>\n<p>从 $𝑛$ 个元素中选出 $𝑚$ 个元素的所有组合的个数，叫做从 $𝑛$ 个不同元素中取出 $m$ 个元素的组合数。</p>\n<h4 id=\"6-排列-组合的区别\">(6)排列&amp;组合的区别</h4>\n<p>通俗地说，组合不分顺序，而排列分顺序，也就是说，对于数列 $1，2$ ，有以下两种排列：$1，2$ 和 $2，1$ ，但是仅有一种组合 $1，2$ 或 $2，1$ 。</p>\n<h3 id=\"2、排列-组合的公式\">2、排列&amp;组合的公式</h3>\n<h4 id=\"1-关于排列的公式\">(1)关于排列的公式</h4>\n<p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的排列数，数学表示为：$𝐴_{𝑛}^𝑚$.</p>\n<p>计算公式如下：</p>\n<p>$$<br>\n𝐴_{𝑛}^𝑚=𝑛(𝑛−1)(𝑛−2)⋯(𝑛−𝑚+1)=\\frac{𝑛!}{(𝑛−𝑚)!}<br>\n$$</p>\n<h4 id=\"2-关于组合的公式\">(2)关于组合的公式</h4>\n<p>从 $𝑛$ 个不同元素中，选出 $𝑚$ 个元素的组合数，数学表示为：$𝐶_{𝑛}^𝑚$.</p>\n<p>计算公式如下：</p>\n<p>$$<br>\n𝐶_{𝑛}^𝑚=\\frac{𝐴_{𝑛}^𝑚}{𝑚!}=\\frac{𝑛!}{𝑚!(𝑛−𝑚)!}<br>\n$$</p>\n<h4 id=\"3-关于全排列的公式\">(3)关于全排列的公式</h4>\n<p>某个数列的全排列数 $𝑓(𝑛)$，计算公式如下：</p>\n<p>$$<br>\n𝑓(𝑛)=𝑛!<br>\n$$</p>\n<h3 id=\"3、全排列的求法\">3、全排列的求法</h3>\n<p>例题：生成全排列（深搜基础题）</p>\n<p><a href=\"https://neooj.com/oldoj/problem.php?id=1742\">题目链接</a></p>\n<p>给定 $𝑛$ ,生成 $1−𝑛$ 的全排列。</p>\n<p>我们考虑用递归来解决全排列问题：</p>\n<p>递归出口是当 $x==n+1$ 地时候，绝对不能仅仅等于 $n！$</p>\n<p>我们的递归部分使用标记数组和数列数组实现，具体实现方法可以参照下图：<br>\n<img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/9.jpg\" alt></p>\n<hr>\n<h2 id=\"九、算法\">九、算法</h2>\n<h3 id=\"1-算法的基本概念\">1.算法的基本概念</h3>\n<p>算法的特征：有穷性，确切性，至少一个输出，可行性</p>\n<p>表示方法：自然语言法，程序流程图法（顺序结构，选择结构，循环结构），程序法</p>\n<h3 id=\"2-排序\">2.排序</h3>\n<ul>\n<li>$选择排序：对待排序的记录序列进行n-1遍的处理。第一遍处理是将L[1…n]中最小者与L[1]交换位置，第二遍处理是将L[2…n]中最小者与L[2]交换位置，以此类推，时间复杂度为O(n^{2}) )。选择排序是稳定排序。$</li>\n<li>$插入排序：经过i-1遍处理后，L[1…i-1]已排好序。第i遍处理仅将L[i]插入L[1…i-1]的适当位置p，原来p后的元素一一向右移动一个位置，使得L[1…i]又是排好序的序列，时间复杂度为O(n^2 )。插入排序是稳定排序。$</li>\n<li>$冒泡排序：又称交换排序。对待排序的记录的关键字进行两两比较，如果发现是反序的，则进行交换，时间复杂度为O( n^2 )。冒泡排序是稳定排序。$</li>\n<li>$希尔排序：先将待排序列进行预排序，使待排序列接近有序，然后再对该序列进行一次插入排序，此时插入排序的时间复杂度为O(n)，$</li>\n<li>$快速排序：先从数据序列中选一个元素，并将序列中所有比该元素小的元素都放在它的一边，再对左右两边分别用同样的方法处理，直到每一个待处理的序列长度为1，处理结束。时间复杂度下限为O(nlogn)，上限为O( n^2 )。快速排序是不稳定排序，基于分治思想。$</li>\n<li>$归并排序：归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。时间复杂度为O(nlogn)$</li>\n</ul>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/11.png\" alt></p>\n<p><img src=\"/2024/06/20/csp-j1%E7%9F%A5%E8%AF%86%E7%82%B9/12.png\" alt></p>\n<h3 id=\"考试用到的其他基础算法板子将在我另外一篇博客里。\">考试用到的其他基础算法板子将在我另外一篇博客里。</h3>\n<hr>\n<h2 id=\"十、程序阅读\">十、程序阅读</h2>\n<h3 id=\"阅读程序及完善程序题答题方法\">阅读程序及完善程序题答题方法</h3>\n<h3 id=\"（1）阅读程序和完善程序两个大题在CSP考试当中占据70分，也就是一多半。所以，前面的选择题全对也只能得个30分。这种题不要求必须全对，但是想进入普及组复赛，必须保证拿到70-80-（约合49-56分）的分值\">（1）阅读程序和完善程序两个大题在CSP考试当中占据70分，也就是一多半。所以，前面的选择题全对也只能得个30分。这种题不要求必须全对，但是想进入普及组复赛，必须保证拿到70%~80%（约合49~56分）的分值</h3>\n<h3 id=\"（2）题型：\">（2）题型：</h3>\n<p>① 阅读程序先给一个完整的程序，再给2~3个判断题和1~2个选择题，类似于阅读理解。除特殊说明外，判断题一个1.5分，选择题一个3分。<br>\n②完善程序先给一个有残缺部分的程序，再把合适的代码依次填入空中，均为选择题（一个题3分）。类似于完形填空</p>\n<h3 id=\"（3）答题技巧\">（3）答题技巧</h3>\n<p>① 拿到卷子不用先看代码，先看题，在根据题干有目的地阅读代码的相应片段<br>\n② 不要一上来就先看第一题，第一题不会就死磕。先找突破口，就是那种非常好填的空，先填上后再加分析，推出其他题的答案。有的代码前后有关联，可以根据前后联系推出答案<br>\n③ 碰到特别长的程序千万不要惊慌。出一条长代码可能有这几点原因：1.这个程序所涉及的算法确实需要很长的代码；2.故意的，写一个特别长的代码纯粹就是一个考验，看看哪些人遇到这样的题不会慌张。也就是，有的长代码就是个纸老虎，静下心好好分析，不难。<br>\n④ 这种题也要看平时的积累以及扎实程度。多背一些算法的模板代码及例题，这种题拿五十多分也并非难事</p>\n<hr>\n"},{"title":"基于Pytorch框架的深度学习入门基础","date":"2023-03-14T13:06:41.000Z","description":"深度学习入门，让你的机器产生思维吧！","cover":"https://pic1.zhimg.com/v2-5ea151d43c0ebb13546985d225ac256a_1200x500.jpg","_content":"\n\n\n## 首先声明！！！\n\n---\n\n* 1.脚本为本人总结，如有使用注明出处。\n* 2.Pytorch基于Python编程语言编写脚本。\n* 3.脚本内有注释。\n\n---\n\n\n\n## 一、main_demo\n\n```python\n# 这是一个示例 Python 脚本。\n\n# 按 Shift+F10 执行或将其替换为您的代码。\n# 按 双击 Shift 在所有地方搜索类、文件、工具窗口、操作和设置。\n\n\ndef print_hi(name):\n    # 在下面的代码行中使用断点来调试脚本。\n    print(f'Hi, {name}')  # 按 Ctrl+F8 切换断点。\n\n\n# 按间距中的绿色按钮以运行脚本。\nif __name__ == '__main__':\n    print_hi('PyCharm')\n\n# 访问 https://www.jetbrains.com/help/pycharm/ 获取 PyCharm 帮助\n```\n\n\n\n## 二、read_data（读取数据）\n\n```python\nfrom torch.utils.data import Dataset\nfrom PIL import Image\nimport os\n\n\nclass MyData(Dataset):\n\n    # 初始化函数\n    def __init__(self, root_dir, label_dir):\n        self.root_dir = root_dir\n        self.label_dir = label_dir\n        self.path = os.path.join(self.root_dir, self.label_dir)\n        self.img_path = os.listdir(self.path)\n\n    # 获取数据集\n    def __getitem__(self, idx):\n        img_name = self.img_path[idx]\n        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)\n        img = Image.open(img_item_path)\n        lable = self.label_dir\n        return img, lable\n\n    # 获取长度\n    def __len__(self):\n        return len(self.img_path)\n\n\nroot_dir = \"dataset/hymenoptera_data/train\"\n\nants_label_dir = \"ants\"\nbees_label_dir = \"bees\"\n\nants_dataset = MyData(root_dir, ants_label_dir)\nbees_dataset = MyData(root_dir, bees_label_dir)\n\ntrain_dataset = ants_dataset + bees_dataset\n\n```\n\n\n\n## 三、test_tb（简单测试）\n\n```python\nfrom torch.utils.tensorboard import SummaryWriter\nimport numpy as np\nfrom PIL import Image\n\n\nwriter = SummaryWriter(\"logs\")\nimage_path = \"dataset/hymenoptera_data/train/bees/16838648_415acd9e3f.jpg\"\nimg_PIL = Image.open(image_path)\nimg_array = np.array(img_PIL)\n# print(type(img_array))\n# print(img_array.shape)\n\n\nwriter.add_image(\"test\", img_array, 2, dataformats='HWC')\n# y = x\nfor i in range(100):\n    writer.add_scalar(\"y=2x\", 2*i, i)\n\n\nwriter.close()\n```\n\n### 可视化页面展示：\n\n![test1](test1.png)\n\n\n\n## 四、Transforms（数据转换）\n\n```python\nfrom PIL import Image\nfrom torchvision import transforms\nfrom torch.utils.tensorboard import SummaryWriter\n\n\n# python的用法 -> tensor数据类型\n# 通过 transforms.ToTensor看两个问题\n# 1. transforms该如何使用？\n# 2. 为什么我们需要Tensor数据类型\n\n# 绝对路径 C:\\Users\\Administrator\\Desktop\\编程代码\\Python\\pytorch深度学习\\dataset\\hymenoptera_data\\train\\ants\\0013035.jpg\n# 相对路径 dataset/hymenoptera_data/train/ants/0013035.jpg\n\nimg_path = \"dataset/hymenoptera_data/train/ants/0013035.jpg\"\nimg = Image.open(img_path)\n\nwriter = SummaryWriter(\"logs\")\n\ntensor_trans = transforms.ToTensor()\ntensor_img = tensor_trans(img)\nwriter.add_image(\"Tensor_img\", tensor_img)\n\nwriter.close()\n```\n\n\n\n## 五、UseTransforms（使用数据转换）\n```python\nfrom PIL import Image\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torchvision import transforms\n\n\nwriter = SummaryWriter(\"logs\")\nimg = Image.open(\"images/桌面.jpg\")\n\n# TpTensor的使用\ntrans_totensor = transforms.ToTensor()\nimg_tensor = trans_totensor(img)\nwriter.add_image(\"Totensor\", img_tensor)\n\n# Normalize\nprint(img_tensor[0][0][0])\ntrans_norm = transforms.Normalize([6, 3, 2], [9, 3, 5])\nimg_norm = trans_norm(img_tensor)\nprint(img_norm[0][0][0])\nwriter.add_image(\"Normalize\", img_norm, 2)\n\n# Resize\nprint(img.size)\ntrans_resize = transforms.Resize((512, 512))\nimg_resize = trans_resize(img)\nimg_resize = trans_totensor(img_resize)\nwriter.add_image(\"Resize\", img_resize, 0)\nprint(img_resize)\n\n# Compose - resize - 2\ntrans_resize_2 = transforms.Resize(512)\ntrans_compose = transforms.Compose([trans_resize_2, trans_totensor])\nimg_resize_2 = trans_compose(img)\nwriter.add_image(\"Resize\", img_resize_2, 1)\n\n# RandomCrop\ntrans_random = transforms.RandomCrop(512)\ntrans_compose_2 = transforms.Compose([trans_random, trans_totensor])\nfor i in range(10):\n    img_crop = trans_compose_2(img)\n    writer.add_image(\"RandomCrop\", img_crop, i)\n\nwriter.close()\n```\n\n\n\n## 六、dataset_transforms（数据集使用）\n\n```python\nimport torchvision\nfrom torch.utils.tensorboard import SummaryWriter\n\n\ndataset_transform = torchvision.transforms.Compose([\n    torchvision.transforms.ToTensor()\n])\n\ntrain_set = torchvision.datasets.CIFAR10(root=\"./dataset\", train=True, transform=dataset_transform, download=True)\ntest_set = torchvision.datasets.CIFAR10(root=\"./dataset\", train=False, transform=dataset_transform, download=True)\n\n# print(test_set[0])\n\nwriter = SummaryWriter(\"../p10\")\nfor i in range(10):\n    img, target = test_set[i]\n    writer.add_image((\"test_set\", img, i))\n\nwriter.close()\n```\n\n\n\n## 七、read_data（读取数据）\n\n```python\nfrom torch.utils.data import Dataset\nfrom PIL import Image\nimport os\n\n\nclass MyData(Dataset):\n\n    # 初始化函数\n    def __init__(self, root_dir, label_dir):\n        self.root_dir = root_dir\n        self.label_dir = label_dir\n        self.path = os.path.join(self.root_dir, self.label_dir)\n        self.img_path = os.listdir(self.path)\n\n    # 获取数据集\n    def __getitem__(self, idx):\n        img_name = self.img_path[idx]\n        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)\n        img = Image.open(img_item_path)\n        lable = self.label_dir\n        return img, lable\n\n    # 获取长度\n    def __len__(self):\n        return len(self.img_path)\n\n\nroot_dir = \"../dataset/hymenoptera_data/train\"\nants_label_dir = \"ants\"\nbees_label_dir = \"bees\"\nants_dataset = MyData(root_dir, ants_label_dir)\nbees_dataset = MyData(root_dir, bees_label_dir)\n\ntrain_dataset = ants_dataset + bees_dataset\n```\n\n\n\n## 八、nn_module（模型基础）\n\n```python\nimport torch\nfrom torch import nn\n\n\nclass Tudui(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n    def forward(self, input):\n        output = input + 1\n        return output\n\n\ntudui = Tudui()\nx = torch.tensor(1.0)\noutput = tudui(x)\nprint(output)\n```\n\n\n\n## 九、nn_conv2d（卷积层）\n\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Conv2d\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False,\n        transform=torchvision.transforms.ToTensor(), download=True)\n\ndataloader = DataLoader(dataset, batch_size=64)\n\nclass Tudui(nn.Module):\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.conv1 = Conv2d(in_channels=3, out_channels=6, kernel_size=3, stride=1, padding=0)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        return x\n\ntudui = Tudui()\n\nwriter = SummaryWriter(\"../logs\")\n\nstep = 0\nfor data in dataloader:\n    imgs, targets = data\n    output = tudui(imgs)\n    # print(imgs.shape)\n    # print(output.shape)\n\n    # torch.Size([64, 3, 32, 32])\n    writer.add_images(\"input\", imgs, step)\n\n    # torch.Size([64, 6, 30, 30]) -> [xxx, 3, 30, 30]\n    output = torch.reshape(output, (-1, 3, 30, 30))\n    writer.add_images(\"output\", output, step)\n\n    step += 1\n```\n\n\n\n## 十、nn_maxpool（最大池化）\n\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import MaxPool2d\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False, download=True,\n                                       transform=torchvision.transforms.ToTensor())\n\ndataloader = DataLoader(dataset, batch_size=64)\n\n# 二维矩阵最大池化\n# input = torch.tensor([[1, 2, 0, 3, 1],\n#                      [0, 1, 2, 3, 1],\n#                      [1, 2, 1, 0, 0],\n#                      [5, 2, 3, 1, 1],\n#                      [2, 1, 0, 1, 1]], dtype=torch.float32)\n#\n# input = torch.reshape(input, (-1, 1, 5, 5))\n# print(input.shape)\n\nclass Tudui(nn.Module):\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.maxpool1 = MaxPool2d(kernel_size=3, ceil_mode=True)\n\n    def forward(self, input):\n        output = self.maxpool1(input)\n        return output\n\ntudui = Tudui()\n\nwriter = SummaryWriter(\"../logs_maxpool\")\nstep = 0\n\nfor data in dataloader:\n    imgs, targets = data\n    writer.add_images(\"input\", imgs, step)\n    output = tudui(imgs)\n    writer.add_images(\"output\", output, step)\n    step += 1\n\nwriter.close()\n```\n\n\n\n## 十一、nn_relu（非线性激活）\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import ReLU, Sigmoid\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\ninput = torch.tensor([[1, -0.5],\n                       [-1, 3]])\n\n\ninput = torch.reshape(input, (-1, 1, 2, 2))\n\n\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False, download=True,\n                                       transform=torchvision.transforms.ToTensor())\n\ndataloader = DataLoader(dataset, batch_size=64)\n\n\nclass Tudui(nn.Module):\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.relu1 = ReLU()\n        self.sigmoid1 = Sigmoid()\n\n    def forward(self, input):\n        output = self.sigmoid1(input)\n        return output\n\n\ntudui = Tudui()\n# output = tudui(input)\n# print(output)\n\n\nwriter = SummaryWriter(\"../logs_relu\")\nstep = 0\n\nfor data in dataloader:\n    imgs, targets = data\n    writer.add_images(\"input\", imgs, step)\n    output = tudui(imgs)\n    writer.add_images(\"output\", output, step)\n    step += 1\n\nwriter.close()\n```\n\n\n\n## 十二、nn_linear（线性层）\n\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Linear\nfrom torch.utils.data import DataLoader\n\n\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False, download=True,\n                                       transform=torchvision.transforms.ToTensor())\n\ndataloader = DataLoader(dataset, batch_size=64)\n\n\nclass Tudui(nn.Module):\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.linear1 = Linear(196608, 10)\n\n    def forward(self, input):\n        output = self.linear1(input)\n        return output\n\n\ntudui = Tudui()\n\nfor data in dataloader:\n    imgs, targets = data\n    print(imgs.shape)\n    output = torch.reshape(imgs, (1, 1, 1, -1))\n    print(output.shape)\n    output = tudui(output)\n    print(output.shape)\n```\n\n\n\n## 十三、nn_seq（搭建小实战）\n\n```python\nimport torch\nfrom torch import nn\nfrom torch.nn import Conv2d, MaxPool2d, Flatten, Linear, Sequential\nfrom torch.utils.tensorboard import SummaryWriter\n\n\nclass Tudui(nn.Module):\n\n    def __init__(self):\n        super(Tudui, self).__init__()\n\n        # self.conv1 = Conv2d(3, 32, 5, padding=2)\n        # self.maxpool1 = MaxPool2d(2)\n        # self.conv2 = Conv2d(32, 32, 5, padding=2)\n        # self.maxpool2 = MaxPool2d(2)\n        # self.conv3 = Conv2d(32, 64, 5, padding=2)\n        # self.maxpool3 = MaxPool2d(2)\n        # self.flatten = Flatten()\n        # self.linear1 = Linear(1024, 64)\n        # self.linear2 = Linear(64, 10)\n\n        self.model1 = Sequential(\n            Conv2d(3, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 64, 5, padding=2),\n            MaxPool2d(2),\n            Flatten(),\n            Linear(1024, 64),\n            Linear(64, 10)\n        )\n\n    def forward(self, x):\n\n        # x = self.conv1(x)\n        # x = self.maxpool1(x)\n        # x = self.conv2(x)\n        # x = self.maxpool2(x)\n        # x = self.conv3(x)\n        # x = self.maxpool3(x)\n        # x = self.flatten(x)\n        # x = self.linear1(x)\n        # x = self.linear2(x)\n\n        x = self.model1(x)\n        return x\n\n\ntudui = Tudui()\nprint(tudui)\n\ninput = torch.ones((64, 3, 32, 32))\noutput = tudui(input)\nprint(output.shape)\n\n\nwriter = SummaryWriter(\"../logs_seq\")\nwriter.add_graph(tudui, input)\n\nwriter.close()\n```\n\n\n\n## 十四、损失函数与反向传播\n\n### 1.nn_loss\n```python\nimport torch\nfrom torch.nn import L1Loss\nfrom torch import nn\n\n\ninputs = torch.tensor([1, 2, 3], dtype=torch.float32)\ntargets = torch.tensor([1, 2, 5], dtype=torch.float32)\n\ninputs = torch.reshape(inputs, (1, 1, 1, 3))\ntargets = torch.reshape(targets, (1, 1, 1, 3))\n\nloss = L1Loss(reduction='sum')\nresult = loss(inputs, targets)\n\nloss_mse = nn.MSELoss()\nresult_mse = loss_mse(inputs, targets)\n\nprint(result)\nprint(result_mse)\n```\n### 2.nn_loss_network\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Conv2d, MaxPool2d, Flatten, Linear, Sequential\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\n# 导入数据集\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False,\n        transform=torchvision.transforms.ToTensor(), download=True)\n\ndataloader = DataLoader(dataset, batch_size=64)\n\n\n# 神经网络模板\nclass Tudui(nn.Module):\n\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.model1 = Sequential(\n            Conv2d(3, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 64, 5, padding=2),\n            MaxPool2d(2),\n            Flatten(),\n            Linear(1024, 64),\n            Linear(64, 10)\n        )\n\n    def forward(self, x):\n        x = self.model1(x)\n        return x\n\n\n# 计算损失\nloss = nn.CrossEntropyLoss()\ntudui = Tudui()\nfor data in dataloader:\n    imgs, targets = data\n    outputs = tudui(imgs)\n    result_loss = loss(outputs, targets)\n    result_loss.backward()\n```\n\n### 3.可视化页面展示\n\n![test2](test2.png)\n\n\n\n## 十五、nn_optim（优化器）\n\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Conv2d, MaxPool2d, Flatten, Linear, Sequential\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\n# 导入数据集\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False,\n                                       transform=torchvision.transforms.ToTensor(), download=True)\n\ndataloader = DataLoader(dataset, batch_size=64)\n\n\n# 神经网络模板\nclass Tudui(nn.Module):\n\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.model1 = Sequential(\n            Conv2d(3, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 64, 5, padding=2),\n            MaxPool2d(2),\n            Flatten(),\n            Linear(1024, 64),\n            Linear(64, 10)\n        )\n\n    def forward(self, x):\n        x = self.model1(x)\n        return x\n\n\n# 计算损失、梯度下降\n\nloss = nn.CrossEntropyLoss()\ntudui = Tudui()\noptim = torch.optim.SGD(tudui.parameters(), lr=0.01)\n\nfor epoch in range(20):\n    running_loss = 0.0\n    for data in dataloader:\n        imgs, targets = data\n        outputs = tudui(imgs)\n        result_loss = loss(outputs, targets)\n        optim.zero_grad()\n        result_loss.backward()\n        optim.step()\n        running_loss += result_loss\n    print(running_loss)\n```\n\n\n\n## 十六、model_pretrained（对现有网络模型进行修改.vgg16）\n\n```python\nimport torchvision\nfrom torch import nn\n\n\n# train_data = torchvision.datasets.ImageNet(\"../data_image_net\", split='train',\n#                                            download=True, transform=torchvision.transforms.ToTensor())\n\n\nvgg16_false = torchvision.models.vgg16(pretrained=False)\nvgg16_true = torchvision.models.vgg16(pretrained=True)\n\n\n\ntrain_data = torchvision.datasets.CIFAR10(\"../data\", train=False,\n                                       transform=torchvision.transforms.ToTensor(), download=True)\n\n\nvgg16_true.classifier.add_module('add_linear', nn.Linear(1000, 10))\nprint(vgg16_true)\n\nvgg16_false.classifier[6] = nn.Linear(4096, 10)\nprint(vgg16_false)\n```\n\n\n\n## 十七、模型的保存与读取\n\n### 1.model_save\n```python\nimport torch\nimport torchvision\n\n\nvgg16 = torchvision.models.vgg16(pretrained=False)\n\n# 保存方式1:模型结构+模型参数\ntorch.save(vgg16, \"vgg16_method1.pth\")\n\n# 保存方式2:模型参数（官方推荐）\ntorch.save(vgg16.state_dict(), \"vgg16_method2.pth\")\n```\n\n### 2.model_load\n```python\nimport torch\nimport torchvision\n\n\n# 方式1：加载模型\n# model = torch.load(\"vgg16_method1.pth\")\n# print(model)\n\n# 方式2：加载模型\nvgg16 = torchvision.models.vgg16(pretrained=False)\nvgg16.load_state_dict(torch.load(\"vgg16_method2.pth\"))\n# model = torch.load(\"vgg16_method2.pth\")\nprint(vgg16)\n```\n\n\n\n## 十八、train（完整模型训练套路）\n\n```python\nimport torch.optim\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Sequential, Conv2d, MaxPool2d, Flatten, Linear\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\nfrom model import *\n\n\n# 准备数据集\ntrain_data = torchvision.datasets.CIFAR10(root=\"../data\", train=True,\n                                           download=True, transform=torchvision.transforms.ToTensor())\n\ntest_data = torchvision.datasets.CIFAR10(root=\"../data\", train=False,\n                                           download=True, transform=torchvision.transforms.ToTensor())\n\n\n# 数据集长度\ntrain_data_size = len(train_data)\ntest_data_size = len(test_data)\nprint(\"训练数据集的长度为：{}\".format(train_data_size))\nprint(\"测试数据集的长度为：{}\".format(test_data_size))\n\n# 利用 DataLoader 来加载数据集\ntrain_dataloader = DataLoader(train_data, batch_size=64)\ntest_dataloader = DataLoader(test_data, batch_size=64)\n\n# 创建网络模型\ntudui = Tudui()\n\n# 损失函数\nloss_fn = nn.CrossEntropyLoss()\n\n# 优化器\nlearning_rate = 0.01\noptimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)\n\n# 设置训练网络的参数\n# 记录训练的次数\ntotal_train_step = 0\n# 记录测试的次数\ntotal_test_step = 0\n# 训练的轮数\nepoch = 10\n\n\n# 添加tensorboard\nwriter = SummaryWriter(\"../logs_train\")\n\n\n# 开始训练\nfor i in range(epoch):\n\n    print(\"-----第{}轮训练开始-----\".format(i+1))\n\n    # 训练步骤开始\n    tudui.train()\n    for data in train_dataloader:\n        imgs, targets = data\n        outputs = tudui(imgs)\n        loss = loss_fn(outputs,targets)\n        # 优化器优化模型\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        # 显示次数和损失loss\n        total_train_step += 1\n        if total_train_step % 100 == 0:\n            print(\"训练次数:{}, Loss:{}\".format(total_train_step, loss.item()))\n            writer.add_scalar(\"train_loss\", loss.item(), total_train_step)\n\n    # 测试步骤开始\n    tudui.eval()\n    total_test_loss = 0\n    total_accuracy = 0\n    with torch.no_grad():\n        for data in test_dataloader:\n            imgs, targets = data\n            outputs = tudui(imgs)\n            loss = loss_fn(outputs, targets)\n            total_test_loss += loss.item()\n            accuracy = (outputs.argmax(1) == targets).sum()\n            total_accuracy += accuracy\n\n    print(\"整体测试集上的Loss:{}\".format(total_test_loss))\n    print(\"整体测试集上的正确率:{}\".format(total_accuracy/test_data_size))\n    writer.add_scalar(\"teat_loss\", total_test_loss, total_test_step)\n    writer.add_scalar(\"test_accuracy\", total_accuracy/test_data_size, total_test_step)\n    total_test_step += 1\n\n    # torch.save(tudui, \"model_classify_{}.pth\".format(i))\n    # print(\"模型已保存！\")\n\n\nwriter.close()\n```\n### 可视化页面展示：\n\n![test3](test3.png)\n\n\n\n## 十九、利用GPU训练\n\n### 1.train_gpu_1\n```python\nimport time\nfrom model import *\nimport torch.optim\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Sequential, Conv2d, MaxPool2d, Flatten, Linear\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\n\n# 准备数据集\ntrain_data = torchvision.datasets.CIFAR10(root=\"../data\", train=True,\n                                           download=True, transform=torchvision.transforms.ToTensor())\n\ntest_data = torchvision.datasets.CIFAR10(root=\"../data\", train=False,\n                                           download=True, transform=torchvision.transforms.ToTensor())\n\n\n# 数据集长度\ntrain_data_size = len(train_data)\ntest_data_size = len(test_data)\nprint(\"训练数据集的长度为：{}\".format(train_data_size))\nprint(\"测试数据集的长度为：{}\".format(test_data_size))\n\n# 利用 DataLoader 来加载数据集\ntrain_dataloader = DataLoader(train_data, batch_size=64)\ntest_dataloader = DataLoader(test_data, batch_size=64)\n\n# 创建网络模型\ntudui = Tudui()\n\nif torch.cuda.is_available():\n    tudui = tudui.cuda()\n\n\n# 损失函数\nloss_fn = nn.CrossEntropyLoss()\n\nif torch.cuda.is_available():\n    loss_fn = loss_fn.cuda()\n\n# 优化器\nlearning_rate = 0.01\noptimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)\n\n\n# 设置训练网络的参数\n# 记录训练的次数\ntotal_train_step = 0\n# 记录测试的次数\ntotal_test_step = 0\n# 训练的轮数\nepoch = 10\n\n\n# 添加tensorboard\nwriter = SummaryWriter(\"../logs_train\")\nstart_time = time.time()\n\n\n# 开始训练\nfor i in range(epoch):\n\n    print(\"-----第{}轮训练开始-----\".format(i+1))\n\n    # 训练步骤开始\n    tudui.train()\n\n    for data in train_dataloader:\n        imgs, targets = data\n\n        if torch.cuda.is_available():\n            imgs = imgs.cuda()\n            targets = targets.cuda()\n\n        outputs = tudui(imgs)\n        loss = loss_fn(outputs,targets)\n        # 优化器优化模型\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        # 显示次数和损失loss\n        total_train_step += 1\n        if total_train_step % 1000 == 0:\n            end_time = time.time()\n            print(end_time - start_time)\n            print(\"训练次数:{}, Loss:{}\".format(total_train_step, loss.item()))\n            writer.add_scalar(\"train_loss\", loss.item(), total_train_step)\n\n    # 测试步骤开始\n    tudui.eval()\n    total_test_loss = 0\n    total_accuracy = 0\n\n    with torch.no_grad():\n        for data in test_dataloader:\n            imgs, targets = data\n\n            if torch.cuda.is_available():\n                imgs = imgs.cuda()\n                targets = targets.cuda()\n\n            outputs = tudui(imgs)\n            loss = loss_fn(outputs, targets)\n            total_test_loss += loss.item()\n            accuracy = (outputs.argmax(1) == targets).sum()\n            total_accuracy += accuracy\n\n    print(\"整体测试集上的Loss:{}\".format(total_test_loss))\n    print(\"整体测试集上的正确率:{}\".format(total_accuracy/test_data_size))\n    writer.add_scalar(\"teat_loss\", total_test_loss, total_test_step)\n    writer.add_scalar(\"test_accuracy\", total_accuracy/test_data_size, total_test_step)\n    total_test_step += 1\n\n    if i == 29:\n        torch.save(tudui, \"model_{}.pth\".format(i+1))\n        print(\"模型已保存！\")\n\n\nwriter.close()\n```\n\n### 2.train_gpu_2\n```python\nimport time\nfrom model import *\nimport torch.optim\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Sequential, Conv2d, MaxPool2d, Flatten, Linear\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\n# 定义训练设备\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n\n# 准备数据集\ntrain_data = torchvision.datasets.CIFAR10(root=\"../data\", train=True,\n                download=True, transform=torchvision.transforms.ToTensor())\n\ntest_data = torchvision.datasets.CIFAR10(root=\"../data\", train=False,\n                download=True, transform=torchvision.transforms.ToTensor())\n\n\n# 数据集长度\ntrain_data_size = len(train_data)\ntest_data_size = len(test_data)\nprint(\"训练数据集的长度为：{}\".format(train_data_size))\nprint(\"测试数据集的长度为：{}\".format(test_data_size))\n\n# 利用 DataLoader 来加载数据集\ntrain_dataloader = DataLoader(train_data, batch_size=64)\ntest_dataloader = DataLoader(test_data, batch_size=64)\n\n# 创建网络模型\ntudui = Tudui()\ntudui.to(device)\n\n\n# 损失函数\nloss_fn = nn.CrossEntropyLoss()\nloss_fn.to(device)\n\n# 优化器\nlearning_rate = 0.01\noptimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)\n\n\n# 设置训练网络的参数\n# 记录训练的次数\ntotal_train_step = 0\n# 记录测试的次数\ntotal_test_step = 0\n# 训练的轮数\nepoch = 30\n\n\n# 添加tensorboard\nwriter = SummaryWriter(\"../logs_train\")\nstart_time = time.time()\n\n\n# 开始训练\nfor i in range(epoch):\n\n    print(\"-----第{}轮训练开始-----\".format(i+1))\n\n    # 训练步骤开始\n    tudui.train()\n\n    for data in train_dataloader:\n        imgs, targets = data\n\n        imgs = imgs.to(device)\n        targets = targets.to(device)\n\n        outputs = tudui(imgs)\n        loss = loss_fn(outputs, targets)\n        # 优化器优化模型\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        # 显示次数和损失loss\n        total_train_step += 1\n        if total_train_step % 100 == 0:\n            writer.add_scalar(\"train_loss\", loss.item(), total_train_step)\n\n    # 测试步骤开始\n    tudui.eval()\n    total_test_loss = 0\n    total_accuracy = 0\n\n    with torch.no_grad():\n        for data in test_dataloader:\n            imgs, targets = data\n\n            imgs = imgs.to(device)\n            targets = targets.to(device)\n\n            outputs = tudui(imgs)\n            loss = loss_fn(outputs, targets)\n            total_test_loss += loss.item()\n            accuracy = (outputs.argmax(1) == targets).sum()\n            total_accuracy += accuracy\n\n    end_time = time.time()\n    print(\"time: {}s\".format(end_time - start_time))\n    print(\"训练次数:{}, Loss:{}\".format(total_train_step, loss.item()))\n\n    print(\"整体测试集上的Loss:{}\".format(total_test_loss))\n    print(\"整体测试集上的正确率:{}\".format(total_accuracy/test_data_size))\n    writer.add_scalar(\"teat_loss\", total_test_loss, total_test_step)\n    writer.add_scalar(\"test_accuracy\", total_accuracy/test_data_size, total_test_step)\n    total_test_step += 1\n\n    if i == 29:\n        torch.save(tudui, \"model_{}.pth\".format(i + 1))\n        print(\"模型已保存！\")\n\n\nwriter.close()\n```\n\n\n\n## 二十、test（模型验证）\n\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom PIL import Image\nfrom torch.nn import Sequential, Conv2d, MaxPool2d, Flatten, Linear\n\n\nimage_path = \"../images/dog.png\"\nimage = Image.open(image_path)\n\ntransform = torchvision.transforms.Compose([torchvision.transforms.Resize((32, 32)),\n                                            torchvision.transforms.ToTensor()])\n\nimage = transform(image)\n\n\nclass Tudui(nn.Module):\n\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.model1 = Sequential(\n            Conv2d(3, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 64, 5, padding=2),\n            MaxPool2d(2),\n            Flatten(),\n            Linear(1024, 64),\n            Linear(64, 10)\n        )\n\n    def forward(self, x):\n        x = self.model1(x)\n        return x\n\nmodel = torch.load(\"model_30.pth\", map_location=torch.device('cpu'))\n\nimage = torch.reshape(image, (1, 3, 32, 32))\nmodel.eval()\nwith torch.no_grad():\n    output = model(image)\n\nprint(output.argmax(1))\n```\n\n---","source":"_posts/基于Pytorch框架的深度学习入门基础.md","raw":"---\ntitle: 基于Pytorch框架的深度学习入门基础\ndate: 2023/3/14 21:06:41\ndescription: 深度学习入门，让你的机器产生思维吧！\n\ncategories: Deeplearn\ntags: 深度学习\ncover: https://pic1.zhimg.com/v2-5ea151d43c0ebb13546985d225ac256a_1200x500.jpg\n---\n\n\n\n## 首先声明！！！\n\n---\n\n* 1.脚本为本人总结，如有使用注明出处。\n* 2.Pytorch基于Python编程语言编写脚本。\n* 3.脚本内有注释。\n\n---\n\n\n\n## 一、main_demo\n\n```python\n# 这是一个示例 Python 脚本。\n\n# 按 Shift+F10 执行或将其替换为您的代码。\n# 按 双击 Shift 在所有地方搜索类、文件、工具窗口、操作和设置。\n\n\ndef print_hi(name):\n    # 在下面的代码行中使用断点来调试脚本。\n    print(f'Hi, {name}')  # 按 Ctrl+F8 切换断点。\n\n\n# 按间距中的绿色按钮以运行脚本。\nif __name__ == '__main__':\n    print_hi('PyCharm')\n\n# 访问 https://www.jetbrains.com/help/pycharm/ 获取 PyCharm 帮助\n```\n\n\n\n## 二、read_data（读取数据）\n\n```python\nfrom torch.utils.data import Dataset\nfrom PIL import Image\nimport os\n\n\nclass MyData(Dataset):\n\n    # 初始化函数\n    def __init__(self, root_dir, label_dir):\n        self.root_dir = root_dir\n        self.label_dir = label_dir\n        self.path = os.path.join(self.root_dir, self.label_dir)\n        self.img_path = os.listdir(self.path)\n\n    # 获取数据集\n    def __getitem__(self, idx):\n        img_name = self.img_path[idx]\n        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)\n        img = Image.open(img_item_path)\n        lable = self.label_dir\n        return img, lable\n\n    # 获取长度\n    def __len__(self):\n        return len(self.img_path)\n\n\nroot_dir = \"dataset/hymenoptera_data/train\"\n\nants_label_dir = \"ants\"\nbees_label_dir = \"bees\"\n\nants_dataset = MyData(root_dir, ants_label_dir)\nbees_dataset = MyData(root_dir, bees_label_dir)\n\ntrain_dataset = ants_dataset + bees_dataset\n\n```\n\n\n\n## 三、test_tb（简单测试）\n\n```python\nfrom torch.utils.tensorboard import SummaryWriter\nimport numpy as np\nfrom PIL import Image\n\n\nwriter = SummaryWriter(\"logs\")\nimage_path = \"dataset/hymenoptera_data/train/bees/16838648_415acd9e3f.jpg\"\nimg_PIL = Image.open(image_path)\nimg_array = np.array(img_PIL)\n# print(type(img_array))\n# print(img_array.shape)\n\n\nwriter.add_image(\"test\", img_array, 2, dataformats='HWC')\n# y = x\nfor i in range(100):\n    writer.add_scalar(\"y=2x\", 2*i, i)\n\n\nwriter.close()\n```\n\n### 可视化页面展示：\n\n![test1](test1.png)\n\n\n\n## 四、Transforms（数据转换）\n\n```python\nfrom PIL import Image\nfrom torchvision import transforms\nfrom torch.utils.tensorboard import SummaryWriter\n\n\n# python的用法 -> tensor数据类型\n# 通过 transforms.ToTensor看两个问题\n# 1. transforms该如何使用？\n# 2. 为什么我们需要Tensor数据类型\n\n# 绝对路径 C:\\Users\\Administrator\\Desktop\\编程代码\\Python\\pytorch深度学习\\dataset\\hymenoptera_data\\train\\ants\\0013035.jpg\n# 相对路径 dataset/hymenoptera_data/train/ants/0013035.jpg\n\nimg_path = \"dataset/hymenoptera_data/train/ants/0013035.jpg\"\nimg = Image.open(img_path)\n\nwriter = SummaryWriter(\"logs\")\n\ntensor_trans = transforms.ToTensor()\ntensor_img = tensor_trans(img)\nwriter.add_image(\"Tensor_img\", tensor_img)\n\nwriter.close()\n```\n\n\n\n## 五、UseTransforms（使用数据转换）\n```python\nfrom PIL import Image\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torchvision import transforms\n\n\nwriter = SummaryWriter(\"logs\")\nimg = Image.open(\"images/桌面.jpg\")\n\n# TpTensor的使用\ntrans_totensor = transforms.ToTensor()\nimg_tensor = trans_totensor(img)\nwriter.add_image(\"Totensor\", img_tensor)\n\n# Normalize\nprint(img_tensor[0][0][0])\ntrans_norm = transforms.Normalize([6, 3, 2], [9, 3, 5])\nimg_norm = trans_norm(img_tensor)\nprint(img_norm[0][0][0])\nwriter.add_image(\"Normalize\", img_norm, 2)\n\n# Resize\nprint(img.size)\ntrans_resize = transforms.Resize((512, 512))\nimg_resize = trans_resize(img)\nimg_resize = trans_totensor(img_resize)\nwriter.add_image(\"Resize\", img_resize, 0)\nprint(img_resize)\n\n# Compose - resize - 2\ntrans_resize_2 = transforms.Resize(512)\ntrans_compose = transforms.Compose([trans_resize_2, trans_totensor])\nimg_resize_2 = trans_compose(img)\nwriter.add_image(\"Resize\", img_resize_2, 1)\n\n# RandomCrop\ntrans_random = transforms.RandomCrop(512)\ntrans_compose_2 = transforms.Compose([trans_random, trans_totensor])\nfor i in range(10):\n    img_crop = trans_compose_2(img)\n    writer.add_image(\"RandomCrop\", img_crop, i)\n\nwriter.close()\n```\n\n\n\n## 六、dataset_transforms（数据集使用）\n\n```python\nimport torchvision\nfrom torch.utils.tensorboard import SummaryWriter\n\n\ndataset_transform = torchvision.transforms.Compose([\n    torchvision.transforms.ToTensor()\n])\n\ntrain_set = torchvision.datasets.CIFAR10(root=\"./dataset\", train=True, transform=dataset_transform, download=True)\ntest_set = torchvision.datasets.CIFAR10(root=\"./dataset\", train=False, transform=dataset_transform, download=True)\n\n# print(test_set[0])\n\nwriter = SummaryWriter(\"../p10\")\nfor i in range(10):\n    img, target = test_set[i]\n    writer.add_image((\"test_set\", img, i))\n\nwriter.close()\n```\n\n\n\n## 七、read_data（读取数据）\n\n```python\nfrom torch.utils.data import Dataset\nfrom PIL import Image\nimport os\n\n\nclass MyData(Dataset):\n\n    # 初始化函数\n    def __init__(self, root_dir, label_dir):\n        self.root_dir = root_dir\n        self.label_dir = label_dir\n        self.path = os.path.join(self.root_dir, self.label_dir)\n        self.img_path = os.listdir(self.path)\n\n    # 获取数据集\n    def __getitem__(self, idx):\n        img_name = self.img_path[idx]\n        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)\n        img = Image.open(img_item_path)\n        lable = self.label_dir\n        return img, lable\n\n    # 获取长度\n    def __len__(self):\n        return len(self.img_path)\n\n\nroot_dir = \"../dataset/hymenoptera_data/train\"\nants_label_dir = \"ants\"\nbees_label_dir = \"bees\"\nants_dataset = MyData(root_dir, ants_label_dir)\nbees_dataset = MyData(root_dir, bees_label_dir)\n\ntrain_dataset = ants_dataset + bees_dataset\n```\n\n\n\n## 八、nn_module（模型基础）\n\n```python\nimport torch\nfrom torch import nn\n\n\nclass Tudui(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n    def forward(self, input):\n        output = input + 1\n        return output\n\n\ntudui = Tudui()\nx = torch.tensor(1.0)\noutput = tudui(x)\nprint(output)\n```\n\n\n\n## 九、nn_conv2d（卷积层）\n\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Conv2d\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False,\n        transform=torchvision.transforms.ToTensor(), download=True)\n\ndataloader = DataLoader(dataset, batch_size=64)\n\nclass Tudui(nn.Module):\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.conv1 = Conv2d(in_channels=3, out_channels=6, kernel_size=3, stride=1, padding=0)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        return x\n\ntudui = Tudui()\n\nwriter = SummaryWriter(\"../logs\")\n\nstep = 0\nfor data in dataloader:\n    imgs, targets = data\n    output = tudui(imgs)\n    # print(imgs.shape)\n    # print(output.shape)\n\n    # torch.Size([64, 3, 32, 32])\n    writer.add_images(\"input\", imgs, step)\n\n    # torch.Size([64, 6, 30, 30]) -> [xxx, 3, 30, 30]\n    output = torch.reshape(output, (-1, 3, 30, 30))\n    writer.add_images(\"output\", output, step)\n\n    step += 1\n```\n\n\n\n## 十、nn_maxpool（最大池化）\n\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import MaxPool2d\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False, download=True,\n                                       transform=torchvision.transforms.ToTensor())\n\ndataloader = DataLoader(dataset, batch_size=64)\n\n# 二维矩阵最大池化\n# input = torch.tensor([[1, 2, 0, 3, 1],\n#                      [0, 1, 2, 3, 1],\n#                      [1, 2, 1, 0, 0],\n#                      [5, 2, 3, 1, 1],\n#                      [2, 1, 0, 1, 1]], dtype=torch.float32)\n#\n# input = torch.reshape(input, (-1, 1, 5, 5))\n# print(input.shape)\n\nclass Tudui(nn.Module):\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.maxpool1 = MaxPool2d(kernel_size=3, ceil_mode=True)\n\n    def forward(self, input):\n        output = self.maxpool1(input)\n        return output\n\ntudui = Tudui()\n\nwriter = SummaryWriter(\"../logs_maxpool\")\nstep = 0\n\nfor data in dataloader:\n    imgs, targets = data\n    writer.add_images(\"input\", imgs, step)\n    output = tudui(imgs)\n    writer.add_images(\"output\", output, step)\n    step += 1\n\nwriter.close()\n```\n\n\n\n## 十一、nn_relu（非线性激活）\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import ReLU, Sigmoid\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\ninput = torch.tensor([[1, -0.5],\n                       [-1, 3]])\n\n\ninput = torch.reshape(input, (-1, 1, 2, 2))\n\n\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False, download=True,\n                                       transform=torchvision.transforms.ToTensor())\n\ndataloader = DataLoader(dataset, batch_size=64)\n\n\nclass Tudui(nn.Module):\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.relu1 = ReLU()\n        self.sigmoid1 = Sigmoid()\n\n    def forward(self, input):\n        output = self.sigmoid1(input)\n        return output\n\n\ntudui = Tudui()\n# output = tudui(input)\n# print(output)\n\n\nwriter = SummaryWriter(\"../logs_relu\")\nstep = 0\n\nfor data in dataloader:\n    imgs, targets = data\n    writer.add_images(\"input\", imgs, step)\n    output = tudui(imgs)\n    writer.add_images(\"output\", output, step)\n    step += 1\n\nwriter.close()\n```\n\n\n\n## 十二、nn_linear（线性层）\n\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Linear\nfrom torch.utils.data import DataLoader\n\n\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False, download=True,\n                                       transform=torchvision.transforms.ToTensor())\n\ndataloader = DataLoader(dataset, batch_size=64)\n\n\nclass Tudui(nn.Module):\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.linear1 = Linear(196608, 10)\n\n    def forward(self, input):\n        output = self.linear1(input)\n        return output\n\n\ntudui = Tudui()\n\nfor data in dataloader:\n    imgs, targets = data\n    print(imgs.shape)\n    output = torch.reshape(imgs, (1, 1, 1, -1))\n    print(output.shape)\n    output = tudui(output)\n    print(output.shape)\n```\n\n\n\n## 十三、nn_seq（搭建小实战）\n\n```python\nimport torch\nfrom torch import nn\nfrom torch.nn import Conv2d, MaxPool2d, Flatten, Linear, Sequential\nfrom torch.utils.tensorboard import SummaryWriter\n\n\nclass Tudui(nn.Module):\n\n    def __init__(self):\n        super(Tudui, self).__init__()\n\n        # self.conv1 = Conv2d(3, 32, 5, padding=2)\n        # self.maxpool1 = MaxPool2d(2)\n        # self.conv2 = Conv2d(32, 32, 5, padding=2)\n        # self.maxpool2 = MaxPool2d(2)\n        # self.conv3 = Conv2d(32, 64, 5, padding=2)\n        # self.maxpool3 = MaxPool2d(2)\n        # self.flatten = Flatten()\n        # self.linear1 = Linear(1024, 64)\n        # self.linear2 = Linear(64, 10)\n\n        self.model1 = Sequential(\n            Conv2d(3, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 64, 5, padding=2),\n            MaxPool2d(2),\n            Flatten(),\n            Linear(1024, 64),\n            Linear(64, 10)\n        )\n\n    def forward(self, x):\n\n        # x = self.conv1(x)\n        # x = self.maxpool1(x)\n        # x = self.conv2(x)\n        # x = self.maxpool2(x)\n        # x = self.conv3(x)\n        # x = self.maxpool3(x)\n        # x = self.flatten(x)\n        # x = self.linear1(x)\n        # x = self.linear2(x)\n\n        x = self.model1(x)\n        return x\n\n\ntudui = Tudui()\nprint(tudui)\n\ninput = torch.ones((64, 3, 32, 32))\noutput = tudui(input)\nprint(output.shape)\n\n\nwriter = SummaryWriter(\"../logs_seq\")\nwriter.add_graph(tudui, input)\n\nwriter.close()\n```\n\n\n\n## 十四、损失函数与反向传播\n\n### 1.nn_loss\n```python\nimport torch\nfrom torch.nn import L1Loss\nfrom torch import nn\n\n\ninputs = torch.tensor([1, 2, 3], dtype=torch.float32)\ntargets = torch.tensor([1, 2, 5], dtype=torch.float32)\n\ninputs = torch.reshape(inputs, (1, 1, 1, 3))\ntargets = torch.reshape(targets, (1, 1, 1, 3))\n\nloss = L1Loss(reduction='sum')\nresult = loss(inputs, targets)\n\nloss_mse = nn.MSELoss()\nresult_mse = loss_mse(inputs, targets)\n\nprint(result)\nprint(result_mse)\n```\n### 2.nn_loss_network\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Conv2d, MaxPool2d, Flatten, Linear, Sequential\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\n# 导入数据集\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False,\n        transform=torchvision.transforms.ToTensor(), download=True)\n\ndataloader = DataLoader(dataset, batch_size=64)\n\n\n# 神经网络模板\nclass Tudui(nn.Module):\n\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.model1 = Sequential(\n            Conv2d(3, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 64, 5, padding=2),\n            MaxPool2d(2),\n            Flatten(),\n            Linear(1024, 64),\n            Linear(64, 10)\n        )\n\n    def forward(self, x):\n        x = self.model1(x)\n        return x\n\n\n# 计算损失\nloss = nn.CrossEntropyLoss()\ntudui = Tudui()\nfor data in dataloader:\n    imgs, targets = data\n    outputs = tudui(imgs)\n    result_loss = loss(outputs, targets)\n    result_loss.backward()\n```\n\n### 3.可视化页面展示\n\n![test2](test2.png)\n\n\n\n## 十五、nn_optim（优化器）\n\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Conv2d, MaxPool2d, Flatten, Linear, Sequential\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\n# 导入数据集\ndataset = torchvision.datasets.CIFAR10(\"../data\", train=False,\n                                       transform=torchvision.transforms.ToTensor(), download=True)\n\ndataloader = DataLoader(dataset, batch_size=64)\n\n\n# 神经网络模板\nclass Tudui(nn.Module):\n\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.model1 = Sequential(\n            Conv2d(3, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 64, 5, padding=2),\n            MaxPool2d(2),\n            Flatten(),\n            Linear(1024, 64),\n            Linear(64, 10)\n        )\n\n    def forward(self, x):\n        x = self.model1(x)\n        return x\n\n\n# 计算损失、梯度下降\n\nloss = nn.CrossEntropyLoss()\ntudui = Tudui()\noptim = torch.optim.SGD(tudui.parameters(), lr=0.01)\n\nfor epoch in range(20):\n    running_loss = 0.0\n    for data in dataloader:\n        imgs, targets = data\n        outputs = tudui(imgs)\n        result_loss = loss(outputs, targets)\n        optim.zero_grad()\n        result_loss.backward()\n        optim.step()\n        running_loss += result_loss\n    print(running_loss)\n```\n\n\n\n## 十六、model_pretrained（对现有网络模型进行修改.vgg16）\n\n```python\nimport torchvision\nfrom torch import nn\n\n\n# train_data = torchvision.datasets.ImageNet(\"../data_image_net\", split='train',\n#                                            download=True, transform=torchvision.transforms.ToTensor())\n\n\nvgg16_false = torchvision.models.vgg16(pretrained=False)\nvgg16_true = torchvision.models.vgg16(pretrained=True)\n\n\n\ntrain_data = torchvision.datasets.CIFAR10(\"../data\", train=False,\n                                       transform=torchvision.transforms.ToTensor(), download=True)\n\n\nvgg16_true.classifier.add_module('add_linear', nn.Linear(1000, 10))\nprint(vgg16_true)\n\nvgg16_false.classifier[6] = nn.Linear(4096, 10)\nprint(vgg16_false)\n```\n\n\n\n## 十七、模型的保存与读取\n\n### 1.model_save\n```python\nimport torch\nimport torchvision\n\n\nvgg16 = torchvision.models.vgg16(pretrained=False)\n\n# 保存方式1:模型结构+模型参数\ntorch.save(vgg16, \"vgg16_method1.pth\")\n\n# 保存方式2:模型参数（官方推荐）\ntorch.save(vgg16.state_dict(), \"vgg16_method2.pth\")\n```\n\n### 2.model_load\n```python\nimport torch\nimport torchvision\n\n\n# 方式1：加载模型\n# model = torch.load(\"vgg16_method1.pth\")\n# print(model)\n\n# 方式2：加载模型\nvgg16 = torchvision.models.vgg16(pretrained=False)\nvgg16.load_state_dict(torch.load(\"vgg16_method2.pth\"))\n# model = torch.load(\"vgg16_method2.pth\")\nprint(vgg16)\n```\n\n\n\n## 十八、train（完整模型训练套路）\n\n```python\nimport torch.optim\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Sequential, Conv2d, MaxPool2d, Flatten, Linear\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\nfrom model import *\n\n\n# 准备数据集\ntrain_data = torchvision.datasets.CIFAR10(root=\"../data\", train=True,\n                                           download=True, transform=torchvision.transforms.ToTensor())\n\ntest_data = torchvision.datasets.CIFAR10(root=\"../data\", train=False,\n                                           download=True, transform=torchvision.transforms.ToTensor())\n\n\n# 数据集长度\ntrain_data_size = len(train_data)\ntest_data_size = len(test_data)\nprint(\"训练数据集的长度为：{}\".format(train_data_size))\nprint(\"测试数据集的长度为：{}\".format(test_data_size))\n\n# 利用 DataLoader 来加载数据集\ntrain_dataloader = DataLoader(train_data, batch_size=64)\ntest_dataloader = DataLoader(test_data, batch_size=64)\n\n# 创建网络模型\ntudui = Tudui()\n\n# 损失函数\nloss_fn = nn.CrossEntropyLoss()\n\n# 优化器\nlearning_rate = 0.01\noptimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)\n\n# 设置训练网络的参数\n# 记录训练的次数\ntotal_train_step = 0\n# 记录测试的次数\ntotal_test_step = 0\n# 训练的轮数\nepoch = 10\n\n\n# 添加tensorboard\nwriter = SummaryWriter(\"../logs_train\")\n\n\n# 开始训练\nfor i in range(epoch):\n\n    print(\"-----第{}轮训练开始-----\".format(i+1))\n\n    # 训练步骤开始\n    tudui.train()\n    for data in train_dataloader:\n        imgs, targets = data\n        outputs = tudui(imgs)\n        loss = loss_fn(outputs,targets)\n        # 优化器优化模型\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        # 显示次数和损失loss\n        total_train_step += 1\n        if total_train_step % 100 == 0:\n            print(\"训练次数:{}, Loss:{}\".format(total_train_step, loss.item()))\n            writer.add_scalar(\"train_loss\", loss.item(), total_train_step)\n\n    # 测试步骤开始\n    tudui.eval()\n    total_test_loss = 0\n    total_accuracy = 0\n    with torch.no_grad():\n        for data in test_dataloader:\n            imgs, targets = data\n            outputs = tudui(imgs)\n            loss = loss_fn(outputs, targets)\n            total_test_loss += loss.item()\n            accuracy = (outputs.argmax(1) == targets).sum()\n            total_accuracy += accuracy\n\n    print(\"整体测试集上的Loss:{}\".format(total_test_loss))\n    print(\"整体测试集上的正确率:{}\".format(total_accuracy/test_data_size))\n    writer.add_scalar(\"teat_loss\", total_test_loss, total_test_step)\n    writer.add_scalar(\"test_accuracy\", total_accuracy/test_data_size, total_test_step)\n    total_test_step += 1\n\n    # torch.save(tudui, \"model_classify_{}.pth\".format(i))\n    # print(\"模型已保存！\")\n\n\nwriter.close()\n```\n### 可视化页面展示：\n\n![test3](test3.png)\n\n\n\n## 十九、利用GPU训练\n\n### 1.train_gpu_1\n```python\nimport time\nfrom model import *\nimport torch.optim\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Sequential, Conv2d, MaxPool2d, Flatten, Linear\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\n\n# 准备数据集\ntrain_data = torchvision.datasets.CIFAR10(root=\"../data\", train=True,\n                                           download=True, transform=torchvision.transforms.ToTensor())\n\ntest_data = torchvision.datasets.CIFAR10(root=\"../data\", train=False,\n                                           download=True, transform=torchvision.transforms.ToTensor())\n\n\n# 数据集长度\ntrain_data_size = len(train_data)\ntest_data_size = len(test_data)\nprint(\"训练数据集的长度为：{}\".format(train_data_size))\nprint(\"测试数据集的长度为：{}\".format(test_data_size))\n\n# 利用 DataLoader 来加载数据集\ntrain_dataloader = DataLoader(train_data, batch_size=64)\ntest_dataloader = DataLoader(test_data, batch_size=64)\n\n# 创建网络模型\ntudui = Tudui()\n\nif torch.cuda.is_available():\n    tudui = tudui.cuda()\n\n\n# 损失函数\nloss_fn = nn.CrossEntropyLoss()\n\nif torch.cuda.is_available():\n    loss_fn = loss_fn.cuda()\n\n# 优化器\nlearning_rate = 0.01\noptimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)\n\n\n# 设置训练网络的参数\n# 记录训练的次数\ntotal_train_step = 0\n# 记录测试的次数\ntotal_test_step = 0\n# 训练的轮数\nepoch = 10\n\n\n# 添加tensorboard\nwriter = SummaryWriter(\"../logs_train\")\nstart_time = time.time()\n\n\n# 开始训练\nfor i in range(epoch):\n\n    print(\"-----第{}轮训练开始-----\".format(i+1))\n\n    # 训练步骤开始\n    tudui.train()\n\n    for data in train_dataloader:\n        imgs, targets = data\n\n        if torch.cuda.is_available():\n            imgs = imgs.cuda()\n            targets = targets.cuda()\n\n        outputs = tudui(imgs)\n        loss = loss_fn(outputs,targets)\n        # 优化器优化模型\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        # 显示次数和损失loss\n        total_train_step += 1\n        if total_train_step % 1000 == 0:\n            end_time = time.time()\n            print(end_time - start_time)\n            print(\"训练次数:{}, Loss:{}\".format(total_train_step, loss.item()))\n            writer.add_scalar(\"train_loss\", loss.item(), total_train_step)\n\n    # 测试步骤开始\n    tudui.eval()\n    total_test_loss = 0\n    total_accuracy = 0\n\n    with torch.no_grad():\n        for data in test_dataloader:\n            imgs, targets = data\n\n            if torch.cuda.is_available():\n                imgs = imgs.cuda()\n                targets = targets.cuda()\n\n            outputs = tudui(imgs)\n            loss = loss_fn(outputs, targets)\n            total_test_loss += loss.item()\n            accuracy = (outputs.argmax(1) == targets).sum()\n            total_accuracy += accuracy\n\n    print(\"整体测试集上的Loss:{}\".format(total_test_loss))\n    print(\"整体测试集上的正确率:{}\".format(total_accuracy/test_data_size))\n    writer.add_scalar(\"teat_loss\", total_test_loss, total_test_step)\n    writer.add_scalar(\"test_accuracy\", total_accuracy/test_data_size, total_test_step)\n    total_test_step += 1\n\n    if i == 29:\n        torch.save(tudui, \"model_{}.pth\".format(i+1))\n        print(\"模型已保存！\")\n\n\nwriter.close()\n```\n\n### 2.train_gpu_2\n```python\nimport time\nfrom model import *\nimport torch.optim\nimport torchvision\nfrom torch import nn\nfrom torch.nn import Sequential, Conv2d, MaxPool2d, Flatten, Linear\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\n\n\n# 定义训练设备\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n\n# 准备数据集\ntrain_data = torchvision.datasets.CIFAR10(root=\"../data\", train=True,\n                download=True, transform=torchvision.transforms.ToTensor())\n\ntest_data = torchvision.datasets.CIFAR10(root=\"../data\", train=False,\n                download=True, transform=torchvision.transforms.ToTensor())\n\n\n# 数据集长度\ntrain_data_size = len(train_data)\ntest_data_size = len(test_data)\nprint(\"训练数据集的长度为：{}\".format(train_data_size))\nprint(\"测试数据集的长度为：{}\".format(test_data_size))\n\n# 利用 DataLoader 来加载数据集\ntrain_dataloader = DataLoader(train_data, batch_size=64)\ntest_dataloader = DataLoader(test_data, batch_size=64)\n\n# 创建网络模型\ntudui = Tudui()\ntudui.to(device)\n\n\n# 损失函数\nloss_fn = nn.CrossEntropyLoss()\nloss_fn.to(device)\n\n# 优化器\nlearning_rate = 0.01\noptimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)\n\n\n# 设置训练网络的参数\n# 记录训练的次数\ntotal_train_step = 0\n# 记录测试的次数\ntotal_test_step = 0\n# 训练的轮数\nepoch = 30\n\n\n# 添加tensorboard\nwriter = SummaryWriter(\"../logs_train\")\nstart_time = time.time()\n\n\n# 开始训练\nfor i in range(epoch):\n\n    print(\"-----第{}轮训练开始-----\".format(i+1))\n\n    # 训练步骤开始\n    tudui.train()\n\n    for data in train_dataloader:\n        imgs, targets = data\n\n        imgs = imgs.to(device)\n        targets = targets.to(device)\n\n        outputs = tudui(imgs)\n        loss = loss_fn(outputs, targets)\n        # 优化器优化模型\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        # 显示次数和损失loss\n        total_train_step += 1\n        if total_train_step % 100 == 0:\n            writer.add_scalar(\"train_loss\", loss.item(), total_train_step)\n\n    # 测试步骤开始\n    tudui.eval()\n    total_test_loss = 0\n    total_accuracy = 0\n\n    with torch.no_grad():\n        for data in test_dataloader:\n            imgs, targets = data\n\n            imgs = imgs.to(device)\n            targets = targets.to(device)\n\n            outputs = tudui(imgs)\n            loss = loss_fn(outputs, targets)\n            total_test_loss += loss.item()\n            accuracy = (outputs.argmax(1) == targets).sum()\n            total_accuracy += accuracy\n\n    end_time = time.time()\n    print(\"time: {}s\".format(end_time - start_time))\n    print(\"训练次数:{}, Loss:{}\".format(total_train_step, loss.item()))\n\n    print(\"整体测试集上的Loss:{}\".format(total_test_loss))\n    print(\"整体测试集上的正确率:{}\".format(total_accuracy/test_data_size))\n    writer.add_scalar(\"teat_loss\", total_test_loss, total_test_step)\n    writer.add_scalar(\"test_accuracy\", total_accuracy/test_data_size, total_test_step)\n    total_test_step += 1\n\n    if i == 29:\n        torch.save(tudui, \"model_{}.pth\".format(i + 1))\n        print(\"模型已保存！\")\n\n\nwriter.close()\n```\n\n\n\n## 二十、test（模型验证）\n\n```python\nimport torch\nimport torchvision\nfrom torch import nn\nfrom PIL import Image\nfrom torch.nn import Sequential, Conv2d, MaxPool2d, Flatten, Linear\n\n\nimage_path = \"../images/dog.png\"\nimage = Image.open(image_path)\n\ntransform = torchvision.transforms.Compose([torchvision.transforms.Resize((32, 32)),\n                                            torchvision.transforms.ToTensor()])\n\nimage = transform(image)\n\n\nclass Tudui(nn.Module):\n\n    def __init__(self):\n        super(Tudui, self).__init__()\n        self.model1 = Sequential(\n            Conv2d(3, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 32, 5, padding=2),\n            MaxPool2d(2),\n            Conv2d(32, 64, 5, padding=2),\n            MaxPool2d(2),\n            Flatten(),\n            Linear(1024, 64),\n            Linear(64, 10)\n        )\n\n    def forward(self, x):\n        x = self.model1(x)\n        return x\n\nmodel = torch.load(\"model_30.pth\", map_location=torch.device('cpu'))\n\nimage = torch.reshape(image, (1, 3, 32, 32))\nmodel.eval()\nwith torch.no_grad():\n    output = model(image)\n\nprint(output.argmax(1))\n```\n\n---","slug":"基于Pytorch框架的深度学习入门基础","published":1,"updated":"2024-06-20T12:56:59.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvo8000rhwtv3bvage28","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.脚本为本人总结，如有使用注明出处。</li>\n<li>2.Pytorch基于Python编程语言编写脚本。</li>\n<li>3.脚本内有注释。</li>\n</ul>\n<hr>\n<h2 id=\"一、main-demo\">一、main_demo</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这是一个示例 Python 脚本。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按 Shift+F10 执行或将其替换为您的代码。</span></span><br><span class=\"line\"><span class=\"comment\"># 按 双击 Shift 在所有地方搜索类、文件、工具窗口、操作和设置。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_hi</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 在下面的代码行中使用断点来调试脚本。</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Hi, <span class=\"subst\">&#123;name&#125;</span>&#x27;</span>)  <span class=\"comment\"># 按 Ctrl+F8 切换断点。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按间距中的绿色按钮以运行脚本。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    print_hi(<span class=\"string\">&#x27;PyCharm&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问 https://www.jetbrains.com/help/pycharm/ 获取 PyCharm 帮助</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、read-data（读取数据）\">二、read_data（读取数据）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyData</span>(<span class=\"title class_ inherited__\">Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化函数</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, root_dir, label_dir</span>):</span><br><span class=\"line\">        self.root_dir = root_dir</span><br><span class=\"line\">        self.label_dir = label_dir</span><br><span class=\"line\">        self.path = os.path.join(self.root_dir, self.label_dir)</span><br><span class=\"line\">        self.img_path = os.listdir(self.path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取数据集</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self, idx</span>):</span><br><span class=\"line\">        img_name = self.img_path[idx]</span><br><span class=\"line\">        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)</span><br><span class=\"line\">        img = Image.<span class=\"built_in\">open</span>(img_item_path)</span><br><span class=\"line\">        lable = self.label_dir</span><br><span class=\"line\">        <span class=\"keyword\">return</span> img, lable</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取长度</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__len__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.img_path)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root_dir = <span class=\"string\">&quot;dataset/hymenoptera_data/train&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ants_label_dir = <span class=\"string\">&quot;ants&quot;</span></span><br><span class=\"line\">bees_label_dir = <span class=\"string\">&quot;bees&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class=\"line\">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class=\"line\"></span><br><span class=\"line\">train_dataset = ants_dataset + bees_dataset</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、test-tb（简单测试）\">三、test_tb（简单测试）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;logs&quot;</span>)</span><br><span class=\"line\">image_path = <span class=\"string\">&quot;dataset/hymenoptera_data/train/bees/16838648_415acd9e3f.jpg&quot;</span></span><br><span class=\"line\">img_PIL = Image.<span class=\"built_in\">open</span>(image_path)</span><br><span class=\"line\">img_array = np.array(img_PIL)</span><br><span class=\"line\"><span class=\"comment\"># print(type(img_array))</span></span><br><span class=\"line\"><span class=\"comment\"># print(img_array.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;test&quot;</span>, img_array, <span class=\"number\">2</span>, dataformats=<span class=\"string\">&#x27;HWC&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># y = x</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;y=2x&quot;</span>, <span class=\"number\">2</span>*i, i)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"可视化页面展示：\">可视化页面展示：</h3>\n<p><img src=\"/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test1.png\" alt=\"test1\"></p>\n<h2 id=\"四、Transforms（数据转换）\">四、Transforms（数据转换）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python的用法 -&gt; tensor数据类型</span></span><br><span class=\"line\"><span class=\"comment\"># 通过 transforms.ToTensor看两个问题</span></span><br><span class=\"line\"><span class=\"comment\"># 1. transforms该如何使用？</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 为什么我们需要Tensor数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绝对路径 C:\\Users\\Administrator\\Desktop\\编程代码\\Python\\pytorch深度学习\\dataset\\hymenoptera_data\\train\\ants\\0013035.jpg</span></span><br><span class=\"line\"><span class=\"comment\"># 相对路径 dataset/hymenoptera_data/train/ants/0013035.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\">img_path = <span class=\"string\">&quot;dataset/hymenoptera_data/train/ants/0013035.jpg&quot;</span></span><br><span class=\"line\">img = Image.<span class=\"built_in\">open</span>(img_path)</span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;logs&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">tensor_trans = transforms.ToTensor()</span><br><span class=\"line\">tensor_img = tensor_trans(img)</span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;Tensor_img&quot;</span>, tensor_img)</span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、UseTransforms（使用数据转换）\">五、UseTransforms（使用数据转换）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;logs&quot;</span>)</span><br><span class=\"line\">img = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;images/桌面.jpg&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># TpTensor的使用</span></span><br><span class=\"line\">trans_totensor = transforms.ToTensor()</span><br><span class=\"line\">img_tensor = trans_totensor(img)</span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;Totensor&quot;</span>, img_tensor)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Normalize</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(img_tensor[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\">trans_norm = transforms.Normalize([<span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>], [<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">img_norm = trans_norm(img_tensor)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(img_norm[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;Normalize&quot;</span>, img_norm, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Resize</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(img.size)</span><br><span class=\"line\">trans_resize = transforms.Resize((<span class=\"number\">512</span>, <span class=\"number\">512</span>))</span><br><span class=\"line\">img_resize = trans_resize(img)</span><br><span class=\"line\">img_resize = trans_totensor(img_resize)</span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;Resize&quot;</span>, img_resize, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(img_resize)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Compose - resize - 2</span></span><br><span class=\"line\">trans_resize_2 = transforms.Resize(<span class=\"number\">512</span>)</span><br><span class=\"line\">trans_compose = transforms.Compose([trans_resize_2, trans_totensor])</span><br><span class=\"line\">img_resize_2 = trans_compose(img)</span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;Resize&quot;</span>, img_resize_2, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RandomCrop</span></span><br><span class=\"line\">trans_random = transforms.RandomCrop(<span class=\"number\">512</span>)</span><br><span class=\"line\">trans_compose_2 = transforms.Compose([trans_random, trans_totensor])</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    img_crop = trans_compose_2(img)</span><br><span class=\"line\">    writer.add_image(<span class=\"string\">&quot;RandomCrop&quot;</span>, img_crop, i)</span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、dataset-transforms（数据集使用）\">六、dataset_transforms（数据集使用）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dataset_transform = torchvision.transforms.Compose([</span><br><span class=\"line\">    torchvision.transforms.ToTensor()</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;./dataset&quot;</span>, train=<span class=\"literal\">True</span>, transform=dataset_transform, download=<span class=\"literal\">True</span>)</span><br><span class=\"line\">test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;./dataset&quot;</span>, train=<span class=\"literal\">False</span>, transform=dataset_transform, download=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(test_set[0])</span></span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../p10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    img, target = test_set[i]</span><br><span class=\"line\">    writer.add_image((<span class=\"string\">&quot;test_set&quot;</span>, img, i))</span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、read-data（读取数据）\">七、read_data（读取数据）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyData</span>(<span class=\"title class_ inherited__\">Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化函数</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, root_dir, label_dir</span>):</span><br><span class=\"line\">        self.root_dir = root_dir</span><br><span class=\"line\">        self.label_dir = label_dir</span><br><span class=\"line\">        self.path = os.path.join(self.root_dir, self.label_dir)</span><br><span class=\"line\">        self.img_path = os.listdir(self.path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取数据集</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self, idx</span>):</span><br><span class=\"line\">        img_name = self.img_path[idx]</span><br><span class=\"line\">        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)</span><br><span class=\"line\">        img = Image.<span class=\"built_in\">open</span>(img_item_path)</span><br><span class=\"line\">        lable = self.label_dir</span><br><span class=\"line\">        <span class=\"keyword\">return</span> img, lable</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取长度</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__len__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.img_path)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root_dir = <span class=\"string\">&quot;../dataset/hymenoptera_data/train&quot;</span></span><br><span class=\"line\">ants_label_dir = <span class=\"string\">&quot;ants&quot;</span></span><br><span class=\"line\">bees_label_dir = <span class=\"string\">&quot;bees&quot;</span></span><br><span class=\"line\">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class=\"line\">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class=\"line\"></span><br><span class=\"line\">train_dataset = ants_dataset + bees_dataset</span><br></pre></td></tr></table></figure>\n<h2 id=\"八、nn-module（模型基础）\">八、nn_module（模型基础）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, <span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">        output = <span class=\"built_in\">input</span> + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\">x = torch.tensor(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">output = tudui(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(output)</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、nn-conv2d（卷积层）\">九、nn_conv2d（卷积层）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Conv2d</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">        transform=torchvision.transforms.ToTensor(), download=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.conv1 = Conv2d(in_channels=<span class=\"number\">3</span>, out_channels=<span class=\"number\">6</span>, kernel_size=<span class=\"number\">3</span>, stride=<span class=\"number\">1</span>, padding=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = self.conv1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">    imgs, targets = data</span><br><span class=\"line\">    output = tudui(imgs)</span><br><span class=\"line\">    <span class=\"comment\"># print(imgs.shape)</span></span><br><span class=\"line\">    <span class=\"comment\"># print(output.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># torch.Size([64, 3, 32, 32])</span></span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;input&quot;</span>, imgs, step)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># torch.Size([64, 6, 30, 30]) -&gt; [xxx, 3, 30, 30]</span></span><br><span class=\"line\">    output = torch.reshape(output, (-<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">30</span>, <span class=\"number\">30</span>))</span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;output&quot;</span>, output, step)</span><br><span class=\"line\"></span><br><span class=\"line\">    step += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十、nn-maxpool（最大池化）\">十、nn_maxpool（最大池化）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> MaxPool2d</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, download=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                       transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 二维矩阵最大池化</span></span><br><span class=\"line\"><span class=\"comment\"># input = torch.tensor([[1, 2, 0, 3, 1],</span></span><br><span class=\"line\"><span class=\"comment\">#                      [0, 1, 2, 3, 1],</span></span><br><span class=\"line\"><span class=\"comment\">#                      [1, 2, 1, 0, 0],</span></span><br><span class=\"line\"><span class=\"comment\">#                      [5, 2, 3, 1, 1],</span></span><br><span class=\"line\"><span class=\"comment\">#                      [2, 1, 0, 1, 1]], dtype=torch.float32)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># input = torch.reshape(input, (-1, 1, 5, 5))</span></span><br><span class=\"line\"><span class=\"comment\"># print(input.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.maxpool1 = MaxPool2d(kernel_size=<span class=\"number\">3</span>, ceil_mode=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, <span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">        output = self.maxpool1(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_maxpool&quot;</span>)</span><br><span class=\"line\">step = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">    imgs, targets = data</span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;input&quot;</span>, imgs, step)</span><br><span class=\"line\">    output = tudui(imgs)</span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;output&quot;</span>, output, step)</span><br><span class=\"line\">    step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"十一、nn-relu（非线性激活）\">十一、nn_relu（非线性激活）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> ReLU, Sigmoid</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.tensor([[<span class=\"number\">1</span>, -<span class=\"number\">0.5</span>],</span><br><span class=\"line\">                       [-<span class=\"number\">1</span>, <span class=\"number\">3</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.reshape(<span class=\"built_in\">input</span>, (-<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, download=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                       transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.relu1 = ReLU()</span><br><span class=\"line\">        self.sigmoid1 = Sigmoid()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, <span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">        output = self.sigmoid1(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"><span class=\"comment\"># output = tudui(input)</span></span><br><span class=\"line\"><span class=\"comment\"># print(output)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_relu&quot;</span>)</span><br><span class=\"line\">step = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">    imgs, targets = data</span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;input&quot;</span>, imgs, step)</span><br><span class=\"line\">    output = tudui(imgs)</span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;output&quot;</span>, output, step)</span><br><span class=\"line\">    step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"十二、nn-linear（线性层）\">十二、nn_linear（线性层）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Linear</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, download=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                       transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.linear1 = Linear(<span class=\"number\">196608</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, <span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">        output = self.linear1(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">    imgs, targets = data</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(imgs.shape)</span><br><span class=\"line\">    output = torch.reshape(imgs, (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(output.shape)</span><br><span class=\"line\">    output = tudui(output)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(output.shape)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十三、nn-seq（搭建小实战）\">十三、nn_seq（搭建小实战）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># self.conv1 = Conv2d(3, 32, 5, padding=2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.maxpool1 = MaxPool2d(2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.conv2 = Conv2d(32, 32, 5, padding=2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.maxpool2 = MaxPool2d(2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.conv3 = Conv2d(32, 64, 5, padding=2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.maxpool3 = MaxPool2d(2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.flatten = Flatten()</span></span><br><span class=\"line\">        <span class=\"comment\"># self.linear1 = Linear(1024, 64)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.linear2 = Linear(64, 10)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.model1 = Sequential(</span><br><span class=\"line\">            Conv2d(<span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Flatten(),</span><br><span class=\"line\">            Linear(<span class=\"number\">1024</span>, <span class=\"number\">64</span>),</span><br><span class=\"line\">            Linear(<span class=\"number\">64</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># x = self.conv1(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.maxpool1(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.conv2(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.maxpool2(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.conv3(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.maxpool3(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.flatten(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.linear1(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.linear2(x)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        x = self.model1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tudui)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.ones((<span class=\"number\">64</span>, <span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>))</span><br><span class=\"line\">output = tudui(<span class=\"built_in\">input</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(output.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_seq&quot;</span>)</span><br><span class=\"line\">writer.add_graph(tudui, <span class=\"built_in\">input</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"十四、损失函数与反向传播\">十四、损失函数与反向传播</h2>\n<h3 id=\"1-nn-loss\">1.nn_loss</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> L1Loss</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">inputs = torch.tensor([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], dtype=torch.float32)</span><br><span class=\"line\">targets = torch.tensor([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>], dtype=torch.float32)</span><br><span class=\"line\"></span><br><span class=\"line\">inputs = torch.reshape(inputs, (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">targets = torch.reshape(targets, (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">loss = L1Loss(reduction=<span class=\"string\">&#x27;sum&#x27;</span>)</span><br><span class=\"line\">result = loss(inputs, targets)</span><br><span class=\"line\"></span><br><span class=\"line\">loss_mse = nn.MSELoss()</span><br><span class=\"line\">result_mse = loss_mse(inputs, targets)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result_mse)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-nn-loss-network\">2.nn_loss_network</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入数据集</span></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">        transform=torchvision.transforms.ToTensor(), download=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 神经网络模板</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.model1 = Sequential(</span><br><span class=\"line\">            Conv2d(<span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Flatten(),</span><br><span class=\"line\">            Linear(<span class=\"number\">1024</span>, <span class=\"number\">64</span>),</span><br><span class=\"line\">            Linear(<span class=\"number\">64</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = self.model1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算损失</span></span><br><span class=\"line\">loss = nn.CrossEntropyLoss()</span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">    imgs, targets = data</span><br><span class=\"line\">    outputs = tudui(imgs)</span><br><span class=\"line\">    result_loss = loss(outputs, targets)</span><br><span class=\"line\">    result_loss.backward()</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-可视化页面展示\">3.可视化页面展示</h3>\n<p><img src=\"/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test2.png\" alt=\"test2\"></p>\n<h2 id=\"十五、nn-optim（优化器）\">十五、nn_optim（优化器）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入数据集</span></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                       transform=torchvision.transforms.ToTensor(), download=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 神经网络模板</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.model1 = Sequential(</span><br><span class=\"line\">            Conv2d(<span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Flatten(),</span><br><span class=\"line\">            Linear(<span class=\"number\">1024</span>, <span class=\"number\">64</span>),</span><br><span class=\"line\">            Linear(<span class=\"number\">64</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = self.model1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算损失、梯度下降</span></span><br><span class=\"line\"></span><br><span class=\"line\">loss = nn.CrossEntropyLoss()</span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\">optim = torch.optim.SGD(tudui.parameters(), lr=<span class=\"number\">0.01</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">    running_loss = <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">        imgs, targets = data</span><br><span class=\"line\">        outputs = tudui(imgs)</span><br><span class=\"line\">        result_loss = loss(outputs, targets)</span><br><span class=\"line\">        optim.zero_grad()</span><br><span class=\"line\">        result_loss.backward()</span><br><span class=\"line\">        optim.step()</span><br><span class=\"line\">        running_loss += result_loss</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(running_loss)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十六、model-pretrained（对现有网络模型进行修改-vgg16）\">十六、model_pretrained（对现有网络模型进行修改.vgg16）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># train_data = torchvision.datasets.ImageNet(&quot;../data_image_net&quot;, split=&#x27;train&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#                                            download=True, transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vgg16_false = torchvision.models.vgg16(pretrained=<span class=\"literal\">False</span>)</span><br><span class=\"line\">vgg16_true = torchvision.models.vgg16(pretrained=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">train_data = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                       transform=torchvision.transforms.ToTensor(), download=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vgg16_true.classifier.add_module(<span class=\"string\">&#x27;add_linear&#x27;</span>, nn.Linear(<span class=\"number\">1000</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(vgg16_true)</span><br><span class=\"line\"></span><br><span class=\"line\">vgg16_false.classifier[<span class=\"number\">6</span>] = nn.Linear(<span class=\"number\">4096</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(vgg16_false)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十七、模型的保存与读取\">十七、模型的保存与读取</h2>\n<h3 id=\"1-model-save\">1.model_save</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vgg16 = torchvision.models.vgg16(pretrained=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存方式1:模型结构+模型参数</span></span><br><span class=\"line\">torch.save(vgg16, <span class=\"string\">&quot;vgg16_method1.pth&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存方式2:模型参数（官方推荐）</span></span><br><span class=\"line\">torch.save(vgg16.state_dict(), <span class=\"string\">&quot;vgg16_method2.pth&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-model-load\">2.model_load</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式1：加载模型</span></span><br><span class=\"line\"><span class=\"comment\"># model = torch.load(&quot;vgg16_method1.pth&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># print(model)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2：加载模型</span></span><br><span class=\"line\">vgg16 = torchvision.models.vgg16(pretrained=<span class=\"literal\">False</span>)</span><br><span class=\"line\">vgg16.load_state_dict(torch.load(<span class=\"string\">&quot;vgg16_method2.pth&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\"># model = torch.load(&quot;vgg16_method2.pth&quot;)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(vgg16)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十八、train（完整模型训练套路）\">十八、train（完整模型训练套路）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch.optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备数据集</span></span><br><span class=\"line\">train_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                           download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">test_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                           download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据集长度</span></span><br><span class=\"line\">train_data_size = <span class=\"built_in\">len</span>(train_data)</span><br><span class=\"line\">test_data_size = <span class=\"built_in\">len</span>(test_data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用 DataLoader 来加载数据集</span></span><br><span class=\"line\">train_dataloader = DataLoader(train_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\">test_dataloader = DataLoader(test_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络模型</span></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 损失函数</span></span><br><span class=\"line\">loss_fn = nn.CrossEntropyLoss()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优化器</span></span><br><span class=\"line\">learning_rate = <span class=\"number\">0.01</span></span><br><span class=\"line\">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置训练网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 记录训练的次数</span></span><br><span class=\"line\">total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 训练的轮数</span></span><br><span class=\"line\">epoch = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加tensorboard</span></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_train&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始训练</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epoch):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(i+<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 训练步骤开始</span></span><br><span class=\"line\">    tudui.train()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> train_dataloader:</span><br><span class=\"line\">        imgs, targets = data</span><br><span class=\"line\">        outputs = tudui(imgs)</span><br><span class=\"line\">        loss = loss_fn(outputs,targets)</span><br><span class=\"line\">        <span class=\"comment\"># 优化器优化模型</span></span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\">        <span class=\"comment\"># 显示次数和损失loss</span></span><br><span class=\"line\">        total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> total_train_step % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step, loss.item()))</span><br><span class=\"line\">            writer.add_scalar(<span class=\"string\">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 测试步骤开始</span></span><br><span class=\"line\">    tudui.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">    total_test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">    total_accuracy = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> test_dataloader:</span><br><span class=\"line\">            imgs, targets = data</span><br><span class=\"line\">            outputs = tudui(imgs)</span><br><span class=\"line\">            loss = loss_fn(outputs, targets)</span><br><span class=\"line\">            total_test_loss += loss.item()</span><br><span class=\"line\">            accuracy = (outputs.argmax(<span class=\"number\">1</span>) == targets).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">            total_accuracy += accuracy</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_loss))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_accuracy/test_data_size))</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class=\"line\">    total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># torch.save(tudui, &quot;model_classify_&#123;&#125;.pth&quot;.format(i))</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&quot;模型已保存！&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"可视化页面展示：-2\">可视化页面展示：</h3>\n<p><img src=\"/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test3.png\" alt=\"test3\"></p>\n<h2 id=\"十九、利用GPU训练\">十九、利用GPU训练</h2>\n<h3 id=\"1-train-gpu-1\">1.train_gpu_1</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备数据集</span></span><br><span class=\"line\">train_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                           download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">test_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                           download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据集长度</span></span><br><span class=\"line\">train_data_size = <span class=\"built_in\">len</span>(train_data)</span><br><span class=\"line\">test_data_size = <span class=\"built_in\">len</span>(test_data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用 DataLoader 来加载数据集</span></span><br><span class=\"line\">train_dataloader = DataLoader(train_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\">test_dataloader = DataLoader(test_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络模型</span></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">    tudui = tudui.cuda()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 损失函数</span></span><br><span class=\"line\">loss_fn = nn.CrossEntropyLoss()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">    loss_fn = loss_fn.cuda()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优化器</span></span><br><span class=\"line\">learning_rate = <span class=\"number\">0.01</span></span><br><span class=\"line\">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置训练网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 记录训练的次数</span></span><br><span class=\"line\">total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 训练的轮数</span></span><br><span class=\"line\">epoch = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加tensorboard</span></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_train&quot;</span>)</span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始训练</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epoch):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(i+<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 训练步骤开始</span></span><br><span class=\"line\">    tudui.train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> train_dataloader:</span><br><span class=\"line\">        imgs, targets = data</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">            imgs = imgs.cuda()</span><br><span class=\"line\">            targets = targets.cuda()</span><br><span class=\"line\"></span><br><span class=\"line\">        outputs = tudui(imgs)</span><br><span class=\"line\">        loss = loss_fn(outputs,targets)</span><br><span class=\"line\">        <span class=\"comment\"># 优化器优化模型</span></span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\">        <span class=\"comment\"># 显示次数和损失loss</span></span><br><span class=\"line\">        total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> total_train_step % <span class=\"number\">1000</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            end_time = time.time()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(end_time - start_time)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step, loss.item()))</span><br><span class=\"line\">            writer.add_scalar(<span class=\"string\">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 测试步骤开始</span></span><br><span class=\"line\">    tudui.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">    total_test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">    total_accuracy = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> test_dataloader:</span><br><span class=\"line\">            imgs, targets = data</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">                imgs = imgs.cuda()</span><br><span class=\"line\">                targets = targets.cuda()</span><br><span class=\"line\"></span><br><span class=\"line\">            outputs = tudui(imgs)</span><br><span class=\"line\">            loss = loss_fn(outputs, targets)</span><br><span class=\"line\">            total_test_loss += loss.item()</span><br><span class=\"line\">            accuracy = (outputs.argmax(<span class=\"number\">1</span>) == targets).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">            total_accuracy += accuracy</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_loss))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_accuracy/test_data_size))</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class=\"line\">    total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">29</span>:</span><br><span class=\"line\">        torch.save(tudui, <span class=\"string\">&quot;model_&#123;&#125;.pth&quot;</span>.<span class=\"built_in\">format</span>(i+<span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;模型已保存！&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-train-gpu-2\">2.train_gpu_2</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义训练设备</span></span><br><span class=\"line\">device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备数据集</span></span><br><span class=\"line\">train_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">test_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据集长度</span></span><br><span class=\"line\">train_data_size = <span class=\"built_in\">len</span>(train_data)</span><br><span class=\"line\">test_data_size = <span class=\"built_in\">len</span>(test_data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用 DataLoader 来加载数据集</span></span><br><span class=\"line\">train_dataloader = DataLoader(train_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\">test_dataloader = DataLoader(test_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络模型</span></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\">tudui.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 损失函数</span></span><br><span class=\"line\">loss_fn = nn.CrossEntropyLoss()</span><br><span class=\"line\">loss_fn.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优化器</span></span><br><span class=\"line\">learning_rate = <span class=\"number\">0.01</span></span><br><span class=\"line\">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置训练网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 记录训练的次数</span></span><br><span class=\"line\">total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 训练的轮数</span></span><br><span class=\"line\">epoch = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加tensorboard</span></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_train&quot;</span>)</span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始训练</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epoch):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(i+<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 训练步骤开始</span></span><br><span class=\"line\">    tudui.train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> train_dataloader:</span><br><span class=\"line\">        imgs, targets = data</span><br><span class=\"line\"></span><br><span class=\"line\">        imgs = imgs.to(device)</span><br><span class=\"line\">        targets = targets.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">        outputs = tudui(imgs)</span><br><span class=\"line\">        loss = loss_fn(outputs, targets)</span><br><span class=\"line\">        <span class=\"comment\"># 优化器优化模型</span></span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\">        <span class=\"comment\"># 显示次数和损失loss</span></span><br><span class=\"line\">        total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> total_train_step % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            writer.add_scalar(<span class=\"string\">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 测试步骤开始</span></span><br><span class=\"line\">    tudui.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">    total_test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">    total_accuracy = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> test_dataloader:</span><br><span class=\"line\">            imgs, targets = data</span><br><span class=\"line\"></span><br><span class=\"line\">            imgs = imgs.to(device)</span><br><span class=\"line\">            targets = targets.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">            outputs = tudui(imgs)</span><br><span class=\"line\">            loss = loss_fn(outputs, targets)</span><br><span class=\"line\">            total_test_loss += loss.item()</span><br><span class=\"line\">            accuracy = (outputs.argmax(<span class=\"number\">1</span>) == targets).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">            total_accuracy += accuracy</span><br><span class=\"line\"></span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: &#123;&#125;s&quot;</span>.<span class=\"built_in\">format</span>(end_time - start_time))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step, loss.item()))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_loss))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_accuracy/test_data_size))</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class=\"line\">    total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">29</span>:</span><br><span class=\"line\">        torch.save(tudui, <span class=\"string\">&quot;model_&#123;&#125;.pth&quot;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;模型已保存！&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十、test（模型验证）\">二十、test（模型验证）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">image_path = <span class=\"string\">&quot;../images/dog.png&quot;</span></span><br><span class=\"line\">image = Image.<span class=\"built_in\">open</span>(image_path)</span><br><span class=\"line\"></span><br><span class=\"line\">transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class=\"number\">32</span>, <span class=\"number\">32</span>)),</span><br><span class=\"line\">                                            torchvision.transforms.ToTensor()])</span><br><span class=\"line\"></span><br><span class=\"line\">image = transform(image)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.model1 = Sequential(</span><br><span class=\"line\">            Conv2d(<span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Flatten(),</span><br><span class=\"line\">            Linear(<span class=\"number\">1024</span>, <span class=\"number\">64</span>),</span><br><span class=\"line\">            Linear(<span class=\"number\">64</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = self.model1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">model = torch.load(<span class=\"string\">&quot;model_30.pth&quot;</span>, map_location=torch.device(<span class=\"string\">&#x27;cpu&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">image = torch.reshape(image, (<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>))</span><br><span class=\"line\">model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"><span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">    output = model(image)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(output.argmax(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.脚本为本人总结，如有使用注明出处。</li>\n<li>2.Pytorch基于Python编程语言编写脚本。</li>\n<li>3.脚本内有注释。</li>\n</ul>\n<hr>\n<h2 id=\"一、main-demo\">一、main_demo</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这是一个示例 Python 脚本。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按 Shift+F10 执行或将其替换为您的代码。</span></span><br><span class=\"line\"><span class=\"comment\"># 按 双击 Shift 在所有地方搜索类、文件、工具窗口、操作和设置。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_hi</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 在下面的代码行中使用断点来调试脚本。</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Hi, <span class=\"subst\">&#123;name&#125;</span>&#x27;</span>)  <span class=\"comment\"># 按 Ctrl+F8 切换断点。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按间距中的绿色按钮以运行脚本。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    print_hi(<span class=\"string\">&#x27;PyCharm&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问 https://www.jetbrains.com/help/pycharm/ 获取 PyCharm 帮助</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、read-data（读取数据）\">二、read_data（读取数据）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyData</span>(<span class=\"title class_ inherited__\">Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化函数</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, root_dir, label_dir</span>):</span><br><span class=\"line\">        self.root_dir = root_dir</span><br><span class=\"line\">        self.label_dir = label_dir</span><br><span class=\"line\">        self.path = os.path.join(self.root_dir, self.label_dir)</span><br><span class=\"line\">        self.img_path = os.listdir(self.path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取数据集</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self, idx</span>):</span><br><span class=\"line\">        img_name = self.img_path[idx]</span><br><span class=\"line\">        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)</span><br><span class=\"line\">        img = Image.<span class=\"built_in\">open</span>(img_item_path)</span><br><span class=\"line\">        lable = self.label_dir</span><br><span class=\"line\">        <span class=\"keyword\">return</span> img, lable</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取长度</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__len__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.img_path)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root_dir = <span class=\"string\">&quot;dataset/hymenoptera_data/train&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ants_label_dir = <span class=\"string\">&quot;ants&quot;</span></span><br><span class=\"line\">bees_label_dir = <span class=\"string\">&quot;bees&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class=\"line\">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class=\"line\"></span><br><span class=\"line\">train_dataset = ants_dataset + bees_dataset</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、test-tb（简单测试）\">三、test_tb（简单测试）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;logs&quot;</span>)</span><br><span class=\"line\">image_path = <span class=\"string\">&quot;dataset/hymenoptera_data/train/bees/16838648_415acd9e3f.jpg&quot;</span></span><br><span class=\"line\">img_PIL = Image.<span class=\"built_in\">open</span>(image_path)</span><br><span class=\"line\">img_array = np.array(img_PIL)</span><br><span class=\"line\"><span class=\"comment\"># print(type(img_array))</span></span><br><span class=\"line\"><span class=\"comment\"># print(img_array.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;test&quot;</span>, img_array, <span class=\"number\">2</span>, dataformats=<span class=\"string\">&#x27;HWC&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># y = x</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;y=2x&quot;</span>, <span class=\"number\">2</span>*i, i)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"可视化页面展示：\">可视化页面展示：</h3>\n<p><img src=\"/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test1.png\" alt=\"test1\"></p>\n<h2 id=\"四、Transforms（数据转换）\">四、Transforms（数据转换）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python的用法 -&gt; tensor数据类型</span></span><br><span class=\"line\"><span class=\"comment\"># 通过 transforms.ToTensor看两个问题</span></span><br><span class=\"line\"><span class=\"comment\"># 1. transforms该如何使用？</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 为什么我们需要Tensor数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绝对路径 C:\\Users\\Administrator\\Desktop\\编程代码\\Python\\pytorch深度学习\\dataset\\hymenoptera_data\\train\\ants\\0013035.jpg</span></span><br><span class=\"line\"><span class=\"comment\"># 相对路径 dataset/hymenoptera_data/train/ants/0013035.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\">img_path = <span class=\"string\">&quot;dataset/hymenoptera_data/train/ants/0013035.jpg&quot;</span></span><br><span class=\"line\">img = Image.<span class=\"built_in\">open</span>(img_path)</span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;logs&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">tensor_trans = transforms.ToTensor()</span><br><span class=\"line\">tensor_img = tensor_trans(img)</span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;Tensor_img&quot;</span>, tensor_img)</span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、UseTransforms（使用数据转换）\">五、UseTransforms（使用数据转换）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;logs&quot;</span>)</span><br><span class=\"line\">img = Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;images/桌面.jpg&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># TpTensor的使用</span></span><br><span class=\"line\">trans_totensor = transforms.ToTensor()</span><br><span class=\"line\">img_tensor = trans_totensor(img)</span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;Totensor&quot;</span>, img_tensor)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Normalize</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(img_tensor[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\">trans_norm = transforms.Normalize([<span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>], [<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">img_norm = trans_norm(img_tensor)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(img_norm[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;Normalize&quot;</span>, img_norm, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Resize</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(img.size)</span><br><span class=\"line\">trans_resize = transforms.Resize((<span class=\"number\">512</span>, <span class=\"number\">512</span>))</span><br><span class=\"line\">img_resize = trans_resize(img)</span><br><span class=\"line\">img_resize = trans_totensor(img_resize)</span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;Resize&quot;</span>, img_resize, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(img_resize)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Compose - resize - 2</span></span><br><span class=\"line\">trans_resize_2 = transforms.Resize(<span class=\"number\">512</span>)</span><br><span class=\"line\">trans_compose = transforms.Compose([trans_resize_2, trans_totensor])</span><br><span class=\"line\">img_resize_2 = trans_compose(img)</span><br><span class=\"line\">writer.add_image(<span class=\"string\">&quot;Resize&quot;</span>, img_resize_2, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RandomCrop</span></span><br><span class=\"line\">trans_random = transforms.RandomCrop(<span class=\"number\">512</span>)</span><br><span class=\"line\">trans_compose_2 = transforms.Compose([trans_random, trans_totensor])</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    img_crop = trans_compose_2(img)</span><br><span class=\"line\">    writer.add_image(<span class=\"string\">&quot;RandomCrop&quot;</span>, img_crop, i)</span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、dataset-transforms（数据集使用）\">六、dataset_transforms（数据集使用）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dataset_transform = torchvision.transforms.Compose([</span><br><span class=\"line\">    torchvision.transforms.ToTensor()</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;./dataset&quot;</span>, train=<span class=\"literal\">True</span>, transform=dataset_transform, download=<span class=\"literal\">True</span>)</span><br><span class=\"line\">test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;./dataset&quot;</span>, train=<span class=\"literal\">False</span>, transform=dataset_transform, download=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(test_set[0])</span></span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../p10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    img, target = test_set[i]</span><br><span class=\"line\">    writer.add_image((<span class=\"string\">&quot;test_set&quot;</span>, img, i))</span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、read-data（读取数据）\">七、read_data（读取数据）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Dataset</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyData</span>(<span class=\"title class_ inherited__\">Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化函数</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, root_dir, label_dir</span>):</span><br><span class=\"line\">        self.root_dir = root_dir</span><br><span class=\"line\">        self.label_dir = label_dir</span><br><span class=\"line\">        self.path = os.path.join(self.root_dir, self.label_dir)</span><br><span class=\"line\">        self.img_path = os.listdir(self.path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取数据集</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self, idx</span>):</span><br><span class=\"line\">        img_name = self.img_path[idx]</span><br><span class=\"line\">        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)</span><br><span class=\"line\">        img = Image.<span class=\"built_in\">open</span>(img_item_path)</span><br><span class=\"line\">        lable = self.label_dir</span><br><span class=\"line\">        <span class=\"keyword\">return</span> img, lable</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取长度</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__len__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.img_path)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root_dir = <span class=\"string\">&quot;../dataset/hymenoptera_data/train&quot;</span></span><br><span class=\"line\">ants_label_dir = <span class=\"string\">&quot;ants&quot;</span></span><br><span class=\"line\">bees_label_dir = <span class=\"string\">&quot;bees&quot;</span></span><br><span class=\"line\">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class=\"line\">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class=\"line\"></span><br><span class=\"line\">train_dataset = ants_dataset + bees_dataset</span><br></pre></td></tr></table></figure>\n<h2 id=\"八、nn-module（模型基础）\">八、nn_module（模型基础）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, <span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">        output = <span class=\"built_in\">input</span> + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\">x = torch.tensor(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">output = tudui(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(output)</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、nn-conv2d（卷积层）\">九、nn_conv2d（卷积层）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Conv2d</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">        transform=torchvision.transforms.ToTensor(), download=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.conv1 = Conv2d(in_channels=<span class=\"number\">3</span>, out_channels=<span class=\"number\">6</span>, kernel_size=<span class=\"number\">3</span>, stride=<span class=\"number\">1</span>, padding=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = self.conv1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">    imgs, targets = data</span><br><span class=\"line\">    output = tudui(imgs)</span><br><span class=\"line\">    <span class=\"comment\"># print(imgs.shape)</span></span><br><span class=\"line\">    <span class=\"comment\"># print(output.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># torch.Size([64, 3, 32, 32])</span></span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;input&quot;</span>, imgs, step)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># torch.Size([64, 6, 30, 30]) -&gt; [xxx, 3, 30, 30]</span></span><br><span class=\"line\">    output = torch.reshape(output, (-<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">30</span>, <span class=\"number\">30</span>))</span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;output&quot;</span>, output, step)</span><br><span class=\"line\"></span><br><span class=\"line\">    step += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十、nn-maxpool（最大池化）\">十、nn_maxpool（最大池化）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> MaxPool2d</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, download=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                       transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 二维矩阵最大池化</span></span><br><span class=\"line\"><span class=\"comment\"># input = torch.tensor([[1, 2, 0, 3, 1],</span></span><br><span class=\"line\"><span class=\"comment\">#                      [0, 1, 2, 3, 1],</span></span><br><span class=\"line\"><span class=\"comment\">#                      [1, 2, 1, 0, 0],</span></span><br><span class=\"line\"><span class=\"comment\">#                      [5, 2, 3, 1, 1],</span></span><br><span class=\"line\"><span class=\"comment\">#                      [2, 1, 0, 1, 1]], dtype=torch.float32)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># input = torch.reshape(input, (-1, 1, 5, 5))</span></span><br><span class=\"line\"><span class=\"comment\"># print(input.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.maxpool1 = MaxPool2d(kernel_size=<span class=\"number\">3</span>, ceil_mode=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, <span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">        output = self.maxpool1(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_maxpool&quot;</span>)</span><br><span class=\"line\">step = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">    imgs, targets = data</span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;input&quot;</span>, imgs, step)</span><br><span class=\"line\">    output = tudui(imgs)</span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;output&quot;</span>, output, step)</span><br><span class=\"line\">    step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"十一、nn-relu（非线性激活）\">十一、nn_relu（非线性激活）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> ReLU, Sigmoid</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.tensor([[<span class=\"number\">1</span>, -<span class=\"number\">0.5</span>],</span><br><span class=\"line\">                       [-<span class=\"number\">1</span>, <span class=\"number\">3</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.reshape(<span class=\"built_in\">input</span>, (-<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, download=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                       transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.relu1 = ReLU()</span><br><span class=\"line\">        self.sigmoid1 = Sigmoid()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, <span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">        output = self.sigmoid1(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"><span class=\"comment\"># output = tudui(input)</span></span><br><span class=\"line\"><span class=\"comment\"># print(output)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_relu&quot;</span>)</span><br><span class=\"line\">step = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">    imgs, targets = data</span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;input&quot;</span>, imgs, step)</span><br><span class=\"line\">    output = tudui(imgs)</span><br><span class=\"line\">    writer.add_images(<span class=\"string\">&quot;output&quot;</span>, output, step)</span><br><span class=\"line\">    step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"十二、nn-linear（线性层）\">十二、nn_linear（线性层）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Linear</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, download=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                       transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.linear1 = Linear(<span class=\"number\">196608</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, <span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">        output = self.linear1(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">    imgs, targets = data</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(imgs.shape)</span><br><span class=\"line\">    output = torch.reshape(imgs, (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(output.shape)</span><br><span class=\"line\">    output = tudui(output)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(output.shape)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十三、nn-seq（搭建小实战）\">十三、nn_seq（搭建小实战）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># self.conv1 = Conv2d(3, 32, 5, padding=2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.maxpool1 = MaxPool2d(2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.conv2 = Conv2d(32, 32, 5, padding=2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.maxpool2 = MaxPool2d(2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.conv3 = Conv2d(32, 64, 5, padding=2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.maxpool3 = MaxPool2d(2)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.flatten = Flatten()</span></span><br><span class=\"line\">        <span class=\"comment\"># self.linear1 = Linear(1024, 64)</span></span><br><span class=\"line\">        <span class=\"comment\"># self.linear2 = Linear(64, 10)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.model1 = Sequential(</span><br><span class=\"line\">            Conv2d(<span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Flatten(),</span><br><span class=\"line\">            Linear(<span class=\"number\">1024</span>, <span class=\"number\">64</span>),</span><br><span class=\"line\">            Linear(<span class=\"number\">64</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># x = self.conv1(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.maxpool1(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.conv2(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.maxpool2(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.conv3(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.maxpool3(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.flatten(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.linear1(x)</span></span><br><span class=\"line\">        <span class=\"comment\"># x = self.linear2(x)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        x = self.model1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tudui)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.ones((<span class=\"number\">64</span>, <span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>))</span><br><span class=\"line\">output = tudui(<span class=\"built_in\">input</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(output.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_seq&quot;</span>)</span><br><span class=\"line\">writer.add_graph(tudui, <span class=\"built_in\">input</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"十四、损失函数与反向传播\">十四、损失函数与反向传播</h2>\n<h3 id=\"1-nn-loss\">1.nn_loss</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> L1Loss</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">inputs = torch.tensor([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], dtype=torch.float32)</span><br><span class=\"line\">targets = torch.tensor([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>], dtype=torch.float32)</span><br><span class=\"line\"></span><br><span class=\"line\">inputs = torch.reshape(inputs, (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">targets = torch.reshape(targets, (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">loss = L1Loss(reduction=<span class=\"string\">&#x27;sum&#x27;</span>)</span><br><span class=\"line\">result = loss(inputs, targets)</span><br><span class=\"line\"></span><br><span class=\"line\">loss_mse = nn.MSELoss()</span><br><span class=\"line\">result_mse = loss_mse(inputs, targets)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result_mse)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-nn-loss-network\">2.nn_loss_network</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入数据集</span></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">        transform=torchvision.transforms.ToTensor(), download=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 神经网络模板</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.model1 = Sequential(</span><br><span class=\"line\">            Conv2d(<span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Flatten(),</span><br><span class=\"line\">            Linear(<span class=\"number\">1024</span>, <span class=\"number\">64</span>),</span><br><span class=\"line\">            Linear(<span class=\"number\">64</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = self.model1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算损失</span></span><br><span class=\"line\">loss = nn.CrossEntropyLoss()</span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">    imgs, targets = data</span><br><span class=\"line\">    outputs = tudui(imgs)</span><br><span class=\"line\">    result_loss = loss(outputs, targets)</span><br><span class=\"line\">    result_loss.backward()</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-可视化页面展示\">3.可视化页面展示</h3>\n<p><img src=\"/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test2.png\" alt=\"test2\"></p>\n<h2 id=\"十五、nn-optim（优化器）\">十五、nn_optim（优化器）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入数据集</span></span><br><span class=\"line\">dataset = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                       transform=torchvision.transforms.ToTensor(), download=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dataloader = DataLoader(dataset, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 神经网络模板</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.model1 = Sequential(</span><br><span class=\"line\">            Conv2d(<span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Flatten(),</span><br><span class=\"line\">            Linear(<span class=\"number\">1024</span>, <span class=\"number\">64</span>),</span><br><span class=\"line\">            Linear(<span class=\"number\">64</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = self.model1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算损失、梯度下降</span></span><br><span class=\"line\"></span><br><span class=\"line\">loss = nn.CrossEntropyLoss()</span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\">optim = torch.optim.SGD(tudui.parameters(), lr=<span class=\"number\">0.01</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">    running_loss = <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloader:</span><br><span class=\"line\">        imgs, targets = data</span><br><span class=\"line\">        outputs = tudui(imgs)</span><br><span class=\"line\">        result_loss = loss(outputs, targets)</span><br><span class=\"line\">        optim.zero_grad()</span><br><span class=\"line\">        result_loss.backward()</span><br><span class=\"line\">        optim.step()</span><br><span class=\"line\">        running_loss += result_loss</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(running_loss)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十六、model-pretrained（对现有网络模型进行修改-vgg16）\">十六、model_pretrained（对现有网络模型进行修改.vgg16）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># train_data = torchvision.datasets.ImageNet(&quot;../data_image_net&quot;, split=&#x27;train&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#                                            download=True, transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vgg16_false = torchvision.models.vgg16(pretrained=<span class=\"literal\">False</span>)</span><br><span class=\"line\">vgg16_true = torchvision.models.vgg16(pretrained=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">train_data = torchvision.datasets.CIFAR10(<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                       transform=torchvision.transforms.ToTensor(), download=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vgg16_true.classifier.add_module(<span class=\"string\">&#x27;add_linear&#x27;</span>, nn.Linear(<span class=\"number\">1000</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(vgg16_true)</span><br><span class=\"line\"></span><br><span class=\"line\">vgg16_false.classifier[<span class=\"number\">6</span>] = nn.Linear(<span class=\"number\">4096</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(vgg16_false)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十七、模型的保存与读取\">十七、模型的保存与读取</h2>\n<h3 id=\"1-model-save\">1.model_save</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vgg16 = torchvision.models.vgg16(pretrained=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存方式1:模型结构+模型参数</span></span><br><span class=\"line\">torch.save(vgg16, <span class=\"string\">&quot;vgg16_method1.pth&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存方式2:模型参数（官方推荐）</span></span><br><span class=\"line\">torch.save(vgg16.state_dict(), <span class=\"string\">&quot;vgg16_method2.pth&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-model-load\">2.model_load</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式1：加载模型</span></span><br><span class=\"line\"><span class=\"comment\"># model = torch.load(&quot;vgg16_method1.pth&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># print(model)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2：加载模型</span></span><br><span class=\"line\">vgg16 = torchvision.models.vgg16(pretrained=<span class=\"literal\">False</span>)</span><br><span class=\"line\">vgg16.load_state_dict(torch.load(<span class=\"string\">&quot;vgg16_method2.pth&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\"># model = torch.load(&quot;vgg16_method2.pth&quot;)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(vgg16)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十八、train（完整模型训练套路）\">十八、train（完整模型训练套路）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch.optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备数据集</span></span><br><span class=\"line\">train_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                           download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">test_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                           download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据集长度</span></span><br><span class=\"line\">train_data_size = <span class=\"built_in\">len</span>(train_data)</span><br><span class=\"line\">test_data_size = <span class=\"built_in\">len</span>(test_data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用 DataLoader 来加载数据集</span></span><br><span class=\"line\">train_dataloader = DataLoader(train_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\">test_dataloader = DataLoader(test_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络模型</span></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 损失函数</span></span><br><span class=\"line\">loss_fn = nn.CrossEntropyLoss()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优化器</span></span><br><span class=\"line\">learning_rate = <span class=\"number\">0.01</span></span><br><span class=\"line\">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置训练网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 记录训练的次数</span></span><br><span class=\"line\">total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 训练的轮数</span></span><br><span class=\"line\">epoch = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加tensorboard</span></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_train&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始训练</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epoch):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(i+<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 训练步骤开始</span></span><br><span class=\"line\">    tudui.train()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> train_dataloader:</span><br><span class=\"line\">        imgs, targets = data</span><br><span class=\"line\">        outputs = tudui(imgs)</span><br><span class=\"line\">        loss = loss_fn(outputs,targets)</span><br><span class=\"line\">        <span class=\"comment\"># 优化器优化模型</span></span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\">        <span class=\"comment\"># 显示次数和损失loss</span></span><br><span class=\"line\">        total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> total_train_step % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step, loss.item()))</span><br><span class=\"line\">            writer.add_scalar(<span class=\"string\">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 测试步骤开始</span></span><br><span class=\"line\">    tudui.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">    total_test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">    total_accuracy = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> test_dataloader:</span><br><span class=\"line\">            imgs, targets = data</span><br><span class=\"line\">            outputs = tudui(imgs)</span><br><span class=\"line\">            loss = loss_fn(outputs, targets)</span><br><span class=\"line\">            total_test_loss += loss.item()</span><br><span class=\"line\">            accuracy = (outputs.argmax(<span class=\"number\">1</span>) == targets).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">            total_accuracy += accuracy</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_loss))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_accuracy/test_data_size))</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class=\"line\">    total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># torch.save(tudui, &quot;model_classify_&#123;&#125;.pth&quot;.format(i))</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&quot;模型已保存！&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"可视化页面展示：-2\">可视化页面展示：</h3>\n<p><img src=\"/2023/03/14/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/test3.png\" alt=\"test3\"></p>\n<h2 id=\"十九、利用GPU训练\">十九、利用GPU训练</h2>\n<h3 id=\"1-train-gpu-1\">1.train_gpu_1</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备数据集</span></span><br><span class=\"line\">train_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                           download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">test_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                           download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据集长度</span></span><br><span class=\"line\">train_data_size = <span class=\"built_in\">len</span>(train_data)</span><br><span class=\"line\">test_data_size = <span class=\"built_in\">len</span>(test_data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用 DataLoader 来加载数据集</span></span><br><span class=\"line\">train_dataloader = DataLoader(train_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\">test_dataloader = DataLoader(test_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络模型</span></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">    tudui = tudui.cuda()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 损失函数</span></span><br><span class=\"line\">loss_fn = nn.CrossEntropyLoss()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">    loss_fn = loss_fn.cuda()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优化器</span></span><br><span class=\"line\">learning_rate = <span class=\"number\">0.01</span></span><br><span class=\"line\">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置训练网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 记录训练的次数</span></span><br><span class=\"line\">total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 训练的轮数</span></span><br><span class=\"line\">epoch = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加tensorboard</span></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_train&quot;</span>)</span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始训练</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epoch):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(i+<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 训练步骤开始</span></span><br><span class=\"line\">    tudui.train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> train_dataloader:</span><br><span class=\"line\">        imgs, targets = data</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">            imgs = imgs.cuda()</span><br><span class=\"line\">            targets = targets.cuda()</span><br><span class=\"line\"></span><br><span class=\"line\">        outputs = tudui(imgs)</span><br><span class=\"line\">        loss = loss_fn(outputs,targets)</span><br><span class=\"line\">        <span class=\"comment\"># 优化器优化模型</span></span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\">        <span class=\"comment\"># 显示次数和损失loss</span></span><br><span class=\"line\">        total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> total_train_step % <span class=\"number\">1000</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            end_time = time.time()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(end_time - start_time)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step, loss.item()))</span><br><span class=\"line\">            writer.add_scalar(<span class=\"string\">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 测试步骤开始</span></span><br><span class=\"line\">    tudui.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">    total_test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">    total_accuracy = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> test_dataloader:</span><br><span class=\"line\">            imgs, targets = data</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">                imgs = imgs.cuda()</span><br><span class=\"line\">                targets = targets.cuda()</span><br><span class=\"line\"></span><br><span class=\"line\">            outputs = tudui(imgs)</span><br><span class=\"line\">            loss = loss_fn(outputs, targets)</span><br><span class=\"line\">            total_test_loss += loss.item()</span><br><span class=\"line\">            accuracy = (outputs.argmax(<span class=\"number\">1</span>) == targets).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">            total_accuracy += accuracy</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_loss))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_accuracy/test_data_size))</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class=\"line\">    total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">29</span>:</span><br><span class=\"line\">        torch.save(tudui, <span class=\"string\">&quot;model_&#123;&#125;.pth&quot;</span>.<span class=\"built_in\">format</span>(i+<span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;模型已保存！&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-train-gpu-2\">2.train_gpu_2</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义训练设备</span></span><br><span class=\"line\">device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备数据集</span></span><br><span class=\"line\">train_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\">test_data = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                download=<span class=\"literal\">True</span>, transform=torchvision.transforms.ToTensor())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据集长度</span></span><br><span class=\"line\">train_data_size = <span class=\"built_in\">len</span>(train_data)</span><br><span class=\"line\">test_data_size = <span class=\"built_in\">len</span>(test_data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用 DataLoader 来加载数据集</span></span><br><span class=\"line\">train_dataloader = DataLoader(train_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\">test_dataloader = DataLoader(test_data, batch_size=<span class=\"number\">64</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络模型</span></span><br><span class=\"line\">tudui = Tudui()</span><br><span class=\"line\">tudui.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 损失函数</span></span><br><span class=\"line\">loss_fn = nn.CrossEntropyLoss()</span><br><span class=\"line\">loss_fn.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优化器</span></span><br><span class=\"line\">learning_rate = <span class=\"number\">0.01</span></span><br><span class=\"line\">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置训练网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 记录训练的次数</span></span><br><span class=\"line\">total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 训练的轮数</span></span><br><span class=\"line\">epoch = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加tensorboard</span></span><br><span class=\"line\">writer = SummaryWriter(<span class=\"string\">&quot;../logs_train&quot;</span>)</span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始训练</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epoch):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(i+<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 训练步骤开始</span></span><br><span class=\"line\">    tudui.train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> train_dataloader:</span><br><span class=\"line\">        imgs, targets = data</span><br><span class=\"line\"></span><br><span class=\"line\">        imgs = imgs.to(device)</span><br><span class=\"line\">        targets = targets.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">        outputs = tudui(imgs)</span><br><span class=\"line\">        loss = loss_fn(outputs, targets)</span><br><span class=\"line\">        <span class=\"comment\"># 优化器优化模型</span></span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\">        <span class=\"comment\"># 显示次数和损失loss</span></span><br><span class=\"line\">        total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> total_train_step % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            writer.add_scalar(<span class=\"string\">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 测试步骤开始</span></span><br><span class=\"line\">    tudui.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">    total_test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">    total_accuracy = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> test_dataloader:</span><br><span class=\"line\">            imgs, targets = data</span><br><span class=\"line\"></span><br><span class=\"line\">            imgs = imgs.to(device)</span><br><span class=\"line\">            targets = targets.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">            outputs = tudui(imgs)</span><br><span class=\"line\">            loss = loss_fn(outputs, targets)</span><br><span class=\"line\">            total_test_loss += loss.item()</span><br><span class=\"line\">            accuracy = (outputs.argmax(<span class=\"number\">1</span>) == targets).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">            total_accuracy += accuracy</span><br><span class=\"line\"></span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: &#123;&#125;s&quot;</span>.<span class=\"built_in\">format</span>(end_time - start_time))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step, loss.item()))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_loss))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_accuracy/test_data_size))</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;teat_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class=\"line\">    writer.add_scalar(<span class=\"string\">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class=\"line\">    total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">29</span>:</span><br><span class=\"line\">        torch.save(tudui, <span class=\"string\">&quot;model_&#123;&#125;.pth&quot;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;模型已保存！&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">writer.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十、test（模型验证）\">二十、test（模型验证）</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">image_path = <span class=\"string\">&quot;../images/dog.png&quot;</span></span><br><span class=\"line\">image = Image.<span class=\"built_in\">open</span>(image_path)</span><br><span class=\"line\"></span><br><span class=\"line\">transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class=\"number\">32</span>, <span class=\"number\">32</span>)),</span><br><span class=\"line\">                                            torchvision.transforms.ToTensor()])</span><br><span class=\"line\"></span><br><span class=\"line\">image = transform(image)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Tudui</span>(nn.Module):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Tudui, self).__init__()</span><br><span class=\"line\">        self.model1 = Sequential(</span><br><span class=\"line\">            Conv2d(<span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Conv2d(<span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">5</span>, padding=<span class=\"number\">2</span>),</span><br><span class=\"line\">            MaxPool2d(<span class=\"number\">2</span>),</span><br><span class=\"line\">            Flatten(),</span><br><span class=\"line\">            Linear(<span class=\"number\">1024</span>, <span class=\"number\">64</span>),</span><br><span class=\"line\">            Linear(<span class=\"number\">64</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = self.model1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">model = torch.load(<span class=\"string\">&quot;model_30.pth&quot;</span>, map_location=torch.device(<span class=\"string\">&#x27;cpu&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">image = torch.reshape(image, (<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>))</span><br><span class=\"line\">model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"><span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">    output = model(image)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(output.argmax(<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"基于Pytorch框架的深度学习图像分类模型","date":"2023-03-15T10:06:41.000Z","description":"展示了图像分类数据集和图像识别经典模型，并给出了基于pytorch框架的模板。","cover":"https://pic1.zhimg.com/v2-5ea151d43c0ebb13546985d225ac256a_1200x500.jpg","_content":"\n\n\n## 首先声明！！！\n\n---\n\n* 1.脚本为本人总结，如有使用注明出处。\n* 2.Pytorch基于Python编程语言编写脚本。\n\n---\n\n\n\n\n\n## 一、经典图像分类数据集：\n\n\n\n### 注：pytorch官网数据集 Datasets — Torchvision 0.15 documentation (pytorch.org)\n\n\n\n### 1.CIFAR10\n\n```python\ntransform = transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=384, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=384, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n```\n\n\n\n### 2.CIFAR100\n\n```python\ntransform = transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR100(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR100(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=128, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=128, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n```\n\n\n\n### 3.ImageNet (ILSVRC2012)\n\n```python\ntransform = transforms.Compose([\n        transforms.Resize(299),\n        transforms.CenterCrop(299),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.ImageFolder(root=\"/训练集的位置\", transform=transform)\n    test_set = torchvision.datasets.ImageFolder(root=\"/测试集的位置\", transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=32, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=32, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n```\n\n\n\n\n\n## 二、图像分类经典模型（基于CIFAR10数据集）：\n\n\n\n### 注：硬件配置显存最好有12g，根据显存大小调整batch_size的大小。\n\n\n\n### 1.AlexNet（自己写的模型）\n\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\nfrom AlexNet import *\n\n\n\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=384, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=384, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_AlexNet_1\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = AlexNet()\n    model.to(device)\n    model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 60\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-2, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"train_loss:%.6f\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"test_acc: %.6f  val_loss:%.6f \\n\" %\n              ((correct / len(test_set)), test_loss * 256 / len(test_set)))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/AlexNet_1.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n    \n```\n```python\nimport torch.nn as nn\n\n\n# 手搓一个AlexNet模型\nclass AlexNet(nn.Module):\n    def __init__(self):\n        super(AlexNet, self).__init__()\n\n        self.conv1 = nn.Sequential(\n                                   nn.Conv2d(3, 96, 11, 4, 2),\n                                   nn.ReLU(),\n                                   nn.MaxPool2d(3, 2),\n                                  )\n\n        self.conv2 = nn.Sequential(\n                                   nn.Conv2d(96, 256, 5, 1, 2),\n                                   nn.ReLU(),\n                                   nn.MaxPool2d(3, 2),\n                                  )\n\n        self.conv3 = nn.Sequential(\n                                   nn.Conv2d(256, 384, 3, 1, 1),\n                                   nn.ReLU(),\n                                   nn.Conv2d(384, 384, 3, 1, 1),\n                                   nn.ReLU(),\n                                   nn.Conv2d(384, 256, 3, 1, 1),\n                                   nn.ReLU(),\n                                   nn.MaxPool2d(3, 2)\n                                  )\n\n        self.fc = nn.Sequential(\n                                nn.Linear(256 * 6 * 6, 4096),\n                                nn.ReLU(),\n                                nn.Dropout(0.5),\n                                nn.Linear(4096, 4096),\n                                nn.ReLU(),\n                                nn.Dropout(0.5),\n                                nn.Linear(4096, 100),\n                               )\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        x = self.conv3(x)\n        output = self.fc(x.view(-1, 256 * 6 * 6))\n        return output\n\n```\n\n\n\n### 2.VGG（models.vgg16()）\n\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch import nn\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\n\n\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose(\n        [transforms.ToTensor(),\n         transforms.Resize((224, 224)),\n         transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=64, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_VGG_1\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = torchvision.models.vgg16()\n    model.to(device)\n    # model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 30\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-2, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"train_loss:%.6f\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"test_acc: %.6f  val_loss:%.6f \\n\" %\n              ((correct / len(test_set)), test_loss * 256 / len(test_set)))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/VGG_1.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n\n```\n\n\n\n### 3.GoogLeNet\n\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch import nn\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\n\n\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=128, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=128, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_GoogLeNet_1\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = torchvision.models.GoogLeNet()\n    model.to(device)\n    # model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 50\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-2, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            outputs = outputs.logits\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.1fs\" % (end_time - start_time))\n        print(\"train_loss:%.5f\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.1fs\" % (end_time - start_time))\n        print(\"test_acc: %.5f  val_loss:%.5f \\n\" %\n              ((correct / len(test_set)), test_loss * 256 / len(test_set)))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/GooLeNet_1.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n\n```\n\n\n\n### 4.ResNet（models.resnet101()）\n\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch import nn\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\n\n\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose(\n        [transforms.ToTensor(),\n         transforms.Resize((224, 224)),\n         transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=64, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_ResNet_1\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = torchvision.models.resnet101()\n    model.to(device)\n    # model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 30\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-2, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"train_loss:%.6f\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"test_acc: %.6f  val_loss:%.6f \\n\" %\n              ((correct / len(test_set)), test_loss * 256 / len(test_set)))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/ResNet_1.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n\n```\n\n\n\n### 5.DenseNet（models.densenet121()）\n\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch import nn\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\n\n\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose(\n        [transforms.ToTensor(),\n         transforms.Resize((224, 224)),\n         transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", transform=transform, train=True)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", transform=transform, train=False)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=64, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_DenseNet_1\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = torchvision.models.densenet121()\n    model.to(device)\n    # model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 30\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-2, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"train_loss:%.6f\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始  dgsd\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"test_acc: %.6f  val_loss:%.6f \\n\" %\n              ((correct / len(test_set)), test_loss * 256 / len(test_set)))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/DenseNet_1.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n\n```\n\n\n\n### 6.Train_ImageNet（main.py）\n\n```python\nimport argparse\nimport os\nimport random\nimport shutil\nimport time\nimport warnings\nfrom enum import Enum\nimport torch\nimport torch.backends.cudnn as cudnn\nimport torch.distributed as dist\nimport torch.multiprocessing as mp\nimport torch.nn as nn\nimport torch.nn.parallel\nimport torch.optim\nimport torch.utils.data\nimport torch.utils.data.distributed\nimport torchvision.datasets as datasets\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nfrom torch.optim.lr_scheduler import StepLR\nfrom torch.utils.data import Subset\n\n\nmodel_names = sorted(name for name in models.__dict__\n                     if name.islower() and not name.startswith(\"__\")\n                     and callable(models.__dict__[name]))\n\nparser = argparse.ArgumentParser(description='PyTorch ImageNet Training')\nparser.add_argument('data', metavar='DIR', nargs='?', default='imagenet',\n                    help='path to dataset (default: imagenet)')\nparser.add_argument('-a', '--arch', metavar='ARCH', default='resnet34',\n                    choices=model_names,\n                    help='model architecture: ' +\n                         ' | '.join(model_names) +\n                         ' (default: resnet34)')\nparser.add_argument('-j', '--workers', default=4, type=int, metavar='N',\n                    help='number of data loading workers (default: 4)')\nparser.add_argument('--epochs', default=50, type=int, metavar='N',\n                    help='number of total epochs to run')\nparser.add_argument('--start-epoch', default=1, type=int, metavar='N',\n                    help='manual epoch number (useful on restarts)')\nparser.add_argument('-b', '--batch-size', default=192, type=int,\n                    metavar='N',\n                    help='mini-batch size (default: 256), this is the total '\n                         'batch size of all GPUs on the current node when '\n                         'using Data Parallel or Distributed Data Parallel')\nparser.add_argument('--lr', '--learning-rate', default=0.1, type=float,\n                    metavar='LR', help='initial learning rate', dest='lr')\nparser.add_argument('--momentum', default=0.9, type=float, metavar='M',\n                    help='momentum')\nparser.add_argument('--wd', '--weight-decay', default=1e-4, type=float,\n                    metavar='W', help='weight decay (default: 1e-4)',\n                    dest='weight_decay')\nparser.add_argument('-p', '--print-freq', default=500, type=int,\n                    metavar='N', help='print frequency (default: 500)')\nparser.add_argument('--resume', default='', type=str, metavar='PATH',\n                    help='path to latest checkpoint (default: none)')\nparser.add_argument('-e', '--evaluate', dest='evaluate', action='store_true',\n                    help='evaluate model on validation set')\nparser.add_argument('--pretrained', dest='pretrained', action='store_true',\n                    help='use pre-trained model')\nparser.add_argument('--world-size', default=-1, type=int,\n                    help='number of nodes for distributed training')\nparser.add_argument('--rank', default=-1, type=int,\n                    help='node rank for distributed training')\nparser.add_argument('--dist-url', default='tcp://224.66.41.62:23456', type=str,\n                    help='url used to set up distributed training')\nparser.add_argument('--dist-backend', default='nccl', type=str,\n                    help='distributed backend')\nparser.add_argument('--seed', default=None, type=int,\n                    help='seed for initializing training. ')\nparser.add_argument('--gpu', default=None, type=int,\n                    help='GPU id to use.')\nparser.add_argument('--multiprocessing-distributed', action='store_true',\n                    help='Use multi-processing distributed training to launch '\n                         'N processes per node, which has N GPUs. This is the '\n                         'fastest way to use PyTorch for either single node or '\n                         'multi node data parallel training')\nparser.add_argument('--dummy', action='store_true', help=\"use fake data to benchmark\")\n\nbest_acc1 = 0\n\n\ndef main():\n    args = parser.parse_args()\n\n    if args.seed is not None:\n        random.seed(args.seed)\n        torch.manual_seed(args.seed)\n        cudnn.deterministic = True\n        cudnn.benchmark = False\n        warnings.warn('You have chosen to seed training. '\n                      'This will turn on the CUDNN deterministic setting, '\n                      'which can slow down your training considerably! '\n                      'You may see unexpected behavior when restarting '\n                      'from checkpoints.')\n\n    if args.gpu is not None:\n        warnings.warn('You have chosen a specific GPU. This will completely '\n                      'disable data parallelism.')\n\n    if args.dist_url == \"env://\" and args.world_size == -1:\n        args.world_size = int(os.environ[\"WORLD_SIZE\"])\n\n    args.distributed = args.world_size > 1 or args.multiprocessing_distributed\n\n    if torch.cuda.is_available():\n        ngpus_per_node = torch.cuda.device_count()\n    else:\n        ngpus_per_node = 1\n    if args.multiprocessing_distributed:\n        # Since we have ngpus_per_node processes per node, the total world_size\n        # needs to be adjusted accordingly\n        args.world_size = ngpus_per_node * args.world_size\n        # Use torch.multiprocessing.spawn to launch distributed processes: the\n        # main_worker process function\n        mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))\n    else:\n        # Simply call main_worker function\n        main_worker(args.gpu, ngpus_per_node, args)\n\n\ndef main_worker(gpu, ngpus_per_node, args):\n    global best_acc1\n    args.gpu = gpu\n\n    if args.gpu is not None:\n        print(\"Use GPU: {} for training\".format(args.gpu))\n\n    if args.distributed:\n        if args.dist_url == \"env://\" and args.rank == -1:\n            args.rank = int(os.environ[\"RANK\"])\n        if args.multiprocessing_distributed:\n            # For multiprocessing distributed training, rank needs to be the\n            # global rank among all the processes\n            args.rank = args.rank * ngpus_per_node + gpu\n        dist.init_process_group(backend=args.dist_backend, init_method=args.dist_url,\n                                world_size=args.world_size, rank=args.rank)\n    # create model\n    if args.pretrained:\n        print(\"=> using pre-trained model '{}'\".format(args.arch))\n        model = models.__dict__[args.arch](pretrained=True)\n    else:\n        print(\"=> creating model '{}'\".format(args.arch))\n        model = models.__dict__[args.arch]()\n\n    if not torch.cuda.is_available() and not torch.backends.mps.is_available():\n        print('using CPU, this will be slow')\n    elif args.distributed:\n        # For multiprocessing distributed, DistributedDataParallel constructor\n        # should always set the single device scope, otherwise,\n        # DistributedDataParallel will use all available devices.\n        if torch.cuda.is_available():\n            if args.gpu is not None:\n                torch.cuda.set_device(args.gpu)\n                model.cuda(args.gpu)\n                # When using a single GPU per process and per\n                # DistributedDataParallel, we need to divide the batch size\n                # ourselves based on the total number of GPUs of the current node.\n                args.batch_size = int(args.batch_size / ngpus_per_node)\n                args.workers = int((args.workers + ngpus_per_node - 1) / ngpus_per_node)\n                model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])\n            else:\n                model.cuda()\n                # DistributedDataParallel will divide and allocate batch_size to all\n                # available GPUs if device_ids are not set\n                model = torch.nn.parallel.DistributedDataParallel(model)\n    elif args.gpu is not None and torch.cuda.is_available():\n        torch.cuda.set_device(args.gpu)\n        model = model.cuda(args.gpu)\n    elif torch.backends.mps.is_available():\n        device = torch.device(\"mps\")\n        model = model.to(device)\n    else:\n        # DataParallel will divide and allocate batch_size to all available GPUs\n        if args.arch.startswith('alexnet') or args.arch.startswith('vgg'):\n            model.features = torch.nn.DataParallel(model.features)\n            model.cuda()\n        else:\n            model = torch.nn.DataParallel(model).cuda()\n\n    if torch.cuda.is_available():\n        if args.gpu:\n            device = torch.device('cuda:{}'.format(args.gpu))\n        else:\n            device = torch.device(\"cuda\")\n    elif torch.backends.mps.is_available():\n        device = torch.device(\"mps\")\n    else:\n        device = torch.device(\"cpu\")\n    # define loss function (criterion), optimizer, and learning rate scheduler\n    criterion = nn.CrossEntropyLoss().to(device)\n\n    optimizer = torch.optim.SGD(model.parameters(), args.lr,\n                                momentum=args.momentum,\n                                weight_decay=args.weight_decay)\n\n    \"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"\n    scheduler = StepLR(optimizer, step_size=30, gamma=0.1)\n\n    # optionally resume from a checkpoint\n    if args.resume:\n        if os.path.isfile(args.resume):\n            print(\"=> loading checkpoint '{}'\".format(args.resume))\n            if args.gpu is None:\n                checkpoint = torch.load(args.resume)\n            elif torch.cuda.is_available():\n                # Map model to be loaded to specified single gpu.\n                loc = 'cuda:{}'.format(args.gpu)\n                checkpoint = torch.load(args.resume, map_location=loc)\n            args.start_epoch = checkpoint['epoch']\n            best_acc1 = checkpoint['best_acc1']\n            if args.gpu is not None:\n                # best_acc1 may be from a checkpoint from a different GPU\n                best_acc1 = best_acc1.to(args.gpu)\n            model.load_state_dict(checkpoint['state_dict'])\n            optimizer.load_state_dict(checkpoint['optimizer'])\n            scheduler.load_state_dict(checkpoint['scheduler'])\n            print(\"=> loaded checkpoint '{}' (epoch {})\"\n                  .format(args.resume, checkpoint['epoch']))\n        else:\n            print(\"=> no checkpoint found at '{}'\".format(args.resume))\n\n    # Data loading code\n    if args.dummy:\n        print(\"=> Dummy data is used!\")\n        train_dataset = datasets.FakeData(1281167, (3, 224, 224), 1000, transforms.ToTensor())\n        val_dataset = datasets.FakeData(50000, (3, 224, 224), 1000, transforms.ToTensor())\n    else:\n        normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                         std=[0.229, 0.224, 0.225])\n\n        train_dataset = datasets.ImageFolder(\n            \"数据集的路径：\",\n            transforms.Compose([\n                transforms.RandomResizedCrop(224),\n                transforms.RandomHorizontalFlip(),\n                transforms.ToTensor(),\n                normalize,\n            ]))\n\n        val_dataset = datasets.ImageFolder(\n            \"测试集的路径：\",\n            transforms.Compose([\n                transforms.Resize(256),\n                transforms.CenterCrop(224),\n                transforms.ToTensor(),\n                normalize,\n            ]))\n\n    if args.distributed:\n        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)\n        val_sampler = torch.utils.data.distributed.DistributedSampler(val_dataset, shuffle=False, drop_last=True)\n    else:\n        train_sampler = None\n        val_sampler = None\n\n    train_loader = torch.utils.data.DataLoader(\n        train_dataset, batch_size=args.batch_size, shuffle=(train_sampler is None),\n        num_workers=args.workers, pin_memory=True, sampler=train_sampler)\n\n    val_loader = torch.utils.data.DataLoader(\n        val_dataset, batch_size=args.batch_size, shuffle=False,\n        num_workers=args.workers, pin_memory=True, sampler=val_sampler)\n\n    if args.evaluate:\n        validate(val_loader, model, criterion, args)\n        return\n\n    end = time.time()\n\n    for epoch in range(args.start_epoch, args.epochs):\n\n        print(\"\\n-----第{}轮训练开始-----\".format(epoch))\n\n        if args.distributed:\n            train_sampler.set_epoch(epoch)\n\n        # train for one epoch\n        train(train_loader, model, criterion, optimizer, epoch, device, args, end)\n\n        # evaluate on validation set\n        acc1 = validate(val_loader, model, criterion, args, end)\n\n        scheduler.step()\n\n        # remember best acc@1 and save checkpoint\n        is_best = acc1 > best_acc1\n        best_acc1 = max(acc1, best_acc1)\n\n        if not args.multiprocessing_distributed or (args.multiprocessing_distributed\n                                                    and args.rank % ngpus_per_node == 0):\n            save_checkpoint({\n                'epoch': epoch + 1,\n                'arch': args.arch,\n                'state_dict': model.state_dict(),\n                'best_acc1': best_acc1,\n                'optimizer': optimizer.state_dict(),\n                'scheduler': scheduler.state_dict()\n            }, is_best)\n\n\ndef train(train_loader, model, criterion, optimizer, epoch, device, args, end):\n    losses = AverageMeter('Loss', ':.4e')\n    top1 = AverageMeter('Acc@1', ':6.2f')\n    top5 = AverageMeter('Acc@5', ':6.2f')\n    progress = ProgressMeter(\n        len(train_loader),\n        [losses, top1, top5],\n        prefix=\"Epoch: [{}]\".format(epoch))\n\n    # switch to train mode\n    model.train()\n\n    for i, (images, target) in enumerate(train_loader):\n        # measure data loading time\n\n        # move data to the same device as model\n        images = images.to(device, non_blocking=True)\n        target = target.to(device, non_blocking=True)\n\n        # compute output\n        output = model(images)\n        loss = criterion(output, target)\n\n        # measure accuracy and record loss\n        acc1, acc5 = accuracy(output, target, topk=(1, 5))\n        losses.update(loss.item(), images.size(0))\n        top1.update(acc1[0], images.size(0))\n        top5.update(acc5[0], images.size(0))\n\n        # compute gradient and do SGD step\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        # measure elapsed time\n        if i % args.print_freq == 0:\n            progress.display(i + 1)\n            print(\"Time: %.2fs\" % (time.time() - end))\n\n\ndef validate(val_loader, model, criterion, args, end):\n    def run_validate(loader, base_progress=0):\n        with torch.no_grad():\n            end = time.time()\n            for i, (images, target) in enumerate(loader):\n                i = base_progress + i\n                if args.gpu is not None and torch.cuda.is_available():\n                    images = images.cuda(args.gpu, non_blocking=True)\n                if torch.backends.mps.is_available():\n                    images = images.to('mps')\n                    target = target.to('mps')\n                if torch.cuda.is_available():\n                    target = target.cuda(args.gpu, non_blocking=True)\n\n                # compute output\n                output = model(images)\n                loss = criterion(output, target)\n\n                # measure accuracy and record loss\n                acc1, acc5 = accuracy(output, target, topk=(1, 5))\n                losses.update(loss.item(), images.size(0))\n                top1.update(acc1[0], images.size(0))\n                top5.update(acc5[0], images.size(0))\n\n                # measure elapsed time\n\n                if i % args.print_freq == 0:\n                    progress.display(i + 1)\n                    print(\"time: %.1fs\" % (time.time() - end))\n\n    losses = AverageMeter('Loss', ':.4e', Summary.NONE)\n    top1 = AverageMeter('Acc@1', ':6.2f', Summary.AVERAGE)\n    top5 = AverageMeter('Acc@5', ':6.2f', Summary.AVERAGE)\n    progress = ProgressMeter(\n        len(val_loader) + (args.distributed and (len(val_loader.sampler) * args.world_size < len(val_loader.dataset))),\n        [losses, top1, top5],\n        prefix='Test: ')\n\n    # switch to evaluate mode\n    model.eval()\n\n    run_validate(val_loader)\n    if args.distributed:\n        top1.all_reduce()\n        top5.all_reduce()\n\n    if args.distributed and (len(val_loader.sampler) * args.world_size < len(val_loader.dataset)):\n        aux_val_dataset = Subset(val_loader.dataset,\n                                 range(len(val_loader.sampler) * args.world_size, len(val_loader.dataset)))\n        aux_val_loader = torch.utils.data.DataLoader(\n            aux_val_dataset, batch_size=args.batch_size, shuffle=False,\n            num_workers=args.workers, pin_memory=True)\n        run_validate(aux_val_loader, len(val_loader))\n\n    progress.display_summary()\n\n    return top1.avg\n\n\ndef save_checkpoint(state, is_best, filename='../models/checkpoint_resnet34.pth.tar'):\n    torch.save(state, filename)\n    if is_best:\n        shutil.copyfile(filename, '../models/model_best_resnet34.pth.tar')\n\n\nclass Summary(Enum):\n    NONE = 0\n    AVERAGE = 1\n    SUM = 2\n    COUNT = 3\n\n\nclass AverageMeter(object):\n    \"\"\"Computes and stores the average and current value\"\"\"\n\n    def __init__(self, name, fmt=':f', summary_type=Summary.AVERAGE):\n        self.name = name\n        self.fmt = fmt\n        self.summary_type = summary_type\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum / self.count\n\n    def all_reduce(self):\n        if torch.cuda.is_available():\n            device = torch.device(\"cuda\")\n        elif torch.backends.mps.is_available():\n            device = torch.device(\"mps\")\n        else:\n            device = torch.device(\"cpu\")\n        total = torch.tensor([self.sum, self.count], dtype=torch.float32, device=device)\n        dist.all_reduce(total, dist.ReduceOp.SUM, async_op=False)\n        self.sum, self.count = total.tolist()\n        self.avg = self.sum / self.count\n\n    def __str__(self):\n        fmtstr = '{name} {val' + self.fmt + '} ({avg' + self.fmt + '})'\n        return fmtstr.format(**self.__dict__)\n\n    def summary(self):\n        fmtstr = ''\n        if self.summary_type is Summary.NONE:\n            fmtstr = ''\n        elif self.summary_type is Summary.AVERAGE:\n            fmtstr = '{name} {avg:.3f}'\n        elif self.summary_type is Summary.SUM:\n            fmtstr = '{name} {sum:.3f}'\n        elif self.summary_type is Summary.COUNT:\n            fmtstr = '{name} {count:.3f}'\n        else:\n            raise ValueError('invalid summary type %r' % self.summary_type)\n\n        return fmtstr.format(**self.__dict__)\n\n\nclass ProgressMeter(object):\n    def __init__(self, num_batches, meters, prefix=\"\"):\n        self.batch_fmtstr = self._get_batch_fmtstr(num_batches)\n        self.meters = meters\n        self.prefix = prefix\n\n    def display(self, batch):\n        entries = [self.prefix + self.batch_fmtstr.format(batch)]\n        entries += [str(meter) for meter in self.meters]\n        print('\\t'.join(entries))\n\n    def display_summary(self):\n        entries = [\" *\"]\n        entries += [meter.summary() for meter in self.meters]\n        print(' '.join(entries))\n\n    def _get_batch_fmtstr(self, num_batches):\n        num_digits = len(str(num_batches // 1))\n        fmt = '{:' + str(num_digits) + 'd}'\n        return '[' + fmt + '/' + fmt.format(num_batches) + ']'\n\n\ndef accuracy(output, target, topk=(1,)):\n    \"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"\n    with torch.no_grad():\n        maxk = max(topk)\n        batch_size = target.size(0)\n\n        _, pred = output.topk(maxk, 1, True, True)\n        pred = pred.t()\n        correct = pred.eq(target.view(1, -1).expand_as(pred))\n\n        res = []\n        for k in topk:\n            correct_k = correct[:k].reshape(-1).float().sum(0, keepdim=True)\n            res.append(correct_k.mul_(100.0 / batch_size))\n        return res\n\n\nif __name__ == '__main__':\n    main()\n    \n```\n\n\n\n\n\n## 三、小实践：可食用蘑菇识别分类模型\n\n\n\n\n### 训练代码：\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch import nn\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\n# 抛出错误数据\nfrom PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\n\n# 设置参量\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose([\n        transforms.Resize(299),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.ImageFolder(root=\"E:\\DeepLearning数据集\\\\archive (1)\\\\train\", transform=transform)\n    test_set = torchvision.datasets.ImageFolder(root=\"E:\\DeepLearning数据集\\\\archive (1)\\\\test\", transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=64, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_ResNet_mushrooms\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = torchvision.models.resnet18()\n    model.to(device)\n\n    # model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 50\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-3, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.1fs\" % (end_time - start_time))\n        print(\"train_loss:%.5f\\n\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.1fs\" % (end_time - start_time))\n        print(\"test_loss:%.5f\" % (test_loss * 256 / len(test_set)))\n        print(\"test_acc:{}%\\n\".format((correct / len(test_set) * 100.0), '.2f'))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/ResNet_mushrooms.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n\n```\n\n\n\n### 测试代码：\n\n```python\nimport torch\nimport torch.nn\nimport torchvision\nimport torchvision.transforms as transforms\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\nfrom PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\n\ndef test():\n    # 转换输入图像\n    transform = transforms.Compose([\n            transforms.Resize(299),\n            transforms.CenterCrop(224),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n        ])\n\n    # 加载测试集\n    test_set = torchvision.datasets.ImageFolder(root=\"E:\\DeepLearning数据集\\\\archive (1)\\\\test\", transform=transform)\n\n    # 创建数据加载器\n    data_loader = torch.utils.data.DataLoader(test_set, batch_size=1, num_workers=4)\n\n    device = torch.device(\"cpu\")\n\n    # 加载模型\n    model = torch.load(\"..\\models\\\\ResNet_mushrooms.pth\")\n    model.to(device)\n    model.eval()\n\n    # 进行预测\n    correct = 0\n    list = ['Agaricus','Amanita','Boletus','Cortinarius','Entoloma','Hygrocybe','Lactarius','Russula','Suillus']\n    for idx, (inputs, label) in enumerate(data_loader):\n        with torch.no_grad():\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            predict = torch.max(outputs, dim=1)[1]\n            correct += torch.eq(predict, label).sum().item()\n            if torch.max(outputs) <= 6:\n                print('drug')\n            else:\n                print(list[predict])\n            correct += torch.eq(predict, label).sum().item()\n            print(outputs)\n\n    print(correct)\n    print(\"test_acc:{}%\\n\".format((correct / len(test_set) * 100.0), '.2f'))\n\n    print(\"Success!\")\n\n\nif __name__ == \"__main__\":\n    test()\n    \n```\n\n\n---","source":"_posts/基于Pytorch框架的深度学习图像分类模型.md","raw":"---\ntitle: 基于Pytorch框架的深度学习图像分类模型\ndate: 2023/3/15 18:06:41\ndescription: 展示了图像分类数据集和图像识别经典模型，并给出了基于pytorch框架的模板。\n\ncategories: Deeplearn\ntags: 深度学习\ncover: https://pic1.zhimg.com/v2-5ea151d43c0ebb13546985d225ac256a_1200x500.jpg\n---\n\n\n\n## 首先声明！！！\n\n---\n\n* 1.脚本为本人总结，如有使用注明出处。\n* 2.Pytorch基于Python编程语言编写脚本。\n\n---\n\n\n\n\n\n## 一、经典图像分类数据集：\n\n\n\n### 注：pytorch官网数据集 Datasets — Torchvision 0.15 documentation (pytorch.org)\n\n\n\n### 1.CIFAR10\n\n```python\ntransform = transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=384, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=384, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n```\n\n\n\n### 2.CIFAR100\n\n```python\ntransform = transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR100(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR100(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=128, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=128, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n```\n\n\n\n### 3.ImageNet (ILSVRC2012)\n\n```python\ntransform = transforms.Compose([\n        transforms.Resize(299),\n        transforms.CenterCrop(299),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.ImageFolder(root=\"/训练集的位置\", transform=transform)\n    test_set = torchvision.datasets.ImageFolder(root=\"/测试集的位置\", transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=32, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=32, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n```\n\n\n\n\n\n## 二、图像分类经典模型（基于CIFAR10数据集）：\n\n\n\n### 注：硬件配置显存最好有12g，根据显存大小调整batch_size的大小。\n\n\n\n### 1.AlexNet（自己写的模型）\n\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\nfrom AlexNet import *\n\n\n\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=384, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=384, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_AlexNet_1\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = AlexNet()\n    model.to(device)\n    model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 60\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-2, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"train_loss:%.6f\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"test_acc: %.6f  val_loss:%.6f \\n\" %\n              ((correct / len(test_set)), test_loss * 256 / len(test_set)))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/AlexNet_1.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n    \n```\n```python\nimport torch.nn as nn\n\n\n# 手搓一个AlexNet模型\nclass AlexNet(nn.Module):\n    def __init__(self):\n        super(AlexNet, self).__init__()\n\n        self.conv1 = nn.Sequential(\n                                   nn.Conv2d(3, 96, 11, 4, 2),\n                                   nn.ReLU(),\n                                   nn.MaxPool2d(3, 2),\n                                  )\n\n        self.conv2 = nn.Sequential(\n                                   nn.Conv2d(96, 256, 5, 1, 2),\n                                   nn.ReLU(),\n                                   nn.MaxPool2d(3, 2),\n                                  )\n\n        self.conv3 = nn.Sequential(\n                                   nn.Conv2d(256, 384, 3, 1, 1),\n                                   nn.ReLU(),\n                                   nn.Conv2d(384, 384, 3, 1, 1),\n                                   nn.ReLU(),\n                                   nn.Conv2d(384, 256, 3, 1, 1),\n                                   nn.ReLU(),\n                                   nn.MaxPool2d(3, 2)\n                                  )\n\n        self.fc = nn.Sequential(\n                                nn.Linear(256 * 6 * 6, 4096),\n                                nn.ReLU(),\n                                nn.Dropout(0.5),\n                                nn.Linear(4096, 4096),\n                                nn.ReLU(),\n                                nn.Dropout(0.5),\n                                nn.Linear(4096, 100),\n                               )\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        x = self.conv3(x)\n        output = self.fc(x.view(-1, 256 * 6 * 6))\n        return output\n\n```\n\n\n\n### 2.VGG（models.vgg16()）\n\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch import nn\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\n\n\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose(\n        [transforms.ToTensor(),\n         transforms.Resize((224, 224)),\n         transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=64, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_VGG_1\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = torchvision.models.vgg16()\n    model.to(device)\n    # model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 30\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-2, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"train_loss:%.6f\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"test_acc: %.6f  val_loss:%.6f \\n\" %\n              ((correct / len(test_set)), test_loss * 256 / len(test_set)))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/VGG_1.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n\n```\n\n\n\n### 3.GoogLeNet\n\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch import nn\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\n\n\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=128, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=128, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_GoogLeNet_1\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = torchvision.models.GoogLeNet()\n    model.to(device)\n    # model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 50\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-2, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            outputs = outputs.logits\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.1fs\" % (end_time - start_time))\n        print(\"train_loss:%.5f\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.1fs\" % (end_time - start_time))\n        print(\"test_acc: %.5f  val_loss:%.5f \\n\" %\n              ((correct / len(test_set)), test_loss * 256 / len(test_set)))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/GooLeNet_1.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n\n```\n\n\n\n### 4.ResNet（models.resnet101()）\n\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch import nn\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\n\n\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose(\n        [transforms.ToTensor(),\n         transforms.Resize((224, 224)),\n         transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", train=True, transform=transform)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", train=False, transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=64, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_ResNet_1\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = torchvision.models.resnet101()\n    model.to(device)\n    # model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 30\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-2, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"train_loss:%.6f\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"test_acc: %.6f  val_loss:%.6f \\n\" %\n              ((correct / len(test_set)), test_loss * 256 / len(test_set)))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/ResNet_1.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n\n```\n\n\n\n### 5.DenseNet（models.densenet121()）\n\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch import nn\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\n\n\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose(\n        [transforms.ToTensor(),\n         transforms.Resize((224, 224)),\n         transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\n\n    # 数据集路径\n    train_set = torchvision.datasets.CIFAR10(root=\"../data\", transform=transform, train=True)\n    test_set = torchvision.datasets.CIFAR10(root=\"../data\", transform=transform, train=False)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=64, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_DenseNet_1\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = torchvision.models.densenet121()\n    model.to(device)\n    # model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 30\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-2, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"train_loss:%.6f\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始  dgsd\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.2fs\" % (end_time - start_time))\n        print(\"test_acc: %.6f  val_loss:%.6f \\n\" %\n              ((correct / len(test_set)), test_loss * 256 / len(test_set)))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/DenseNet_1.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n\n```\n\n\n\n### 6.Train_ImageNet（main.py）\n\n```python\nimport argparse\nimport os\nimport random\nimport shutil\nimport time\nimport warnings\nfrom enum import Enum\nimport torch\nimport torch.backends.cudnn as cudnn\nimport torch.distributed as dist\nimport torch.multiprocessing as mp\nimport torch.nn as nn\nimport torch.nn.parallel\nimport torch.optim\nimport torch.utils.data\nimport torch.utils.data.distributed\nimport torchvision.datasets as datasets\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nfrom torch.optim.lr_scheduler import StepLR\nfrom torch.utils.data import Subset\n\n\nmodel_names = sorted(name for name in models.__dict__\n                     if name.islower() and not name.startswith(\"__\")\n                     and callable(models.__dict__[name]))\n\nparser = argparse.ArgumentParser(description='PyTorch ImageNet Training')\nparser.add_argument('data', metavar='DIR', nargs='?', default='imagenet',\n                    help='path to dataset (default: imagenet)')\nparser.add_argument('-a', '--arch', metavar='ARCH', default='resnet34',\n                    choices=model_names,\n                    help='model architecture: ' +\n                         ' | '.join(model_names) +\n                         ' (default: resnet34)')\nparser.add_argument('-j', '--workers', default=4, type=int, metavar='N',\n                    help='number of data loading workers (default: 4)')\nparser.add_argument('--epochs', default=50, type=int, metavar='N',\n                    help='number of total epochs to run')\nparser.add_argument('--start-epoch', default=1, type=int, metavar='N',\n                    help='manual epoch number (useful on restarts)')\nparser.add_argument('-b', '--batch-size', default=192, type=int,\n                    metavar='N',\n                    help='mini-batch size (default: 256), this is the total '\n                         'batch size of all GPUs on the current node when '\n                         'using Data Parallel or Distributed Data Parallel')\nparser.add_argument('--lr', '--learning-rate', default=0.1, type=float,\n                    metavar='LR', help='initial learning rate', dest='lr')\nparser.add_argument('--momentum', default=0.9, type=float, metavar='M',\n                    help='momentum')\nparser.add_argument('--wd', '--weight-decay', default=1e-4, type=float,\n                    metavar='W', help='weight decay (default: 1e-4)',\n                    dest='weight_decay')\nparser.add_argument('-p', '--print-freq', default=500, type=int,\n                    metavar='N', help='print frequency (default: 500)')\nparser.add_argument('--resume', default='', type=str, metavar='PATH',\n                    help='path to latest checkpoint (default: none)')\nparser.add_argument('-e', '--evaluate', dest='evaluate', action='store_true',\n                    help='evaluate model on validation set')\nparser.add_argument('--pretrained', dest='pretrained', action='store_true',\n                    help='use pre-trained model')\nparser.add_argument('--world-size', default=-1, type=int,\n                    help='number of nodes for distributed training')\nparser.add_argument('--rank', default=-1, type=int,\n                    help='node rank for distributed training')\nparser.add_argument('--dist-url', default='tcp://224.66.41.62:23456', type=str,\n                    help='url used to set up distributed training')\nparser.add_argument('--dist-backend', default='nccl', type=str,\n                    help='distributed backend')\nparser.add_argument('--seed', default=None, type=int,\n                    help='seed for initializing training. ')\nparser.add_argument('--gpu', default=None, type=int,\n                    help='GPU id to use.')\nparser.add_argument('--multiprocessing-distributed', action='store_true',\n                    help='Use multi-processing distributed training to launch '\n                         'N processes per node, which has N GPUs. This is the '\n                         'fastest way to use PyTorch for either single node or '\n                         'multi node data parallel training')\nparser.add_argument('--dummy', action='store_true', help=\"use fake data to benchmark\")\n\nbest_acc1 = 0\n\n\ndef main():\n    args = parser.parse_args()\n\n    if args.seed is not None:\n        random.seed(args.seed)\n        torch.manual_seed(args.seed)\n        cudnn.deterministic = True\n        cudnn.benchmark = False\n        warnings.warn('You have chosen to seed training. '\n                      'This will turn on the CUDNN deterministic setting, '\n                      'which can slow down your training considerably! '\n                      'You may see unexpected behavior when restarting '\n                      'from checkpoints.')\n\n    if args.gpu is not None:\n        warnings.warn('You have chosen a specific GPU. This will completely '\n                      'disable data parallelism.')\n\n    if args.dist_url == \"env://\" and args.world_size == -1:\n        args.world_size = int(os.environ[\"WORLD_SIZE\"])\n\n    args.distributed = args.world_size > 1 or args.multiprocessing_distributed\n\n    if torch.cuda.is_available():\n        ngpus_per_node = torch.cuda.device_count()\n    else:\n        ngpus_per_node = 1\n    if args.multiprocessing_distributed:\n        # Since we have ngpus_per_node processes per node, the total world_size\n        # needs to be adjusted accordingly\n        args.world_size = ngpus_per_node * args.world_size\n        # Use torch.multiprocessing.spawn to launch distributed processes: the\n        # main_worker process function\n        mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))\n    else:\n        # Simply call main_worker function\n        main_worker(args.gpu, ngpus_per_node, args)\n\n\ndef main_worker(gpu, ngpus_per_node, args):\n    global best_acc1\n    args.gpu = gpu\n\n    if args.gpu is not None:\n        print(\"Use GPU: {} for training\".format(args.gpu))\n\n    if args.distributed:\n        if args.dist_url == \"env://\" and args.rank == -1:\n            args.rank = int(os.environ[\"RANK\"])\n        if args.multiprocessing_distributed:\n            # For multiprocessing distributed training, rank needs to be the\n            # global rank among all the processes\n            args.rank = args.rank * ngpus_per_node + gpu\n        dist.init_process_group(backend=args.dist_backend, init_method=args.dist_url,\n                                world_size=args.world_size, rank=args.rank)\n    # create model\n    if args.pretrained:\n        print(\"=> using pre-trained model '{}'\".format(args.arch))\n        model = models.__dict__[args.arch](pretrained=True)\n    else:\n        print(\"=> creating model '{}'\".format(args.arch))\n        model = models.__dict__[args.arch]()\n\n    if not torch.cuda.is_available() and not torch.backends.mps.is_available():\n        print('using CPU, this will be slow')\n    elif args.distributed:\n        # For multiprocessing distributed, DistributedDataParallel constructor\n        # should always set the single device scope, otherwise,\n        # DistributedDataParallel will use all available devices.\n        if torch.cuda.is_available():\n            if args.gpu is not None:\n                torch.cuda.set_device(args.gpu)\n                model.cuda(args.gpu)\n                # When using a single GPU per process and per\n                # DistributedDataParallel, we need to divide the batch size\n                # ourselves based on the total number of GPUs of the current node.\n                args.batch_size = int(args.batch_size / ngpus_per_node)\n                args.workers = int((args.workers + ngpus_per_node - 1) / ngpus_per_node)\n                model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])\n            else:\n                model.cuda()\n                # DistributedDataParallel will divide and allocate batch_size to all\n                # available GPUs if device_ids are not set\n                model = torch.nn.parallel.DistributedDataParallel(model)\n    elif args.gpu is not None and torch.cuda.is_available():\n        torch.cuda.set_device(args.gpu)\n        model = model.cuda(args.gpu)\n    elif torch.backends.mps.is_available():\n        device = torch.device(\"mps\")\n        model = model.to(device)\n    else:\n        # DataParallel will divide and allocate batch_size to all available GPUs\n        if args.arch.startswith('alexnet') or args.arch.startswith('vgg'):\n            model.features = torch.nn.DataParallel(model.features)\n            model.cuda()\n        else:\n            model = torch.nn.DataParallel(model).cuda()\n\n    if torch.cuda.is_available():\n        if args.gpu:\n            device = torch.device('cuda:{}'.format(args.gpu))\n        else:\n            device = torch.device(\"cuda\")\n    elif torch.backends.mps.is_available():\n        device = torch.device(\"mps\")\n    else:\n        device = torch.device(\"cpu\")\n    # define loss function (criterion), optimizer, and learning rate scheduler\n    criterion = nn.CrossEntropyLoss().to(device)\n\n    optimizer = torch.optim.SGD(model.parameters(), args.lr,\n                                momentum=args.momentum,\n                                weight_decay=args.weight_decay)\n\n    \"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"\n    scheduler = StepLR(optimizer, step_size=30, gamma=0.1)\n\n    # optionally resume from a checkpoint\n    if args.resume:\n        if os.path.isfile(args.resume):\n            print(\"=> loading checkpoint '{}'\".format(args.resume))\n            if args.gpu is None:\n                checkpoint = torch.load(args.resume)\n            elif torch.cuda.is_available():\n                # Map model to be loaded to specified single gpu.\n                loc = 'cuda:{}'.format(args.gpu)\n                checkpoint = torch.load(args.resume, map_location=loc)\n            args.start_epoch = checkpoint['epoch']\n            best_acc1 = checkpoint['best_acc1']\n            if args.gpu is not None:\n                # best_acc1 may be from a checkpoint from a different GPU\n                best_acc1 = best_acc1.to(args.gpu)\n            model.load_state_dict(checkpoint['state_dict'])\n            optimizer.load_state_dict(checkpoint['optimizer'])\n            scheduler.load_state_dict(checkpoint['scheduler'])\n            print(\"=> loaded checkpoint '{}' (epoch {})\"\n                  .format(args.resume, checkpoint['epoch']))\n        else:\n            print(\"=> no checkpoint found at '{}'\".format(args.resume))\n\n    # Data loading code\n    if args.dummy:\n        print(\"=> Dummy data is used!\")\n        train_dataset = datasets.FakeData(1281167, (3, 224, 224), 1000, transforms.ToTensor())\n        val_dataset = datasets.FakeData(50000, (3, 224, 224), 1000, transforms.ToTensor())\n    else:\n        normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                         std=[0.229, 0.224, 0.225])\n\n        train_dataset = datasets.ImageFolder(\n            \"数据集的路径：\",\n            transforms.Compose([\n                transforms.RandomResizedCrop(224),\n                transforms.RandomHorizontalFlip(),\n                transforms.ToTensor(),\n                normalize,\n            ]))\n\n        val_dataset = datasets.ImageFolder(\n            \"测试集的路径：\",\n            transforms.Compose([\n                transforms.Resize(256),\n                transforms.CenterCrop(224),\n                transforms.ToTensor(),\n                normalize,\n            ]))\n\n    if args.distributed:\n        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)\n        val_sampler = torch.utils.data.distributed.DistributedSampler(val_dataset, shuffle=False, drop_last=True)\n    else:\n        train_sampler = None\n        val_sampler = None\n\n    train_loader = torch.utils.data.DataLoader(\n        train_dataset, batch_size=args.batch_size, shuffle=(train_sampler is None),\n        num_workers=args.workers, pin_memory=True, sampler=train_sampler)\n\n    val_loader = torch.utils.data.DataLoader(\n        val_dataset, batch_size=args.batch_size, shuffle=False,\n        num_workers=args.workers, pin_memory=True, sampler=val_sampler)\n\n    if args.evaluate:\n        validate(val_loader, model, criterion, args)\n        return\n\n    end = time.time()\n\n    for epoch in range(args.start_epoch, args.epochs):\n\n        print(\"\\n-----第{}轮训练开始-----\".format(epoch))\n\n        if args.distributed:\n            train_sampler.set_epoch(epoch)\n\n        # train for one epoch\n        train(train_loader, model, criterion, optimizer, epoch, device, args, end)\n\n        # evaluate on validation set\n        acc1 = validate(val_loader, model, criterion, args, end)\n\n        scheduler.step()\n\n        # remember best acc@1 and save checkpoint\n        is_best = acc1 > best_acc1\n        best_acc1 = max(acc1, best_acc1)\n\n        if not args.multiprocessing_distributed or (args.multiprocessing_distributed\n                                                    and args.rank % ngpus_per_node == 0):\n            save_checkpoint({\n                'epoch': epoch + 1,\n                'arch': args.arch,\n                'state_dict': model.state_dict(),\n                'best_acc1': best_acc1,\n                'optimizer': optimizer.state_dict(),\n                'scheduler': scheduler.state_dict()\n            }, is_best)\n\n\ndef train(train_loader, model, criterion, optimizer, epoch, device, args, end):\n    losses = AverageMeter('Loss', ':.4e')\n    top1 = AverageMeter('Acc@1', ':6.2f')\n    top5 = AverageMeter('Acc@5', ':6.2f')\n    progress = ProgressMeter(\n        len(train_loader),\n        [losses, top1, top5],\n        prefix=\"Epoch: [{}]\".format(epoch))\n\n    # switch to train mode\n    model.train()\n\n    for i, (images, target) in enumerate(train_loader):\n        # measure data loading time\n\n        # move data to the same device as model\n        images = images.to(device, non_blocking=True)\n        target = target.to(device, non_blocking=True)\n\n        # compute output\n        output = model(images)\n        loss = criterion(output, target)\n\n        # measure accuracy and record loss\n        acc1, acc5 = accuracy(output, target, topk=(1, 5))\n        losses.update(loss.item(), images.size(0))\n        top1.update(acc1[0], images.size(0))\n        top5.update(acc5[0], images.size(0))\n\n        # compute gradient and do SGD step\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        # measure elapsed time\n        if i % args.print_freq == 0:\n            progress.display(i + 1)\n            print(\"Time: %.2fs\" % (time.time() - end))\n\n\ndef validate(val_loader, model, criterion, args, end):\n    def run_validate(loader, base_progress=0):\n        with torch.no_grad():\n            end = time.time()\n            for i, (images, target) in enumerate(loader):\n                i = base_progress + i\n                if args.gpu is not None and torch.cuda.is_available():\n                    images = images.cuda(args.gpu, non_blocking=True)\n                if torch.backends.mps.is_available():\n                    images = images.to('mps')\n                    target = target.to('mps')\n                if torch.cuda.is_available():\n                    target = target.cuda(args.gpu, non_blocking=True)\n\n                # compute output\n                output = model(images)\n                loss = criterion(output, target)\n\n                # measure accuracy and record loss\n                acc1, acc5 = accuracy(output, target, topk=(1, 5))\n                losses.update(loss.item(), images.size(0))\n                top1.update(acc1[0], images.size(0))\n                top5.update(acc5[0], images.size(0))\n\n                # measure elapsed time\n\n                if i % args.print_freq == 0:\n                    progress.display(i + 1)\n                    print(\"time: %.1fs\" % (time.time() - end))\n\n    losses = AverageMeter('Loss', ':.4e', Summary.NONE)\n    top1 = AverageMeter('Acc@1', ':6.2f', Summary.AVERAGE)\n    top5 = AverageMeter('Acc@5', ':6.2f', Summary.AVERAGE)\n    progress = ProgressMeter(\n        len(val_loader) + (args.distributed and (len(val_loader.sampler) * args.world_size < len(val_loader.dataset))),\n        [losses, top1, top5],\n        prefix='Test: ')\n\n    # switch to evaluate mode\n    model.eval()\n\n    run_validate(val_loader)\n    if args.distributed:\n        top1.all_reduce()\n        top5.all_reduce()\n\n    if args.distributed and (len(val_loader.sampler) * args.world_size < len(val_loader.dataset)):\n        aux_val_dataset = Subset(val_loader.dataset,\n                                 range(len(val_loader.sampler) * args.world_size, len(val_loader.dataset)))\n        aux_val_loader = torch.utils.data.DataLoader(\n            aux_val_dataset, batch_size=args.batch_size, shuffle=False,\n            num_workers=args.workers, pin_memory=True)\n        run_validate(aux_val_loader, len(val_loader))\n\n    progress.display_summary()\n\n    return top1.avg\n\n\ndef save_checkpoint(state, is_best, filename='../models/checkpoint_resnet34.pth.tar'):\n    torch.save(state, filename)\n    if is_best:\n        shutil.copyfile(filename, '../models/model_best_resnet34.pth.tar')\n\n\nclass Summary(Enum):\n    NONE = 0\n    AVERAGE = 1\n    SUM = 2\n    COUNT = 3\n\n\nclass AverageMeter(object):\n    \"\"\"Computes and stores the average and current value\"\"\"\n\n    def __init__(self, name, fmt=':f', summary_type=Summary.AVERAGE):\n        self.name = name\n        self.fmt = fmt\n        self.summary_type = summary_type\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum / self.count\n\n    def all_reduce(self):\n        if torch.cuda.is_available():\n            device = torch.device(\"cuda\")\n        elif torch.backends.mps.is_available():\n            device = torch.device(\"mps\")\n        else:\n            device = torch.device(\"cpu\")\n        total = torch.tensor([self.sum, self.count], dtype=torch.float32, device=device)\n        dist.all_reduce(total, dist.ReduceOp.SUM, async_op=False)\n        self.sum, self.count = total.tolist()\n        self.avg = self.sum / self.count\n\n    def __str__(self):\n        fmtstr = '{name} {val' + self.fmt + '} ({avg' + self.fmt + '})'\n        return fmtstr.format(**self.__dict__)\n\n    def summary(self):\n        fmtstr = ''\n        if self.summary_type is Summary.NONE:\n            fmtstr = ''\n        elif self.summary_type is Summary.AVERAGE:\n            fmtstr = '{name} {avg:.3f}'\n        elif self.summary_type is Summary.SUM:\n            fmtstr = '{name} {sum:.3f}'\n        elif self.summary_type is Summary.COUNT:\n            fmtstr = '{name} {count:.3f}'\n        else:\n            raise ValueError('invalid summary type %r' % self.summary_type)\n\n        return fmtstr.format(**self.__dict__)\n\n\nclass ProgressMeter(object):\n    def __init__(self, num_batches, meters, prefix=\"\"):\n        self.batch_fmtstr = self._get_batch_fmtstr(num_batches)\n        self.meters = meters\n        self.prefix = prefix\n\n    def display(self, batch):\n        entries = [self.prefix + self.batch_fmtstr.format(batch)]\n        entries += [str(meter) for meter in self.meters]\n        print('\\t'.join(entries))\n\n    def display_summary(self):\n        entries = [\" *\"]\n        entries += [meter.summary() for meter in self.meters]\n        print(' '.join(entries))\n\n    def _get_batch_fmtstr(self, num_batches):\n        num_digits = len(str(num_batches // 1))\n        fmt = '{:' + str(num_digits) + 'd}'\n        return '[' + fmt + '/' + fmt.format(num_batches) + ']'\n\n\ndef accuracy(output, target, topk=(1,)):\n    \"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"\n    with torch.no_grad():\n        maxk = max(topk)\n        batch_size = target.size(0)\n\n        _, pred = output.topk(maxk, 1, True, True)\n        pred = pred.t()\n        correct = pred.eq(target.view(1, -1).expand_as(pred))\n\n        res = []\n        for k in topk:\n            correct_k = correct[:k].reshape(-1).float().sum(0, keepdim=True)\n            res.append(correct_k.mul_(100.0 / batch_size))\n        return res\n\n\nif __name__ == '__main__':\n    main()\n    \n```\n\n\n\n\n\n## 三、小实践：可食用蘑菇识别分类模型\n\n\n\n\n### 训练代码：\n```python\nimport time\nimport torch.nn\nimport torchvision\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nfrom torch import nn\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\n# 抛出错误数据\nfrom PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\n\n# 设置参量\ndef weight_init(m):\n    if isinstance(m, nn.Linear):\n        nn.init.xavier_normal_(m.weight)\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.Conv2d):\n        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        nn.init.constant_(m.bias, 0)\n    elif isinstance(m, nn.BatchNorm2d):\n        nn.init.constant_(m.weight, 1)\n        nn.init.constant_(m.bias, 0)\n\n\n# 主训练函数\ndef train():\n    transform = transforms.Compose([\n        transforms.Resize(299),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n    ])\n\n    # 数据集路径\n    train_set = torchvision.datasets.ImageFolder(root=\"E:\\DeepLearning数据集\\\\archive (1)\\\\train\", transform=transform)\n    test_set = torchvision.datasets.ImageFolder(root=\"E:\\DeepLearning数据集\\\\archive (1)\\\\test\", transform=transform)\n\n    train_loader = torch.utils.data.DataLoader(train_set, batch_size=64, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n    test_loader = torch.utils.data.DataLoader(test_set, batch_size=64, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    # 写入tensorboard\n    writer = SummaryWriter(\"../train_ResNet_mushrooms\")\n\n    train_data_size = len(train_set)\n    test_data_size = len(test_set)\n    print(\"训练数据集的长度为：{}\".format(train_data_size))\n    print(\"测试数据集的长度为：{} \\n\".format(test_data_size))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    model = torchvision.models.resnet18()\n    model.to(device)\n\n    # model.apply(weight_init)\n\n    # 记录训练的轮数\n    total_train_step = 0\n    # 记录测试的次数\n    total_test_step = 0\n    # 控制训练轮数\n    epochs = 50\n\n    optimizer = optim.SGD(model.parameters(), lr=1e-3, momentum=0.9, weight_decay=0.0005)\n    criteon = nn.CrossEntropyLoss().to(device)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=100, eta_min=0.0001, last_epoch=-1)\n\n    start_time = time.time()\n    for epoch in range(epochs):\n        print(\"-----第{}轮训练开始-----\".format(epoch + 1))\n\n        # 训练开始\n        model.train()\n        global train_loss\n        train_loss = 0\n        for idx, (inputs, label) in enumerate(train_loader):\n            optimizer.zero_grad()\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            loss = criteon(outputs, label)\n            loss.backward()\n            optimizer.step()\n            train_loss += loss.item()\n            total_train_step += 1\n\n        print(\"train_batchs:{}\".format(total_train_step))\n        end_time = time.time()\n        print(\"time: %.1fs\" % (end_time - start_time))\n        print(\"train_loss:%.5f\\n\" % (train_loss / len(train_set) * 256))\n\n        # 测试开始\n        model.eval()\n        global test_loss, correct\n        test_loss = 0\n        correct = 0\n        for idx, (inputs, label) in enumerate(test_loader):\n            with torch.no_grad():\n                inputs, label = inputs.to(device), label.to(device)\n                outputs = model(inputs)\n                test_loss += criteon(outputs, label)\n                predict = torch.max(outputs, dim=1)[1]\n                correct += torch.eq(predict, label).sum().item()\n                total_test_step += 1\n\n        print(\"test_batchs:{}\".format(total_test_step))\n        end_time = time.time()\n        print(\"time: %.1fs\" % (end_time - start_time))\n        print(\"test_loss:%.5f\" % (test_loss * 256 / len(test_set)))\n        print(\"test_acc:{}%\\n\".format((correct / len(test_set) * 100.0), '.2f'))\n\n        writer.add_scalar('loss', train_loss / len(train_loader), epoch)\n        writer.add_scalar('acc', correct / len(test_set), epoch)\n        scheduler.step()\n\n    torch.save(model, '../models/ResNet_mushrooms.pth')\n    print('---Finished Training---')\n\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    train()\n\n```\n\n\n\n### 测试代码：\n\n```python\nimport torch\nimport torch.nn\nimport torchvision\nimport torchvision.transforms as transforms\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torch.utils.data import DataLoader\n\nfrom PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\n\ndef test():\n    # 转换输入图像\n    transform = transforms.Compose([\n            transforms.Resize(299),\n            transforms.CenterCrop(224),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n        ])\n\n    # 加载测试集\n    test_set = torchvision.datasets.ImageFolder(root=\"E:\\DeepLearning数据集\\\\archive (1)\\\\test\", transform=transform)\n\n    # 创建数据加载器\n    data_loader = torch.utils.data.DataLoader(test_set, batch_size=1, num_workers=4)\n\n    device = torch.device(\"cpu\")\n\n    # 加载模型\n    model = torch.load(\"..\\models\\\\ResNet_mushrooms.pth\")\n    model.to(device)\n    model.eval()\n\n    # 进行预测\n    correct = 0\n    list = ['Agaricus','Amanita','Boletus','Cortinarius','Entoloma','Hygrocybe','Lactarius','Russula','Suillus']\n    for idx, (inputs, label) in enumerate(data_loader):\n        with torch.no_grad():\n            inputs, label = inputs.to(device), label.to(device)\n            outputs = model(inputs)\n            predict = torch.max(outputs, dim=1)[1]\n            correct += torch.eq(predict, label).sum().item()\n            if torch.max(outputs) <= 6:\n                print('drug')\n            else:\n                print(list[predict])\n            correct += torch.eq(predict, label).sum().item()\n            print(outputs)\n\n    print(correct)\n    print(\"test_acc:{}%\\n\".format((correct / len(test_set) * 100.0), '.2f'))\n\n    print(\"Success!\")\n\n\nif __name__ == \"__main__\":\n    test()\n    \n```\n\n\n---","slug":"基于Pytorch框架的深度学习图像分类模型","published":1,"updated":"2024-06-20T12:57:05.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvo9000uhwtv3fdo7f8a","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.脚本为本人总结，如有使用注明出处。</li>\n<li>2.Pytorch基于Python编程语言编写脚本。</li>\n</ul>\n<hr>\n<h2 id=\"一、经典图像分类数据集：\">一、经典图像分类数据集：</h2>\n<h3 id=\"注：pytorch官网数据集-Datasets-—-Torchvision-0-15-documentation-pytorch-org\">注：pytorch官网数据集 Datasets — Torchvision 0.15 documentation (<a href=\"http://pytorch.org\">pytorch.org</a>)</h3>\n<h3 id=\"1-CIFAR10\">1.CIFAR10</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">256</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">384</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">384</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-CIFAR100\">2.CIFAR100</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">256</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR100(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR100(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">128</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">128</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-ImageNet-ILSVRC2012\">3.ImageNet (ILSVRC2012)</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">299</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">299</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.ImageFolder(root=<span class=\"string\">&quot;/训练集的位置&quot;</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.ImageFolder(root=<span class=\"string\">&quot;/测试集的位置&quot;</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">32</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">32</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、图像分类经典模型（基于CIFAR10数据集）：\">二、图像分类经典模型（基于CIFAR10数据集）：</h2>\n<h3 id=\"注：硬件配置显存最好有12g，根据显存大小调整batch-size的大小。\">注：硬件配置显存最好有12g，根据显存大小调整batch_size的大小。</h3>\n<h3 id=\"1-AlexNet（自己写的模型）\">1.AlexNet（自己写的模型）</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> AlexNet <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">256</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">384</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">384</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_AlexNet_1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = AlexNet()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    model.apply(weight_init)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">60</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-2</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc: %.6f  val_loss:%.6f \\n&quot;</span> %</span><br><span class=\"line\">              ((correct / <span class=\"built_in\">len</span>(test_set)), test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/AlexNet_1.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 手搓一个AlexNet模型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlexNet</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(AlexNet, self).__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv1 = nn.Sequential(</span><br><span class=\"line\">                                   nn.Conv2d(<span class=\"number\">3</span>, <span class=\"number\">96</span>, <span class=\"number\">11</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">                                   nn.ReLU(),</span><br><span class=\"line\">                                   nn.MaxPool2d(<span class=\"number\">3</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">                                  )</span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv2 = nn.Sequential(</span><br><span class=\"line\">                                   nn.Conv2d(<span class=\"number\">96</span>, <span class=\"number\">256</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">                                   nn.ReLU(),</span><br><span class=\"line\">                                   nn.MaxPool2d(<span class=\"number\">3</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">                                  )</span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv3 = nn.Sequential(</span><br><span class=\"line\">                                   nn.Conv2d(<span class=\"number\">256</span>, <span class=\"number\">384</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">                                   nn.ReLU(),</span><br><span class=\"line\">                                   nn.Conv2d(<span class=\"number\">384</span>, <span class=\"number\">384</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">                                   nn.ReLU(),</span><br><span class=\"line\">                                   nn.Conv2d(<span class=\"number\">384</span>, <span class=\"number\">256</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">                                   nn.ReLU(),</span><br><span class=\"line\">                                   nn.MaxPool2d(<span class=\"number\">3</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">                                  )</span><br><span class=\"line\"></span><br><span class=\"line\">        self.fc = nn.Sequential(</span><br><span class=\"line\">                                nn.Linear(<span class=\"number\">256</span> * <span class=\"number\">6</span> * <span class=\"number\">6</span>, <span class=\"number\">4096</span>),</span><br><span class=\"line\">                                nn.ReLU(),</span><br><span class=\"line\">                                nn.Dropout(<span class=\"number\">0.5</span>),</span><br><span class=\"line\">                                nn.Linear(<span class=\"number\">4096</span>, <span class=\"number\">4096</span>),</span><br><span class=\"line\">                                nn.ReLU(),</span><br><span class=\"line\">                                nn.Dropout(<span class=\"number\">0.5</span>),</span><br><span class=\"line\">                                nn.Linear(<span class=\"number\">4096</span>, <span class=\"number\">100</span>),</span><br><span class=\"line\">                               )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = self.conv1(x)</span><br><span class=\"line\">        x = self.conv2(x)</span><br><span class=\"line\">        x = self.conv3(x)</span><br><span class=\"line\">        output = self.fc(x.view(-<span class=\"number\">1</span>, <span class=\"number\">256</span> * <span class=\"number\">6</span> * <span class=\"number\">6</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-VGG（models-vgg16-）\">2.VGG（models.vgg16()）</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose(</span><br><span class=\"line\">        [transforms.ToTensor(),</span><br><span class=\"line\">         transforms.Resize((<span class=\"number\">224</span>, <span class=\"number\">224</span>)),</span><br><span class=\"line\">         transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>])])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_VGG_1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = torchvision.models.vgg16()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    <span class=\"comment\"># model.apply(weight_init)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-2</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc: %.6f  val_loss:%.6f \\n&quot;</span> %</span><br><span class=\"line\">              ((correct / <span class=\"built_in\">len</span>(test_set)), test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/VGG_1.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-GoogLeNet\">3.GoogLeNet</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">256</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">128</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">128</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_GoogLeNet_1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = torchvision.models.GoogLeNet()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    <span class=\"comment\"># model.apply(weight_init)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-2</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            outputs = outputs.logits</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.5f&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc: %.5f  val_loss:%.5f \\n&quot;</span> %</span><br><span class=\"line\">              ((correct / <span class=\"built_in\">len</span>(test_set)), test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/GooLeNet_1.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-ResNet（models-resnet101-）\">4.ResNet（models.resnet101()）</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose(</span><br><span class=\"line\">        [transforms.ToTensor(),</span><br><span class=\"line\">         transforms.Resize((<span class=\"number\">224</span>, <span class=\"number\">224</span>)),</span><br><span class=\"line\">         transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>])])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_ResNet_1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = torchvision.models.resnet101()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    <span class=\"comment\"># model.apply(weight_init)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-2</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc: %.6f  val_loss:%.6f \\n&quot;</span> %</span><br><span class=\"line\">              ((correct / <span class=\"built_in\">len</span>(test_set)), test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/ResNet_1.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-DenseNet（models-densenet121-）\">5.DenseNet（models.densenet121()）</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose(</span><br><span class=\"line\">        [transforms.ToTensor(),</span><br><span class=\"line\">         transforms.Resize((<span class=\"number\">224</span>, <span class=\"number\">224</span>)),</span><br><span class=\"line\">         transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>])])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, transform=transform, train=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, transform=transform, train=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_DenseNet_1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = torchvision.models.densenet121()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    <span class=\"comment\"># model.apply(weight_init)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-2</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始  dgsd</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc: %.6f  val_loss:%.6f \\n&quot;</span> %</span><br><span class=\"line\">              ((correct / <span class=\"built_in\">len</span>(test_set)), test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/DenseNet_1.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-Train-ImageNet（main-py）\">6.Train_ImageNet（<a href=\"http://main.py\">main.py</a>）</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.backends.cudnn <span class=\"keyword\">as</span> cudnn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.distributed <span class=\"keyword\">as</span> dist</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.multiprocessing <span class=\"keyword\">as</span> mp</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn.parallel</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.utils.data</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.utils.data.distributed</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.datasets <span class=\"keyword\">as</span> datasets</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.models <span class=\"keyword\">as</span> models</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.optim.lr_scheduler <span class=\"keyword\">import</span> StepLR</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Subset</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">model_names = <span class=\"built_in\">sorted</span>(name <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> models.__dict__</span><br><span class=\"line\">                     <span class=\"keyword\">if</span> name.islower() <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">&quot;__&quot;</span>)</span><br><span class=\"line\">                     <span class=\"keyword\">and</span> <span class=\"built_in\">callable</span>(models.__dict__[name]))</span><br><span class=\"line\"></span><br><span class=\"line\">parser = argparse.ArgumentParser(description=<span class=\"string\">&#x27;PyTorch ImageNet Training&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;data&#x27;</span>, metavar=<span class=\"string\">&#x27;DIR&#x27;</span>, nargs=<span class=\"string\">&#x27;?&#x27;</span>, default=<span class=\"string\">&#x27;imagenet&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;path to dataset (default: imagenet)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-a&#x27;</span>, <span class=\"string\">&#x27;--arch&#x27;</span>, metavar=<span class=\"string\">&#x27;ARCH&#x27;</span>, default=<span class=\"string\">&#x27;resnet34&#x27;</span>,</span><br><span class=\"line\">                    choices=model_names,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;model architecture: &#x27;</span> +</span><br><span class=\"line\">                         <span class=\"string\">&#x27; | &#x27;</span>.join(model_names) +</span><br><span class=\"line\">                         <span class=\"string\">&#x27; (default: resnet34)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-j&#x27;</span>, <span class=\"string\">&#x27;--workers&#x27;</span>, default=<span class=\"number\">4</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, metavar=<span class=\"string\">&#x27;N&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;number of data loading workers (default: 4)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--epochs&#x27;</span>, default=<span class=\"number\">50</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, metavar=<span class=\"string\">&#x27;N&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;number of total epochs to run&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--start-epoch&#x27;</span>, default=<span class=\"number\">1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, metavar=<span class=\"string\">&#x27;N&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;manual epoch number (useful on restarts)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-b&#x27;</span>, <span class=\"string\">&#x27;--batch-size&#x27;</span>, default=<span class=\"number\">192</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    metavar=<span class=\"string\">&#x27;N&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;mini-batch size (default: 256), this is the total &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;batch size of all GPUs on the current node when &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;using Data Parallel or Distributed Data Parallel&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--lr&#x27;</span>, <span class=\"string\">&#x27;--learning-rate&#x27;</span>, default=<span class=\"number\">0.1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>,</span><br><span class=\"line\">                    metavar=<span class=\"string\">&#x27;LR&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;initial learning rate&#x27;</span>, dest=<span class=\"string\">&#x27;lr&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--momentum&#x27;</span>, default=<span class=\"number\">0.9</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>, metavar=<span class=\"string\">&#x27;M&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;momentum&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--wd&#x27;</span>, <span class=\"string\">&#x27;--weight-decay&#x27;</span>, default=<span class=\"number\">1e-4</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>,</span><br><span class=\"line\">                    metavar=<span class=\"string\">&#x27;W&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;weight decay (default: 1e-4)&#x27;</span>,</span><br><span class=\"line\">                    dest=<span class=\"string\">&#x27;weight_decay&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-p&#x27;</span>, <span class=\"string\">&#x27;--print-freq&#x27;</span>, default=<span class=\"number\">500</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    metavar=<span class=\"string\">&#x27;N&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;print frequency (default: 500)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--resume&#x27;</span>, default=<span class=\"string\">&#x27;&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, metavar=<span class=\"string\">&#x27;PATH&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;path to latest checkpoint (default: none)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-e&#x27;</span>, <span class=\"string\">&#x27;--evaluate&#x27;</span>, dest=<span class=\"string\">&#x27;evaluate&#x27;</span>, action=<span class=\"string\">&#x27;store_true&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;evaluate model on validation set&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--pretrained&#x27;</span>, dest=<span class=\"string\">&#x27;pretrained&#x27;</span>, action=<span class=\"string\">&#x27;store_true&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;use pre-trained model&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--world-size&#x27;</span>, default=-<span class=\"number\">1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;number of nodes for distributed training&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--rank&#x27;</span>, default=-<span class=\"number\">1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;node rank for distributed training&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--dist-url&#x27;</span>, default=<span class=\"string\">&#x27;tcp://224.66.41.62:23456&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;url used to set up distributed training&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--dist-backend&#x27;</span>, default=<span class=\"string\">&#x27;nccl&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;distributed backend&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--seed&#x27;</span>, default=<span class=\"literal\">None</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;seed for initializing training. &#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--gpu&#x27;</span>, default=<span class=\"literal\">None</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;GPU id to use.&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--multiprocessing-distributed&#x27;</span>, action=<span class=\"string\">&#x27;store_true&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;Use multi-processing distributed training to launch &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;N processes per node, which has N GPUs. This is the &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;fastest way to use PyTorch for either single node or &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;multi node data parallel training&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--dummy&#x27;</span>, action=<span class=\"string\">&#x27;store_true&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&quot;use fake data to benchmark&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">best_acc1 = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    args = parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.seed <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        random.seed(args.seed)</span><br><span class=\"line\">        torch.manual_seed(args.seed)</span><br><span class=\"line\">        cudnn.deterministic = <span class=\"literal\">True</span></span><br><span class=\"line\">        cudnn.benchmark = <span class=\"literal\">False</span></span><br><span class=\"line\">        warnings.warn(<span class=\"string\">&#x27;You have chosen to seed training. &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;This will turn on the CUDNN deterministic setting, &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;which can slow down your training considerably! &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;You may see unexpected behavior when restarting &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;from checkpoints.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        warnings.warn(<span class=\"string\">&#x27;You have chosen a specific GPU. This will completely &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;disable data parallelism.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.dist_url == <span class=\"string\">&quot;env://&quot;</span> <span class=\"keyword\">and</span> args.world_size == -<span class=\"number\">1</span>:</span><br><span class=\"line\">        args.world_size = <span class=\"built_in\">int</span>(os.environ[<span class=\"string\">&quot;WORLD_SIZE&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    args.distributed = args.world_size &gt; <span class=\"number\">1</span> <span class=\"keyword\">or</span> args.multiprocessing_distributed</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">        ngpus_per_node = torch.cuda.device_count()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ngpus_per_node = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.multiprocessing_distributed:</span><br><span class=\"line\">        <span class=\"comment\"># Since we have ngpus_per_node processes per node, the total world_size</span></span><br><span class=\"line\">        <span class=\"comment\"># needs to be adjusted accordingly</span></span><br><span class=\"line\">        args.world_size = ngpus_per_node * args.world_size</span><br><span class=\"line\">        <span class=\"comment\"># Use torch.multiprocessing.spawn to launch distributed processes: the</span></span><br><span class=\"line\">        <span class=\"comment\"># main_worker process function</span></span><br><span class=\"line\">        mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Simply call main_worker function</span></span><br><span class=\"line\">        main_worker(args.gpu, ngpus_per_node, args)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main_worker</span>(<span class=\"params\">gpu, ngpus_per_node, args</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> best_acc1</span><br><span class=\"line\">    args.gpu = gpu</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Use GPU: &#123;&#125; for training&quot;</span>.<span class=\"built_in\">format</span>(args.gpu))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.distributed:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.dist_url == <span class=\"string\">&quot;env://&quot;</span> <span class=\"keyword\">and</span> args.rank == -<span class=\"number\">1</span>:</span><br><span class=\"line\">            args.rank = <span class=\"built_in\">int</span>(os.environ[<span class=\"string\">&quot;RANK&quot;</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.multiprocessing_distributed:</span><br><span class=\"line\">            <span class=\"comment\"># For multiprocessing distributed training, rank needs to be the</span></span><br><span class=\"line\">            <span class=\"comment\"># global rank among all the processes</span></span><br><span class=\"line\">            args.rank = args.rank * ngpus_per_node + gpu</span><br><span class=\"line\">        dist.init_process_group(backend=args.dist_backend, init_method=args.dist_url,</span><br><span class=\"line\">                                world_size=args.world_size, rank=args.rank)</span><br><span class=\"line\">    <span class=\"comment\"># create model</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.pretrained:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; using pre-trained model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class=\"built_in\">format</span>(args.arch))</span><br><span class=\"line\">        model = models.__dict__[args.arch](pretrained=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; creating model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class=\"built_in\">format</span>(args.arch))</span><br><span class=\"line\">        model = models.__dict__[args.arch]()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> torch.cuda.is_available() <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> torch.backends.mps.is_available():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;using CPU, this will be slow&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> args.distributed:</span><br><span class=\"line\">        <span class=\"comment\"># For multiprocessing distributed, DistributedDataParallel constructor</span></span><br><span class=\"line\">        <span class=\"comment\"># should always set the single device scope, otherwise,</span></span><br><span class=\"line\">        <span class=\"comment\"># DistributedDataParallel will use all available devices.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                torch.cuda.set_device(args.gpu)</span><br><span class=\"line\">                model.cuda(args.gpu)</span><br><span class=\"line\">                <span class=\"comment\"># When using a single GPU per process and per</span></span><br><span class=\"line\">                <span class=\"comment\"># DistributedDataParallel, we need to divide the batch size</span></span><br><span class=\"line\">                <span class=\"comment\"># ourselves based on the total number of GPUs of the current node.</span></span><br><span class=\"line\">                args.batch_size = <span class=\"built_in\">int</span>(args.batch_size / ngpus_per_node)</span><br><span class=\"line\">                args.workers = <span class=\"built_in\">int</span>((args.workers + ngpus_per_node - <span class=\"number\">1</span>) / ngpus_per_node)</span><br><span class=\"line\">                model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                model.cuda()</span><br><span class=\"line\">                <span class=\"comment\"># DistributedDataParallel will divide and allocate batch_size to all</span></span><br><span class=\"line\">                <span class=\"comment\"># available GPUs if device_ids are not set</span></span><br><span class=\"line\">                model = torch.nn.parallel.DistributedDataParallel(model)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> torch.cuda.is_available():</span><br><span class=\"line\">        torch.cuda.set_device(args.gpu)</span><br><span class=\"line\">        model = model.cuda(args.gpu)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> torch.backends.mps.is_available():</span><br><span class=\"line\">        device = torch.device(<span class=\"string\">&quot;mps&quot;</span>)</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># DataParallel will divide and allocate batch_size to all available GPUs</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.arch.startswith(<span class=\"string\">&#x27;alexnet&#x27;</span>) <span class=\"keyword\">or</span> args.arch.startswith(<span class=\"string\">&#x27;vgg&#x27;</span>):</span><br><span class=\"line\">            model.features = torch.nn.DataParallel(model.features)</span><br><span class=\"line\">            model.cuda()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            model = torch.nn.DataParallel(model).cuda()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.gpu:</span><br><span class=\"line\">            device = torch.device(<span class=\"string\">&#x27;cuda:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(args.gpu))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            device = torch.device(<span class=\"string\">&quot;cuda&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> torch.backends.mps.is_available():</span><br><span class=\"line\">        device = torch.device(<span class=\"string\">&quot;mps&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        device = torch.device(<span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># define loss function (criterion), optimizer, and learning rate scheduler</span></span><br><span class=\"line\">    criterion = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = torch.optim.SGD(model.parameters(), args.lr,</span><br><span class=\"line\">                                momentum=args.momentum,</span><br><span class=\"line\">                                weight_decay=args.weight_decay)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Sets the learning rate to the initial LR decayed by 10 every 30 epochs&quot;&quot;&quot;</span></span><br><span class=\"line\">    scheduler = StepLR(optimizer, step_size=<span class=\"number\">30</span>, gamma=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># optionally resume from a checkpoint</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.resume:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(args.resume):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; loading checkpoint &#x27;&#123;&#125;&#x27;&quot;</span>.<span class=\"built_in\">format</span>(args.resume))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                checkpoint = torch.load(args.resume)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> torch.cuda.is_available():</span><br><span class=\"line\">                <span class=\"comment\"># Map model to be loaded to specified single gpu.</span></span><br><span class=\"line\">                loc = <span class=\"string\">&#x27;cuda:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(args.gpu)</span><br><span class=\"line\">                checkpoint = torch.load(args.resume, map_location=loc)</span><br><span class=\"line\">            args.start_epoch = checkpoint[<span class=\"string\">&#x27;epoch&#x27;</span>]</span><br><span class=\"line\">            best_acc1 = checkpoint[<span class=\"string\">&#x27;best_acc1&#x27;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"comment\"># best_acc1 may be from a checkpoint from a different GPU</span></span><br><span class=\"line\">                best_acc1 = best_acc1.to(args.gpu)</span><br><span class=\"line\">            model.load_state_dict(checkpoint[<span class=\"string\">&#x27;state_dict&#x27;</span>])</span><br><span class=\"line\">            optimizer.load_state_dict(checkpoint[<span class=\"string\">&#x27;optimizer&#x27;</span>])</span><br><span class=\"line\">            scheduler.load_state_dict(checkpoint[<span class=\"string\">&#x27;scheduler&#x27;</span>])</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; loaded checkpoint &#x27;&#123;&#125;&#x27; (epoch &#123;&#125;)&quot;</span></span><br><span class=\"line\">                  .<span class=\"built_in\">format</span>(args.resume, checkpoint[<span class=\"string\">&#x27;epoch&#x27;</span>]))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; no checkpoint found at &#x27;&#123;&#125;&#x27;&quot;</span>.<span class=\"built_in\">format</span>(args.resume))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Data loading code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.dummy:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; Dummy data is used!&quot;</span>)</span><br><span class=\"line\">        train_dataset = datasets.FakeData(<span class=\"number\">1281167</span>, (<span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>), <span class=\"number\">1000</span>, transforms.ToTensor())</span><br><span class=\"line\">        val_dataset = datasets.FakeData(<span class=\"number\">50000</span>, (<span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>), <span class=\"number\">1000</span>, transforms.ToTensor())</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        normalize = transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>],</span><br><span class=\"line\">                                         std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        train_dataset = datasets.ImageFolder(</span><br><span class=\"line\">            <span class=\"string\">&quot;数据集的路径：&quot;</span>,</span><br><span class=\"line\">            transforms.Compose([</span><br><span class=\"line\">                transforms.RandomResizedCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">                transforms.RandomHorizontalFlip(),</span><br><span class=\"line\">                transforms.ToTensor(),</span><br><span class=\"line\">                normalize,</span><br><span class=\"line\">            ]))</span><br><span class=\"line\"></span><br><span class=\"line\">        val_dataset = datasets.ImageFolder(</span><br><span class=\"line\">            <span class=\"string\">&quot;测试集的路径：&quot;</span>,</span><br><span class=\"line\">            transforms.Compose([</span><br><span class=\"line\">                transforms.Resize(<span class=\"number\">256</span>),</span><br><span class=\"line\">                transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">                transforms.ToTensor(),</span><br><span class=\"line\">                normalize,</span><br><span class=\"line\">            ]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.distributed:</span><br><span class=\"line\">        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)</span><br><span class=\"line\">        val_sampler = torch.utils.data.distributed.DistributedSampler(val_dataset, shuffle=<span class=\"literal\">False</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        train_sampler = <span class=\"literal\">None</span></span><br><span class=\"line\">        val_sampler = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(</span><br><span class=\"line\">        train_dataset, batch_size=args.batch_size, shuffle=(train_sampler <span class=\"keyword\">is</span> <span class=\"literal\">None</span>),</span><br><span class=\"line\">        num_workers=args.workers, pin_memory=<span class=\"literal\">True</span>, sampler=train_sampler)</span><br><span class=\"line\"></span><br><span class=\"line\">    val_loader = torch.utils.data.DataLoader(</span><br><span class=\"line\">        val_dataset, batch_size=args.batch_size, shuffle=<span class=\"literal\">False</span>,</span><br><span class=\"line\">        num_workers=args.workers, pin_memory=<span class=\"literal\">True</span>, sampler=val_sampler)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.evaluate:</span><br><span class=\"line\">        validate(val_loader, model, criterion, args)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(args.start_epoch, args.epochs):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.distributed:</span><br><span class=\"line\">            train_sampler.set_epoch(epoch)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># train for one epoch</span></span><br><span class=\"line\">        train(train_loader, model, criterion, optimizer, epoch, device, args, end)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># evaluate on validation set</span></span><br><span class=\"line\">        acc1 = validate(val_loader, model, criterion, args, end)</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># remember best acc@1 and save checkpoint</span></span><br><span class=\"line\">        is_best = acc1 &gt; best_acc1</span><br><span class=\"line\">        best_acc1 = <span class=\"built_in\">max</span>(acc1, best_acc1)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> args.multiprocessing_distributed <span class=\"keyword\">or</span> (args.multiprocessing_distributed</span><br><span class=\"line\">                                                    <span class=\"keyword\">and</span> args.rank % ngpus_per_node == <span class=\"number\">0</span>):</span><br><span class=\"line\">            save_checkpoint(&#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;epoch&#x27;</span>: epoch + <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;arch&#x27;</span>: args.arch,</span><br><span class=\"line\">                <span class=\"string\">&#x27;state_dict&#x27;</span>: model.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;best_acc1&#x27;</span>: best_acc1,</span><br><span class=\"line\">                <span class=\"string\">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;scheduler&#x27;</span>: scheduler.state_dict()</span><br><span class=\"line\">            &#125;, is_best)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>(<span class=\"params\">train_loader, model, criterion, optimizer, epoch, device, args, end</span>):</span><br><span class=\"line\">    losses = AverageMeter(<span class=\"string\">&#x27;Loss&#x27;</span>, <span class=\"string\">&#x27;:.4e&#x27;</span>)</span><br><span class=\"line\">    top1 = AverageMeter(<span class=\"string\">&#x27;Acc@1&#x27;</span>, <span class=\"string\">&#x27;:6.2f&#x27;</span>)</span><br><span class=\"line\">    top5 = AverageMeter(<span class=\"string\">&#x27;Acc@5&#x27;</span>, <span class=\"string\">&#x27;:6.2f&#x27;</span>)</span><br><span class=\"line\">    progress = ProgressMeter(</span><br><span class=\"line\">        <span class=\"built_in\">len</span>(train_loader),</span><br><span class=\"line\">        [losses, top1, top5],</span><br><span class=\"line\">        prefix=<span class=\"string\">&quot;Epoch: [&#123;&#125;]&quot;</span>.<span class=\"built_in\">format</span>(epoch))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># switch to train mode</span></span><br><span class=\"line\">    model.train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, (images, target) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">        <span class=\"comment\"># measure data loading time</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># move data to the same device as model</span></span><br><span class=\"line\">        images = images.to(device, non_blocking=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        target = target.to(device, non_blocking=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># compute output</span></span><br><span class=\"line\">        output = model(images)</span><br><span class=\"line\">        loss = criterion(output, target)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># measure accuracy and record loss</span></span><br><span class=\"line\">        acc1, acc5 = accuracy(output, target, topk=(<span class=\"number\">1</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">        losses.update(loss.item(), images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\">        top1.update(acc1[<span class=\"number\">0</span>], images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\">        top5.update(acc5[<span class=\"number\">0</span>], images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># compute gradient and do SGD step</span></span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># measure elapsed time</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % args.print_freq == <span class=\"number\">0</span>:</span><br><span class=\"line\">            progress.display(i + <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Time: %.2fs&quot;</span> % (time.time() - end))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">validate</span>(<span class=\"params\">val_loader, model, criterion, args, end</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_validate</span>(<span class=\"params\">loader, base_progress=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">            end = time.time()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i, (images, target) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(loader):</span><br><span class=\"line\">                i = base_progress + i</span><br><span class=\"line\">                <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> torch.cuda.is_available():</span><br><span class=\"line\">                    images = images.cuda(args.gpu, non_blocking=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> torch.backends.mps.is_available():</span><br><span class=\"line\">                    images = images.to(<span class=\"string\">&#x27;mps&#x27;</span>)</span><br><span class=\"line\">                    target = target.to(<span class=\"string\">&#x27;mps&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">                    target = target.cuda(args.gpu, non_blocking=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># compute output</span></span><br><span class=\"line\">                output = model(images)</span><br><span class=\"line\">                loss = criterion(output, target)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># measure accuracy and record loss</span></span><br><span class=\"line\">                acc1, acc5 = accuracy(output, target, topk=(<span class=\"number\">1</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">                losses.update(loss.item(), images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\">                top1.update(acc1[<span class=\"number\">0</span>], images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\">                top5.update(acc5[<span class=\"number\">0</span>], images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># measure elapsed time</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> i % args.print_freq == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    progress.display(i + <span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (time.time() - end))</span><br><span class=\"line\"></span><br><span class=\"line\">    losses = AverageMeter(<span class=\"string\">&#x27;Loss&#x27;</span>, <span class=\"string\">&#x27;:.4e&#x27;</span>, Summary.NONE)</span><br><span class=\"line\">    top1 = AverageMeter(<span class=\"string\">&#x27;Acc@1&#x27;</span>, <span class=\"string\">&#x27;:6.2f&#x27;</span>, Summary.AVERAGE)</span><br><span class=\"line\">    top5 = AverageMeter(<span class=\"string\">&#x27;Acc@5&#x27;</span>, <span class=\"string\">&#x27;:6.2f&#x27;</span>, Summary.AVERAGE)</span><br><span class=\"line\">    progress = ProgressMeter(</span><br><span class=\"line\">        <span class=\"built_in\">len</span>(val_loader) + (args.distributed <span class=\"keyword\">and</span> (<span class=\"built_in\">len</span>(val_loader.sampler) * args.world_size &lt; <span class=\"built_in\">len</span>(val_loader.dataset))),</span><br><span class=\"line\">        [losses, top1, top5],</span><br><span class=\"line\">        prefix=<span class=\"string\">&#x27;Test: &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># switch to evaluate mode</span></span><br><span class=\"line\">    model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    run_validate(val_loader)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.distributed:</span><br><span class=\"line\">        top1.all_reduce()</span><br><span class=\"line\">        top5.all_reduce()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.distributed <span class=\"keyword\">and</span> (<span class=\"built_in\">len</span>(val_loader.sampler) * args.world_size &lt; <span class=\"built_in\">len</span>(val_loader.dataset)):</span><br><span class=\"line\">        aux_val_dataset = Subset(val_loader.dataset,</span><br><span class=\"line\">                                 <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(val_loader.sampler) * args.world_size, <span class=\"built_in\">len</span>(val_loader.dataset)))</span><br><span class=\"line\">        aux_val_loader = torch.utils.data.DataLoader(</span><br><span class=\"line\">            aux_val_dataset, batch_size=args.batch_size, shuffle=<span class=\"literal\">False</span>,</span><br><span class=\"line\">            num_workers=args.workers, pin_memory=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        run_validate(aux_val_loader, <span class=\"built_in\">len</span>(val_loader))</span><br><span class=\"line\"></span><br><span class=\"line\">    progress.display_summary()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> top1.avg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">save_checkpoint</span>(<span class=\"params\">state, is_best, filename=<span class=\"string\">&#x27;../models/checkpoint_resnet34.pth.tar&#x27;</span></span>):</span><br><span class=\"line\">    torch.save(state, filename)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_best:</span><br><span class=\"line\">        shutil.copyfile(filename, <span class=\"string\">&#x27;../models/model_best_resnet34.pth.tar&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Summary</span>(<span class=\"title class_ inherited__\">Enum</span>):</span><br><span class=\"line\">    NONE = <span class=\"number\">0</span></span><br><span class=\"line\">    AVERAGE = <span class=\"number\">1</span></span><br><span class=\"line\">    SUM = <span class=\"number\">2</span></span><br><span class=\"line\">    COUNT = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AverageMeter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Computes and stores the average and current value&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, fmt=<span class=\"string\">&#x27;:f&#x27;</span>, summary_type=Summary.AVERAGE</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.fmt = fmt</span><br><span class=\"line\">        self.summary_type = summary_type</span><br><span class=\"line\">        self.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reset</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.val = <span class=\"number\">0</span></span><br><span class=\"line\">        self.avg = <span class=\"number\">0</span></span><br><span class=\"line\">        self.<span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        self.count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self, val, n=<span class=\"number\">1</span></span>):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.<span class=\"built_in\">sum</span> += val * n</span><br><span class=\"line\">        self.count += n</span><br><span class=\"line\">        self.avg = self.<span class=\"built_in\">sum</span> / self.count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">all_reduce</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">            device = torch.device(<span class=\"string\">&quot;cuda&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> torch.backends.mps.is_available():</span><br><span class=\"line\">            device = torch.device(<span class=\"string\">&quot;mps&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            device = torch.device(<span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">        total = torch.tensor([self.<span class=\"built_in\">sum</span>, self.count], dtype=torch.float32, device=device)</span><br><span class=\"line\">        dist.all_reduce(total, dist.ReduceOp.SUM, async_op=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        self.<span class=\"built_in\">sum</span>, self.count = total.tolist()</span><br><span class=\"line\">        self.avg = self.<span class=\"built_in\">sum</span> / self.count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        fmtstr = <span class=\"string\">&#x27;&#123;name&#125; &#123;val&#x27;</span> + self.fmt + <span class=\"string\">&#x27;&#125; (&#123;avg&#x27;</span> + self.fmt + <span class=\"string\">&#x27;&#125;)&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmtstr.<span class=\"built_in\">format</span>(**self.__dict__)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">summary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        fmtstr = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.summary_type <span class=\"keyword\">is</span> Summary.NONE:</span><br><span class=\"line\">            fmtstr = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.summary_type <span class=\"keyword\">is</span> Summary.AVERAGE:</span><br><span class=\"line\">            fmtstr = <span class=\"string\">&#x27;&#123;name&#125; &#123;avg:.3f&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.summary_type <span class=\"keyword\">is</span> Summary.SUM:</span><br><span class=\"line\">            fmtstr = <span class=\"string\">&#x27;&#123;name&#125; &#123;sum:.3f&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.summary_type <span class=\"keyword\">is</span> Summary.COUNT:</span><br><span class=\"line\">            fmtstr = <span class=\"string\">&#x27;&#123;name&#125; &#123;count:.3f&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&#x27;invalid summary type %r&#x27;</span> % self.summary_type)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmtstr.<span class=\"built_in\">format</span>(**self.__dict__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProgressMeter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, num_batches, meters, prefix=<span class=\"string\">&quot;&quot;</span></span>):</span><br><span class=\"line\">        self.batch_fmtstr = self._get_batch_fmtstr(num_batches)</span><br><span class=\"line\">        self.meters = meters</span><br><span class=\"line\">        self.prefix = prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">display</span>(<span class=\"params\">self, batch</span>):</span><br><span class=\"line\">        entries = [self.prefix + self.batch_fmtstr.<span class=\"built_in\">format</span>(batch)]</span><br><span class=\"line\">        entries += [<span class=\"built_in\">str</span>(meter) <span class=\"keyword\">for</span> meter <span class=\"keyword\">in</span> self.meters]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\t&#x27;</span>.join(entries))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">display_summary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        entries = [<span class=\"string\">&quot; *&quot;</span>]</span><br><span class=\"line\">        entries += [meter.summary() <span class=\"keyword\">for</span> meter <span class=\"keyword\">in</span> self.meters]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27; &#x27;</span>.join(entries))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_get_batch_fmtstr</span>(<span class=\"params\">self, num_batches</span>):</span><br><span class=\"line\">        num_digits = <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>(num_batches // <span class=\"number\">1</span>))</span><br><span class=\"line\">        fmt = <span class=\"string\">&#x27;&#123;:&#x27;</span> + <span class=\"built_in\">str</span>(num_digits) + <span class=\"string\">&#x27;d&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;[&#x27;</span> + fmt + <span class=\"string\">&#x27;/&#x27;</span> + fmt.<span class=\"built_in\">format</span>(num_batches) + <span class=\"string\">&#x27;]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">accuracy</span>(<span class=\"params\">output, target, topk=(<span class=\"params\"><span class=\"number\">1</span>,</span>)</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Computes the accuracy over the k top predictions for the specified values of k&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        maxk = <span class=\"built_in\">max</span>(topk)</span><br><span class=\"line\">        batch_size = target.size(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        _, pred = output.topk(maxk, <span class=\"number\">1</span>, <span class=\"literal\">True</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\">        pred = pred.t()</span><br><span class=\"line\">        correct = pred.eq(target.view(<span class=\"number\">1</span>, -<span class=\"number\">1</span>).expand_as(pred))</span><br><span class=\"line\"></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> topk:</span><br><span class=\"line\">            correct_k = correct[:k].reshape(-<span class=\"number\">1</span>).<span class=\"built_in\">float</span>().<span class=\"built_in\">sum</span>(<span class=\"number\">0</span>, keepdim=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            res.append(correct_k.mul_(<span class=\"number\">100.0</span> / batch_size))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<h2 id=\"三、小实践：可食用蘑菇识别分类模型\">三、小实践：可食用蘑菇识别分类模型</h2>\n<h3 id=\"训练代码：\">训练代码：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 抛出错误数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageFile</span><br><span class=\"line\">ImageFile.LOAD_TRUNCATED_IMAGES = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置参量</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">299</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.ImageFolder(root=<span class=\"string\">&quot;E:\\DeepLearning数据集\\\\archive (1)\\\\train&quot;</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.ImageFolder(root=<span class=\"string\">&quot;E:\\DeepLearning数据集\\\\archive (1)\\\\test&quot;</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_ResNet_mushrooms&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = torchvision.models.resnet18()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># model.apply(weight_init)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-3</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.5f\\n&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_loss:%.5f&quot;</span> % (test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc:&#123;&#125;%\\n&quot;</span>.<span class=\"built_in\">format</span>((correct / <span class=\"built_in\">len</span>(test_set) * <span class=\"number\">100.0</span>), <span class=\"string\">&#x27;.2f&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/ResNet_mushrooms.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试代码：\">测试代码：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageFile</span><br><span class=\"line\">ImageFile.LOAD_TRUNCATED_IMAGES = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 转换输入图像</span></span><br><span class=\"line\">    transform = transforms.Compose([</span><br><span class=\"line\">            transforms.Resize(<span class=\"number\">299</span>),</span><br><span class=\"line\">            transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">            transforms.ToTensor(),</span><br><span class=\"line\">            transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">        ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加载测试集</span></span><br><span class=\"line\">    test_set = torchvision.datasets.ImageFolder(root=<span class=\"string\">&quot;E:\\DeepLearning数据集\\\\archive (1)\\\\test&quot;</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建数据加载器</span></span><br><span class=\"line\">    data_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">1</span>, num_workers=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加载模型</span></span><br><span class=\"line\">    model = torch.load(<span class=\"string\">&quot;..\\models\\\\ResNet_mushrooms.pth&quot;</span>)</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 进行预测</span></span><br><span class=\"line\">    correct = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span> = [<span class=\"string\">&#x27;Agaricus&#x27;</span>,<span class=\"string\">&#x27;Amanita&#x27;</span>,<span class=\"string\">&#x27;Boletus&#x27;</span>,<span class=\"string\">&#x27;Cortinarius&#x27;</span>,<span class=\"string\">&#x27;Entoloma&#x27;</span>,<span class=\"string\">&#x27;Hygrocybe&#x27;</span>,<span class=\"string\">&#x27;Lactarius&#x27;</span>,<span class=\"string\">&#x27;Russula&#x27;</span>,<span class=\"string\">&#x27;Suillus&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(data_loader):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">            correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> torch.<span class=\"built_in\">max</span>(outputs) &lt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;drug&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>[predict])</span><br><span class=\"line\">            correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(outputs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(correct)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc:&#123;&#125;%\\n&quot;</span>.<span class=\"built_in\">format</span>((correct / <span class=\"built_in\">len</span>(test_set) * <span class=\"number\">100.0</span>), <span class=\"string\">&#x27;.2f&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Success!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    test()</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.脚本为本人总结，如有使用注明出处。</li>\n<li>2.Pytorch基于Python编程语言编写脚本。</li>\n</ul>\n<hr>\n<h2 id=\"一、经典图像分类数据集：\">一、经典图像分类数据集：</h2>\n<h3 id=\"注：pytorch官网数据集-Datasets-—-Torchvision-0-15-documentation-pytorch-org\">注：pytorch官网数据集 Datasets — Torchvision 0.15 documentation (<a href=\"http://pytorch.org\">pytorch.org</a>)</h3>\n<h3 id=\"1-CIFAR10\">1.CIFAR10</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">256</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">384</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">384</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-CIFAR100\">2.CIFAR100</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">256</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR100(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR100(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">128</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">128</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-ImageNet-ILSVRC2012\">3.ImageNet (ILSVRC2012)</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">299</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">299</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.ImageFolder(root=<span class=\"string\">&quot;/训练集的位置&quot;</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.ImageFolder(root=<span class=\"string\">&quot;/测试集的位置&quot;</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">32</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">32</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、图像分类经典模型（基于CIFAR10数据集）：\">二、图像分类经典模型（基于CIFAR10数据集）：</h2>\n<h3 id=\"注：硬件配置显存最好有12g，根据显存大小调整batch-size的大小。\">注：硬件配置显存最好有12g，根据显存大小调整batch_size的大小。</h3>\n<h3 id=\"1-AlexNet（自己写的模型）\">1.AlexNet（自己写的模型）</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> AlexNet <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">256</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">384</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">384</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_AlexNet_1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = AlexNet()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    model.apply(weight_init)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">60</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-2</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc: %.6f  val_loss:%.6f \\n&quot;</span> %</span><br><span class=\"line\">              ((correct / <span class=\"built_in\">len</span>(test_set)), test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/AlexNet_1.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 手搓一个AlexNet模型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AlexNet</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(AlexNet, self).__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv1 = nn.Sequential(</span><br><span class=\"line\">                                   nn.Conv2d(<span class=\"number\">3</span>, <span class=\"number\">96</span>, <span class=\"number\">11</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">                                   nn.ReLU(),</span><br><span class=\"line\">                                   nn.MaxPool2d(<span class=\"number\">3</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">                                  )</span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv2 = nn.Sequential(</span><br><span class=\"line\">                                   nn.Conv2d(<span class=\"number\">96</span>, <span class=\"number\">256</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">                                   nn.ReLU(),</span><br><span class=\"line\">                                   nn.MaxPool2d(<span class=\"number\">3</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">                                  )</span><br><span class=\"line\"></span><br><span class=\"line\">        self.conv3 = nn.Sequential(</span><br><span class=\"line\">                                   nn.Conv2d(<span class=\"number\">256</span>, <span class=\"number\">384</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">                                   nn.ReLU(),</span><br><span class=\"line\">                                   nn.Conv2d(<span class=\"number\">384</span>, <span class=\"number\">384</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">                                   nn.ReLU(),</span><br><span class=\"line\">                                   nn.Conv2d(<span class=\"number\">384</span>, <span class=\"number\">256</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">                                   nn.ReLU(),</span><br><span class=\"line\">                                   nn.MaxPool2d(<span class=\"number\">3</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">                                  )</span><br><span class=\"line\"></span><br><span class=\"line\">        self.fc = nn.Sequential(</span><br><span class=\"line\">                                nn.Linear(<span class=\"number\">256</span> * <span class=\"number\">6</span> * <span class=\"number\">6</span>, <span class=\"number\">4096</span>),</span><br><span class=\"line\">                                nn.ReLU(),</span><br><span class=\"line\">                                nn.Dropout(<span class=\"number\">0.5</span>),</span><br><span class=\"line\">                                nn.Linear(<span class=\"number\">4096</span>, <span class=\"number\">4096</span>),</span><br><span class=\"line\">                                nn.ReLU(),</span><br><span class=\"line\">                                nn.Dropout(<span class=\"number\">0.5</span>),</span><br><span class=\"line\">                                nn.Linear(<span class=\"number\">4096</span>, <span class=\"number\">100</span>),</span><br><span class=\"line\">                               )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = self.conv1(x)</span><br><span class=\"line\">        x = self.conv2(x)</span><br><span class=\"line\">        x = self.conv3(x)</span><br><span class=\"line\">        output = self.fc(x.view(-<span class=\"number\">1</span>, <span class=\"number\">256</span> * <span class=\"number\">6</span> * <span class=\"number\">6</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-VGG（models-vgg16-）\">2.VGG（models.vgg16()）</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose(</span><br><span class=\"line\">        [transforms.ToTensor(),</span><br><span class=\"line\">         transforms.Resize((<span class=\"number\">224</span>, <span class=\"number\">224</span>)),</span><br><span class=\"line\">         transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>])])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_VGG_1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = torchvision.models.vgg16()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    <span class=\"comment\"># model.apply(weight_init)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-2</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc: %.6f  val_loss:%.6f \\n&quot;</span> %</span><br><span class=\"line\">              ((correct / <span class=\"built_in\">len</span>(test_set)), test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/VGG_1.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-GoogLeNet\">3.GoogLeNet</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">256</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">128</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">128</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_GoogLeNet_1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = torchvision.models.GoogLeNet()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    <span class=\"comment\"># model.apply(weight_init)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-2</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            outputs = outputs.logits</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.5f&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc: %.5f  val_loss:%.5f \\n&quot;</span> %</span><br><span class=\"line\">              ((correct / <span class=\"built_in\">len</span>(test_set)), test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/GooLeNet_1.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-ResNet（models-resnet101-）\">4.ResNet（models.resnet101()）</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose(</span><br><span class=\"line\">        [transforms.ToTensor(),</span><br><span class=\"line\">         transforms.Resize((<span class=\"number\">224</span>, <span class=\"number\">224</span>)),</span><br><span class=\"line\">         transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>])])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_ResNet_1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = torchvision.models.resnet101()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    <span class=\"comment\"># model.apply(weight_init)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-2</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc: %.6f  val_loss:%.6f \\n&quot;</span> %</span><br><span class=\"line\">              ((correct / <span class=\"built_in\">len</span>(test_set)), test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/ResNet_1.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-DenseNet（models-densenet121-）\">5.DenseNet（models.densenet121()）</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose(</span><br><span class=\"line\">        [transforms.ToTensor(),</span><br><span class=\"line\">         transforms.Resize((<span class=\"number\">224</span>, <span class=\"number\">224</span>)),</span><br><span class=\"line\">         transforms.Normalize([<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], [<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>])])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, transform=transform, train=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_set = torchvision.datasets.CIFAR10(root=<span class=\"string\">&quot;../data&quot;</span>, transform=transform, train=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_DenseNet_1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = torchvision.models.densenet121()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    <span class=\"comment\"># model.apply(weight_init)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-2</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.6f&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始  dgsd</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.2fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc: %.6f  val_loss:%.6f \\n&quot;</span> %</span><br><span class=\"line\">              ((correct / <span class=\"built_in\">len</span>(test_set)), test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/DenseNet_1.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-Train-ImageNet（main-py）\">6.Train_ImageNet（<a href=\"http://main.py\">main.py</a>）</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.backends.cudnn <span class=\"keyword\">as</span> cudnn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.distributed <span class=\"keyword\">as</span> dist</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.multiprocessing <span class=\"keyword\">as</span> mp</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn.parallel</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.utils.data</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.utils.data.distributed</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.datasets <span class=\"keyword\">as</span> datasets</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.models <span class=\"keyword\">as</span> models</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.optim.lr_scheduler <span class=\"keyword\">import</span> StepLR</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> Subset</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">model_names = <span class=\"built_in\">sorted</span>(name <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> models.__dict__</span><br><span class=\"line\">                     <span class=\"keyword\">if</span> name.islower() <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">&quot;__&quot;</span>)</span><br><span class=\"line\">                     <span class=\"keyword\">and</span> <span class=\"built_in\">callable</span>(models.__dict__[name]))</span><br><span class=\"line\"></span><br><span class=\"line\">parser = argparse.ArgumentParser(description=<span class=\"string\">&#x27;PyTorch ImageNet Training&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;data&#x27;</span>, metavar=<span class=\"string\">&#x27;DIR&#x27;</span>, nargs=<span class=\"string\">&#x27;?&#x27;</span>, default=<span class=\"string\">&#x27;imagenet&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;path to dataset (default: imagenet)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-a&#x27;</span>, <span class=\"string\">&#x27;--arch&#x27;</span>, metavar=<span class=\"string\">&#x27;ARCH&#x27;</span>, default=<span class=\"string\">&#x27;resnet34&#x27;</span>,</span><br><span class=\"line\">                    choices=model_names,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;model architecture: &#x27;</span> +</span><br><span class=\"line\">                         <span class=\"string\">&#x27; | &#x27;</span>.join(model_names) +</span><br><span class=\"line\">                         <span class=\"string\">&#x27; (default: resnet34)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-j&#x27;</span>, <span class=\"string\">&#x27;--workers&#x27;</span>, default=<span class=\"number\">4</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, metavar=<span class=\"string\">&#x27;N&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;number of data loading workers (default: 4)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--epochs&#x27;</span>, default=<span class=\"number\">50</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, metavar=<span class=\"string\">&#x27;N&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;number of total epochs to run&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--start-epoch&#x27;</span>, default=<span class=\"number\">1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, metavar=<span class=\"string\">&#x27;N&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;manual epoch number (useful on restarts)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-b&#x27;</span>, <span class=\"string\">&#x27;--batch-size&#x27;</span>, default=<span class=\"number\">192</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    metavar=<span class=\"string\">&#x27;N&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;mini-batch size (default: 256), this is the total &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;batch size of all GPUs on the current node when &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;using Data Parallel or Distributed Data Parallel&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--lr&#x27;</span>, <span class=\"string\">&#x27;--learning-rate&#x27;</span>, default=<span class=\"number\">0.1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>,</span><br><span class=\"line\">                    metavar=<span class=\"string\">&#x27;LR&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;initial learning rate&#x27;</span>, dest=<span class=\"string\">&#x27;lr&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--momentum&#x27;</span>, default=<span class=\"number\">0.9</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>, metavar=<span class=\"string\">&#x27;M&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;momentum&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--wd&#x27;</span>, <span class=\"string\">&#x27;--weight-decay&#x27;</span>, default=<span class=\"number\">1e-4</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>,</span><br><span class=\"line\">                    metavar=<span class=\"string\">&#x27;W&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;weight decay (default: 1e-4)&#x27;</span>,</span><br><span class=\"line\">                    dest=<span class=\"string\">&#x27;weight_decay&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-p&#x27;</span>, <span class=\"string\">&#x27;--print-freq&#x27;</span>, default=<span class=\"number\">500</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    metavar=<span class=\"string\">&#x27;N&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;print frequency (default: 500)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--resume&#x27;</span>, default=<span class=\"string\">&#x27;&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>, metavar=<span class=\"string\">&#x27;PATH&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;path to latest checkpoint (default: none)&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-e&#x27;</span>, <span class=\"string\">&#x27;--evaluate&#x27;</span>, dest=<span class=\"string\">&#x27;evaluate&#x27;</span>, action=<span class=\"string\">&#x27;store_true&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;evaluate model on validation set&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--pretrained&#x27;</span>, dest=<span class=\"string\">&#x27;pretrained&#x27;</span>, action=<span class=\"string\">&#x27;store_true&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;use pre-trained model&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--world-size&#x27;</span>, default=-<span class=\"number\">1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;number of nodes for distributed training&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--rank&#x27;</span>, default=-<span class=\"number\">1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;node rank for distributed training&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--dist-url&#x27;</span>, default=<span class=\"string\">&#x27;tcp://224.66.41.62:23456&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;url used to set up distributed training&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--dist-backend&#x27;</span>, default=<span class=\"string\">&#x27;nccl&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;distributed backend&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--seed&#x27;</span>, default=<span class=\"literal\">None</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;seed for initializing training. &#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--gpu&#x27;</span>, default=<span class=\"literal\">None</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;GPU id to use.&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--multiprocessing-distributed&#x27;</span>, action=<span class=\"string\">&#x27;store_true&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;Use multi-processing distributed training to launch &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;N processes per node, which has N GPUs. This is the &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;fastest way to use PyTorch for either single node or &#x27;</span></span><br><span class=\"line\">                         <span class=\"string\">&#x27;multi node data parallel training&#x27;</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--dummy&#x27;</span>, action=<span class=\"string\">&#x27;store_true&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&quot;use fake data to benchmark&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">best_acc1 = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    args = parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.seed <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        random.seed(args.seed)</span><br><span class=\"line\">        torch.manual_seed(args.seed)</span><br><span class=\"line\">        cudnn.deterministic = <span class=\"literal\">True</span></span><br><span class=\"line\">        cudnn.benchmark = <span class=\"literal\">False</span></span><br><span class=\"line\">        warnings.warn(<span class=\"string\">&#x27;You have chosen to seed training. &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;This will turn on the CUDNN deterministic setting, &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;which can slow down your training considerably! &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;You may see unexpected behavior when restarting &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;from checkpoints.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        warnings.warn(<span class=\"string\">&#x27;You have chosen a specific GPU. This will completely &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;disable data parallelism.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.dist_url == <span class=\"string\">&quot;env://&quot;</span> <span class=\"keyword\">and</span> args.world_size == -<span class=\"number\">1</span>:</span><br><span class=\"line\">        args.world_size = <span class=\"built_in\">int</span>(os.environ[<span class=\"string\">&quot;WORLD_SIZE&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    args.distributed = args.world_size &gt; <span class=\"number\">1</span> <span class=\"keyword\">or</span> args.multiprocessing_distributed</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">        ngpus_per_node = torch.cuda.device_count()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ngpus_per_node = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.multiprocessing_distributed:</span><br><span class=\"line\">        <span class=\"comment\"># Since we have ngpus_per_node processes per node, the total world_size</span></span><br><span class=\"line\">        <span class=\"comment\"># needs to be adjusted accordingly</span></span><br><span class=\"line\">        args.world_size = ngpus_per_node * args.world_size</span><br><span class=\"line\">        <span class=\"comment\"># Use torch.multiprocessing.spawn to launch distributed processes: the</span></span><br><span class=\"line\">        <span class=\"comment\"># main_worker process function</span></span><br><span class=\"line\">        mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Simply call main_worker function</span></span><br><span class=\"line\">        main_worker(args.gpu, ngpus_per_node, args)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main_worker</span>(<span class=\"params\">gpu, ngpus_per_node, args</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> best_acc1</span><br><span class=\"line\">    args.gpu = gpu</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Use GPU: &#123;&#125; for training&quot;</span>.<span class=\"built_in\">format</span>(args.gpu))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.distributed:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.dist_url == <span class=\"string\">&quot;env://&quot;</span> <span class=\"keyword\">and</span> args.rank == -<span class=\"number\">1</span>:</span><br><span class=\"line\">            args.rank = <span class=\"built_in\">int</span>(os.environ[<span class=\"string\">&quot;RANK&quot;</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.multiprocessing_distributed:</span><br><span class=\"line\">            <span class=\"comment\"># For multiprocessing distributed training, rank needs to be the</span></span><br><span class=\"line\">            <span class=\"comment\"># global rank among all the processes</span></span><br><span class=\"line\">            args.rank = args.rank * ngpus_per_node + gpu</span><br><span class=\"line\">        dist.init_process_group(backend=args.dist_backend, init_method=args.dist_url,</span><br><span class=\"line\">                                world_size=args.world_size, rank=args.rank)</span><br><span class=\"line\">    <span class=\"comment\"># create model</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.pretrained:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; using pre-trained model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class=\"built_in\">format</span>(args.arch))</span><br><span class=\"line\">        model = models.__dict__[args.arch](pretrained=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; creating model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class=\"built_in\">format</span>(args.arch))</span><br><span class=\"line\">        model = models.__dict__[args.arch]()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> torch.cuda.is_available() <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> torch.backends.mps.is_available():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;using CPU, this will be slow&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> args.distributed:</span><br><span class=\"line\">        <span class=\"comment\"># For multiprocessing distributed, DistributedDataParallel constructor</span></span><br><span class=\"line\">        <span class=\"comment\"># should always set the single device scope, otherwise,</span></span><br><span class=\"line\">        <span class=\"comment\"># DistributedDataParallel will use all available devices.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                torch.cuda.set_device(args.gpu)</span><br><span class=\"line\">                model.cuda(args.gpu)</span><br><span class=\"line\">                <span class=\"comment\"># When using a single GPU per process and per</span></span><br><span class=\"line\">                <span class=\"comment\"># DistributedDataParallel, we need to divide the batch size</span></span><br><span class=\"line\">                <span class=\"comment\"># ourselves based on the total number of GPUs of the current node.</span></span><br><span class=\"line\">                args.batch_size = <span class=\"built_in\">int</span>(args.batch_size / ngpus_per_node)</span><br><span class=\"line\">                args.workers = <span class=\"built_in\">int</span>((args.workers + ngpus_per_node - <span class=\"number\">1</span>) / ngpus_per_node)</span><br><span class=\"line\">                model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                model.cuda()</span><br><span class=\"line\">                <span class=\"comment\"># DistributedDataParallel will divide and allocate batch_size to all</span></span><br><span class=\"line\">                <span class=\"comment\"># available GPUs if device_ids are not set</span></span><br><span class=\"line\">                model = torch.nn.parallel.DistributedDataParallel(model)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> torch.cuda.is_available():</span><br><span class=\"line\">        torch.cuda.set_device(args.gpu)</span><br><span class=\"line\">        model = model.cuda(args.gpu)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> torch.backends.mps.is_available():</span><br><span class=\"line\">        device = torch.device(<span class=\"string\">&quot;mps&quot;</span>)</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># DataParallel will divide and allocate batch_size to all available GPUs</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.arch.startswith(<span class=\"string\">&#x27;alexnet&#x27;</span>) <span class=\"keyword\">or</span> args.arch.startswith(<span class=\"string\">&#x27;vgg&#x27;</span>):</span><br><span class=\"line\">            model.features = torch.nn.DataParallel(model.features)</span><br><span class=\"line\">            model.cuda()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            model = torch.nn.DataParallel(model).cuda()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.gpu:</span><br><span class=\"line\">            device = torch.device(<span class=\"string\">&#x27;cuda:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(args.gpu))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            device = torch.device(<span class=\"string\">&quot;cuda&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> torch.backends.mps.is_available():</span><br><span class=\"line\">        device = torch.device(<span class=\"string\">&quot;mps&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        device = torch.device(<span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># define loss function (criterion), optimizer, and learning rate scheduler</span></span><br><span class=\"line\">    criterion = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = torch.optim.SGD(model.parameters(), args.lr,</span><br><span class=\"line\">                                momentum=args.momentum,</span><br><span class=\"line\">                                weight_decay=args.weight_decay)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Sets the learning rate to the initial LR decayed by 10 every 30 epochs&quot;&quot;&quot;</span></span><br><span class=\"line\">    scheduler = StepLR(optimizer, step_size=<span class=\"number\">30</span>, gamma=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># optionally resume from a checkpoint</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.resume:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(args.resume):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; loading checkpoint &#x27;&#123;&#125;&#x27;&quot;</span>.<span class=\"built_in\">format</span>(args.resume))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                checkpoint = torch.load(args.resume)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> torch.cuda.is_available():</span><br><span class=\"line\">                <span class=\"comment\"># Map model to be loaded to specified single gpu.</span></span><br><span class=\"line\">                loc = <span class=\"string\">&#x27;cuda:&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(args.gpu)</span><br><span class=\"line\">                checkpoint = torch.load(args.resume, map_location=loc)</span><br><span class=\"line\">            args.start_epoch = checkpoint[<span class=\"string\">&#x27;epoch&#x27;</span>]</span><br><span class=\"line\">            best_acc1 = checkpoint[<span class=\"string\">&#x27;best_acc1&#x27;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"comment\"># best_acc1 may be from a checkpoint from a different GPU</span></span><br><span class=\"line\">                best_acc1 = best_acc1.to(args.gpu)</span><br><span class=\"line\">            model.load_state_dict(checkpoint[<span class=\"string\">&#x27;state_dict&#x27;</span>])</span><br><span class=\"line\">            optimizer.load_state_dict(checkpoint[<span class=\"string\">&#x27;optimizer&#x27;</span>])</span><br><span class=\"line\">            scheduler.load_state_dict(checkpoint[<span class=\"string\">&#x27;scheduler&#x27;</span>])</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; loaded checkpoint &#x27;&#123;&#125;&#x27; (epoch &#123;&#125;)&quot;</span></span><br><span class=\"line\">                  .<span class=\"built_in\">format</span>(args.resume, checkpoint[<span class=\"string\">&#x27;epoch&#x27;</span>]))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; no checkpoint found at &#x27;&#123;&#125;&#x27;&quot;</span>.<span class=\"built_in\">format</span>(args.resume))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Data loading code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.dummy:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&gt; Dummy data is used!&quot;</span>)</span><br><span class=\"line\">        train_dataset = datasets.FakeData(<span class=\"number\">1281167</span>, (<span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>), <span class=\"number\">1000</span>, transforms.ToTensor())</span><br><span class=\"line\">        val_dataset = datasets.FakeData(<span class=\"number\">50000</span>, (<span class=\"number\">3</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>), <span class=\"number\">1000</span>, transforms.ToTensor())</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        normalize = transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>],</span><br><span class=\"line\">                                         std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        train_dataset = datasets.ImageFolder(</span><br><span class=\"line\">            <span class=\"string\">&quot;数据集的路径：&quot;</span>,</span><br><span class=\"line\">            transforms.Compose([</span><br><span class=\"line\">                transforms.RandomResizedCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">                transforms.RandomHorizontalFlip(),</span><br><span class=\"line\">                transforms.ToTensor(),</span><br><span class=\"line\">                normalize,</span><br><span class=\"line\">            ]))</span><br><span class=\"line\"></span><br><span class=\"line\">        val_dataset = datasets.ImageFolder(</span><br><span class=\"line\">            <span class=\"string\">&quot;测试集的路径：&quot;</span>,</span><br><span class=\"line\">            transforms.Compose([</span><br><span class=\"line\">                transforms.Resize(<span class=\"number\">256</span>),</span><br><span class=\"line\">                transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">                transforms.ToTensor(),</span><br><span class=\"line\">                normalize,</span><br><span class=\"line\">            ]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.distributed:</span><br><span class=\"line\">        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)</span><br><span class=\"line\">        val_sampler = torch.utils.data.distributed.DistributedSampler(val_dataset, shuffle=<span class=\"literal\">False</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        train_sampler = <span class=\"literal\">None</span></span><br><span class=\"line\">        val_sampler = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(</span><br><span class=\"line\">        train_dataset, batch_size=args.batch_size, shuffle=(train_sampler <span class=\"keyword\">is</span> <span class=\"literal\">None</span>),</span><br><span class=\"line\">        num_workers=args.workers, pin_memory=<span class=\"literal\">True</span>, sampler=train_sampler)</span><br><span class=\"line\"></span><br><span class=\"line\">    val_loader = torch.utils.data.DataLoader(</span><br><span class=\"line\">        val_dataset, batch_size=args.batch_size, shuffle=<span class=\"literal\">False</span>,</span><br><span class=\"line\">        num_workers=args.workers, pin_memory=<span class=\"literal\">True</span>, sampler=val_sampler)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.evaluate:</span><br><span class=\"line\">        validate(val_loader, model, criterion, args)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(args.start_epoch, args.epochs):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.distributed:</span><br><span class=\"line\">            train_sampler.set_epoch(epoch)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># train for one epoch</span></span><br><span class=\"line\">        train(train_loader, model, criterion, optimizer, epoch, device, args, end)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># evaluate on validation set</span></span><br><span class=\"line\">        acc1 = validate(val_loader, model, criterion, args, end)</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># remember best acc@1 and save checkpoint</span></span><br><span class=\"line\">        is_best = acc1 &gt; best_acc1</span><br><span class=\"line\">        best_acc1 = <span class=\"built_in\">max</span>(acc1, best_acc1)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> args.multiprocessing_distributed <span class=\"keyword\">or</span> (args.multiprocessing_distributed</span><br><span class=\"line\">                                                    <span class=\"keyword\">and</span> args.rank % ngpus_per_node == <span class=\"number\">0</span>):</span><br><span class=\"line\">            save_checkpoint(&#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;epoch&#x27;</span>: epoch + <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;arch&#x27;</span>: args.arch,</span><br><span class=\"line\">                <span class=\"string\">&#x27;state_dict&#x27;</span>: model.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;best_acc1&#x27;</span>: best_acc1,</span><br><span class=\"line\">                <span class=\"string\">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;scheduler&#x27;</span>: scheduler.state_dict()</span><br><span class=\"line\">            &#125;, is_best)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>(<span class=\"params\">train_loader, model, criterion, optimizer, epoch, device, args, end</span>):</span><br><span class=\"line\">    losses = AverageMeter(<span class=\"string\">&#x27;Loss&#x27;</span>, <span class=\"string\">&#x27;:.4e&#x27;</span>)</span><br><span class=\"line\">    top1 = AverageMeter(<span class=\"string\">&#x27;Acc@1&#x27;</span>, <span class=\"string\">&#x27;:6.2f&#x27;</span>)</span><br><span class=\"line\">    top5 = AverageMeter(<span class=\"string\">&#x27;Acc@5&#x27;</span>, <span class=\"string\">&#x27;:6.2f&#x27;</span>)</span><br><span class=\"line\">    progress = ProgressMeter(</span><br><span class=\"line\">        <span class=\"built_in\">len</span>(train_loader),</span><br><span class=\"line\">        [losses, top1, top5],</span><br><span class=\"line\">        prefix=<span class=\"string\">&quot;Epoch: [&#123;&#125;]&quot;</span>.<span class=\"built_in\">format</span>(epoch))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># switch to train mode</span></span><br><span class=\"line\">    model.train()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, (images, target) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">        <span class=\"comment\"># measure data loading time</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># move data to the same device as model</span></span><br><span class=\"line\">        images = images.to(device, non_blocking=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        target = target.to(device, non_blocking=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># compute output</span></span><br><span class=\"line\">        output = model(images)</span><br><span class=\"line\">        loss = criterion(output, target)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># measure accuracy and record loss</span></span><br><span class=\"line\">        acc1, acc5 = accuracy(output, target, topk=(<span class=\"number\">1</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">        losses.update(loss.item(), images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\">        top1.update(acc1[<span class=\"number\">0</span>], images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\">        top5.update(acc5[<span class=\"number\">0</span>], images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># compute gradient and do SGD step</span></span><br><span class=\"line\">        optimizer.zero_grad()</span><br><span class=\"line\">        loss.backward()</span><br><span class=\"line\">        optimizer.step()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># measure elapsed time</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % args.print_freq == <span class=\"number\">0</span>:</span><br><span class=\"line\">            progress.display(i + <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Time: %.2fs&quot;</span> % (time.time() - end))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">validate</span>(<span class=\"params\">val_loader, model, criterion, args, end</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_validate</span>(<span class=\"params\">loader, base_progress=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">            end = time.time()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i, (images, target) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(loader):</span><br><span class=\"line\">                i = base_progress + i</span><br><span class=\"line\">                <span class=\"keyword\">if</span> args.gpu <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> torch.cuda.is_available():</span><br><span class=\"line\">                    images = images.cuda(args.gpu, non_blocking=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> torch.backends.mps.is_available():</span><br><span class=\"line\">                    images = images.to(<span class=\"string\">&#x27;mps&#x27;</span>)</span><br><span class=\"line\">                    target = target.to(<span class=\"string\">&#x27;mps&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">                    target = target.cuda(args.gpu, non_blocking=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># compute output</span></span><br><span class=\"line\">                output = model(images)</span><br><span class=\"line\">                loss = criterion(output, target)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># measure accuracy and record loss</span></span><br><span class=\"line\">                acc1, acc5 = accuracy(output, target, topk=(<span class=\"number\">1</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">                losses.update(loss.item(), images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\">                top1.update(acc1[<span class=\"number\">0</span>], images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\">                top5.update(acc5[<span class=\"number\">0</span>], images.size(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># measure elapsed time</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> i % args.print_freq == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    progress.display(i + <span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (time.time() - end))</span><br><span class=\"line\"></span><br><span class=\"line\">    losses = AverageMeter(<span class=\"string\">&#x27;Loss&#x27;</span>, <span class=\"string\">&#x27;:.4e&#x27;</span>, Summary.NONE)</span><br><span class=\"line\">    top1 = AverageMeter(<span class=\"string\">&#x27;Acc@1&#x27;</span>, <span class=\"string\">&#x27;:6.2f&#x27;</span>, Summary.AVERAGE)</span><br><span class=\"line\">    top5 = AverageMeter(<span class=\"string\">&#x27;Acc@5&#x27;</span>, <span class=\"string\">&#x27;:6.2f&#x27;</span>, Summary.AVERAGE)</span><br><span class=\"line\">    progress = ProgressMeter(</span><br><span class=\"line\">        <span class=\"built_in\">len</span>(val_loader) + (args.distributed <span class=\"keyword\">and</span> (<span class=\"built_in\">len</span>(val_loader.sampler) * args.world_size &lt; <span class=\"built_in\">len</span>(val_loader.dataset))),</span><br><span class=\"line\">        [losses, top1, top5],</span><br><span class=\"line\">        prefix=<span class=\"string\">&#x27;Test: &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># switch to evaluate mode</span></span><br><span class=\"line\">    model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    run_validate(val_loader)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.distributed:</span><br><span class=\"line\">        top1.all_reduce()</span><br><span class=\"line\">        top5.all_reduce()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.distributed <span class=\"keyword\">and</span> (<span class=\"built_in\">len</span>(val_loader.sampler) * args.world_size &lt; <span class=\"built_in\">len</span>(val_loader.dataset)):</span><br><span class=\"line\">        aux_val_dataset = Subset(val_loader.dataset,</span><br><span class=\"line\">                                 <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(val_loader.sampler) * args.world_size, <span class=\"built_in\">len</span>(val_loader.dataset)))</span><br><span class=\"line\">        aux_val_loader = torch.utils.data.DataLoader(</span><br><span class=\"line\">            aux_val_dataset, batch_size=args.batch_size, shuffle=<span class=\"literal\">False</span>,</span><br><span class=\"line\">            num_workers=args.workers, pin_memory=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        run_validate(aux_val_loader, <span class=\"built_in\">len</span>(val_loader))</span><br><span class=\"line\"></span><br><span class=\"line\">    progress.display_summary()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> top1.avg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">save_checkpoint</span>(<span class=\"params\">state, is_best, filename=<span class=\"string\">&#x27;../models/checkpoint_resnet34.pth.tar&#x27;</span></span>):</span><br><span class=\"line\">    torch.save(state, filename)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_best:</span><br><span class=\"line\">        shutil.copyfile(filename, <span class=\"string\">&#x27;../models/model_best_resnet34.pth.tar&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Summary</span>(<span class=\"title class_ inherited__\">Enum</span>):</span><br><span class=\"line\">    NONE = <span class=\"number\">0</span></span><br><span class=\"line\">    AVERAGE = <span class=\"number\">1</span></span><br><span class=\"line\">    SUM = <span class=\"number\">2</span></span><br><span class=\"line\">    COUNT = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AverageMeter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Computes and stores the average and current value&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, fmt=<span class=\"string\">&#x27;:f&#x27;</span>, summary_type=Summary.AVERAGE</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.fmt = fmt</span><br><span class=\"line\">        self.summary_type = summary_type</span><br><span class=\"line\">        self.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reset</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.val = <span class=\"number\">0</span></span><br><span class=\"line\">        self.avg = <span class=\"number\">0</span></span><br><span class=\"line\">        self.<span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        self.count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self, val, n=<span class=\"number\">1</span></span>):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.<span class=\"built_in\">sum</span> += val * n</span><br><span class=\"line\">        self.count += n</span><br><span class=\"line\">        self.avg = self.<span class=\"built_in\">sum</span> / self.count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">all_reduce</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">            device = torch.device(<span class=\"string\">&quot;cuda&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> torch.backends.mps.is_available():</span><br><span class=\"line\">            device = torch.device(<span class=\"string\">&quot;mps&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            device = torch.device(<span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">        total = torch.tensor([self.<span class=\"built_in\">sum</span>, self.count], dtype=torch.float32, device=device)</span><br><span class=\"line\">        dist.all_reduce(total, dist.ReduceOp.SUM, async_op=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        self.<span class=\"built_in\">sum</span>, self.count = total.tolist()</span><br><span class=\"line\">        self.avg = self.<span class=\"built_in\">sum</span> / self.count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        fmtstr = <span class=\"string\">&#x27;&#123;name&#125; &#123;val&#x27;</span> + self.fmt + <span class=\"string\">&#x27;&#125; (&#123;avg&#x27;</span> + self.fmt + <span class=\"string\">&#x27;&#125;)&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmtstr.<span class=\"built_in\">format</span>(**self.__dict__)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">summary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        fmtstr = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.summary_type <span class=\"keyword\">is</span> Summary.NONE:</span><br><span class=\"line\">            fmtstr = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.summary_type <span class=\"keyword\">is</span> Summary.AVERAGE:</span><br><span class=\"line\">            fmtstr = <span class=\"string\">&#x27;&#123;name&#125; &#123;avg:.3f&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.summary_type <span class=\"keyword\">is</span> Summary.SUM:</span><br><span class=\"line\">            fmtstr = <span class=\"string\">&#x27;&#123;name&#125; &#123;sum:.3f&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.summary_type <span class=\"keyword\">is</span> Summary.COUNT:</span><br><span class=\"line\">            fmtstr = <span class=\"string\">&#x27;&#123;name&#125; &#123;count:.3f&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&#x27;invalid summary type %r&#x27;</span> % self.summary_type)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmtstr.<span class=\"built_in\">format</span>(**self.__dict__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProgressMeter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, num_batches, meters, prefix=<span class=\"string\">&quot;&quot;</span></span>):</span><br><span class=\"line\">        self.batch_fmtstr = self._get_batch_fmtstr(num_batches)</span><br><span class=\"line\">        self.meters = meters</span><br><span class=\"line\">        self.prefix = prefix</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">display</span>(<span class=\"params\">self, batch</span>):</span><br><span class=\"line\">        entries = [self.prefix + self.batch_fmtstr.<span class=\"built_in\">format</span>(batch)]</span><br><span class=\"line\">        entries += [<span class=\"built_in\">str</span>(meter) <span class=\"keyword\">for</span> meter <span class=\"keyword\">in</span> self.meters]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\t&#x27;</span>.join(entries))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">display_summary</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        entries = [<span class=\"string\">&quot; *&quot;</span>]</span><br><span class=\"line\">        entries += [meter.summary() <span class=\"keyword\">for</span> meter <span class=\"keyword\">in</span> self.meters]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27; &#x27;</span>.join(entries))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_get_batch_fmtstr</span>(<span class=\"params\">self, num_batches</span>):</span><br><span class=\"line\">        num_digits = <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>(num_batches // <span class=\"number\">1</span>))</span><br><span class=\"line\">        fmt = <span class=\"string\">&#x27;&#123;:&#x27;</span> + <span class=\"built_in\">str</span>(num_digits) + <span class=\"string\">&#x27;d&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;[&#x27;</span> + fmt + <span class=\"string\">&#x27;/&#x27;</span> + fmt.<span class=\"built_in\">format</span>(num_batches) + <span class=\"string\">&#x27;]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">accuracy</span>(<span class=\"params\">output, target, topk=(<span class=\"params\"><span class=\"number\">1</span>,</span>)</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Computes the accuracy over the k top predictions for the specified values of k&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        maxk = <span class=\"built_in\">max</span>(topk)</span><br><span class=\"line\">        batch_size = target.size(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        _, pred = output.topk(maxk, <span class=\"number\">1</span>, <span class=\"literal\">True</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\">        pred = pred.t()</span><br><span class=\"line\">        correct = pred.eq(target.view(<span class=\"number\">1</span>, -<span class=\"number\">1</span>).expand_as(pred))</span><br><span class=\"line\"></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> topk:</span><br><span class=\"line\">            correct_k = correct[:k].reshape(-<span class=\"number\">1</span>).<span class=\"built_in\">float</span>().<span class=\"built_in\">sum</span>(<span class=\"number\">0</span>, keepdim=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            res.append(correct_k.mul_(<span class=\"number\">100.0</span> / batch_size))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<h2 id=\"三、小实践：可食用蘑菇识别分类模型\">三、小实践：可食用蘑菇识别分类模型</h2>\n<h3 id=\"训练代码：\">训练代码：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 抛出错误数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageFile</span><br><span class=\"line\">ImageFile.LOAD_TRUNCATED_IMAGES = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置参量</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weight_init</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(m, nn.Linear):</span><br><span class=\"line\">        nn.init.xavier_normal_(m.weight)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.Conv2d):</span><br><span class=\"line\">        nn.init.kaiming_normal_(m.weight, mode=<span class=\"string\">&#x27;fan_out&#x27;</span>, nonlinearity=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.constant_(m.bias, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主训练函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>():</span><br><span class=\"line\">    transform = transforms.Compose([</span><br><span class=\"line\">        transforms.Resize(<span class=\"number\">299</span>),</span><br><span class=\"line\">        transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">        transforms.ToTensor(),</span><br><span class=\"line\">        transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 数据集路径</span></span><br><span class=\"line\">    train_set = torchvision.datasets.ImageFolder(root=<span class=\"string\">&quot;E:\\DeepLearning数据集\\\\archive (1)\\\\train&quot;</span>, transform=transform)</span><br><span class=\"line\">    test_set = torchvision.datasets.ImageFolder(root=<span class=\"string\">&quot;E:\\DeepLearning数据集\\\\archive (1)\\\\test&quot;</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">True</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    test_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">64</span>, num_workers=<span class=\"number\">4</span>, shuffle=<span class=\"literal\">False</span>, pin_memory=<span class=\"literal\">True</span>, drop_last=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 写入tensorboard</span></span><br><span class=\"line\">    writer = SummaryWriter(<span class=\"string\">&quot;../train_ResNet_mushrooms&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    train_data_size = <span class=\"built_in\">len</span>(train_set)</span><br><span class=\"line\">    test_data_size = <span class=\"built_in\">len</span>(test_set)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(train_data_size))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;测试数据集的长度为：&#123;&#125; \\n&quot;</span>.<span class=\"built_in\">format</span>(test_data_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cuda&quot;</span> <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\">    model = torchvision.models.resnet18()</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># model.apply(weight_init)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录训练的轮数</span></span><br><span class=\"line\">    total_train_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\">    total_test_step = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 控制训练轮数</span></span><br><span class=\"line\">    epochs = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\">    optimizer = optim.SGD(model.parameters(), lr=<span class=\"number\">1e-3</span>, momentum=<span class=\"number\">0.9</span>, weight_decay=<span class=\"number\">0.0005</span>)</span><br><span class=\"line\">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class=\"line\">    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class=\"number\">100</span>, eta_min=<span class=\"number\">0.0001</span>, last_epoch=-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-----第&#123;&#125;轮训练开始-----&quot;</span>.<span class=\"built_in\">format</span>(epoch + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练开始</span></span><br><span class=\"line\">        model.train()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> train_loss</span><br><span class=\"line\">        train_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_loader):</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            loss = criteon(outputs, label)</span><br><span class=\"line\">            loss.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            train_loss += loss.item()</span><br><span class=\"line\">            total_train_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_train_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_loss:%.5f\\n&quot;</span> % (train_loss / <span class=\"built_in\">len</span>(train_set) * <span class=\"number\">256</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 测试开始</span></span><br><span class=\"line\">        model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">        <span class=\"keyword\">global</span> test_loss, correct</span><br><span class=\"line\">        test_loss = <span class=\"number\">0</span></span><br><span class=\"line\">        correct = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(test_loader):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">                outputs = model(inputs)</span><br><span class=\"line\">                test_loss += criteon(outputs, label)</span><br><span class=\"line\">                predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">                correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">                total_test_step += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_batchs:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(total_test_step))</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_loss:%.5f&quot;</span> % (test_loss * <span class=\"number\">256</span> / <span class=\"built_in\">len</span>(test_set)))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc:&#123;&#125;%\\n&quot;</span>.<span class=\"built_in\">format</span>((correct / <span class=\"built_in\">len</span>(test_set) * <span class=\"number\">100.0</span>), <span class=\"string\">&#x27;.2f&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;loss&#x27;</span>, train_loss / <span class=\"built_in\">len</span>(train_loader), epoch)</span><br><span class=\"line\">        writer.add_scalar(<span class=\"string\">&#x27;acc&#x27;</span>, correct / <span class=\"built_in\">len</span>(test_set), epoch)</span><br><span class=\"line\">        scheduler.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    torch.save(model, <span class=\"string\">&#x27;../models/ResNet_mushrooms.pth&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---Finished Training---&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    train()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试代码：\">测试代码：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.tensorboard <span class=\"keyword\">import</span> SummaryWriter</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageFile</span><br><span class=\"line\">ImageFile.LOAD_TRUNCATED_IMAGES = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 转换输入图像</span></span><br><span class=\"line\">    transform = transforms.Compose([</span><br><span class=\"line\">            transforms.Resize(<span class=\"number\">299</span>),</span><br><span class=\"line\">            transforms.CenterCrop(<span class=\"number\">224</span>),</span><br><span class=\"line\">            transforms.ToTensor(),</span><br><span class=\"line\">            transforms.Normalize(mean=[<span class=\"number\">0.485</span>, <span class=\"number\">0.456</span>, <span class=\"number\">0.406</span>], std=[<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>]),</span><br><span class=\"line\">        ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加载测试集</span></span><br><span class=\"line\">    test_set = torchvision.datasets.ImageFolder(root=<span class=\"string\">&quot;E:\\DeepLearning数据集\\\\archive (1)\\\\test&quot;</span>, transform=transform)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建数据加载器</span></span><br><span class=\"line\">    data_loader = torch.utils.data.DataLoader(test_set, batch_size=<span class=\"number\">1</span>, num_workers=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    device = torch.device(<span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加载模型</span></span><br><span class=\"line\">    model = torch.load(<span class=\"string\">&quot;..\\models\\\\ResNet_mushrooms.pth&quot;</span>)</span><br><span class=\"line\">    model.to(device)</span><br><span class=\"line\">    model.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 进行预测</span></span><br><span class=\"line\">    correct = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span> = [<span class=\"string\">&#x27;Agaricus&#x27;</span>,<span class=\"string\">&#x27;Amanita&#x27;</span>,<span class=\"string\">&#x27;Boletus&#x27;</span>,<span class=\"string\">&#x27;Cortinarius&#x27;</span>,<span class=\"string\">&#x27;Entoloma&#x27;</span>,<span class=\"string\">&#x27;Hygrocybe&#x27;</span>,<span class=\"string\">&#x27;Lactarius&#x27;</span>,<span class=\"string\">&#x27;Russula&#x27;</span>,<span class=\"string\">&#x27;Suillus&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, (inputs, label) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(data_loader):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">            inputs, label = inputs.to(device), label.to(device)</span><br><span class=\"line\">            outputs = model(inputs)</span><br><span class=\"line\">            predict = torch.<span class=\"built_in\">max</span>(outputs, dim=<span class=\"number\">1</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">            correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> torch.<span class=\"built_in\">max</span>(outputs) &lt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;drug&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>[predict])</span><br><span class=\"line\">            correct += torch.eq(predict, label).<span class=\"built_in\">sum</span>().item()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(outputs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(correct)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test_acc:&#123;&#125;%\\n&quot;</span>.<span class=\"built_in\">format</span>((correct / <span class=\"built_in\">len</span>(test_set) * <span class=\"number\">100.0</span>), <span class=\"string\">&#x27;.2f&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Success!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    test()</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"Codeforces 1500-1800","date":"2024-06-10T13:06:41.000Z","cover":"https://th.bing.com/th/id/R.8764d162d1e9be6b2cf6d348e2da99f0?rik=TLZjyw4Nspa%2b0w&riu=http%3a%2f%2fpic.616pic.com%2fys_bnew_img%2f00%2f62%2f36%2fr9dfcyoyjR.jpg&ehk=SdJuWe8fxNWlX58TeKImDSWatngZpwGh6ann2DJ%2fXN0%3d&risl=&pid=ImgRaw&r=0","_content":"\n\n\n## 首先声明！！！\n\n---\n* 1.题解为本人原作，如有使用注明出处。\n* 2.如有改进地方欢迎批评指正~\n\n---\n\n\n\n\n## 题目1：https://codeforces.com/problemset/problem/1843/E\n\n### 主要思路：经典二分+前缀和，二分搜索结果，check函数里先前缀和预处理a[i]，而后遍历判断区间1的个数是否超过区间长度的一半。\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint a[N],d[N],l[N],r[N],s[N];\nint T,n,m,q;\n \n \nbool check(int x)\n{\n    for(int i=1;i<=x;i++) a[d[i]]=1;\n    for(int i=1;i<=n;i++) s[i]=s[i-1]+a[i];\n\t\n    for(int i=1;i<=m;i++)\n        if(2*(s[r[i]]-s[l[i]-1])>r[i]-l[i]+1)\n            return true;\n\t\t\t\n    return false;\n}\n \n \nvoid slove()\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++) cin>>l[i]>>r[i];\n    cin>>q;\n    for(int i=1;i<=q;i++) cin>>d[i];\n\t\n    fill(a,a+n+1,0);\n    fill(s,s+n+1,0);\n\t\n    int x=1,y=q+1;\n    while(x<y){\n        int mid=x+y>>1;\n        fill(a,a+n+1,0);\n        if(check(mid)) y=mid;\n        else x=mid+1;\n    }\n\t\n    if(y==q+1) y=-1;\n    cout<<y<<'\\n';\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目2：https://codeforces.com/problemset/problem/1833/F\n\n### 主要思路：先用map记录一下啊a[i]出现的次数，而后求连续m个a[i]+1=a[i+1]的组合数个数，求组合数时用到快速幂求逆元。\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <map>\n\n#define x first\n#define y second\n\nusing namespace std;\n\ntypedef long long LL;\n\ntypedef pair<int,int> PII;\n\nconst int N=1e6+10,mod=1e9+7;\n\nLL a[N],b[N];\nint T,n,m,k;\n\n\nLL qmi(LL a,LL b,LL p)\n{\n    LL sum=1;\n    while(b){\n        if(b&1) sum=(LL)sum*a%p;\n        a=(LL)a*a%p;\n        b>>=1;\n    }\n    return sum%p;\n}\n\n\nvoid slove()\n{\n    cin>>n>>k;\n\t\n    int cnt=0;\n    map<int,int> mp;\n    for(int i=0;i<n;i++){\n        int x;\n        cin>>x;\n        if(!mp[x]) a[cnt++]=x;\n        mp[x]++;\n    }\n    \n    sort(a,a+cnt);\n\t\n    LL sum=1,res=0;\n    if(a[k-1]-a[0]==k-1){\n        for(int i=0;i<k;i++) \n            sum=sum*mp[a[i]]%mod;\n        res+=sum%mod;\n    }\n\t\n    for(int i=1;i<cnt-k+1;i++){\n        if(a[i+k-1]-a[i]==k-1){\n            sum=(LL)sum*qmi(mp[a[i-1]],mod-2,mod)%mod;\n            sum=(LL)sum*mp[a[i+k-1]]%mod;\n            res+=sum%mod;\n        }\n    }\n\t\n    cout<<res%mod<<'\\n';\n}\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目3：https://codeforces.com/problemset/problem/1833/E\n\n### 主要思路：主要思路是判断环的最小个数和最多个数，dfs记录起点和走过的点，如果遇到环的大小为2即ans++，如果回到起点即res++，最后统计个数即可。\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define x first\n#define y second\n#define int long long\n\nusing namespace std;\n\ntypedef long long LL;\n\ntypedef pair<int,int> PII;\n\nconst int N=1e6+10;\n\nint a[N];\nbool st[N];\nint T,n,m;\nint res,ans;\n\n\nvoid dfs(int x,int y,int z,int k,int cnt)\n{\n    if(st[x]){\n        if(x==z) ans++;\n        else if(x==k) res++;\n        return;\n    }\n\t\n    st[x]=true;\n    z=y,y=x,x=a[x];\n    dfs(x,y,z,k,cnt+1);\n}\n\n\nvoid slove()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++) cin>>a[i];\n\t\n    fill(st,st+n+1,false);\n\t\n    res=0,ans=0;\n    for(int i=1;i<=n;i++) \n        if(!st[i])\n            dfs(i,i,i,i,0);\n\t\n    cout<<res+(ans>0)<<' '<<res+ans<<endl;\n}\n\n\nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n---\n\n","source":"_posts/Codeforces 1500-1800.md","raw":"---\ntitle: Codeforces 1500-1800\ndate: 2024/6/10 21:06:41\ncategories:\n  - Codeforces\ntags:\n  - 题解\ncover: https://th.bing.com/th/id/R.8764d162d1e9be6b2cf6d348e2da99f0?rik=TLZjyw4Nspa%2b0w&riu=http%3a%2f%2fpic.616pic.com%2fys_bnew_img%2f00%2f62%2f36%2fr9dfcyoyjR.jpg&ehk=SdJuWe8fxNWlX58TeKImDSWatngZpwGh6ann2DJ%2fXN0%3d&risl=&pid=ImgRaw&r=0\n---\n\n\n\n## 首先声明！！！\n\n---\n* 1.题解为本人原作，如有使用注明出处。\n* 2.如有改进地方欢迎批评指正~\n\n---\n\n\n\n\n## 题目1：https://codeforces.com/problemset/problem/1843/E\n\n### 主要思路：经典二分+前缀和，二分搜索结果，check函数里先前缀和预处理a[i]，而后遍历判断区间1的个数是否超过区间长度的一半。\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n \n#define x first\n#define y second\n#define int long long\n \nusing namespace std;\n \ntypedef long long LL;\n \ntypedef pair<int,int> PII;\n \nconst int N=1e6+10;\n \nint a[N],d[N],l[N],r[N],s[N];\nint T,n,m,q;\n \n \nbool check(int x)\n{\n    for(int i=1;i<=x;i++) a[d[i]]=1;\n    for(int i=1;i<=n;i++) s[i]=s[i-1]+a[i];\n\t\n    for(int i=1;i<=m;i++)\n        if(2*(s[r[i]]-s[l[i]-1])>r[i]-l[i]+1)\n            return true;\n\t\t\t\n    return false;\n}\n \n \nvoid slove()\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++) cin>>l[i]>>r[i];\n    cin>>q;\n    for(int i=1;i<=q;i++) cin>>d[i];\n\t\n    fill(a,a+n+1,0);\n    fill(s,s+n+1,0);\n\t\n    int x=1,y=q+1;\n    while(x<y){\n        int mid=x+y>>1;\n        fill(a,a+n+1,0);\n        if(check(mid)) y=mid;\n        else x=mid+1;\n    }\n\t\n    if(y==q+1) y=-1;\n    cout<<y<<'\\n';\n}\n \n \nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目2：https://codeforces.com/problemset/problem/1833/F\n\n### 主要思路：先用map记录一下啊a[i]出现的次数，而后求连续m个a[i]+1=a[i+1]的组合数个数，求组合数时用到快速幂求逆元。\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <map>\n\n#define x first\n#define y second\n\nusing namespace std;\n\ntypedef long long LL;\n\ntypedef pair<int,int> PII;\n\nconst int N=1e6+10,mod=1e9+7;\n\nLL a[N],b[N];\nint T,n,m,k;\n\n\nLL qmi(LL a,LL b,LL p)\n{\n    LL sum=1;\n    while(b){\n        if(b&1) sum=(LL)sum*a%p;\n        a=(LL)a*a%p;\n        b>>=1;\n    }\n    return sum%p;\n}\n\n\nvoid slove()\n{\n    cin>>n>>k;\n\t\n    int cnt=0;\n    map<int,int> mp;\n    for(int i=0;i<n;i++){\n        int x;\n        cin>>x;\n        if(!mp[x]) a[cnt++]=x;\n        mp[x]++;\n    }\n    \n    sort(a,a+cnt);\n\t\n    LL sum=1,res=0;\n    if(a[k-1]-a[0]==k-1){\n        for(int i=0;i<k;i++) \n            sum=sum*mp[a[i]]%mod;\n        res+=sum%mod;\n    }\n\t\n    for(int i=1;i<cnt-k+1;i++){\n        if(a[i+k-1]-a[i]==k-1){\n            sum=(LL)sum*qmi(mp[a[i-1]],mod-2,mod)%mod;\n            sum=(LL)sum*mp[a[i+k-1]]%mod;\n            res+=sum%mod;\n        }\n    }\n\t\n    cout<<res%mod<<'\\n';\n}\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n\n\n## 题目3：https://codeforces.com/problemset/problem/1833/E\n\n### 主要思路：主要思路是判断环的最小个数和最多个数，dfs记录起点和走过的点，如果遇到环的大小为2即ans++，如果回到起点即res++，最后统计个数即可。\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define x first\n#define y second\n#define int long long\n\nusing namespace std;\n\ntypedef long long LL;\n\ntypedef pair<int,int> PII;\n\nconst int N=1e6+10;\n\nint a[N];\nbool st[N];\nint T,n,m;\nint res,ans;\n\n\nvoid dfs(int x,int y,int z,int k,int cnt)\n{\n    if(st[x]){\n        if(x==z) ans++;\n        else if(x==k) res++;\n        return;\n    }\n\t\n    st[x]=true;\n    z=y,y=x,x=a[x];\n    dfs(x,y,z,k,cnt+1);\n}\n\n\nvoid slove()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++) cin>>a[i];\n\t\n    fill(st,st+n+1,false);\n\t\n    res=0,ans=0;\n    for(int i=1;i<=n;i++) \n        if(!st[i])\n            dfs(i,i,i,i,0);\n\t\n    cout<<res+(ans>0)<<' '<<res+ans<<endl;\n}\n\n\nsigned main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>T;\n\t\n    while(T--) slove();\n\t\n    return 0;\n}\n```\n\n---\n\n","slug":"Codeforces 1500-1800","published":1,"updated":"2024-06-20T12:58:42.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvo9000whwtva6liaqy8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.题解为本人原作，如有使用注明出处。</li>\n<li>2.如有改进地方欢迎批评指正~</li>\n</ul>\n<hr>\n<h2 id=\"题目1：https-codeforces-com-problemset-problem-1843-E\">题目1：<a href=\"https://codeforces.com/problemset/problem/1843/E\">https://codeforces.com/problemset/problem/1843/E</a></h2>\n<h3 id=\"主要思路：经典二分-前缀和，二分搜索结果，check函数里先前缀和预处理a-i-，而后遍历判断区间1的个数是否超过区间长度的一半。\">主要思路：经典二分+前缀和，二分搜索结果，check函数里先前缀和预处理a[i]，而后遍历判断区间1的个数是否超过区间长度的一半。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> a[N],d[N],l[N],r[N],s[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,q;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=x;i++) a[d[i]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) s[i]=s[i<span class=\"number\">-1</span>]+a[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">2</span>*(s[r[i]]-s[l[i]<span class=\"number\">-1</span>])&gt;r[i]-l[i]+<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) cin&gt;&gt;l[i]&gt;&gt;r[i];</span><br><span class=\"line\">    cin&gt;&gt;q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;i++) cin&gt;&gt;d[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(a,a+n+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(s,s+n+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">1</span>,y=q+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&lt;y)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid=x+y&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">fill</span>(a,a+n+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(mid)) y=mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y==q+<span class=\"number\">1</span>) y=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    cout&lt;&lt;y&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目2：https-codeforces-com-problemset-problem-1833-F\">题目2：<a href=\"https://codeforces.com/problemset/problem/1833/F\">https://codeforces.com/problemset/problem/1833/F</a></h2>\n<h3 id=\"主要思路：先用map记录一下啊a-i-出现的次数，而后求连续m个a-i-1-a-i-1-的组合数个数，求组合数时用到快速幂求逆元。\">主要思路：先用map记录一下啊a[i]出现的次数，而后求连续m个a[i]+1=a[i+1]的组合数个数，求组合数时用到快速幂求逆元。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>,mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">qmi</span><span class=\"params\">(LL a,LL b,LL p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) sum=(LL)sum*a%p;</span><br><span class=\"line\">        a=(LL)a*a%p;</span><br><span class=\"line\">        b&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!mp[x]) a[cnt++]=x;</span><br><span class=\"line\">        mp[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a,a+cnt);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    LL sum=<span class=\"number\">1</span>,res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a[k<span class=\"number\">-1</span>]-a[<span class=\"number\">0</span>]==k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++) </span><br><span class=\"line\">            sum=sum*mp[a[i]]%mod;</span><br><span class=\"line\">        res+=sum%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;cnt-k+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i+k<span class=\"number\">-1</span>]-a[i]==k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            sum=(LL)sum*<span class=\"built_in\">qmi</span>(mp[a[i<span class=\"number\">-1</span>]],mod<span class=\"number\">-2</span>,mod)%mod;</span><br><span class=\"line\">            sum=(LL)sum*mp[a[i+k<span class=\"number\">-1</span>]]%mod;</span><br><span class=\"line\">            res+=sum%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;res%mod&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目3：https-codeforces-com-problemset-problem-1833-E\">题目3：<a href=\"https://codeforces.com/problemset/problem/1833/E\">https://codeforces.com/problemset/problem/1833/E</a></h2>\n<h3 id=\"主要思路：主要思路是判断环的最小个数和最多个数，dfs记录起点和走过的点，如果遇到环的大小为2即ans-，如果回到起点即res-，最后统计个数即可。\">主要思路：主要思路是判断环的最小个数和最多个数，dfs记录起点和走过的点，如果遇到环的大小为2即ans++，如果回到起点即res++，最后统计个数即可。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> res,ans;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z,<span class=\"type\">int</span> k,<span class=\"type\">int</span> cnt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(st[x])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==z) ans++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x==k) res++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    st[x]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    z=y,y=x,x=a[x];</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(x,y,z,k,cnt+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(st,st+n+<span class=\"number\">1</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    res=<span class=\"number\">0</span>,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i])</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i,i,i,i,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;res+(ans&gt;<span class=\"number\">0</span>)&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt;res+ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.题解为本人原作，如有使用注明出处。</li>\n<li>2.如有改进地方欢迎批评指正~</li>\n</ul>\n<hr>\n<h2 id=\"题目1：https-codeforces-com-problemset-problem-1843-E\">题目1：<a href=\"https://codeforces.com/problemset/problem/1843/E\">https://codeforces.com/problemset/problem/1843/E</a></h2>\n<h3 id=\"主要思路：经典二分-前缀和，二分搜索结果，check函数里先前缀和预处理a-i-，而后遍历判断区间1的个数是否超过区间长度的一半。\">主要思路：经典二分+前缀和，二分搜索结果，check函数里先前缀和预处理a[i]，而后遍历判断区间1的个数是否超过区间长度的一半。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> a[N],d[N],l[N],r[N],s[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,q;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=x;i++) a[d[i]]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) s[i]=s[i<span class=\"number\">-1</span>]+a[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">2</span>*(s[r[i]]-s[l[i]<span class=\"number\">-1</span>])&gt;r[i]-l[i]+<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++) cin&gt;&gt;l[i]&gt;&gt;r[i];</span><br><span class=\"line\">    cin&gt;&gt;q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;i++) cin&gt;&gt;d[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(a,a+n+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(s,s+n+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">1</span>,y=q+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&lt;y)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid=x+y&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">fill</span>(a,a+n+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(mid)) y=mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> x=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y==q+<span class=\"number\">1</span>) y=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    cout&lt;&lt;y&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目2：https-codeforces-com-problemset-problem-1833-F\">题目2：<a href=\"https://codeforces.com/problemset/problem/1833/F\">https://codeforces.com/problemset/problem/1833/F</a></h2>\n<h3 id=\"主要思路：先用map记录一下啊a-i-出现的次数，而后求连续m个a-i-1-a-i-1-的组合数个数，求组合数时用到快速幂求逆元。\">主要思路：先用map记录一下啊a[i]出现的次数，而后求连续m个a[i]+1=a[i+1]的组合数个数，求组合数时用到快速幂求逆元。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>,mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">qmi</span><span class=\"params\">(LL a,LL b,LL p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) sum=(LL)sum*a%p;</span><br><span class=\"line\">        a=(LL)a*a%p;</span><br><span class=\"line\">        b&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!mp[x]) a[cnt++]=x;</span><br><span class=\"line\">        mp[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a,a+cnt);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    LL sum=<span class=\"number\">1</span>,res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a[k<span class=\"number\">-1</span>]-a[<span class=\"number\">0</span>]==k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++) </span><br><span class=\"line\">            sum=sum*mp[a[i]]%mod;</span><br><span class=\"line\">        res+=sum%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;cnt-k+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i+k<span class=\"number\">-1</span>]-a[i]==k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            sum=(LL)sum*<span class=\"built_in\">qmi</span>(mp[a[i<span class=\"number\">-1</span>]],mod<span class=\"number\">-2</span>,mod)%mod;</span><br><span class=\"line\">            sum=(LL)sum*mp[a[i+k<span class=\"number\">-1</span>]]%mod;</span><br><span class=\"line\">            res+=sum%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;res%mod&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目3：https-codeforces-com-problemset-problem-1833-E\">题目3：<a href=\"https://codeforces.com/problemset/problem/1833/E\">https://codeforces.com/problemset/problem/1833/E</a></h2>\n<h3 id=\"主要思路：主要思路是判断环的最小个数和最多个数，dfs记录起点和走过的点，如果遇到环的大小为2即ans-，如果回到起点即res-，最后统计个数即可。\">主要思路：主要思路是判断环的最小个数和最多个数，dfs记录起点和走过的点，如果遇到环的大小为2即ans++，如果回到起点即res++，最后统计个数即可。</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> res,ans;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z,<span class=\"type\">int</span> k,<span class=\"type\">int</span> cnt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(st[x])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==z) ans++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x==k) res++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    st[x]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    z=y,y=x,x=a[x];</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(x,y,z,k,cnt+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(st,st+n+<span class=\"number\">1</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    res=<span class=\"number\">0</span>,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i])</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i,i,i,i,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;res+(ans&gt;<span class=\"number\">0</span>)&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt;res+ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) <span class=\"built_in\">slove</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"基于Pytorch框架的深度学习语言对话模型","date":"2023-03-16T13:06:41.000Z","description":"可能是喂了点不好的数据集，导致它天天想 kill 我。。。。。","cover":"https://pic1.zhimg.com/v2-5ea151d43c0ebb13546985d225ac256a_1200x500.jpg","_content":"\n\n\n## 首先声明！！！\n\n---\n\n* 1.脚本为本人总结，如有使用注明出处。\n* 2.Pytorch基于Python编程语言编写脚本。\n\n---\n\n\n\n## 运行过程：\n\n\n![](1.png)\n\n![](2.png)\n\n![](3.png)\n\n\n\n\n\n## 对话截图：\n\n![](4.png)\n\n\n\n## Seq2Seq模型源码：\n\n```python\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport time\nimport torch\nimport torch.nn as nn\nfrom torch import optim\nimport torch.nn.functional as F\nimport csv\nimport random\nimport re\nimport os\nimport unicodedata\nimport codecs\nfrom io import open\nimport itertools\n\n\nUSE_CUDA = torch.cuda.is_available()\ndevice = 'cpu'\n\n\nstart_time = time.time()\ncorpus_name = \"cornell movie-dialogs corpus\"\ncorpus = os.path.join(\"./\", corpus_name)\n\n\ndef printLines(file, n=10):\n    with open(file, 'rb') as datafile:\n        lines = datafile.readlines()\n    for line in lines[:n]:\n        print(line)\n\nprintLines(os.path.join(corpus, \"movie_lines.txt\"))\n\n\n# 把每一行都parse成一个dict，key是lineID、characterID、movieID、character和text\n# 分别代表这一行的ID、人物ID、电影ID，人物名称和文本。\n# 最终输出一个dict，key是lineID，value是一个dict。\n# value这个dict的key是lineID、characterID、movieID、character和text\ndef loadLines(fileName, fields):\n    lines = {}\n    print(os.path.join(corpus, \"movie_lines.txt\"))\n    with open(fileName, 'r', encoding='iso-8859-1') as f:\n        for line in f:\n            values = line.split(\" +++$+++ \")\n            # 抽取fields\n            lineObj = {}\n            for i, field in enumerate(fields):\n                lineObj[field] = values[i]\n            lines[lineObj['lineID']] = lineObj\n    return lines\n\n\n# 根据movie_conversations.txt文件和上输出的lines，把utterance组成对话。\n# 最终输出一个list，这个list的每一个元素都是一个dict，\n# key分别是character1ID、character2ID、movieID和utteranceIDs。\n# 分别表示这对话的第一个人物的ID，第二个的ID，电影的ID以及它包含的utteranceIDs\n# 最后根据lines，还给每一行的dict增加一个key为lines，其value是个list，\n# 包含所有utterance(上面得到的lines的value)\ndef loadConversations(fileName, lines, fields):\n    conversations = []\n    with open(fileName, 'r', encoding='iso-8859-1') as f:\n        for line in f:\n            values = line.split(\" +++$+++ \")\n            # 抽取fields\n            convObj = {}\n            for i, field in enumerate(fields):\n                convObj[field] = values[i]\n            # convObj[\"utteranceIDs\"]是一个字符串，形如['L198', 'L199']\n            # 我们用eval把这个字符串变成一个字符串的list。\n            lineIds = eval(convObj[\"utteranceIDs\"])\n            # 根据lineIds构造一个数组，根据lineId去lines里检索出存储utterance对象。\n            convObj[\"lines\"] = []\n            for lineId in lineIds:\n                convObj[\"lines\"].append(lines[lineId])\n            conversations.append(convObj)\n    return conversations\n\n\n# 从对话中抽取句对\n# 假设一段对话包含s1,s2,s3,s4这4个utterance\n# 那么会返回3个句对：s1-s2,s2-s3和s3-s4。\ndef extractSentencePairs(conversations):\n    qa_pairs = []\n    for conversation in conversations:\n        # 遍历对话中的每一个句子，忽略最后一个句子，因为没有答案。\n        for i in range(len(conversation[\"lines\"]) - 1):\n            inputLine = conversation[\"lines\"][i][\"text\"].strip()\n            targetLine = conversation[\"lines\"][i+1][\"text\"].strip()\n            # 如果有空的句子就去掉\n            if inputLine and targetLine:\n                qa_pairs.append([inputLine, targetLine])\n    return qa_pairs\n\n\n# 定义新的文件\ndatafile = os.path.join(corpus, \"formatted_movie_lines.txt\")\n\ndelimiter = '\\t'\n# 对分隔符delimiter进行decode，这里对tab进行decode结果并没有变\ndelimiter = str(codecs.decode(delimiter, \"unicode_escape\"))\n\n# 初始化dict lines，list conversations以及前面我们介绍过的field的id数组。\nlines = {}\nconversations = []\nMOVIE_LINES_FIELDS = [\"lineID\", \"characterID\", \"movieID\", \"character\", \"text\"]\nMOVIE_CONVERSATIONS_FIELDS = [\"character1ID\", \"character2ID\", \"movieID\", \"utteranceIDs\"]\n\n# 首先使用loadLines函数处理movie_lines.txt\nprint(\"\\nProcessing corpus...\")\nlines = loadLines(os.path.join(corpus, \"movie_lines.txt\"), MOVIE_LINES_FIELDS)\n# 接着使用loadConversations处理上一步的结果，得到conversations\nprint(\"\\nLoading conversations...\")\nconversations = loadConversations(os.path.join(corpus, \"movie_conversations.txt\"),\n                                  lines, MOVIE_CONVERSATIONS_FIELDS)\n\n# 输出到一个新的csv文件\nprint(\"\\nWriting newly formatted file...\")\nwith open(datafile, 'w', encoding='utf-8') as outputfile:\n    writer = csv.writer(outputfile, delimiter=delimiter, lineterminator='\\n')\n    # 使用extractSentencePairs从conversations里抽取句对。\n    for pair in extractSentencePairs(conversations):\n        writer.writerow(pair)\n\n# 输出一些行用于检查\nprint(\"\\nSample lines from file:\")\nprintLines(datafile)\n\n# 预定义的token\nPAD_token = 0  # 表示padding\nSOS_token = 1  # 句子的开始\nEOS_token = 2  # 句子的结束\n\n\nclass Voc:\n    def __init__(self, name):\n        self.name = name\n        self.trimmed = False\n        self.word2index = {}\n        self.word2count = {}\n        self.index2word = {PAD_token: \"PAD\", SOS_token: \"SOS\", EOS_token: \"EOS\"}\n        self.num_words = 3  # 目前有SOS, EOS, PAD这3个token。\n\n    def addSentence(self, sentence):\n        for word in sentence.split(' '):\n            self.addWord(word)\n\n    def addWord(self, word):\n        if word not in self.word2index:\n            self.word2index[word] = self.num_words\n            self.word2count[word] = 1\n            self.index2word[self.num_words] = word\n            self.num_words += 1\n        else:\n            self.word2count[word] += 1\n\n    # 删除频次小于min_count的token\n    def trim(self, min_count):\n        if self.trimmed:\n            return\n        self.trimmed = True\n\n        keep_words = []\n\n        for k, v in self.word2count.items():\n            if v >= min_count:\n                keep_words.append(k)\n\n        print('keep_words {} / {} = {:.4f}'.format(\n            len(keep_words), len(self.word2index), len(keep_words) / len(self.word2index)\n        ))\n\n        # 重新构造词典\n        self.word2index = {}\n        self.word2count = {}\n        self.index2word = {PAD_token: \"PAD\", SOS_token: \"SOS\", EOS_token: \"EOS\"}\n        self.num_words = 3  # Count default tokens\n\n        # 重新构造后词频就没有意义了(都是1)\n        for word in keep_words:\n            self.addWord(word)\n\n\nMAX_LENGTH = 10  # 句子最大长度是10个词(包括EOS等特殊词)\n\n\n# 把Unicode字符串变成ASCII\n# 参考https://stackoverflow.com/a/518232/2809427\ndef unicodeToAscii(s):\n    return ''.join(\n        c for c in unicodedata.normalize('NFD', s)\n        if unicodedata.category(c) != 'Mn'\n    )\n\n\ndef normalizeString(s):\n    # 变成小写、去掉前后空格，然后unicode变成ascii\n    s = unicodeToAscii(s.lower().strip())\n    # 在标点前增加空格，这样把标点当成一个词\n    s = re.sub(r\"([.!?])\", r\" \\1\", s)\n    # 字母和标点之外的字符都变成空格\n    s = re.sub(r\"[^a-zA-Z.!?]+\", r\" \", s)\n    # 因为把不用的字符都变成空格，所以可能存在多个连续空格\n    # 下面的正则替换把多个空格变成一个空格，最后去掉前后空格\n    s = re.sub(r\"\\s+\", r\" \", s).strip()\n    return s\n\n\n# 读取问答句对并且返回Voc词典对象\ndef readVocs(datafile, corpus_name):\n    print(\"Reading lines...\")\n    # 文件每行读取到list lines中。\n    lines = open(datafile, encoding='utf-8'). \\\n        read().strip().split('\\n')\n    # 每行用tab切分成问答两个句子，然后调用normalizeString函数进行处理。\n    pairs = [[normalizeString(s) for s in l.split('\\t')] for l in lines]\n    voc = Voc(corpus_name)\n    return voc, pairs\n\n\ndef filterPair(p):\n    return len(p[0].split(' ')) < MAX_LENGTH and len(p[1].split(' ')) < MAX_LENGTH\n\n\n# 过滤太长的句对\ndef filterPairs(pairs):\n    return [pair for pair in pairs if filterPair(pair)]\n\n\n# 使用上面的函数进行处理，返回Voc对象和句对的list\ndef loadPrepareData(corpus, corpus_name, datafile):\n    print(\"Start preparing training data ...\")\n    voc, pairs = readVocs(datafile, corpus_name)\n    print(\"Read {!s} sentence pairs\".format(len(pairs)))\n    pairs = filterPairs(pairs)\n    print(\"Trimmed to {!s} sentence pairs\".format(len(pairs)))\n    print(\"Counting words...\")\n    for pair in pairs:\n        voc.addSentence(pair[0])\n        voc.addSentence(pair[1])\n    print(\"Counted words:\", voc.num_words)\n    return voc, pairs\n\n\n# Load/Assemble voc and pairs\n# save_dir = os.path.join(\"data\", \"save\")\nvoc, pairs = loadPrepareData(corpus, corpus_name, datafile)\n# 输出一些句对\nprint(\"\\npairs:\")\nfor pair in pairs[:10]:\n    print(pair)\n\n\nMIN_COUNT = 3    # 阈值为3\n\n\ndef trimRareWords(voc, pairs, MIN_COUNT):\n    # 去掉voc中频次小于3的词\n    voc.trim(MIN_COUNT)\n    # 保留的句对\n    keep_pairs = []\n    for pair in pairs:\n        input_sentence = pair[0]\n        output_sentence = pair[1]\n        keep_input = True\n        keep_output = True\n        # 检查问题\n        for word in input_sentence.split(' '):\n            if word not in voc.word2index:\n                keep_input = False\n                break\n        # 检查答案\n        for word in output_sentence.split(' '):\n            if word not in voc.word2index:\n                keep_output = False\n                break\n\n        # 如果问题和答案都只包含高频词，我们才保留这个句对\n        if keep_input and keep_output:\n            keep_pairs.append(pair)\n\n    print(\"Trimmed from {} pairs to {}, {:.4f} of total\".format(len(pairs),\n\t\tlen(keep_pairs), len(keep_pairs) / len(pairs)))\n    return keep_pairs\n\n\n# 实际进行处理\npairs = trimRareWords(voc, pairs, MIN_COUNT)\n\n\n\n# 把句子的词变成ID\ndef indexesFromSentence(voc, sentence):\n    return [voc.word2index[word] for word in sentence.split(' ')] + [EOS_token]\n\n# l是多个长度不同句子(list)，使用zip_longest padding成定长，长度为最长句子的长度。\ndef zeroPadding(l, fillvalue=PAD_token):\n    return list(itertools.zip_longest(*l, fillvalue=fillvalue))\n\n# l是二维的padding后的list\n# 返回m和l的大小一样，如果某个位置是padding，那么值为0，否则为1\ndef binaryMatrix(l, value=PAD_token):\n    m = []\n    for i, seq in enumerate(l):\n        m.append([])\n        for token in seq:\n            if token == PAD_token:\n                m[i].append(0)\n            else:\n                m[i].append(1)\n    return m\n\n# 把输入句子变成ID，然后再padding，同时返回lengths这个list，标识实际长度。\n# 返回的padVar是一个LongTensor，shape是(batch, max_length)，\n# lengths是一个list，长度为(batch,)，表示每个句子的实际长度。\ndef inputVar(l, voc):\n    indexes_batch = [indexesFromSentence(voc, sentence) for sentence in l]\n    lengths = torch.tensor([len(indexes) for indexes in indexes_batch])\n    padList = zeroPadding(indexes_batch)\n    padVar = torch.LongTensor(padList)\n    return padVar, lengths\n\n# 对输出句子进行padding，然后用binaryMatrix得到每个位置是padding(0)还是非padding，\n# 同时返回最大最长句子的长度(也就是padding后的长度)\n# 返回值padVar是LongTensor，shape是(batch, max_target_length)\n# mask是ByteTensor，shape也是(batch, max_target_length)\ndef outputVar(l, voc):\n    indexes_batch = [indexesFromSentence(voc, sentence) for sentence in l]\n    max_target_len = max([len(indexes) for indexes in indexes_batch])\n    padList = zeroPadding(indexes_batch)\n    mask = binaryMatrix(padList)\n    mask = torch.ByteTensor(mask)\n    padVar = torch.LongTensor(padList)\n    return padVar, mask, max_target_len\n\n# 处理一个batch的pair句对\ndef batch2TrainData(voc, pair_batch):\n    # 按照句子的长度(词数)排序\n    pair_batch.sort(key=lambda x: len(x[0].split(\" \")), reverse=True)\n    input_batch, output_batch = [], []\n    for pair in pair_batch:\n        input_batch.append(pair[0])\n        output_batch.append(pair[1])\n    inp, lengths = inputVar(input_batch, voc)\n    output, mask, max_target_len = outputVar(output_batch, voc)\n    return inp, lengths, output, mask, max_target_len\n\n\n# 示例\nsmall_batch_size = 5\nbatches = batch2TrainData(voc, [random.choice(pairs) for _ in range(small_batch_size)])\ninput_variable, lengths, target_variable, mask, max_target_len = batches\n\nprint(\"input_variable:\", input_variable)\nprint(\"lengths:\", lengths)\nprint(\"target_variable:\", target_variable)\nprint(\"mask:\", mask)\nprint(\"max_target_len:\", max_target_len)\n\n\nclass EncoderRNN(nn.Module):\n    def __init__(self, hidden_size, embedding, n_layers=1, dropout=0):\n        super(EncoderRNN, self).__init__()\n        self.n_layers = n_layers\n        self.hidden_size = hidden_size\n        self.embedding = embedding\n\n        # 初始化GRU，这里输入和hidden大小都是hidden_size，这里假设embedding层的输出大小是hidden_size\n        # 如果只有一层，那么不进行Dropout，否则使用传入的参数dropout进行GRU的Dropout。\n        self.gru = nn.GRU(hidden_size, hidden_size, n_layers,\n                          dropout=(0 if n_layers == 1 else dropout), bidirectional=True)\n\n    def forward(self, input_seq, input_lengths, hidden=None):\n        # 输入是(max_length, batch)，Embedding之后变成(max_length, batch, hidden_size)\n        embedded = self.embedding(input_seq)\n        # Pack padded batch of sequences for RNN module\n        # 因为RNN(GRU)要知道实际长度，所以PyTorch提供了函数pack_padded_sequence把输入向量和长度\n        # pack到一个对象PackedSequence里，这样便于使用。\n        packed = torch.nn.utils.rnn.pack_padded_sequence(embedded, input_lengths)\n        # 通过GRU进行forward计算，需要传入输入和隐变量\n        # 如果传入的输入是一个Tensor (max_length, batch, hidden_size)\n        # 那么输出outputs是(max_length, batch, hidden_size*num_directions)。\n        # 第三维是hidden_size和num_directions的混合，它们实际排列顺序是num_directions在前面，\n        # 因此我们可以使用outputs.view(seq_len, batch, num_directions, hidden_size)得到4维的向量。\n        # 其中第三维是方向，第四位是隐状态。\n\n        # 而如果输入是PackedSequence对象，那么输出outputs也是一个PackedSequence对象，我们需要用\n        # 函数pad_packed_sequence把它变成shape为(max_length, batch, hidden*num_directions)的向量以及\n        # 一个list，表示输出的长度，当然这个list和输入的input_lengths完全一样，因此通常我们不需要它。\n        outputs, hidden = self.gru(packed, hidden)\n        # 参考前面的注释，我们得到outputs为(max_length, batch, hidden*num_directions)\n        outputs, _ = torch.nn.utils.rnn.pad_packed_sequence(outputs)\n        # 我们需要把输出的num_directions双向的向量加起来\n        # 因为outputs的第三维是先放前向的hidden_size个结果，然后再放后向的hidden_size个结果\n        # 所以outputs[:, :, :self.hidden_size]得到前向的结果\n        # outputs[:, :, self.hidden_size:]是后向的结果\n        # 注意，如果bidirectional是False，则outputs第三维的大小就是hidden_size，\n        # 这时outputs[:, : ,self.hidden_size:]是不存在的，因此也不会加上去。\n        # 对Python slicing不熟的读者可以看看下面的例子：\n\n        # >>> a=[1,2,3]\n        # >>> a[:3]\n        # [1, 2, 3]\n        # >>> a[3:]\n        # []\n        # >>> a[:3]+a[3:]\n        # [1, 2, 3]\n\n        # 这样就不用写下面的代码了：\n        # if bidirectional:\n        #     outputs = outputs[:, :, :self.hidden_size] + outputs[:, : ,self.hidden_size:]\n        outputs = outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]\n        # 返回最终的输出和最后时刻的隐状态。\n        return outputs, hidden\n\n\n# Luong 注意力layer\nclass Attn(torch.nn.Module):\n    def __init__(self, method, hidden_size):\n        super(Attn, self).__init__()\n        self.method = method\n        if self.method not in ['dot', 'general', 'concat']:\n            raise ValueError(self.method, \"is not an appropriate attention method.\")\n        self.hidden_size = hidden_size\n        if self.method == 'general':\n            self.attn = torch.nn.Linear(self.hidden_size, hidden_size)\n        elif self.method == 'concat':\n            self.attn = torch.nn.Linear(self.hidden_size * 2, hidden_size)\n            self.v = torch.nn.Parameter(torch.FloatTensor(hidden_size))\n\n    def dot_score(self, hidden, encoder_output):\n        # 输入hidden的shape是(1, batch=64, hidden_size=500)\n        # encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)\n        # hidden * encoder_output得到的shape是(10, 64, 500)，然后对第3维求和就可以计算出score。\n        return torch.sum(hidden * encoder_output, dim=2)\n\n    def general_score(self, hidden, encoder_output):\n        energy = self.attn(encoder_output)\n        return torch.sum(hidden * energy, dim=2)\n\n    def concat_score(self, hidden, encoder_output):\n        energy = self.attn(torch.cat((hidden.expand(encoder_output.size(0), -1, -1),\n                                      encoder_output), 2)).tanh()\n        return torch.sum(self.v * energy, dim=2)\n\n    # 输入是上一个时刻的隐状态hidden和所有时刻的Encoder的输出encoder_outputs\n    # 输出是注意力的概率，也就是长度为input_lengths的向量，它的和加起来是1。\n    def forward(self, hidden, encoder_outputs):\n        # 计算注意力的score，输入hidden的shape是(1, batch=64, hidden_size=500)，\n        # 表示t时刻batch数据的隐状态\n        # encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)\n        if self.method == 'general':\n            attn_energies = self.general_score(hidden, encoder_outputs)\n        elif self.method == 'concat':\n            attn_energies = self.concat_score(hidden, encoder_outputs)\n        elif self.method == 'dot':\n            # 计算内积，参考dot_score函数\n            attn_energies = self.dot_score(hidden, encoder_outputs)\n\n        # Transpose max_length and batch_size dimensions\n        # 把attn_energies从(max_length=10, batch=64)转置成(64, 10)\n        attn_energies = attn_energies.t()\n\n        # 使用softmax函数把score变成概率，shape仍然是(64, 10)，然后用unsqueeze(1)变成\n        # (64, 1, 10)\n        return F.softmax(attn_energies, dim=1).unsqueeze(1)\n\n\nclass LuongAttnDecoderRNN(nn.Module):\n    def __init__(self, attn_model, embedding, hidden_size, output_size, n_layers=1, dropout=0.1):\n        super(LuongAttnDecoderRNN, self).__init__()\n\n        # 保存到self里，attn_model就是前面定义的Attn类的对象。\n        self.attn_model = attn_model\n        self.hidden_size = hidden_size\n        self.output_size = output_size\n        self.n_layers = n_layers\n        self.dropout = dropout\n\n        # 定义Decoder的layers\n        self.embedding = embedding\n        self.embedding_dropout = nn.Dropout(dropout)\n        self.gru = nn.GRU(hidden_size, hidden_size, n_layers, dropout=(0 if n_layers == 1 else dropout))\n        self.concat = nn.Linear(hidden_size * 2, hidden_size)\n        self.out = nn.Linear(hidden_size, output_size)\n\n        self.attn = Attn(attn_model, hidden_size)\n\n    def forward(self, input_step, last_hidden, encoder_outputs):\n        # 注意：decoder每一步只能处理一个时刻的数据，因为t时刻计算完了才能计算t+1时刻。\n        # input_step的shape是(1, 64)，64是batch，1是当前输入的词ID(来自上一个时刻的输出)\n        # 通过embedding层变成(1, 64, 500)，然后进行dropout，shape不变。\n        embedded = self.embedding(input_step)\n        embedded = self.embedding_dropout(embedded)\n        # 把embedded传入GRU进行forward计算\n        # 得到rnn_output的shape是(1, 64, 500)\n        # hidden是(2, 64, 500)，因为是两层的GRU，所以第一维是2。\n        rnn_output, hidden = self.gru(embedded, last_hidden)\n        # 计算注意力权重， 根据前面的分析，attn_weights的shape是(64, 1, 10)\n        attn_weights = self.attn(rnn_output, encoder_outputs)\n\n        # encoder_outputs是(10, 64, 500)\n        # encoder_outputs.transpose(0, 1)后的shape是(64, 10, 500)\n        # attn_weights.bmm后是(64, 1, 500)\n\n        # bmm是批量的矩阵乘法，第一维是batch，我们可以把attn_weights看成64个(1,10)的矩阵\n        # 把encoder_outputs.transpose(0, 1)看成64个(10, 500)的矩阵\n        # 那么bmm就是64个(1, 10)矩阵 x (10, 500)矩阵，最终得到(64, 1, 500)\n        context = attn_weights.bmm(encoder_outputs.transpose(0, 1))\n        # 把context向量和GRU的输出拼接起来\n        # rnn_output从(1, 64, 500)变成(64, 500)\n        rnn_output = rnn_output.squeeze(0)\n        # context从(64, 1, 500)变成(64, 500)\n        context = context.squeeze(1)\n        # 拼接得到(64, 1000)\n        concat_input = torch.cat((rnn_output, context), 1)\n        # self.concat是一个矩阵(1000, 500)，\n        # self.concat(concat_input)的输出是(64, 500)\n        # 然后用tanh把输出返回变成(-1,1)，concat_output的shape是(64, 500)\n        concat_output = torch.tanh(self.concat(concat_input))\n\n        # out是(500, 词典大小=7826)\n        output = self.out(concat_output)\n        # 用softmax变成概率，表示当前时刻输出每个词的概率。\n        output = F.softmax(output, dim=1)\n        # 返回 output和新的隐状态\n        return output, hidden\n\n\ndef maskNLLLoss(inp, target, mask):\n    # 计算实际的词的个数，因为padding是0，非padding是1，因此sum就可以得到词的个数\n    nTotal = mask.sum()\n\n    crossEntropy = -torch.log(torch.gather(inp, 1, target.view(-1, 1)).squeeze(1))\n    loss = crossEntropy.masked_select(mask).mean()\n    loss = loss.to(device)\n    return loss, nTotal.item()\n\n\ndef train(input_variable, lengths, target_variable, mask, max_target_len, encoder, decoder, embedding,\n          encoder_optimizer, decoder_optimizer, batch_size, clip, max_length=MAX_LENGTH):\n\n    # 梯度清空\n    encoder_optimizer.zero_grad()\n    decoder_optimizer.zero_grad()\n\n    # 设置device，从而支持GPU，当然如果没有GPU也能工作。\n    input_variable = input_variable.to(device)\n    lengths = lengths.to(device)\n    target_variable = target_variable.to(device)\n    mask = mask.to(device)\n\n    # 初始化变量\n    loss = 0\n    print_losses = []\n    n_totals = 0\n\n    # encoder的Forward计算\n    encoder_outputs, encoder_hidden = encoder(input_variable, lengths)\n\n    # Decoder的初始输入是SOS，我们需要构造(1, batch)的输入，表示第一个时刻batch个输入。\n    decoder_input = torch.LongTensor([[SOS_token for _ in range(batch_size)]])\n    decoder_input = decoder_input.to(device)\n\n    # 注意：Encoder是双向的，而Decoder是单向的，因此从下往上取n_layers个\n    decoder_hidden = encoder_hidden[:decoder.n_layers]\n\n    # 确定是否teacher forcing\n    use_teacher_forcing = True if random.random() < teacher_forcing_ratio else False\n\n    # 一次处理一个时刻\n    if use_teacher_forcing:\n        for t in range(max_target_len):\n            decoder_output, decoder_hidden = decoder(\n                decoder_input, decoder_hidden, encoder_outputs\n            )\n            # Teacher forcing: 下一个时刻的输入是当前正确答案\n            decoder_input = target_variable[t].view(1, -1)\n            # 计算累计的loss\n            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])\n            loss += mask_loss\n            print_losses.append(mask_loss.item() * nTotal)\n            n_totals += nTotal\n    else:\n        for t in range(max_target_len):\n            decoder_output, decoder_hidden = decoder(\n                decoder_input, decoder_hidden, encoder_outputs\n            )\n            # 不是teacher forcing: 下一个时刻的输入是当前模型预测概率最高的值\n            _, topi = decoder_output.topk(1)\n            decoder_input = torch.LongTensor([[topi[i][0] for i in range(batch_size)]])\n            decoder_input = decoder_input.to(device)\n            # 计算累计的loss\n            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])\n            loss += mask_loss\n            print_losses.append(mask_loss.item() * nTotal)\n            n_totals += nTotal\n\n    # 反向计算\n    loss.backward()\n\n    # 对encoder和decoder进行梯度裁剪\n    _ = torch.nn.utils.clip_grad_norm_(encoder.parameters(), clip)\n    _ = torch.nn.utils.clip_grad_norm_(decoder.parameters(), clip)\n\n    # 更新参数\n    encoder_optimizer.step()\n    decoder_optimizer.step()\n\n    return sum(print_losses) / n_totals\n\n\ndef trainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,\n               embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,\n               print_every, save_every, clip, corpus_name, loadFilename):\n    # 随机选择n_iteration个batch的数据(pair)\n    training_batches = [batch2TrainData(voc, [random.choice(pairs) for _ in range(batch_size)])\n                        for _ in range(n_iteration)]\n\n    # 初始化\n    print('Initializing ...')\n    start_iteration = 1\n    print_loss = 0\n    if loadFilename:\n        start_iteration = checkpoint['iteration'] + 1\n\n    # 训练\n    print(\"Training...\")\n    for iteration in range(start_iteration, n_iteration + 1):\n        training_batch = training_batches[iteration - 1]\n\n        input_variable, lengths, target_variable, mask, max_target_len = training_batch\n\n        # 训练一个batch的数据\n        loss = train(input_variable, lengths, target_variable, mask, max_target_len, encoder,\n                     decoder, embedding, encoder_optimizer, decoder_optimizer, batch_size, clip)\n        print_loss += loss\n\n        # 进度\n        if iteration % print_every == 0:\n            print_loss_avg = print_loss / print_every\n            print(\"Iteration: {}; Percent complete: {:.1f}%; Average loss: {:.4f}\"\n                  .format(iteration, iteration / n_iteration * 100, print_loss_avg))\n            print_loss = 0\n\n        # 保存checkpoint\n        if (iteration % save_every == 0):\n            directory = os.path.join(save_dir, model_name, corpus_name, '{}-{}_{}'\n                                     .format(encoder_n_layers, decoder_n_layers, hidden_size))\n            if not os.path.exists(directory):\n                os.makedirs(directory)\n            torch.save({\n                'iteration': iteration,\n                'en': encoder.state_dict(),\n                'de': decoder.state_dict(),\n                'en_opt': encoder_optimizer.state_dict(),\n                'de_opt': decoder_optimizer.state_dict(),\n                'loss': loss,\n                'voc_dict': voc.__dict__,\n                'embedding': embedding.state_dict()\n            }, os.path.join(directory, '{}_{}.tar'.format(iteration, 'checkpoint')))\n\n\nclass GreedySearchDecoder(nn.Module):\n    def __init__(self, encoder, decoder):\n        super(GreedySearchDecoder, self).__init__()\n        self.encoder = encoder\n        self.decoder = decoder\n\n    def forward(self, input_seq, input_length, max_length):\n        # Encoder的Forward计算\n        encoder_outputs, encoder_hidden = self.encoder(input_seq, input_length)\n        # 把Encoder最后时刻的隐状态作为Decoder的初始值\n        decoder_hidden = encoder_hidden[:decoder.n_layers]\n        # 因为我们的函数都是要求(time,batch)，因此即使只有一个数据，也要做出二维的。\n        # Decoder的初始输入是SOS\n        decoder_input = torch.ones(1, 1, device=device, dtype=torch.long) * SOS_token\n        # 用于保存解码结果的tensor\n        all_tokens = torch.zeros([0], device=device, dtype=torch.long)\n        all_scores = torch.zeros([0], device=device)\n        # 循环，这里只使用长度限制，后面处理的时候把EOS去掉了。\n        for _ in range(max_length):\n            # Decoder forward一步\n            decoder_output, decoder_hidden = self.decoder(decoder_input, decoder_hidden,\n\t\t\t\t\t\t\t\tencoder_outputs)\n            # decoder_outputs是(batch=1, vob_size)\n            # 使用max返回概率最大的词和得分\n            decoder_scores, decoder_input = torch.max(decoder_output, dim=1)\n            # 把解码结果保存到all_tokens和all_scores里\n            all_tokens = torch.cat((all_tokens, decoder_input), dim=0)\n            all_scores = torch.cat((all_scores, decoder_scores), dim=0)\n            # decoder_input是当前时刻输出的词的ID，这是个一维的向量，因为max会减少一维。\n            # 但是decoder要求有一个batch维度，因此用unsqueeze增加batch维度。\n            decoder_input = torch.unsqueeze(decoder_input, 0)\n        # 返回所有的词和得分。\n        return all_tokens, all_scores\n\n\ndef evaluate(encoder, decoder, searcher, voc, sentence, max_length=MAX_LENGTH):\n    ### 把输入的一个batch句子变成id\n    indexes_batch = [indexesFromSentence(voc, sentence)]\n    # 创建lengths tensor\n    lengths = torch.tensor([len(indexes) for indexes in indexes_batch])\n    # 转置\n    input_batch = torch.LongTensor(indexes_batch).transpose(0, 1)\n    # 放到合适的设备上(比如GPU)\n    input_batch = input_batch.to(device)\n    lengths = lengths.to(device)\n    # 用searcher解码\n    tokens, scores = searcher(input_batch, lengths, max_length)\n    # ID变成词。\n    decoded_words = [voc.index2word[token.item()] for token in tokens]\n    return decoded_words\n\n\ndef evaluateInput(encoder, decoder, searcher, voc):\n    input_sentence = ''\n    while (1):\n        try:\n            # 得到用户终端的输入\n            input_sentence = input('> ')\n            # 是否退出\n            if input_sentence == 'q' or input_sentence == 'quit': break\n            # 句子归一化\n            input_sentence = normalizeString(input_sentence)\n            # 生成响应Evaluate sentence\n            output_words = evaluate(encoder, decoder, searcher, voc, input_sentence)\n            # 去掉EOS后面的内容\n            words = []\n            for word in output_words:\n                if word == 'EOS':\n                    break\n                elif word != 'PAD':\n                    words.append(word)\n            print('Bot:', ' '.join(words))\n\n        except KeyError:\n            print(\"Error: Encountered unknown word.\")\n\n\n# 配置模型\nmodel_name = 'cb_model'\nattn_model = 'dot'\n# attn_model = 'general'\n# attn_model = 'concat'\nhidden_size = 500\nencoder_n_layers = 2\ndecoder_n_layers = 2\ndropout = 0.1\nbatch_size = 64\n\n# 从哪个checkpoint恢复，如果是None，那么从头开始训练。\n# loadFilename = None\n\nloadFilename = \"./model_Seq2seq/cb_model/cornell movie-dialogs corpus/2-2_500/5000_checkpoint.tar\"\ncheckpoint_iter = 5000\n\n# 如果loadFilename不空，则从中加载模型\nif loadFilename:\n    # 如果训练和加载是一条机器，那么直接加载\n    checkpoint = torch.load(loadFilename)\n    # 否则比如checkpoint是在GPU上得到的，但是我们现在又用CPU来训练或者测试，那么注释掉下面的代码\n    # checkpoint = torch.load(loadFilename, map_location=torch.device('cpu'))\n    encoder_sd = checkpoint['en']\n    decoder_sd = checkpoint['de']\n    encoder_optimizer_sd = checkpoint['en_opt']\n    decoder_optimizer_sd = checkpoint['de_opt']\n    embedding_sd = checkpoint['embedding']\n    voc.__dict__ = checkpoint['voc_dict']\n\nprint('Building encoder and decoder ...')\n# 初始化word embedding\nembedding = nn.Embedding(voc.num_words, hidden_size)\nif loadFilename:\n    embedding.load_state_dict(embedding_sd)\n# 初始化encoder和decoder模型\nencoder = EncoderRNN(hidden_size, embedding, encoder_n_layers, dropout)\ndecoder = LuongAttnDecoderRNN(attn_model, embedding, hidden_size, voc.num_words,\n                              decoder_n_layers, dropout)\nif loadFilename:\n    encoder.load_state_dict(encoder_sd)\n    decoder.load_state_dict(decoder_sd)\n# 使用合适的设备\nencoder = encoder.to(device)\ndecoder = decoder.to(device)\nprint('Models built and ready to go!')\n\n\n# 配置训练的超参数和优化器\nclip = 50.0\nteacher_forcing_ratio = 1.0\nlearning_rate = 0.0001\ndecoder_learning_ratio = 5.0\nn_iteration = 5000\nprint_every = 1\nsave_every = 1000\nsave_dir = \"./model_Seq2seq_1\"\n\n\n# 设置进入训练模式，从而开启dropout\nencoder.train()\ndecoder.train()\n\n# 初始化优化器\nprint('Building optimizers ...')\nencoder_optimizer = optim.Adam(encoder.parameters(), lr=learning_rate)\ndecoder_optimizer = optim.Adam(decoder.parameters(), lr=learning_rate * decoder_learning_ratio)\nif loadFilename:\n    encoder_optimizer.load_state_dict(encoder_optimizer_sd)\n    decoder_optimizer.load_state_dict(decoder_optimizer_sd)\n\n# 开始训练\nprint(\"Starting Training!\")\ntrainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,\n           embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,\n           print_every, save_every, clip, corpus_name, loadFilename)\n\nend_time = time.time()\nprint(\"time: %.1fs\" % (end_time - start_time))\n\n\n# 进入eval模式，从而去掉dropout。\nencoder.eval()\ndecoder.eval()\n\n# 构造searcher对象\nsearcher = GreedySearchDecoder(encoder, decoder)\n\n# 测试\nevaluateInput(encoder, decoder, searcher, voc)\n\n```\n\n","source":"_posts/基于Pytorch框架的深度学习语言对话模型.md","raw":"---\ntitle: 基于Pytorch框架的深度学习语言对话模型\ndate: 2023/3/16 21:06:41\ndescription: 可能是喂了点不好的数据集，导致它天天想 kill 我。。。。。 \n\ncategories: Deeplearn\ntags: 深度学习\ncover: https://pic1.zhimg.com/v2-5ea151d43c0ebb13546985d225ac256a_1200x500.jpg\n---\n\n\n\n## 首先声明！！！\n\n---\n\n* 1.脚本为本人总结，如有使用注明出处。\n* 2.Pytorch基于Python编程语言编写脚本。\n\n---\n\n\n\n## 运行过程：\n\n\n![](1.png)\n\n![](2.png)\n\n![](3.png)\n\n\n\n\n\n## 对话截图：\n\n![](4.png)\n\n\n\n## Seq2Seq模型源码：\n\n```python\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport time\nimport torch\nimport torch.nn as nn\nfrom torch import optim\nimport torch.nn.functional as F\nimport csv\nimport random\nimport re\nimport os\nimport unicodedata\nimport codecs\nfrom io import open\nimport itertools\n\n\nUSE_CUDA = torch.cuda.is_available()\ndevice = 'cpu'\n\n\nstart_time = time.time()\ncorpus_name = \"cornell movie-dialogs corpus\"\ncorpus = os.path.join(\"./\", corpus_name)\n\n\ndef printLines(file, n=10):\n    with open(file, 'rb') as datafile:\n        lines = datafile.readlines()\n    for line in lines[:n]:\n        print(line)\n\nprintLines(os.path.join(corpus, \"movie_lines.txt\"))\n\n\n# 把每一行都parse成一个dict，key是lineID、characterID、movieID、character和text\n# 分别代表这一行的ID、人物ID、电影ID，人物名称和文本。\n# 最终输出一个dict，key是lineID，value是一个dict。\n# value这个dict的key是lineID、characterID、movieID、character和text\ndef loadLines(fileName, fields):\n    lines = {}\n    print(os.path.join(corpus, \"movie_lines.txt\"))\n    with open(fileName, 'r', encoding='iso-8859-1') as f:\n        for line in f:\n            values = line.split(\" +++$+++ \")\n            # 抽取fields\n            lineObj = {}\n            for i, field in enumerate(fields):\n                lineObj[field] = values[i]\n            lines[lineObj['lineID']] = lineObj\n    return lines\n\n\n# 根据movie_conversations.txt文件和上输出的lines，把utterance组成对话。\n# 最终输出一个list，这个list的每一个元素都是一个dict，\n# key分别是character1ID、character2ID、movieID和utteranceIDs。\n# 分别表示这对话的第一个人物的ID，第二个的ID，电影的ID以及它包含的utteranceIDs\n# 最后根据lines，还给每一行的dict增加一个key为lines，其value是个list，\n# 包含所有utterance(上面得到的lines的value)\ndef loadConversations(fileName, lines, fields):\n    conversations = []\n    with open(fileName, 'r', encoding='iso-8859-1') as f:\n        for line in f:\n            values = line.split(\" +++$+++ \")\n            # 抽取fields\n            convObj = {}\n            for i, field in enumerate(fields):\n                convObj[field] = values[i]\n            # convObj[\"utteranceIDs\"]是一个字符串，形如['L198', 'L199']\n            # 我们用eval把这个字符串变成一个字符串的list。\n            lineIds = eval(convObj[\"utteranceIDs\"])\n            # 根据lineIds构造一个数组，根据lineId去lines里检索出存储utterance对象。\n            convObj[\"lines\"] = []\n            for lineId in lineIds:\n                convObj[\"lines\"].append(lines[lineId])\n            conversations.append(convObj)\n    return conversations\n\n\n# 从对话中抽取句对\n# 假设一段对话包含s1,s2,s3,s4这4个utterance\n# 那么会返回3个句对：s1-s2,s2-s3和s3-s4。\ndef extractSentencePairs(conversations):\n    qa_pairs = []\n    for conversation in conversations:\n        # 遍历对话中的每一个句子，忽略最后一个句子，因为没有答案。\n        for i in range(len(conversation[\"lines\"]) - 1):\n            inputLine = conversation[\"lines\"][i][\"text\"].strip()\n            targetLine = conversation[\"lines\"][i+1][\"text\"].strip()\n            # 如果有空的句子就去掉\n            if inputLine and targetLine:\n                qa_pairs.append([inputLine, targetLine])\n    return qa_pairs\n\n\n# 定义新的文件\ndatafile = os.path.join(corpus, \"formatted_movie_lines.txt\")\n\ndelimiter = '\\t'\n# 对分隔符delimiter进行decode，这里对tab进行decode结果并没有变\ndelimiter = str(codecs.decode(delimiter, \"unicode_escape\"))\n\n# 初始化dict lines，list conversations以及前面我们介绍过的field的id数组。\nlines = {}\nconversations = []\nMOVIE_LINES_FIELDS = [\"lineID\", \"characterID\", \"movieID\", \"character\", \"text\"]\nMOVIE_CONVERSATIONS_FIELDS = [\"character1ID\", \"character2ID\", \"movieID\", \"utteranceIDs\"]\n\n# 首先使用loadLines函数处理movie_lines.txt\nprint(\"\\nProcessing corpus...\")\nlines = loadLines(os.path.join(corpus, \"movie_lines.txt\"), MOVIE_LINES_FIELDS)\n# 接着使用loadConversations处理上一步的结果，得到conversations\nprint(\"\\nLoading conversations...\")\nconversations = loadConversations(os.path.join(corpus, \"movie_conversations.txt\"),\n                                  lines, MOVIE_CONVERSATIONS_FIELDS)\n\n# 输出到一个新的csv文件\nprint(\"\\nWriting newly formatted file...\")\nwith open(datafile, 'w', encoding='utf-8') as outputfile:\n    writer = csv.writer(outputfile, delimiter=delimiter, lineterminator='\\n')\n    # 使用extractSentencePairs从conversations里抽取句对。\n    for pair in extractSentencePairs(conversations):\n        writer.writerow(pair)\n\n# 输出一些行用于检查\nprint(\"\\nSample lines from file:\")\nprintLines(datafile)\n\n# 预定义的token\nPAD_token = 0  # 表示padding\nSOS_token = 1  # 句子的开始\nEOS_token = 2  # 句子的结束\n\n\nclass Voc:\n    def __init__(self, name):\n        self.name = name\n        self.trimmed = False\n        self.word2index = {}\n        self.word2count = {}\n        self.index2word = {PAD_token: \"PAD\", SOS_token: \"SOS\", EOS_token: \"EOS\"}\n        self.num_words = 3  # 目前有SOS, EOS, PAD这3个token。\n\n    def addSentence(self, sentence):\n        for word in sentence.split(' '):\n            self.addWord(word)\n\n    def addWord(self, word):\n        if word not in self.word2index:\n            self.word2index[word] = self.num_words\n            self.word2count[word] = 1\n            self.index2word[self.num_words] = word\n            self.num_words += 1\n        else:\n            self.word2count[word] += 1\n\n    # 删除频次小于min_count的token\n    def trim(self, min_count):\n        if self.trimmed:\n            return\n        self.trimmed = True\n\n        keep_words = []\n\n        for k, v in self.word2count.items():\n            if v >= min_count:\n                keep_words.append(k)\n\n        print('keep_words {} / {} = {:.4f}'.format(\n            len(keep_words), len(self.word2index), len(keep_words) / len(self.word2index)\n        ))\n\n        # 重新构造词典\n        self.word2index = {}\n        self.word2count = {}\n        self.index2word = {PAD_token: \"PAD\", SOS_token: \"SOS\", EOS_token: \"EOS\"}\n        self.num_words = 3  # Count default tokens\n\n        # 重新构造后词频就没有意义了(都是1)\n        for word in keep_words:\n            self.addWord(word)\n\n\nMAX_LENGTH = 10  # 句子最大长度是10个词(包括EOS等特殊词)\n\n\n# 把Unicode字符串变成ASCII\n# 参考https://stackoverflow.com/a/518232/2809427\ndef unicodeToAscii(s):\n    return ''.join(\n        c for c in unicodedata.normalize('NFD', s)\n        if unicodedata.category(c) != 'Mn'\n    )\n\n\ndef normalizeString(s):\n    # 变成小写、去掉前后空格，然后unicode变成ascii\n    s = unicodeToAscii(s.lower().strip())\n    # 在标点前增加空格，这样把标点当成一个词\n    s = re.sub(r\"([.!?])\", r\" \\1\", s)\n    # 字母和标点之外的字符都变成空格\n    s = re.sub(r\"[^a-zA-Z.!?]+\", r\" \", s)\n    # 因为把不用的字符都变成空格，所以可能存在多个连续空格\n    # 下面的正则替换把多个空格变成一个空格，最后去掉前后空格\n    s = re.sub(r\"\\s+\", r\" \", s).strip()\n    return s\n\n\n# 读取问答句对并且返回Voc词典对象\ndef readVocs(datafile, corpus_name):\n    print(\"Reading lines...\")\n    # 文件每行读取到list lines中。\n    lines = open(datafile, encoding='utf-8'). \\\n        read().strip().split('\\n')\n    # 每行用tab切分成问答两个句子，然后调用normalizeString函数进行处理。\n    pairs = [[normalizeString(s) for s in l.split('\\t')] for l in lines]\n    voc = Voc(corpus_name)\n    return voc, pairs\n\n\ndef filterPair(p):\n    return len(p[0].split(' ')) < MAX_LENGTH and len(p[1].split(' ')) < MAX_LENGTH\n\n\n# 过滤太长的句对\ndef filterPairs(pairs):\n    return [pair for pair in pairs if filterPair(pair)]\n\n\n# 使用上面的函数进行处理，返回Voc对象和句对的list\ndef loadPrepareData(corpus, corpus_name, datafile):\n    print(\"Start preparing training data ...\")\n    voc, pairs = readVocs(datafile, corpus_name)\n    print(\"Read {!s} sentence pairs\".format(len(pairs)))\n    pairs = filterPairs(pairs)\n    print(\"Trimmed to {!s} sentence pairs\".format(len(pairs)))\n    print(\"Counting words...\")\n    for pair in pairs:\n        voc.addSentence(pair[0])\n        voc.addSentence(pair[1])\n    print(\"Counted words:\", voc.num_words)\n    return voc, pairs\n\n\n# Load/Assemble voc and pairs\n# save_dir = os.path.join(\"data\", \"save\")\nvoc, pairs = loadPrepareData(corpus, corpus_name, datafile)\n# 输出一些句对\nprint(\"\\npairs:\")\nfor pair in pairs[:10]:\n    print(pair)\n\n\nMIN_COUNT = 3    # 阈值为3\n\n\ndef trimRareWords(voc, pairs, MIN_COUNT):\n    # 去掉voc中频次小于3的词\n    voc.trim(MIN_COUNT)\n    # 保留的句对\n    keep_pairs = []\n    for pair in pairs:\n        input_sentence = pair[0]\n        output_sentence = pair[1]\n        keep_input = True\n        keep_output = True\n        # 检查问题\n        for word in input_sentence.split(' '):\n            if word not in voc.word2index:\n                keep_input = False\n                break\n        # 检查答案\n        for word in output_sentence.split(' '):\n            if word not in voc.word2index:\n                keep_output = False\n                break\n\n        # 如果问题和答案都只包含高频词，我们才保留这个句对\n        if keep_input and keep_output:\n            keep_pairs.append(pair)\n\n    print(\"Trimmed from {} pairs to {}, {:.4f} of total\".format(len(pairs),\n\t\tlen(keep_pairs), len(keep_pairs) / len(pairs)))\n    return keep_pairs\n\n\n# 实际进行处理\npairs = trimRareWords(voc, pairs, MIN_COUNT)\n\n\n\n# 把句子的词变成ID\ndef indexesFromSentence(voc, sentence):\n    return [voc.word2index[word] for word in sentence.split(' ')] + [EOS_token]\n\n# l是多个长度不同句子(list)，使用zip_longest padding成定长，长度为最长句子的长度。\ndef zeroPadding(l, fillvalue=PAD_token):\n    return list(itertools.zip_longest(*l, fillvalue=fillvalue))\n\n# l是二维的padding后的list\n# 返回m和l的大小一样，如果某个位置是padding，那么值为0，否则为1\ndef binaryMatrix(l, value=PAD_token):\n    m = []\n    for i, seq in enumerate(l):\n        m.append([])\n        for token in seq:\n            if token == PAD_token:\n                m[i].append(0)\n            else:\n                m[i].append(1)\n    return m\n\n# 把输入句子变成ID，然后再padding，同时返回lengths这个list，标识实际长度。\n# 返回的padVar是一个LongTensor，shape是(batch, max_length)，\n# lengths是一个list，长度为(batch,)，表示每个句子的实际长度。\ndef inputVar(l, voc):\n    indexes_batch = [indexesFromSentence(voc, sentence) for sentence in l]\n    lengths = torch.tensor([len(indexes) for indexes in indexes_batch])\n    padList = zeroPadding(indexes_batch)\n    padVar = torch.LongTensor(padList)\n    return padVar, lengths\n\n# 对输出句子进行padding，然后用binaryMatrix得到每个位置是padding(0)还是非padding，\n# 同时返回最大最长句子的长度(也就是padding后的长度)\n# 返回值padVar是LongTensor，shape是(batch, max_target_length)\n# mask是ByteTensor，shape也是(batch, max_target_length)\ndef outputVar(l, voc):\n    indexes_batch = [indexesFromSentence(voc, sentence) for sentence in l]\n    max_target_len = max([len(indexes) for indexes in indexes_batch])\n    padList = zeroPadding(indexes_batch)\n    mask = binaryMatrix(padList)\n    mask = torch.ByteTensor(mask)\n    padVar = torch.LongTensor(padList)\n    return padVar, mask, max_target_len\n\n# 处理一个batch的pair句对\ndef batch2TrainData(voc, pair_batch):\n    # 按照句子的长度(词数)排序\n    pair_batch.sort(key=lambda x: len(x[0].split(\" \")), reverse=True)\n    input_batch, output_batch = [], []\n    for pair in pair_batch:\n        input_batch.append(pair[0])\n        output_batch.append(pair[1])\n    inp, lengths = inputVar(input_batch, voc)\n    output, mask, max_target_len = outputVar(output_batch, voc)\n    return inp, lengths, output, mask, max_target_len\n\n\n# 示例\nsmall_batch_size = 5\nbatches = batch2TrainData(voc, [random.choice(pairs) for _ in range(small_batch_size)])\ninput_variable, lengths, target_variable, mask, max_target_len = batches\n\nprint(\"input_variable:\", input_variable)\nprint(\"lengths:\", lengths)\nprint(\"target_variable:\", target_variable)\nprint(\"mask:\", mask)\nprint(\"max_target_len:\", max_target_len)\n\n\nclass EncoderRNN(nn.Module):\n    def __init__(self, hidden_size, embedding, n_layers=1, dropout=0):\n        super(EncoderRNN, self).__init__()\n        self.n_layers = n_layers\n        self.hidden_size = hidden_size\n        self.embedding = embedding\n\n        # 初始化GRU，这里输入和hidden大小都是hidden_size，这里假设embedding层的输出大小是hidden_size\n        # 如果只有一层，那么不进行Dropout，否则使用传入的参数dropout进行GRU的Dropout。\n        self.gru = nn.GRU(hidden_size, hidden_size, n_layers,\n                          dropout=(0 if n_layers == 1 else dropout), bidirectional=True)\n\n    def forward(self, input_seq, input_lengths, hidden=None):\n        # 输入是(max_length, batch)，Embedding之后变成(max_length, batch, hidden_size)\n        embedded = self.embedding(input_seq)\n        # Pack padded batch of sequences for RNN module\n        # 因为RNN(GRU)要知道实际长度，所以PyTorch提供了函数pack_padded_sequence把输入向量和长度\n        # pack到一个对象PackedSequence里，这样便于使用。\n        packed = torch.nn.utils.rnn.pack_padded_sequence(embedded, input_lengths)\n        # 通过GRU进行forward计算，需要传入输入和隐变量\n        # 如果传入的输入是一个Tensor (max_length, batch, hidden_size)\n        # 那么输出outputs是(max_length, batch, hidden_size*num_directions)。\n        # 第三维是hidden_size和num_directions的混合，它们实际排列顺序是num_directions在前面，\n        # 因此我们可以使用outputs.view(seq_len, batch, num_directions, hidden_size)得到4维的向量。\n        # 其中第三维是方向，第四位是隐状态。\n\n        # 而如果输入是PackedSequence对象，那么输出outputs也是一个PackedSequence对象，我们需要用\n        # 函数pad_packed_sequence把它变成shape为(max_length, batch, hidden*num_directions)的向量以及\n        # 一个list，表示输出的长度，当然这个list和输入的input_lengths完全一样，因此通常我们不需要它。\n        outputs, hidden = self.gru(packed, hidden)\n        # 参考前面的注释，我们得到outputs为(max_length, batch, hidden*num_directions)\n        outputs, _ = torch.nn.utils.rnn.pad_packed_sequence(outputs)\n        # 我们需要把输出的num_directions双向的向量加起来\n        # 因为outputs的第三维是先放前向的hidden_size个结果，然后再放后向的hidden_size个结果\n        # 所以outputs[:, :, :self.hidden_size]得到前向的结果\n        # outputs[:, :, self.hidden_size:]是后向的结果\n        # 注意，如果bidirectional是False，则outputs第三维的大小就是hidden_size，\n        # 这时outputs[:, : ,self.hidden_size:]是不存在的，因此也不会加上去。\n        # 对Python slicing不熟的读者可以看看下面的例子：\n\n        # >>> a=[1,2,3]\n        # >>> a[:3]\n        # [1, 2, 3]\n        # >>> a[3:]\n        # []\n        # >>> a[:3]+a[3:]\n        # [1, 2, 3]\n\n        # 这样就不用写下面的代码了：\n        # if bidirectional:\n        #     outputs = outputs[:, :, :self.hidden_size] + outputs[:, : ,self.hidden_size:]\n        outputs = outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]\n        # 返回最终的输出和最后时刻的隐状态。\n        return outputs, hidden\n\n\n# Luong 注意力layer\nclass Attn(torch.nn.Module):\n    def __init__(self, method, hidden_size):\n        super(Attn, self).__init__()\n        self.method = method\n        if self.method not in ['dot', 'general', 'concat']:\n            raise ValueError(self.method, \"is not an appropriate attention method.\")\n        self.hidden_size = hidden_size\n        if self.method == 'general':\n            self.attn = torch.nn.Linear(self.hidden_size, hidden_size)\n        elif self.method == 'concat':\n            self.attn = torch.nn.Linear(self.hidden_size * 2, hidden_size)\n            self.v = torch.nn.Parameter(torch.FloatTensor(hidden_size))\n\n    def dot_score(self, hidden, encoder_output):\n        # 输入hidden的shape是(1, batch=64, hidden_size=500)\n        # encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)\n        # hidden * encoder_output得到的shape是(10, 64, 500)，然后对第3维求和就可以计算出score。\n        return torch.sum(hidden * encoder_output, dim=2)\n\n    def general_score(self, hidden, encoder_output):\n        energy = self.attn(encoder_output)\n        return torch.sum(hidden * energy, dim=2)\n\n    def concat_score(self, hidden, encoder_output):\n        energy = self.attn(torch.cat((hidden.expand(encoder_output.size(0), -1, -1),\n                                      encoder_output), 2)).tanh()\n        return torch.sum(self.v * energy, dim=2)\n\n    # 输入是上一个时刻的隐状态hidden和所有时刻的Encoder的输出encoder_outputs\n    # 输出是注意力的概率，也就是长度为input_lengths的向量，它的和加起来是1。\n    def forward(self, hidden, encoder_outputs):\n        # 计算注意力的score，输入hidden的shape是(1, batch=64, hidden_size=500)，\n        # 表示t时刻batch数据的隐状态\n        # encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)\n        if self.method == 'general':\n            attn_energies = self.general_score(hidden, encoder_outputs)\n        elif self.method == 'concat':\n            attn_energies = self.concat_score(hidden, encoder_outputs)\n        elif self.method == 'dot':\n            # 计算内积，参考dot_score函数\n            attn_energies = self.dot_score(hidden, encoder_outputs)\n\n        # Transpose max_length and batch_size dimensions\n        # 把attn_energies从(max_length=10, batch=64)转置成(64, 10)\n        attn_energies = attn_energies.t()\n\n        # 使用softmax函数把score变成概率，shape仍然是(64, 10)，然后用unsqueeze(1)变成\n        # (64, 1, 10)\n        return F.softmax(attn_energies, dim=1).unsqueeze(1)\n\n\nclass LuongAttnDecoderRNN(nn.Module):\n    def __init__(self, attn_model, embedding, hidden_size, output_size, n_layers=1, dropout=0.1):\n        super(LuongAttnDecoderRNN, self).__init__()\n\n        # 保存到self里，attn_model就是前面定义的Attn类的对象。\n        self.attn_model = attn_model\n        self.hidden_size = hidden_size\n        self.output_size = output_size\n        self.n_layers = n_layers\n        self.dropout = dropout\n\n        # 定义Decoder的layers\n        self.embedding = embedding\n        self.embedding_dropout = nn.Dropout(dropout)\n        self.gru = nn.GRU(hidden_size, hidden_size, n_layers, dropout=(0 if n_layers == 1 else dropout))\n        self.concat = nn.Linear(hidden_size * 2, hidden_size)\n        self.out = nn.Linear(hidden_size, output_size)\n\n        self.attn = Attn(attn_model, hidden_size)\n\n    def forward(self, input_step, last_hidden, encoder_outputs):\n        # 注意：decoder每一步只能处理一个时刻的数据，因为t时刻计算完了才能计算t+1时刻。\n        # input_step的shape是(1, 64)，64是batch，1是当前输入的词ID(来自上一个时刻的输出)\n        # 通过embedding层变成(1, 64, 500)，然后进行dropout，shape不变。\n        embedded = self.embedding(input_step)\n        embedded = self.embedding_dropout(embedded)\n        # 把embedded传入GRU进行forward计算\n        # 得到rnn_output的shape是(1, 64, 500)\n        # hidden是(2, 64, 500)，因为是两层的GRU，所以第一维是2。\n        rnn_output, hidden = self.gru(embedded, last_hidden)\n        # 计算注意力权重， 根据前面的分析，attn_weights的shape是(64, 1, 10)\n        attn_weights = self.attn(rnn_output, encoder_outputs)\n\n        # encoder_outputs是(10, 64, 500)\n        # encoder_outputs.transpose(0, 1)后的shape是(64, 10, 500)\n        # attn_weights.bmm后是(64, 1, 500)\n\n        # bmm是批量的矩阵乘法，第一维是batch，我们可以把attn_weights看成64个(1,10)的矩阵\n        # 把encoder_outputs.transpose(0, 1)看成64个(10, 500)的矩阵\n        # 那么bmm就是64个(1, 10)矩阵 x (10, 500)矩阵，最终得到(64, 1, 500)\n        context = attn_weights.bmm(encoder_outputs.transpose(0, 1))\n        # 把context向量和GRU的输出拼接起来\n        # rnn_output从(1, 64, 500)变成(64, 500)\n        rnn_output = rnn_output.squeeze(0)\n        # context从(64, 1, 500)变成(64, 500)\n        context = context.squeeze(1)\n        # 拼接得到(64, 1000)\n        concat_input = torch.cat((rnn_output, context), 1)\n        # self.concat是一个矩阵(1000, 500)，\n        # self.concat(concat_input)的输出是(64, 500)\n        # 然后用tanh把输出返回变成(-1,1)，concat_output的shape是(64, 500)\n        concat_output = torch.tanh(self.concat(concat_input))\n\n        # out是(500, 词典大小=7826)\n        output = self.out(concat_output)\n        # 用softmax变成概率，表示当前时刻输出每个词的概率。\n        output = F.softmax(output, dim=1)\n        # 返回 output和新的隐状态\n        return output, hidden\n\n\ndef maskNLLLoss(inp, target, mask):\n    # 计算实际的词的个数，因为padding是0，非padding是1，因此sum就可以得到词的个数\n    nTotal = mask.sum()\n\n    crossEntropy = -torch.log(torch.gather(inp, 1, target.view(-1, 1)).squeeze(1))\n    loss = crossEntropy.masked_select(mask).mean()\n    loss = loss.to(device)\n    return loss, nTotal.item()\n\n\ndef train(input_variable, lengths, target_variable, mask, max_target_len, encoder, decoder, embedding,\n          encoder_optimizer, decoder_optimizer, batch_size, clip, max_length=MAX_LENGTH):\n\n    # 梯度清空\n    encoder_optimizer.zero_grad()\n    decoder_optimizer.zero_grad()\n\n    # 设置device，从而支持GPU，当然如果没有GPU也能工作。\n    input_variable = input_variable.to(device)\n    lengths = lengths.to(device)\n    target_variable = target_variable.to(device)\n    mask = mask.to(device)\n\n    # 初始化变量\n    loss = 0\n    print_losses = []\n    n_totals = 0\n\n    # encoder的Forward计算\n    encoder_outputs, encoder_hidden = encoder(input_variable, lengths)\n\n    # Decoder的初始输入是SOS，我们需要构造(1, batch)的输入，表示第一个时刻batch个输入。\n    decoder_input = torch.LongTensor([[SOS_token for _ in range(batch_size)]])\n    decoder_input = decoder_input.to(device)\n\n    # 注意：Encoder是双向的，而Decoder是单向的，因此从下往上取n_layers个\n    decoder_hidden = encoder_hidden[:decoder.n_layers]\n\n    # 确定是否teacher forcing\n    use_teacher_forcing = True if random.random() < teacher_forcing_ratio else False\n\n    # 一次处理一个时刻\n    if use_teacher_forcing:\n        for t in range(max_target_len):\n            decoder_output, decoder_hidden = decoder(\n                decoder_input, decoder_hidden, encoder_outputs\n            )\n            # Teacher forcing: 下一个时刻的输入是当前正确答案\n            decoder_input = target_variable[t].view(1, -1)\n            # 计算累计的loss\n            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])\n            loss += mask_loss\n            print_losses.append(mask_loss.item() * nTotal)\n            n_totals += nTotal\n    else:\n        for t in range(max_target_len):\n            decoder_output, decoder_hidden = decoder(\n                decoder_input, decoder_hidden, encoder_outputs\n            )\n            # 不是teacher forcing: 下一个时刻的输入是当前模型预测概率最高的值\n            _, topi = decoder_output.topk(1)\n            decoder_input = torch.LongTensor([[topi[i][0] for i in range(batch_size)]])\n            decoder_input = decoder_input.to(device)\n            # 计算累计的loss\n            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])\n            loss += mask_loss\n            print_losses.append(mask_loss.item() * nTotal)\n            n_totals += nTotal\n\n    # 反向计算\n    loss.backward()\n\n    # 对encoder和decoder进行梯度裁剪\n    _ = torch.nn.utils.clip_grad_norm_(encoder.parameters(), clip)\n    _ = torch.nn.utils.clip_grad_norm_(decoder.parameters(), clip)\n\n    # 更新参数\n    encoder_optimizer.step()\n    decoder_optimizer.step()\n\n    return sum(print_losses) / n_totals\n\n\ndef trainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,\n               embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,\n               print_every, save_every, clip, corpus_name, loadFilename):\n    # 随机选择n_iteration个batch的数据(pair)\n    training_batches = [batch2TrainData(voc, [random.choice(pairs) for _ in range(batch_size)])\n                        for _ in range(n_iteration)]\n\n    # 初始化\n    print('Initializing ...')\n    start_iteration = 1\n    print_loss = 0\n    if loadFilename:\n        start_iteration = checkpoint['iteration'] + 1\n\n    # 训练\n    print(\"Training...\")\n    for iteration in range(start_iteration, n_iteration + 1):\n        training_batch = training_batches[iteration - 1]\n\n        input_variable, lengths, target_variable, mask, max_target_len = training_batch\n\n        # 训练一个batch的数据\n        loss = train(input_variable, lengths, target_variable, mask, max_target_len, encoder,\n                     decoder, embedding, encoder_optimizer, decoder_optimizer, batch_size, clip)\n        print_loss += loss\n\n        # 进度\n        if iteration % print_every == 0:\n            print_loss_avg = print_loss / print_every\n            print(\"Iteration: {}; Percent complete: {:.1f}%; Average loss: {:.4f}\"\n                  .format(iteration, iteration / n_iteration * 100, print_loss_avg))\n            print_loss = 0\n\n        # 保存checkpoint\n        if (iteration % save_every == 0):\n            directory = os.path.join(save_dir, model_name, corpus_name, '{}-{}_{}'\n                                     .format(encoder_n_layers, decoder_n_layers, hidden_size))\n            if not os.path.exists(directory):\n                os.makedirs(directory)\n            torch.save({\n                'iteration': iteration,\n                'en': encoder.state_dict(),\n                'de': decoder.state_dict(),\n                'en_opt': encoder_optimizer.state_dict(),\n                'de_opt': decoder_optimizer.state_dict(),\n                'loss': loss,\n                'voc_dict': voc.__dict__,\n                'embedding': embedding.state_dict()\n            }, os.path.join(directory, '{}_{}.tar'.format(iteration, 'checkpoint')))\n\n\nclass GreedySearchDecoder(nn.Module):\n    def __init__(self, encoder, decoder):\n        super(GreedySearchDecoder, self).__init__()\n        self.encoder = encoder\n        self.decoder = decoder\n\n    def forward(self, input_seq, input_length, max_length):\n        # Encoder的Forward计算\n        encoder_outputs, encoder_hidden = self.encoder(input_seq, input_length)\n        # 把Encoder最后时刻的隐状态作为Decoder的初始值\n        decoder_hidden = encoder_hidden[:decoder.n_layers]\n        # 因为我们的函数都是要求(time,batch)，因此即使只有一个数据，也要做出二维的。\n        # Decoder的初始输入是SOS\n        decoder_input = torch.ones(1, 1, device=device, dtype=torch.long) * SOS_token\n        # 用于保存解码结果的tensor\n        all_tokens = torch.zeros([0], device=device, dtype=torch.long)\n        all_scores = torch.zeros([0], device=device)\n        # 循环，这里只使用长度限制，后面处理的时候把EOS去掉了。\n        for _ in range(max_length):\n            # Decoder forward一步\n            decoder_output, decoder_hidden = self.decoder(decoder_input, decoder_hidden,\n\t\t\t\t\t\t\t\tencoder_outputs)\n            # decoder_outputs是(batch=1, vob_size)\n            # 使用max返回概率最大的词和得分\n            decoder_scores, decoder_input = torch.max(decoder_output, dim=1)\n            # 把解码结果保存到all_tokens和all_scores里\n            all_tokens = torch.cat((all_tokens, decoder_input), dim=0)\n            all_scores = torch.cat((all_scores, decoder_scores), dim=0)\n            # decoder_input是当前时刻输出的词的ID，这是个一维的向量，因为max会减少一维。\n            # 但是decoder要求有一个batch维度，因此用unsqueeze增加batch维度。\n            decoder_input = torch.unsqueeze(decoder_input, 0)\n        # 返回所有的词和得分。\n        return all_tokens, all_scores\n\n\ndef evaluate(encoder, decoder, searcher, voc, sentence, max_length=MAX_LENGTH):\n    ### 把输入的一个batch句子变成id\n    indexes_batch = [indexesFromSentence(voc, sentence)]\n    # 创建lengths tensor\n    lengths = torch.tensor([len(indexes) for indexes in indexes_batch])\n    # 转置\n    input_batch = torch.LongTensor(indexes_batch).transpose(0, 1)\n    # 放到合适的设备上(比如GPU)\n    input_batch = input_batch.to(device)\n    lengths = lengths.to(device)\n    # 用searcher解码\n    tokens, scores = searcher(input_batch, lengths, max_length)\n    # ID变成词。\n    decoded_words = [voc.index2word[token.item()] for token in tokens]\n    return decoded_words\n\n\ndef evaluateInput(encoder, decoder, searcher, voc):\n    input_sentence = ''\n    while (1):\n        try:\n            # 得到用户终端的输入\n            input_sentence = input('> ')\n            # 是否退出\n            if input_sentence == 'q' or input_sentence == 'quit': break\n            # 句子归一化\n            input_sentence = normalizeString(input_sentence)\n            # 生成响应Evaluate sentence\n            output_words = evaluate(encoder, decoder, searcher, voc, input_sentence)\n            # 去掉EOS后面的内容\n            words = []\n            for word in output_words:\n                if word == 'EOS':\n                    break\n                elif word != 'PAD':\n                    words.append(word)\n            print('Bot:', ' '.join(words))\n\n        except KeyError:\n            print(\"Error: Encountered unknown word.\")\n\n\n# 配置模型\nmodel_name = 'cb_model'\nattn_model = 'dot'\n# attn_model = 'general'\n# attn_model = 'concat'\nhidden_size = 500\nencoder_n_layers = 2\ndecoder_n_layers = 2\ndropout = 0.1\nbatch_size = 64\n\n# 从哪个checkpoint恢复，如果是None，那么从头开始训练。\n# loadFilename = None\n\nloadFilename = \"./model_Seq2seq/cb_model/cornell movie-dialogs corpus/2-2_500/5000_checkpoint.tar\"\ncheckpoint_iter = 5000\n\n# 如果loadFilename不空，则从中加载模型\nif loadFilename:\n    # 如果训练和加载是一条机器，那么直接加载\n    checkpoint = torch.load(loadFilename)\n    # 否则比如checkpoint是在GPU上得到的，但是我们现在又用CPU来训练或者测试，那么注释掉下面的代码\n    # checkpoint = torch.load(loadFilename, map_location=torch.device('cpu'))\n    encoder_sd = checkpoint['en']\n    decoder_sd = checkpoint['de']\n    encoder_optimizer_sd = checkpoint['en_opt']\n    decoder_optimizer_sd = checkpoint['de_opt']\n    embedding_sd = checkpoint['embedding']\n    voc.__dict__ = checkpoint['voc_dict']\n\nprint('Building encoder and decoder ...')\n# 初始化word embedding\nembedding = nn.Embedding(voc.num_words, hidden_size)\nif loadFilename:\n    embedding.load_state_dict(embedding_sd)\n# 初始化encoder和decoder模型\nencoder = EncoderRNN(hidden_size, embedding, encoder_n_layers, dropout)\ndecoder = LuongAttnDecoderRNN(attn_model, embedding, hidden_size, voc.num_words,\n                              decoder_n_layers, dropout)\nif loadFilename:\n    encoder.load_state_dict(encoder_sd)\n    decoder.load_state_dict(decoder_sd)\n# 使用合适的设备\nencoder = encoder.to(device)\ndecoder = decoder.to(device)\nprint('Models built and ready to go!')\n\n\n# 配置训练的超参数和优化器\nclip = 50.0\nteacher_forcing_ratio = 1.0\nlearning_rate = 0.0001\ndecoder_learning_ratio = 5.0\nn_iteration = 5000\nprint_every = 1\nsave_every = 1000\nsave_dir = \"./model_Seq2seq_1\"\n\n\n# 设置进入训练模式，从而开启dropout\nencoder.train()\ndecoder.train()\n\n# 初始化优化器\nprint('Building optimizers ...')\nencoder_optimizer = optim.Adam(encoder.parameters(), lr=learning_rate)\ndecoder_optimizer = optim.Adam(decoder.parameters(), lr=learning_rate * decoder_learning_ratio)\nif loadFilename:\n    encoder_optimizer.load_state_dict(encoder_optimizer_sd)\n    decoder_optimizer.load_state_dict(decoder_optimizer_sd)\n\n# 开始训练\nprint(\"Starting Training!\")\ntrainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,\n           embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,\n           print_every, save_every, clip, corpus_name, loadFilename)\n\nend_time = time.time()\nprint(\"time: %.1fs\" % (end_time - start_time))\n\n\n# 进入eval模式，从而去掉dropout。\nencoder.eval()\ndecoder.eval()\n\n# 构造searcher对象\nsearcher = GreedySearchDecoder(encoder, decoder)\n\n# 测试\nevaluateInput(encoder, decoder, searcher, voc)\n\n```\n\n","slug":"基于Pytorch框架的深度学习语言对话模型","published":1,"updated":"2024-06-20T12:56:50.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvo9000xhwtv3qif4jkv","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.脚本为本人总结，如有使用注明出处。</li>\n<li>2.Pytorch基于Python编程语言编写脚本。</li>\n</ul>\n<hr>\n<h2 id=\"运行过程：\">运行过程：</h2>\n<p><img src=\"/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/1.png\" alt></p>\n<p><img src=\"/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/2.png\" alt></p>\n<p><img src=\"/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/3.png\" alt></p>\n<h2 id=\"对话截图：\">对话截图：</h2>\n<p><img src=\"/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/4.png\" alt></p>\n<h2 id=\"Seq2Seq模型源码：\">Seq2Seq模型源码：</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> division</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn.functional <span class=\"keyword\">as</span> F</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unicodedata</span><br><span class=\"line\"><span class=\"keyword\">import</span> codecs</span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> <span class=\"built_in\">open</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">USE_CUDA = torch.cuda.is_available()</span><br><span class=\"line\">device = <span class=\"string\">&#x27;cpu&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\">corpus_name = <span class=\"string\">&quot;cornell movie-dialogs corpus&quot;</span></span><br><span class=\"line\">corpus = os.path.join(<span class=\"string\">&quot;./&quot;</span>, corpus_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">printLines</span>(<span class=\"params\">file, n=<span class=\"number\">10</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> datafile:</span><br><span class=\"line\">        lines = datafile.readlines()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines[:n]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\"></span><br><span class=\"line\">printLines(os.path.join(corpus, <span class=\"string\">&quot;movie_lines.txt&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把每一行都parse成一个dict，key是lineID、characterID、movieID、character和text</span></span><br><span class=\"line\"><span class=\"comment\"># 分别代表这一行的ID、人物ID、电影ID，人物名称和文本。</span></span><br><span class=\"line\"><span class=\"comment\"># 最终输出一个dict，key是lineID，value是一个dict。</span></span><br><span class=\"line\"><span class=\"comment\"># value这个dict的key是lineID、characterID、movieID、character和text</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">loadLines</span>(<span class=\"params\">fileName, fields</span>):</span><br><span class=\"line\">    lines = &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(corpus, <span class=\"string\">&quot;movie_lines.txt&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;iso-8859-1&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            values = line.split(<span class=\"string\">&quot; +++$+++ &quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 抽取fields</span></span><br><span class=\"line\">            lineObj = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i, field <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(fields):</span><br><span class=\"line\">                lineObj[field] = values[i]</span><br><span class=\"line\">            lines[lineObj[<span class=\"string\">&#x27;lineID&#x27;</span>]] = lineObj</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lines</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据movie_conversations.txt文件和上输出的lines，把utterance组成对话。</span></span><br><span class=\"line\"><span class=\"comment\"># 最终输出一个list，这个list的每一个元素都是一个dict，</span></span><br><span class=\"line\"><span class=\"comment\"># key分别是character1ID、character2ID、movieID和utteranceIDs。</span></span><br><span class=\"line\"><span class=\"comment\"># 分别表示这对话的第一个人物的ID，第二个的ID，电影的ID以及它包含的utteranceIDs</span></span><br><span class=\"line\"><span class=\"comment\"># 最后根据lines，还给每一行的dict增加一个key为lines，其value是个list，</span></span><br><span class=\"line\"><span class=\"comment\"># 包含所有utterance(上面得到的lines的value)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">loadConversations</span>(<span class=\"params\">fileName, lines, fields</span>):</span><br><span class=\"line\">    conversations = []</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;iso-8859-1&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            values = line.split(<span class=\"string\">&quot; +++$+++ &quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 抽取fields</span></span><br><span class=\"line\">            convObj = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i, field <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(fields):</span><br><span class=\"line\">                convObj[field] = values[i]</span><br><span class=\"line\">            <span class=\"comment\"># convObj[&quot;utteranceIDs&quot;]是一个字符串，形如[&#x27;L198&#x27;, &#x27;L199&#x27;]</span></span><br><span class=\"line\">            <span class=\"comment\"># 我们用eval把这个字符串变成一个字符串的list。</span></span><br><span class=\"line\">            lineIds = <span class=\"built_in\">eval</span>(convObj[<span class=\"string\">&quot;utteranceIDs&quot;</span>])</span><br><span class=\"line\">            <span class=\"comment\"># 根据lineIds构造一个数组，根据lineId去lines里检索出存储utterance对象。</span></span><br><span class=\"line\">            convObj[<span class=\"string\">&quot;lines&quot;</span>] = []</span><br><span class=\"line\">            <span class=\"keyword\">for</span> lineId <span class=\"keyword\">in</span> lineIds:</span><br><span class=\"line\">                convObj[<span class=\"string\">&quot;lines&quot;</span>].append(lines[lineId])</span><br><span class=\"line\">            conversations.append(convObj)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> conversations</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从对话中抽取句对</span></span><br><span class=\"line\"><span class=\"comment\"># 假设一段对话包含s1,s2,s3,s4这4个utterance</span></span><br><span class=\"line\"><span class=\"comment\"># 那么会返回3个句对：s1-s2,s2-s3和s3-s4。</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">extractSentencePairs</span>(<span class=\"params\">conversations</span>):</span><br><span class=\"line\">    qa_pairs = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> conversation <span class=\"keyword\">in</span> conversations:</span><br><span class=\"line\">        <span class=\"comment\"># 遍历对话中的每一个句子，忽略最后一个句子，因为没有答案。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(conversation[<span class=\"string\">&quot;lines&quot;</span>]) - <span class=\"number\">1</span>):</span><br><span class=\"line\">            inputLine = conversation[<span class=\"string\">&quot;lines&quot;</span>][i][<span class=\"string\">&quot;text&quot;</span>].strip()</span><br><span class=\"line\">            targetLine = conversation[<span class=\"string\">&quot;lines&quot;</span>][i+<span class=\"number\">1</span>][<span class=\"string\">&quot;text&quot;</span>].strip()</span><br><span class=\"line\">            <span class=\"comment\"># 如果有空的句子就去掉</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> inputLine <span class=\"keyword\">and</span> targetLine:</span><br><span class=\"line\">                qa_pairs.append([inputLine, targetLine])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> qa_pairs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义新的文件</span></span><br><span class=\"line\">datafile = os.path.join(corpus, <span class=\"string\">&quot;formatted_movie_lines.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">delimiter = <span class=\"string\">&#x27;\\t&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 对分隔符delimiter进行decode，这里对tab进行decode结果并没有变</span></span><br><span class=\"line\">delimiter = <span class=\"built_in\">str</span>(codecs.decode(delimiter, <span class=\"string\">&quot;unicode_escape&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化dict lines，list conversations以及前面我们介绍过的field的id数组。</span></span><br><span class=\"line\">lines = &#123;&#125;</span><br><span class=\"line\">conversations = []</span><br><span class=\"line\">MOVIE_LINES_FIELDS = [<span class=\"string\">&quot;lineID&quot;</span>, <span class=\"string\">&quot;characterID&quot;</span>, <span class=\"string\">&quot;movieID&quot;</span>, <span class=\"string\">&quot;character&quot;</span>, <span class=\"string\">&quot;text&quot;</span>]</span><br><span class=\"line\">MOVIE_CONVERSATIONS_FIELDS = [<span class=\"string\">&quot;character1ID&quot;</span>, <span class=\"string\">&quot;character2ID&quot;</span>, <span class=\"string\">&quot;movieID&quot;</span>, <span class=\"string\">&quot;utteranceIDs&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首先使用loadLines函数处理movie_lines.txt</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nProcessing corpus...&quot;</span>)</span><br><span class=\"line\">lines = loadLines(os.path.join(corpus, <span class=\"string\">&quot;movie_lines.txt&quot;</span>), MOVIE_LINES_FIELDS)</span><br><span class=\"line\"><span class=\"comment\"># 接着使用loadConversations处理上一步的结果，得到conversations</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nLoading conversations...&quot;</span>)</span><br><span class=\"line\">conversations = loadConversations(os.path.join(corpus, <span class=\"string\">&quot;movie_conversations.txt&quot;</span>),</span><br><span class=\"line\">                                  lines, MOVIE_CONVERSATIONS_FIELDS)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出到一个新的csv文件</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nWriting newly formatted file...&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(datafile, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> outputfile:</span><br><span class=\"line\">    writer = csv.writer(outputfile, delimiter=delimiter, lineterminator=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 使用extractSentencePairs从conversations里抽取句对。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> extractSentencePairs(conversations):</span><br><span class=\"line\">        writer.writerow(pair)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出一些行用于检查</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nSample lines from file:&quot;</span>)</span><br><span class=\"line\">printLines(datafile)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预定义的token</span></span><br><span class=\"line\">PAD_token = <span class=\"number\">0</span>  <span class=\"comment\"># 表示padding</span></span><br><span class=\"line\">SOS_token = <span class=\"number\">1</span>  <span class=\"comment\"># 句子的开始</span></span><br><span class=\"line\">EOS_token = <span class=\"number\">2</span>  <span class=\"comment\"># 句子的结束</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Voc</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.trimmed = <span class=\"literal\">False</span></span><br><span class=\"line\">        self.word2index = &#123;&#125;</span><br><span class=\"line\">        self.word2count = &#123;&#125;</span><br><span class=\"line\">        self.index2word = &#123;PAD_token: <span class=\"string\">&quot;PAD&quot;</span>, SOS_token: <span class=\"string\">&quot;SOS&quot;</span>, EOS_token: <span class=\"string\">&quot;EOS&quot;</span>&#125;</span><br><span class=\"line\">        self.num_words = <span class=\"number\">3</span>  <span class=\"comment\"># 目前有SOS, EOS, PAD这3个token。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addSentence</span>(<span class=\"params\">self, sentence</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> sentence.split(<span class=\"string\">&#x27; &#x27;</span>):</span><br><span class=\"line\">            self.addWord(word)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addWord</span>(<span class=\"params\">self, word</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.word2index:</span><br><span class=\"line\">            self.word2index[word] = self.num_words</span><br><span class=\"line\">            self.word2count[word] = <span class=\"number\">1</span></span><br><span class=\"line\">            self.index2word[self.num_words] = word</span><br><span class=\"line\">            self.num_words += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.word2count[word] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 删除频次小于min_count的token</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">trim</span>(<span class=\"params\">self, min_count</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.trimmed:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        self.trimmed = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">        keep_words = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> self.word2count.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v &gt;= min_count:</span><br><span class=\"line\">                keep_words.append(k)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;keep_words &#123;&#125; / &#123;&#125; = &#123;:.4f&#125;&#x27;</span>.<span class=\"built_in\">format</span>(</span><br><span class=\"line\">            <span class=\"built_in\">len</span>(keep_words), <span class=\"built_in\">len</span>(self.word2index), <span class=\"built_in\">len</span>(keep_words) / <span class=\"built_in\">len</span>(self.word2index)</span><br><span class=\"line\">        ))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 重新构造词典</span></span><br><span class=\"line\">        self.word2index = &#123;&#125;</span><br><span class=\"line\">        self.word2count = &#123;&#125;</span><br><span class=\"line\">        self.index2word = &#123;PAD_token: <span class=\"string\">&quot;PAD&quot;</span>, SOS_token: <span class=\"string\">&quot;SOS&quot;</span>, EOS_token: <span class=\"string\">&quot;EOS&quot;</span>&#125;</span><br><span class=\"line\">        self.num_words = <span class=\"number\">3</span>  <span class=\"comment\"># Count default tokens</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 重新构造后词频就没有意义了(都是1)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> keep_words:</span><br><span class=\"line\">            self.addWord(word)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MAX_LENGTH = <span class=\"number\">10</span>  <span class=\"comment\"># 句子最大长度是10个词(包括EOS等特殊词)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把Unicode字符串变成ASCII</span></span><br><span class=\"line\"><span class=\"comment\"># 参考https://stackoverflow.com/a/518232/2809427</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">unicodeToAscii</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>.join(</span><br><span class=\"line\">        c <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> unicodedata.normalize(<span class=\"string\">&#x27;NFD&#x27;</span>, s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> unicodedata.category(c) != <span class=\"string\">&#x27;Mn&#x27;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">normalizeString</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 变成小写、去掉前后空格，然后unicode变成ascii</span></span><br><span class=\"line\">    s = unicodeToAscii(s.lower().strip())</span><br><span class=\"line\">    <span class=\"comment\"># 在标点前增加空格，这样把标点当成一个词</span></span><br><span class=\"line\">    s = re.sub(<span class=\"string\">r&quot;([.!?])&quot;</span>, <span class=\"string\">r&quot; \\1&quot;</span>, s)</span><br><span class=\"line\">    <span class=\"comment\"># 字母和标点之外的字符都变成空格</span></span><br><span class=\"line\">    s = re.sub(<span class=\"string\">r&quot;[^a-zA-Z.!?]+&quot;</span>, <span class=\"string\">r&quot; &quot;</span>, s)</span><br><span class=\"line\">    <span class=\"comment\"># 因为把不用的字符都变成空格，所以可能存在多个连续空格</span></span><br><span class=\"line\">    <span class=\"comment\"># 下面的正则替换把多个空格变成一个空格，最后去掉前后空格</span></span><br><span class=\"line\">    s = re.sub(<span class=\"string\">r&quot;\\s+&quot;</span>, <span class=\"string\">r&quot; &quot;</span>, s).strip()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取问答句对并且返回Voc词典对象</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">readVocs</span>(<span class=\"params\">datafile, corpus_name</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Reading lines...&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 文件每行读取到list lines中。</span></span><br><span class=\"line\">    lines = <span class=\"built_in\">open</span>(datafile, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>). \\</span><br><span class=\"line\">        read().strip().split(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 每行用tab切分成问答两个句子，然后调用normalizeString函数进行处理。</span></span><br><span class=\"line\">    pairs = [[normalizeString(s) <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> l.split(<span class=\"string\">&#x27;\\t&#x27;</span>)] <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> lines]</span><br><span class=\"line\">    voc = Voc(corpus_name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> voc, pairs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filterPair</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(p[<span class=\"number\">0</span>].split(<span class=\"string\">&#x27; &#x27;</span>)) &lt; MAX_LENGTH <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(p[<span class=\"number\">1</span>].split(<span class=\"string\">&#x27; &#x27;</span>)) &lt; MAX_LENGTH</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 过滤太长的句对</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filterPairs</span>(<span class=\"params\">pairs</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pair <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> pairs <span class=\"keyword\">if</span> filterPair(pair)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用上面的函数进行处理，返回Voc对象和句对的list</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">loadPrepareData</span>(<span class=\"params\">corpus, corpus_name, datafile</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Start preparing training data ...&quot;</span>)</span><br><span class=\"line\">    voc, pairs = readVocs(datafile, corpus_name)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Read &#123;!s&#125; sentence pairs&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">len</span>(pairs)))</span><br><span class=\"line\">    pairs = filterPairs(pairs)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Trimmed to &#123;!s&#125; sentence pairs&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">len</span>(pairs)))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Counting words...&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> pairs:</span><br><span class=\"line\">        voc.addSentence(pair[<span class=\"number\">0</span>])</span><br><span class=\"line\">        voc.addSentence(pair[<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Counted words:&quot;</span>, voc.num_words)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> voc, pairs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Load/Assemble voc and pairs</span></span><br><span class=\"line\"><span class=\"comment\"># save_dir = os.path.join(&quot;data&quot;, &quot;save&quot;)</span></span><br><span class=\"line\">voc, pairs = loadPrepareData(corpus, corpus_name, datafile)</span><br><span class=\"line\"><span class=\"comment\"># 输出一些句对</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\npairs:&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> pairs[:<span class=\"number\">10</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(pair)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MIN_COUNT = <span class=\"number\">3</span>    <span class=\"comment\"># 阈值为3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">trimRareWords</span>(<span class=\"params\">voc, pairs, MIN_COUNT</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 去掉voc中频次小于3的词</span></span><br><span class=\"line\">    voc.trim(MIN_COUNT)</span><br><span class=\"line\">    <span class=\"comment\"># 保留的句对</span></span><br><span class=\"line\">    keep_pairs = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> pairs:</span><br><span class=\"line\">        input_sentence = pair[<span class=\"number\">0</span>]</span><br><span class=\"line\">        output_sentence = pair[<span class=\"number\">1</span>]</span><br><span class=\"line\">        keep_input = <span class=\"literal\">True</span></span><br><span class=\"line\">        keep_output = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"comment\"># 检查问题</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> input_sentence.split(<span class=\"string\">&#x27; &#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> voc.word2index:</span><br><span class=\"line\">                keep_input = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"comment\"># 检查答案</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> output_sentence.split(<span class=\"string\">&#x27; &#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> voc.word2index:</span><br><span class=\"line\">                keep_output = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果问题和答案都只包含高频词，我们才保留这个句对</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> keep_input <span class=\"keyword\">and</span> keep_output:</span><br><span class=\"line\">            keep_pairs.append(pair)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Trimmed from &#123;&#125; pairs to &#123;&#125;, &#123;:.4f&#125; of total&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">len</span>(pairs),</span><br><span class=\"line\">\t\t<span class=\"built_in\">len</span>(keep_pairs), <span class=\"built_in\">len</span>(keep_pairs) / <span class=\"built_in\">len</span>(pairs)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> keep_pairs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际进行处理</span></span><br><span class=\"line\">pairs = trimRareWords(voc, pairs, MIN_COUNT)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把句子的词变成ID</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">indexesFromSentence</span>(<span class=\"params\">voc, sentence</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [voc.word2index[word] <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> sentence.split(<span class=\"string\">&#x27; &#x27;</span>)] + [EOS_token]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># l是多个长度不同句子(list)，使用zip_longest padding成定长，长度为最长句子的长度。</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">zeroPadding</span>(<span class=\"params\">l, fillvalue=PAD_token</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>(itertools.zip_longest(*l, fillvalue=fillvalue))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># l是二维的padding后的list</span></span><br><span class=\"line\"><span class=\"comment\"># 返回m和l的大小一样，如果某个位置是padding，那么值为0，否则为1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">binaryMatrix</span>(<span class=\"params\">l, value=PAD_token</span>):</span><br><span class=\"line\">    m = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, seq <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(l):</span><br><span class=\"line\">        m.append([])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> seq:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> token == PAD_token:</span><br><span class=\"line\">                m[i].append(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                m[i].append(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把输入句子变成ID，然后再padding，同时返回lengths这个list，标识实际长度。</span></span><br><span class=\"line\"><span class=\"comment\"># 返回的padVar是一个LongTensor，shape是(batch, max_length)，</span></span><br><span class=\"line\"><span class=\"comment\"># lengths是一个list，长度为(batch,)，表示每个句子的实际长度。</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inputVar</span>(<span class=\"params\">l, voc</span>):</span><br><span class=\"line\">    indexes_batch = [indexesFromSentence(voc, sentence) <span class=\"keyword\">for</span> sentence <span class=\"keyword\">in</span> l]</span><br><span class=\"line\">    lengths = torch.tensor([<span class=\"built_in\">len</span>(indexes) <span class=\"keyword\">for</span> indexes <span class=\"keyword\">in</span> indexes_batch])</span><br><span class=\"line\">    padList = zeroPadding(indexes_batch)</span><br><span class=\"line\">    padVar = torch.LongTensor(padList)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> padVar, lengths</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对输出句子进行padding，然后用binaryMatrix得到每个位置是padding(0)还是非padding，</span></span><br><span class=\"line\"><span class=\"comment\"># 同时返回最大最长句子的长度(也就是padding后的长度)</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值padVar是LongTensor，shape是(batch, max_target_length)</span></span><br><span class=\"line\"><span class=\"comment\"># mask是ByteTensor，shape也是(batch, max_target_length)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outputVar</span>(<span class=\"params\">l, voc</span>):</span><br><span class=\"line\">    indexes_batch = [indexesFromSentence(voc, sentence) <span class=\"keyword\">for</span> sentence <span class=\"keyword\">in</span> l]</span><br><span class=\"line\">    max_target_len = <span class=\"built_in\">max</span>([<span class=\"built_in\">len</span>(indexes) <span class=\"keyword\">for</span> indexes <span class=\"keyword\">in</span> indexes_batch])</span><br><span class=\"line\">    padList = zeroPadding(indexes_batch)</span><br><span class=\"line\">    mask = binaryMatrix(padList)</span><br><span class=\"line\">    mask = torch.ByteTensor(mask)</span><br><span class=\"line\">    padVar = torch.LongTensor(padList)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> padVar, mask, max_target_len</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 处理一个batch的pair句对</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">batch2TrainData</span>(<span class=\"params\">voc, pair_batch</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 按照句子的长度(词数)排序</span></span><br><span class=\"line\">    pair_batch.sort(key=<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(x[<span class=\"number\">0</span>].split(<span class=\"string\">&quot; &quot;</span>)), reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    input_batch, output_batch = [], []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> pair_batch:</span><br><span class=\"line\">        input_batch.append(pair[<span class=\"number\">0</span>])</span><br><span class=\"line\">        output_batch.append(pair[<span class=\"number\">1</span>])</span><br><span class=\"line\">    inp, lengths = inputVar(input_batch, voc)</span><br><span class=\"line\">    output, mask, max_target_len = outputVar(output_batch, voc)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inp, lengths, output, mask, max_target_len</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">small_batch_size = <span class=\"number\">5</span></span><br><span class=\"line\">batches = batch2TrainData(voc, [random.choice(pairs) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(small_batch_size)])</span><br><span class=\"line\">input_variable, lengths, target_variable, mask, max_target_len = batches</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;input_variable:&quot;</span>, input_variable)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;lengths:&quot;</span>, lengths)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_variable:&quot;</span>, target_variable)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;mask:&quot;</span>, mask)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;max_target_len:&quot;</span>, max_target_len)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EncoderRNN</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, hidden_size, embedding, n_layers=<span class=\"number\">1</span>, dropout=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(EncoderRNN, self).__init__()</span><br><span class=\"line\">        self.n_layers = n_layers</span><br><span class=\"line\">        self.hidden_size = hidden_size</span><br><span class=\"line\">        self.embedding = embedding</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化GRU，这里输入和hidden大小都是hidden_size，这里假设embedding层的输出大小是hidden_size</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果只有一层，那么不进行Dropout，否则使用传入的参数dropout进行GRU的Dropout。</span></span><br><span class=\"line\">        self.gru = nn.GRU(hidden_size, hidden_size, n_layers,</span><br><span class=\"line\">                          dropout=(<span class=\"number\">0</span> <span class=\"keyword\">if</span> n_layers == <span class=\"number\">1</span> <span class=\"keyword\">else</span> dropout), bidirectional=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, input_seq, input_lengths, hidden=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 输入是(max_length, batch)，Embedding之后变成(max_length, batch, hidden_size)</span></span><br><span class=\"line\">        embedded = self.embedding(input_seq)</span><br><span class=\"line\">        <span class=\"comment\"># Pack padded batch of sequences for RNN module</span></span><br><span class=\"line\">        <span class=\"comment\"># 因为RNN(GRU)要知道实际长度，所以PyTorch提供了函数pack_padded_sequence把输入向量和长度</span></span><br><span class=\"line\">        <span class=\"comment\"># pack到一个对象PackedSequence里，这样便于使用。</span></span><br><span class=\"line\">        packed = torch.nn.utils.rnn.pack_padded_sequence(embedded, input_lengths)</span><br><span class=\"line\">        <span class=\"comment\"># 通过GRU进行forward计算，需要传入输入和隐变量</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果传入的输入是一个Tensor (max_length, batch, hidden_size)</span></span><br><span class=\"line\">        <span class=\"comment\"># 那么输出outputs是(max_length, batch, hidden_size*num_directions)。</span></span><br><span class=\"line\">        <span class=\"comment\"># 第三维是hidden_size和num_directions的混合，它们实际排列顺序是num_directions在前面，</span></span><br><span class=\"line\">        <span class=\"comment\"># 因此我们可以使用outputs.view(seq_len, batch, num_directions, hidden_size)得到4维的向量。</span></span><br><span class=\"line\">        <span class=\"comment\"># 其中第三维是方向，第四位是隐状态。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 而如果输入是PackedSequence对象，那么输出outputs也是一个PackedSequence对象，我们需要用</span></span><br><span class=\"line\">        <span class=\"comment\"># 函数pad_packed_sequence把它变成shape为(max_length, batch, hidden*num_directions)的向量以及</span></span><br><span class=\"line\">        <span class=\"comment\"># 一个list，表示输出的长度，当然这个list和输入的input_lengths完全一样，因此通常我们不需要它。</span></span><br><span class=\"line\">        outputs, hidden = self.gru(packed, hidden)</span><br><span class=\"line\">        <span class=\"comment\"># 参考前面的注释，我们得到outputs为(max_length, batch, hidden*num_directions)</span></span><br><span class=\"line\">        outputs, _ = torch.nn.utils.rnn.pad_packed_sequence(outputs)</span><br><span class=\"line\">        <span class=\"comment\"># 我们需要把输出的num_directions双向的向量加起来</span></span><br><span class=\"line\">        <span class=\"comment\"># 因为outputs的第三维是先放前向的hidden_size个结果，然后再放后向的hidden_size个结果</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以outputs[:, :, :self.hidden_size]得到前向的结果</span></span><br><span class=\"line\">        <span class=\"comment\"># outputs[:, :, self.hidden_size:]是后向的结果</span></span><br><span class=\"line\">        <span class=\"comment\"># 注意，如果bidirectional是False，则outputs第三维的大小就是hidden_size，</span></span><br><span class=\"line\">        <span class=\"comment\"># 这时outputs[:, : ,self.hidden_size:]是不存在的，因此也不会加上去。</span></span><br><span class=\"line\">        <span class=\"comment\"># 对Python slicing不熟的读者可以看看下面的例子：</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># &gt;&gt;&gt; a=[1,2,3]</span></span><br><span class=\"line\">        <span class=\"comment\"># &gt;&gt;&gt; a[:3]</span></span><br><span class=\"line\">        <span class=\"comment\"># [1, 2, 3]</span></span><br><span class=\"line\">        <span class=\"comment\"># &gt;&gt;&gt; a[3:]</span></span><br><span class=\"line\">        <span class=\"comment\"># []</span></span><br><span class=\"line\">        <span class=\"comment\"># &gt;&gt;&gt; a[:3]+a[3:]</span></span><br><span class=\"line\">        <span class=\"comment\"># [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 这样就不用写下面的代码了：</span></span><br><span class=\"line\">        <span class=\"comment\"># if bidirectional:</span></span><br><span class=\"line\">        <span class=\"comment\">#     outputs = outputs[:, :, :self.hidden_size] + outputs[:, : ,self.hidden_size:]</span></span><br><span class=\"line\">        outputs = outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]</span><br><span class=\"line\">        <span class=\"comment\"># 返回最终的输出和最后时刻的隐状态。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> outputs, hidden</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Luong 注意力layer</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Attn</span>(torch.nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, method, hidden_size</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Attn, self).__init__()</span><br><span class=\"line\">        self.method = method</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.method <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;dot&#x27;</span>, <span class=\"string\">&#x27;general&#x27;</span>, <span class=\"string\">&#x27;concat&#x27;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(self.method, <span class=\"string\">&quot;is not an appropriate attention method.&quot;</span>)</span><br><span class=\"line\">        self.hidden_size = hidden_size</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.method == <span class=\"string\">&#x27;general&#x27;</span>:</span><br><span class=\"line\">            self.attn = torch.nn.Linear(self.hidden_size, hidden_size)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.method == <span class=\"string\">&#x27;concat&#x27;</span>:</span><br><span class=\"line\">            self.attn = torch.nn.Linear(self.hidden_size * <span class=\"number\">2</span>, hidden_size)</span><br><span class=\"line\">            self.v = torch.nn.Parameter(torch.FloatTensor(hidden_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">dot_score</span>(<span class=\"params\">self, hidden, encoder_output</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 输入hidden的shape是(1, batch=64, hidden_size=500)</span></span><br><span class=\"line\">        <span class=\"comment\"># encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)</span></span><br><span class=\"line\">        <span class=\"comment\"># hidden * encoder_output得到的shape是(10, 64, 500)，然后对第3维求和就可以计算出score。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> torch.<span class=\"built_in\">sum</span>(hidden * encoder_output, dim=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">general_score</span>(<span class=\"params\">self, hidden, encoder_output</span>):</span><br><span class=\"line\">        energy = self.attn(encoder_output)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> torch.<span class=\"built_in\">sum</span>(hidden * energy, dim=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">concat_score</span>(<span class=\"params\">self, hidden, encoder_output</span>):</span><br><span class=\"line\">        energy = self.attn(torch.cat((hidden.expand(encoder_output.size(<span class=\"number\">0</span>), -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),</span><br><span class=\"line\">                                      encoder_output), <span class=\"number\">2</span>)).tanh()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> torch.<span class=\"built_in\">sum</span>(self.v * energy, dim=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 输入是上一个时刻的隐状态hidden和所有时刻的Encoder的输出encoder_outputs</span></span><br><span class=\"line\">    <span class=\"comment\"># 输出是注意力的概率，也就是长度为input_lengths的向量，它的和加起来是1。</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, hidden, encoder_outputs</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 计算注意力的score，输入hidden的shape是(1, batch=64, hidden_size=500)，</span></span><br><span class=\"line\">        <span class=\"comment\"># 表示t时刻batch数据的隐状态</span></span><br><span class=\"line\">        <span class=\"comment\"># encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.method == <span class=\"string\">&#x27;general&#x27;</span>:</span><br><span class=\"line\">            attn_energies = self.general_score(hidden, encoder_outputs)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.method == <span class=\"string\">&#x27;concat&#x27;</span>:</span><br><span class=\"line\">            attn_energies = self.concat_score(hidden, encoder_outputs)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.method == <span class=\"string\">&#x27;dot&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 计算内积，参考dot_score函数</span></span><br><span class=\"line\">            attn_energies = self.dot_score(hidden, encoder_outputs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Transpose max_length and batch_size dimensions</span></span><br><span class=\"line\">        <span class=\"comment\"># 把attn_energies从(max_length=10, batch=64)转置成(64, 10)</span></span><br><span class=\"line\">        attn_energies = attn_energies.t()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 使用softmax函数把score变成概率，shape仍然是(64, 10)，然后用unsqueeze(1)变成</span></span><br><span class=\"line\">        <span class=\"comment\"># (64, 1, 10)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> F.softmax(attn_energies, dim=<span class=\"number\">1</span>).unsqueeze(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LuongAttnDecoderRNN</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, attn_model, embedding, hidden_size, output_size, n_layers=<span class=\"number\">1</span>, dropout=<span class=\"number\">0.1</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(LuongAttnDecoderRNN, self).__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 保存到self里，attn_model就是前面定义的Attn类的对象。</span></span><br><span class=\"line\">        self.attn_model = attn_model</span><br><span class=\"line\">        self.hidden_size = hidden_size</span><br><span class=\"line\">        self.output_size = output_size</span><br><span class=\"line\">        self.n_layers = n_layers</span><br><span class=\"line\">        self.dropout = dropout</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 定义Decoder的layers</span></span><br><span class=\"line\">        self.embedding = embedding</span><br><span class=\"line\">        self.embedding_dropout = nn.Dropout(dropout)</span><br><span class=\"line\">        self.gru = nn.GRU(hidden_size, hidden_size, n_layers, dropout=(<span class=\"number\">0</span> <span class=\"keyword\">if</span> n_layers == <span class=\"number\">1</span> <span class=\"keyword\">else</span> dropout))</span><br><span class=\"line\">        self.concat = nn.Linear(hidden_size * <span class=\"number\">2</span>, hidden_size)</span><br><span class=\"line\">        self.out = nn.Linear(hidden_size, output_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.attn = Attn(attn_model, hidden_size)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, input_step, last_hidden, encoder_outputs</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 注意：decoder每一步只能处理一个时刻的数据，因为t时刻计算完了才能计算t+1时刻。</span></span><br><span class=\"line\">        <span class=\"comment\"># input_step的shape是(1, 64)，64是batch，1是当前输入的词ID(来自上一个时刻的输出)</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过embedding层变成(1, 64, 500)，然后进行dropout，shape不变。</span></span><br><span class=\"line\">        embedded = self.embedding(input_step)</span><br><span class=\"line\">        embedded = self.embedding_dropout(embedded)</span><br><span class=\"line\">        <span class=\"comment\"># 把embedded传入GRU进行forward计算</span></span><br><span class=\"line\">        <span class=\"comment\"># 得到rnn_output的shape是(1, 64, 500)</span></span><br><span class=\"line\">        <span class=\"comment\"># hidden是(2, 64, 500)，因为是两层的GRU，所以第一维是2。</span></span><br><span class=\"line\">        rnn_output, hidden = self.gru(embedded, last_hidden)</span><br><span class=\"line\">        <span class=\"comment\"># 计算注意力权重， 根据前面的分析，attn_weights的shape是(64, 1, 10)</span></span><br><span class=\"line\">        attn_weights = self.attn(rnn_output, encoder_outputs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># encoder_outputs是(10, 64, 500)</span></span><br><span class=\"line\">        <span class=\"comment\"># encoder_outputs.transpose(0, 1)后的shape是(64, 10, 500)</span></span><br><span class=\"line\">        <span class=\"comment\"># attn_weights.bmm后是(64, 1, 500)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># bmm是批量的矩阵乘法，第一维是batch，我们可以把attn_weights看成64个(1,10)的矩阵</span></span><br><span class=\"line\">        <span class=\"comment\"># 把encoder_outputs.transpose(0, 1)看成64个(10, 500)的矩阵</span></span><br><span class=\"line\">        <span class=\"comment\"># 那么bmm就是64个(1, 10)矩阵 x (10, 500)矩阵，最终得到(64, 1, 500)</span></span><br><span class=\"line\">        context = attn_weights.bmm(encoder_outputs.transpose(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"comment\"># 把context向量和GRU的输出拼接起来</span></span><br><span class=\"line\">        <span class=\"comment\"># rnn_output从(1, 64, 500)变成(64, 500)</span></span><br><span class=\"line\">        rnn_output = rnn_output.squeeze(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\"># context从(64, 1, 500)变成(64, 500)</span></span><br><span class=\"line\">        context = context.squeeze(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 拼接得到(64, 1000)</span></span><br><span class=\"line\">        concat_input = torch.cat((rnn_output, context), <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># self.concat是一个矩阵(1000, 500)，</span></span><br><span class=\"line\">        <span class=\"comment\"># self.concat(concat_input)的输出是(64, 500)</span></span><br><span class=\"line\">        <span class=\"comment\"># 然后用tanh把输出返回变成(-1,1)，concat_output的shape是(64, 500)</span></span><br><span class=\"line\">        concat_output = torch.tanh(self.concat(concat_input))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># out是(500, 词典大小=7826)</span></span><br><span class=\"line\">        output = self.out(concat_output)</span><br><span class=\"line\">        <span class=\"comment\"># 用softmax变成概率，表示当前时刻输出每个词的概率。</span></span><br><span class=\"line\">        output = F.softmax(output, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 返回 output和新的隐状态</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output, hidden</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">maskNLLLoss</span>(<span class=\"params\">inp, target, mask</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 计算实际的词的个数，因为padding是0，非padding是1，因此sum就可以得到词的个数</span></span><br><span class=\"line\">    nTotal = mask.<span class=\"built_in\">sum</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    crossEntropy = -torch.log(torch.gather(inp, <span class=\"number\">1</span>, target.view(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)).squeeze(<span class=\"number\">1</span>))</span><br><span class=\"line\">    loss = crossEntropy.masked_select(mask).mean()</span><br><span class=\"line\">    loss = loss.to(device)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> loss, nTotal.item()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>(<span class=\"params\">input_variable, lengths, target_variable, mask, max_target_len, encoder, decoder, embedding,</span></span><br><span class=\"line\"><span class=\"params\">          encoder_optimizer, decoder_optimizer, batch_size, clip, max_length=MAX_LENGTH</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 梯度清空</span></span><br><span class=\"line\">    encoder_optimizer.zero_grad()</span><br><span class=\"line\">    decoder_optimizer.zero_grad()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 设置device，从而支持GPU，当然如果没有GPU也能工作。</span></span><br><span class=\"line\">    input_variable = input_variable.to(device)</span><br><span class=\"line\">    lengths = lengths.to(device)</span><br><span class=\"line\">    target_variable = target_variable.to(device)</span><br><span class=\"line\">    mask = mask.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化变量</span></span><br><span class=\"line\">    loss = <span class=\"number\">0</span></span><br><span class=\"line\">    print_losses = []</span><br><span class=\"line\">    n_totals = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># encoder的Forward计算</span></span><br><span class=\"line\">    encoder_outputs, encoder_hidden = encoder(input_variable, lengths)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Decoder的初始输入是SOS，我们需要构造(1, batch)的输入，表示第一个时刻batch个输入。</span></span><br><span class=\"line\">    decoder_input = torch.LongTensor([[SOS_token <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(batch_size)]])</span><br><span class=\"line\">    decoder_input = decoder_input.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 注意：Encoder是双向的，而Decoder是单向的，因此从下往上取n_layers个</span></span><br><span class=\"line\">    decoder_hidden = encoder_hidden[:decoder.n_layers]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 确定是否teacher forcing</span></span><br><span class=\"line\">    use_teacher_forcing = <span class=\"literal\">True</span> <span class=\"keyword\">if</span> random.random() &lt; teacher_forcing_ratio <span class=\"keyword\">else</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 一次处理一个时刻</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> use_teacher_forcing:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_target_len):</span><br><span class=\"line\">            decoder_output, decoder_hidden = decoder(</span><br><span class=\"line\">                decoder_input, decoder_hidden, encoder_outputs</span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"comment\"># Teacher forcing: 下一个时刻的输入是当前正确答案</span></span><br><span class=\"line\">            decoder_input = target_variable[t].view(<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 计算累计的loss</span></span><br><span class=\"line\">            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])</span><br><span class=\"line\">            loss += mask_loss</span><br><span class=\"line\">            print_losses.append(mask_loss.item() * nTotal)</span><br><span class=\"line\">            n_totals += nTotal</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_target_len):</span><br><span class=\"line\">            decoder_output, decoder_hidden = decoder(</span><br><span class=\"line\">                decoder_input, decoder_hidden, encoder_outputs</span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"comment\"># 不是teacher forcing: 下一个时刻的输入是当前模型预测概率最高的值</span></span><br><span class=\"line\">            _, topi = decoder_output.topk(<span class=\"number\">1</span>)</span><br><span class=\"line\">            decoder_input = torch.LongTensor([[topi[i][<span class=\"number\">0</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(batch_size)]])</span><br><span class=\"line\">            decoder_input = decoder_input.to(device)</span><br><span class=\"line\">            <span class=\"comment\"># 计算累计的loss</span></span><br><span class=\"line\">            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])</span><br><span class=\"line\">            loss += mask_loss</span><br><span class=\"line\">            print_losses.append(mask_loss.item() * nTotal)</span><br><span class=\"line\">            n_totals += nTotal</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 反向计算</span></span><br><span class=\"line\">    loss.backward()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 对encoder和decoder进行梯度裁剪</span></span><br><span class=\"line\">    _ = torch.nn.utils.clip_grad_norm_(encoder.parameters(), clip)</span><br><span class=\"line\">    _ = torch.nn.utils.clip_grad_norm_(decoder.parameters(), clip)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 更新参数</span></span><br><span class=\"line\">    encoder_optimizer.step()</span><br><span class=\"line\">    decoder_optimizer.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(print_losses) / n_totals</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">trainIters</span>(<span class=\"params\">model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,</span></span><br><span class=\"line\"><span class=\"params\">               embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,</span></span><br><span class=\"line\"><span class=\"params\">               print_every, save_every, clip, corpus_name, loadFilename</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 随机选择n_iteration个batch的数据(pair)</span></span><br><span class=\"line\">    training_batches = [batch2TrainData(voc, [random.choice(pairs) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(batch_size)])</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n_iteration)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Initializing ...&#x27;</span>)</span><br><span class=\"line\">    start_iteration = <span class=\"number\">1</span></span><br><span class=\"line\">    print_loss = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> loadFilename:</span><br><span class=\"line\">        start_iteration = checkpoint[<span class=\"string\">&#x27;iteration&#x27;</span>] + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 训练</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Training...&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> iteration <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start_iteration, n_iteration + <span class=\"number\">1</span>):</span><br><span class=\"line\">        training_batch = training_batches[iteration - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        input_variable, lengths, target_variable, mask, max_target_len = training_batch</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练一个batch的数据</span></span><br><span class=\"line\">        loss = train(input_variable, lengths, target_variable, mask, max_target_len, encoder,</span><br><span class=\"line\">                     decoder, embedding, encoder_optimizer, decoder_optimizer, batch_size, clip)</span><br><span class=\"line\">        print_loss += loss</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 进度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> iteration % print_every == <span class=\"number\">0</span>:</span><br><span class=\"line\">            print_loss_avg = print_loss / print_every</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Iteration: &#123;&#125;; Percent complete: &#123;:.1f&#125;%; Average loss: &#123;:.4f&#125;&quot;</span></span><br><span class=\"line\">                  .<span class=\"built_in\">format</span>(iteration, iteration / n_iteration * <span class=\"number\">100</span>, print_loss_avg))</span><br><span class=\"line\">            print_loss = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 保存checkpoint</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iteration % save_every == <span class=\"number\">0</span>):</span><br><span class=\"line\">            directory = os.path.join(save_dir, model_name, corpus_name, <span class=\"string\">&#x27;&#123;&#125;-&#123;&#125;_&#123;&#125;&#x27;</span></span><br><span class=\"line\">                                     .<span class=\"built_in\">format</span>(encoder_n_layers, decoder_n_layers, hidden_size))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(directory):</span><br><span class=\"line\">                os.makedirs(directory)</span><br><span class=\"line\">            torch.save(&#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;iteration&#x27;</span>: iteration,</span><br><span class=\"line\">                <span class=\"string\">&#x27;en&#x27;</span>: encoder.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;de&#x27;</span>: decoder.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;en_opt&#x27;</span>: encoder_optimizer.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;de_opt&#x27;</span>: decoder_optimizer.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;loss&#x27;</span>: loss,</span><br><span class=\"line\">                <span class=\"string\">&#x27;voc_dict&#x27;</span>: voc.__dict__,</span><br><span class=\"line\">                <span class=\"string\">&#x27;embedding&#x27;</span>: embedding.state_dict()</span><br><span class=\"line\">            &#125;, os.path.join(directory, <span class=\"string\">&#x27;&#123;&#125;_&#123;&#125;.tar&#x27;</span>.<span class=\"built_in\">format</span>(iteration, <span class=\"string\">&#x27;checkpoint&#x27;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GreedySearchDecoder</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, encoder, decoder</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(GreedySearchDecoder, self).__init__()</span><br><span class=\"line\">        self.encoder = encoder</span><br><span class=\"line\">        self.decoder = decoder</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, input_seq, input_length, max_length</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Encoder的Forward计算</span></span><br><span class=\"line\">        encoder_outputs, encoder_hidden = self.encoder(input_seq, input_length)</span><br><span class=\"line\">        <span class=\"comment\"># 把Encoder最后时刻的隐状态作为Decoder的初始值</span></span><br><span class=\"line\">        decoder_hidden = encoder_hidden[:decoder.n_layers]</span><br><span class=\"line\">        <span class=\"comment\"># 因为我们的函数都是要求(time,batch)，因此即使只有一个数据，也要做出二维的。</span></span><br><span class=\"line\">        <span class=\"comment\"># Decoder的初始输入是SOS</span></span><br><span class=\"line\">        decoder_input = torch.ones(<span class=\"number\">1</span>, <span class=\"number\">1</span>, device=device, dtype=torch.long) * SOS_token</span><br><span class=\"line\">        <span class=\"comment\"># 用于保存解码结果的tensor</span></span><br><span class=\"line\">        all_tokens = torch.zeros([<span class=\"number\">0</span>], device=device, dtype=torch.long)</span><br><span class=\"line\">        all_scores = torch.zeros([<span class=\"number\">0</span>], device=device)</span><br><span class=\"line\">        <span class=\"comment\"># 循环，这里只使用长度限制，后面处理的时候把EOS去掉了。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_length):</span><br><span class=\"line\">            <span class=\"comment\"># Decoder forward一步</span></span><br><span class=\"line\">            decoder_output, decoder_hidden = self.decoder(decoder_input, decoder_hidden,</span><br><span class=\"line\">\t\t\t\t\t\t\t\tencoder_outputs)</span><br><span class=\"line\">            <span class=\"comment\"># decoder_outputs是(batch=1, vob_size)</span></span><br><span class=\"line\">            <span class=\"comment\"># 使用max返回概率最大的词和得分</span></span><br><span class=\"line\">            decoder_scores, decoder_input = torch.<span class=\"built_in\">max</span>(decoder_output, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 把解码结果保存到all_tokens和all_scores里</span></span><br><span class=\"line\">            all_tokens = torch.cat((all_tokens, decoder_input), dim=<span class=\"number\">0</span>)</span><br><span class=\"line\">            all_scores = torch.cat((all_scores, decoder_scores), dim=<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\"># decoder_input是当前时刻输出的词的ID，这是个一维的向量，因为max会减少一维。</span></span><br><span class=\"line\">            <span class=\"comment\"># 但是decoder要求有一个batch维度，因此用unsqueeze增加batch维度。</span></span><br><span class=\"line\">            decoder_input = torch.unsqueeze(decoder_input, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 返回所有的词和得分。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> all_tokens, all_scores</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">evaluate</span>(<span class=\"params\">encoder, decoder, searcher, voc, sentence, max_length=MAX_LENGTH</span>):</span><br><span class=\"line\">    <span class=\"comment\">### 把输入的一个batch句子变成id</span></span><br><span class=\"line\">    indexes_batch = [indexesFromSentence(voc, sentence)]</span><br><span class=\"line\">    <span class=\"comment\"># 创建lengths tensor</span></span><br><span class=\"line\">    lengths = torch.tensor([<span class=\"built_in\">len</span>(indexes) <span class=\"keyword\">for</span> indexes <span class=\"keyword\">in</span> indexes_batch])</span><br><span class=\"line\">    <span class=\"comment\"># 转置</span></span><br><span class=\"line\">    input_batch = torch.LongTensor(indexes_batch).transpose(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 放到合适的设备上(比如GPU)</span></span><br><span class=\"line\">    input_batch = input_batch.to(device)</span><br><span class=\"line\">    lengths = lengths.to(device)</span><br><span class=\"line\">    <span class=\"comment\"># 用searcher解码</span></span><br><span class=\"line\">    tokens, scores = searcher(input_batch, lengths, max_length)</span><br><span class=\"line\">    <span class=\"comment\"># ID变成词。</span></span><br><span class=\"line\">    decoded_words = [voc.index2word[token.item()] <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> tokens]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decoded_words</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">evaluateInput</span>(<span class=\"params\">encoder, decoder, searcher, voc</span>):</span><br><span class=\"line\">    input_sentence = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 得到用户终端的输入</span></span><br><span class=\"line\">            input_sentence = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 是否退出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> input_sentence == <span class=\"string\">&#x27;q&#x27;</span> <span class=\"keyword\">or</span> input_sentence == <span class=\"string\">&#x27;quit&#x27;</span>: <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\"># 句子归一化</span></span><br><span class=\"line\">            input_sentence = normalizeString(input_sentence)</span><br><span class=\"line\">            <span class=\"comment\"># 生成响应Evaluate sentence</span></span><br><span class=\"line\">            output_words = evaluate(encoder, decoder, searcher, voc, input_sentence)</span><br><span class=\"line\">            <span class=\"comment\"># 去掉EOS后面的内容</span></span><br><span class=\"line\">            words = []</span><br><span class=\"line\">            <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> output_words:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> word == <span class=\"string\">&#x27;EOS&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> word != <span class=\"string\">&#x27;PAD&#x27;</span>:</span><br><span class=\"line\">                    words.append(word)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Bot:&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>.join(words))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: Encountered unknown word.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置模型</span></span><br><span class=\"line\">model_name = <span class=\"string\">&#x27;cb_model&#x27;</span></span><br><span class=\"line\">attn_model = <span class=\"string\">&#x27;dot&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># attn_model = &#x27;general&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># attn_model = &#x27;concat&#x27;</span></span><br><span class=\"line\">hidden_size = <span class=\"number\">500</span></span><br><span class=\"line\">encoder_n_layers = <span class=\"number\">2</span></span><br><span class=\"line\">decoder_n_layers = <span class=\"number\">2</span></span><br><span class=\"line\">dropout = <span class=\"number\">0.1</span></span><br><span class=\"line\">batch_size = <span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从哪个checkpoint恢复，如果是None，那么从头开始训练。</span></span><br><span class=\"line\"><span class=\"comment\"># loadFilename = None</span></span><br><span class=\"line\"></span><br><span class=\"line\">loadFilename = <span class=\"string\">&quot;./model_Seq2seq/cb_model/cornell movie-dialogs corpus/2-2_500/5000_checkpoint.tar&quot;</span></span><br><span class=\"line\">checkpoint_iter = <span class=\"number\">5000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果loadFilename不空，则从中加载模型</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> loadFilename:</span><br><span class=\"line\">    <span class=\"comment\"># 如果训练和加载是一条机器，那么直接加载</span></span><br><span class=\"line\">    checkpoint = torch.load(loadFilename)</span><br><span class=\"line\">    <span class=\"comment\"># 否则比如checkpoint是在GPU上得到的，但是我们现在又用CPU来训练或者测试，那么注释掉下面的代码</span></span><br><span class=\"line\">    <span class=\"comment\"># checkpoint = torch.load(loadFilename, map_location=torch.device(&#x27;cpu&#x27;))</span></span><br><span class=\"line\">    encoder_sd = checkpoint[<span class=\"string\">&#x27;en&#x27;</span>]</span><br><span class=\"line\">    decoder_sd = checkpoint[<span class=\"string\">&#x27;de&#x27;</span>]</span><br><span class=\"line\">    encoder_optimizer_sd = checkpoint[<span class=\"string\">&#x27;en_opt&#x27;</span>]</span><br><span class=\"line\">    decoder_optimizer_sd = checkpoint[<span class=\"string\">&#x27;de_opt&#x27;</span>]</span><br><span class=\"line\">    embedding_sd = checkpoint[<span class=\"string\">&#x27;embedding&#x27;</span>]</span><br><span class=\"line\">    voc.__dict__ = checkpoint[<span class=\"string\">&#x27;voc_dict&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Building encoder and decoder ...&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 初始化word embedding</span></span><br><span class=\"line\">embedding = nn.Embedding(voc.num_words, hidden_size)</span><br><span class=\"line\"><span class=\"keyword\">if</span> loadFilename:</span><br><span class=\"line\">    embedding.load_state_dict(embedding_sd)</span><br><span class=\"line\"><span class=\"comment\"># 初始化encoder和decoder模型</span></span><br><span class=\"line\">encoder = EncoderRNN(hidden_size, embedding, encoder_n_layers, dropout)</span><br><span class=\"line\">decoder = LuongAttnDecoderRNN(attn_model, embedding, hidden_size, voc.num_words,</span><br><span class=\"line\">                              decoder_n_layers, dropout)</span><br><span class=\"line\"><span class=\"keyword\">if</span> loadFilename:</span><br><span class=\"line\">    encoder.load_state_dict(encoder_sd)</span><br><span class=\"line\">    decoder.load_state_dict(decoder_sd)</span><br><span class=\"line\"><span class=\"comment\"># 使用合适的设备</span></span><br><span class=\"line\">encoder = encoder.to(device)</span><br><span class=\"line\">decoder = decoder.to(device)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Models built and ready to go!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置训练的超参数和优化器</span></span><br><span class=\"line\">clip = <span class=\"number\">50.0</span></span><br><span class=\"line\">teacher_forcing_ratio = <span class=\"number\">1.0</span></span><br><span class=\"line\">learning_rate = <span class=\"number\">0.0001</span></span><br><span class=\"line\">decoder_learning_ratio = <span class=\"number\">5.0</span></span><br><span class=\"line\">n_iteration = <span class=\"number\">5000</span></span><br><span class=\"line\">print_every = <span class=\"number\">1</span></span><br><span class=\"line\">save_every = <span class=\"number\">1000</span></span><br><span class=\"line\">save_dir = <span class=\"string\">&quot;./model_Seq2seq_1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置进入训练模式，从而开启dropout</span></span><br><span class=\"line\">encoder.train()</span><br><span class=\"line\">decoder.train()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化优化器</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Building optimizers ...&#x27;</span>)</span><br><span class=\"line\">encoder_optimizer = optim.Adam(encoder.parameters(), lr=learning_rate)</span><br><span class=\"line\">decoder_optimizer = optim.Adam(decoder.parameters(), lr=learning_rate * decoder_learning_ratio)</span><br><span class=\"line\"><span class=\"keyword\">if</span> loadFilename:</span><br><span class=\"line\">    encoder_optimizer.load_state_dict(encoder_optimizer_sd)</span><br><span class=\"line\">    decoder_optimizer.load_state_dict(decoder_optimizer_sd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始训练</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Starting Training!&quot;</span>)</span><br><span class=\"line\">trainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,</span><br><span class=\"line\">           embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,</span><br><span class=\"line\">           print_every, save_every, clip, corpus_name, loadFilename)</span><br><span class=\"line\"></span><br><span class=\"line\">end_time = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入eval模式，从而去掉dropout。</span></span><br><span class=\"line\">encoder.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">decoder.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构造searcher对象</span></span><br><span class=\"line\">searcher = GreedySearchDecoder(encoder, decoder)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\">evaluateInput(encoder, decoder, searcher, voc)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.脚本为本人总结，如有使用注明出处。</li>\n<li>2.Pytorch基于Python编程语言编写脚本。</li>\n</ul>\n<hr>\n<h2 id=\"运行过程：\">运行过程：</h2>\n<p><img src=\"/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/1.png\" alt></p>\n<p><img src=\"/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/2.png\" alt></p>\n<p><img src=\"/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/3.png\" alt></p>\n<h2 id=\"对话截图：\">对话截图：</h2>\n<p><img src=\"/2023/03/16/%E5%9F%BA%E4%BA%8EPytorch%E6%A1%86%E6%9E%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%9E%8B/4.png\" alt></p>\n<h2 id=\"Seq2Seq模型源码：\">Seq2Seq模型源码：</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> division</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn.functional <span class=\"keyword\">as</span> F</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unicodedata</span><br><span class=\"line\"><span class=\"keyword\">import</span> codecs</span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> <span class=\"built_in\">open</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">USE_CUDA = torch.cuda.is_available()</span><br><span class=\"line\">device = <span class=\"string\">&#x27;cpu&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\">corpus_name = <span class=\"string\">&quot;cornell movie-dialogs corpus&quot;</span></span><br><span class=\"line\">corpus = os.path.join(<span class=\"string\">&quot;./&quot;</span>, corpus_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">printLines</span>(<span class=\"params\">file, n=<span class=\"number\">10</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> datafile:</span><br><span class=\"line\">        lines = datafile.readlines()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines[:n]:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\"></span><br><span class=\"line\">printLines(os.path.join(corpus, <span class=\"string\">&quot;movie_lines.txt&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把每一行都parse成一个dict，key是lineID、characterID、movieID、character和text</span></span><br><span class=\"line\"><span class=\"comment\"># 分别代表这一行的ID、人物ID、电影ID，人物名称和文本。</span></span><br><span class=\"line\"><span class=\"comment\"># 最终输出一个dict，key是lineID，value是一个dict。</span></span><br><span class=\"line\"><span class=\"comment\"># value这个dict的key是lineID、characterID、movieID、character和text</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">loadLines</span>(<span class=\"params\">fileName, fields</span>):</span><br><span class=\"line\">    lines = &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.join(corpus, <span class=\"string\">&quot;movie_lines.txt&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;iso-8859-1&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            values = line.split(<span class=\"string\">&quot; +++$+++ &quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 抽取fields</span></span><br><span class=\"line\">            lineObj = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i, field <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(fields):</span><br><span class=\"line\">                lineObj[field] = values[i]</span><br><span class=\"line\">            lines[lineObj[<span class=\"string\">&#x27;lineID&#x27;</span>]] = lineObj</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lines</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据movie_conversations.txt文件和上输出的lines，把utterance组成对话。</span></span><br><span class=\"line\"><span class=\"comment\"># 最终输出一个list，这个list的每一个元素都是一个dict，</span></span><br><span class=\"line\"><span class=\"comment\"># key分别是character1ID、character2ID、movieID和utteranceIDs。</span></span><br><span class=\"line\"><span class=\"comment\"># 分别表示这对话的第一个人物的ID，第二个的ID，电影的ID以及它包含的utteranceIDs</span></span><br><span class=\"line\"><span class=\"comment\"># 最后根据lines，还给每一行的dict增加一个key为lines，其value是个list，</span></span><br><span class=\"line\"><span class=\"comment\"># 包含所有utterance(上面得到的lines的value)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">loadConversations</span>(<span class=\"params\">fileName, lines, fields</span>):</span><br><span class=\"line\">    conversations = []</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;iso-8859-1&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            values = line.split(<span class=\"string\">&quot; +++$+++ &quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 抽取fields</span></span><br><span class=\"line\">            convObj = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i, field <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(fields):</span><br><span class=\"line\">                convObj[field] = values[i]</span><br><span class=\"line\">            <span class=\"comment\"># convObj[&quot;utteranceIDs&quot;]是一个字符串，形如[&#x27;L198&#x27;, &#x27;L199&#x27;]</span></span><br><span class=\"line\">            <span class=\"comment\"># 我们用eval把这个字符串变成一个字符串的list。</span></span><br><span class=\"line\">            lineIds = <span class=\"built_in\">eval</span>(convObj[<span class=\"string\">&quot;utteranceIDs&quot;</span>])</span><br><span class=\"line\">            <span class=\"comment\"># 根据lineIds构造一个数组，根据lineId去lines里检索出存储utterance对象。</span></span><br><span class=\"line\">            convObj[<span class=\"string\">&quot;lines&quot;</span>] = []</span><br><span class=\"line\">            <span class=\"keyword\">for</span> lineId <span class=\"keyword\">in</span> lineIds:</span><br><span class=\"line\">                convObj[<span class=\"string\">&quot;lines&quot;</span>].append(lines[lineId])</span><br><span class=\"line\">            conversations.append(convObj)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> conversations</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从对话中抽取句对</span></span><br><span class=\"line\"><span class=\"comment\"># 假设一段对话包含s1,s2,s3,s4这4个utterance</span></span><br><span class=\"line\"><span class=\"comment\"># 那么会返回3个句对：s1-s2,s2-s3和s3-s4。</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">extractSentencePairs</span>(<span class=\"params\">conversations</span>):</span><br><span class=\"line\">    qa_pairs = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> conversation <span class=\"keyword\">in</span> conversations:</span><br><span class=\"line\">        <span class=\"comment\"># 遍历对话中的每一个句子，忽略最后一个句子，因为没有答案。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(conversation[<span class=\"string\">&quot;lines&quot;</span>]) - <span class=\"number\">1</span>):</span><br><span class=\"line\">            inputLine = conversation[<span class=\"string\">&quot;lines&quot;</span>][i][<span class=\"string\">&quot;text&quot;</span>].strip()</span><br><span class=\"line\">            targetLine = conversation[<span class=\"string\">&quot;lines&quot;</span>][i+<span class=\"number\">1</span>][<span class=\"string\">&quot;text&quot;</span>].strip()</span><br><span class=\"line\">            <span class=\"comment\"># 如果有空的句子就去掉</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> inputLine <span class=\"keyword\">and</span> targetLine:</span><br><span class=\"line\">                qa_pairs.append([inputLine, targetLine])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> qa_pairs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义新的文件</span></span><br><span class=\"line\">datafile = os.path.join(corpus, <span class=\"string\">&quot;formatted_movie_lines.txt&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">delimiter = <span class=\"string\">&#x27;\\t&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 对分隔符delimiter进行decode，这里对tab进行decode结果并没有变</span></span><br><span class=\"line\">delimiter = <span class=\"built_in\">str</span>(codecs.decode(delimiter, <span class=\"string\">&quot;unicode_escape&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化dict lines，list conversations以及前面我们介绍过的field的id数组。</span></span><br><span class=\"line\">lines = &#123;&#125;</span><br><span class=\"line\">conversations = []</span><br><span class=\"line\">MOVIE_LINES_FIELDS = [<span class=\"string\">&quot;lineID&quot;</span>, <span class=\"string\">&quot;characterID&quot;</span>, <span class=\"string\">&quot;movieID&quot;</span>, <span class=\"string\">&quot;character&quot;</span>, <span class=\"string\">&quot;text&quot;</span>]</span><br><span class=\"line\">MOVIE_CONVERSATIONS_FIELDS = [<span class=\"string\">&quot;character1ID&quot;</span>, <span class=\"string\">&quot;character2ID&quot;</span>, <span class=\"string\">&quot;movieID&quot;</span>, <span class=\"string\">&quot;utteranceIDs&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首先使用loadLines函数处理movie_lines.txt</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nProcessing corpus...&quot;</span>)</span><br><span class=\"line\">lines = loadLines(os.path.join(corpus, <span class=\"string\">&quot;movie_lines.txt&quot;</span>), MOVIE_LINES_FIELDS)</span><br><span class=\"line\"><span class=\"comment\"># 接着使用loadConversations处理上一步的结果，得到conversations</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nLoading conversations...&quot;</span>)</span><br><span class=\"line\">conversations = loadConversations(os.path.join(corpus, <span class=\"string\">&quot;movie_conversations.txt&quot;</span>),</span><br><span class=\"line\">                                  lines, MOVIE_CONVERSATIONS_FIELDS)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出到一个新的csv文件</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nWriting newly formatted file...&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(datafile, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> outputfile:</span><br><span class=\"line\">    writer = csv.writer(outputfile, delimiter=delimiter, lineterminator=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 使用extractSentencePairs从conversations里抽取句对。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> extractSentencePairs(conversations):</span><br><span class=\"line\">        writer.writerow(pair)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出一些行用于检查</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nSample lines from file:&quot;</span>)</span><br><span class=\"line\">printLines(datafile)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预定义的token</span></span><br><span class=\"line\">PAD_token = <span class=\"number\">0</span>  <span class=\"comment\"># 表示padding</span></span><br><span class=\"line\">SOS_token = <span class=\"number\">1</span>  <span class=\"comment\"># 句子的开始</span></span><br><span class=\"line\">EOS_token = <span class=\"number\">2</span>  <span class=\"comment\"># 句子的结束</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Voc</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.trimmed = <span class=\"literal\">False</span></span><br><span class=\"line\">        self.word2index = &#123;&#125;</span><br><span class=\"line\">        self.word2count = &#123;&#125;</span><br><span class=\"line\">        self.index2word = &#123;PAD_token: <span class=\"string\">&quot;PAD&quot;</span>, SOS_token: <span class=\"string\">&quot;SOS&quot;</span>, EOS_token: <span class=\"string\">&quot;EOS&quot;</span>&#125;</span><br><span class=\"line\">        self.num_words = <span class=\"number\">3</span>  <span class=\"comment\"># 目前有SOS, EOS, PAD这3个token。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addSentence</span>(<span class=\"params\">self, sentence</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> sentence.split(<span class=\"string\">&#x27; &#x27;</span>):</span><br><span class=\"line\">            self.addWord(word)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">addWord</span>(<span class=\"params\">self, word</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.word2index:</span><br><span class=\"line\">            self.word2index[word] = self.num_words</span><br><span class=\"line\">            self.word2count[word] = <span class=\"number\">1</span></span><br><span class=\"line\">            self.index2word[self.num_words] = word</span><br><span class=\"line\">            self.num_words += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.word2count[word] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 删除频次小于min_count的token</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">trim</span>(<span class=\"params\">self, min_count</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.trimmed:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        self.trimmed = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">        keep_words = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> self.word2count.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v &gt;= min_count:</span><br><span class=\"line\">                keep_words.append(k)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;keep_words &#123;&#125; / &#123;&#125; = &#123;:.4f&#125;&#x27;</span>.<span class=\"built_in\">format</span>(</span><br><span class=\"line\">            <span class=\"built_in\">len</span>(keep_words), <span class=\"built_in\">len</span>(self.word2index), <span class=\"built_in\">len</span>(keep_words) / <span class=\"built_in\">len</span>(self.word2index)</span><br><span class=\"line\">        ))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 重新构造词典</span></span><br><span class=\"line\">        self.word2index = &#123;&#125;</span><br><span class=\"line\">        self.word2count = &#123;&#125;</span><br><span class=\"line\">        self.index2word = &#123;PAD_token: <span class=\"string\">&quot;PAD&quot;</span>, SOS_token: <span class=\"string\">&quot;SOS&quot;</span>, EOS_token: <span class=\"string\">&quot;EOS&quot;</span>&#125;</span><br><span class=\"line\">        self.num_words = <span class=\"number\">3</span>  <span class=\"comment\"># Count default tokens</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 重新构造后词频就没有意义了(都是1)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> keep_words:</span><br><span class=\"line\">            self.addWord(word)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MAX_LENGTH = <span class=\"number\">10</span>  <span class=\"comment\"># 句子最大长度是10个词(包括EOS等特殊词)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把Unicode字符串变成ASCII</span></span><br><span class=\"line\"><span class=\"comment\"># 参考https://stackoverflow.com/a/518232/2809427</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">unicodeToAscii</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>.join(</span><br><span class=\"line\">        c <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> unicodedata.normalize(<span class=\"string\">&#x27;NFD&#x27;</span>, s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> unicodedata.category(c) != <span class=\"string\">&#x27;Mn&#x27;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">normalizeString</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 变成小写、去掉前后空格，然后unicode变成ascii</span></span><br><span class=\"line\">    s = unicodeToAscii(s.lower().strip())</span><br><span class=\"line\">    <span class=\"comment\"># 在标点前增加空格，这样把标点当成一个词</span></span><br><span class=\"line\">    s = re.sub(<span class=\"string\">r&quot;([.!?])&quot;</span>, <span class=\"string\">r&quot; \\1&quot;</span>, s)</span><br><span class=\"line\">    <span class=\"comment\"># 字母和标点之外的字符都变成空格</span></span><br><span class=\"line\">    s = re.sub(<span class=\"string\">r&quot;[^a-zA-Z.!?]+&quot;</span>, <span class=\"string\">r&quot; &quot;</span>, s)</span><br><span class=\"line\">    <span class=\"comment\"># 因为把不用的字符都变成空格，所以可能存在多个连续空格</span></span><br><span class=\"line\">    <span class=\"comment\"># 下面的正则替换把多个空格变成一个空格，最后去掉前后空格</span></span><br><span class=\"line\">    s = re.sub(<span class=\"string\">r&quot;\\s+&quot;</span>, <span class=\"string\">r&quot; &quot;</span>, s).strip()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取问答句对并且返回Voc词典对象</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">readVocs</span>(<span class=\"params\">datafile, corpus_name</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Reading lines...&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 文件每行读取到list lines中。</span></span><br><span class=\"line\">    lines = <span class=\"built_in\">open</span>(datafile, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>). \\</span><br><span class=\"line\">        read().strip().split(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 每行用tab切分成问答两个句子，然后调用normalizeString函数进行处理。</span></span><br><span class=\"line\">    pairs = [[normalizeString(s) <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> l.split(<span class=\"string\">&#x27;\\t&#x27;</span>)] <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> lines]</span><br><span class=\"line\">    voc = Voc(corpus_name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> voc, pairs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filterPair</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(p[<span class=\"number\">0</span>].split(<span class=\"string\">&#x27; &#x27;</span>)) &lt; MAX_LENGTH <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(p[<span class=\"number\">1</span>].split(<span class=\"string\">&#x27; &#x27;</span>)) &lt; MAX_LENGTH</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 过滤太长的句对</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filterPairs</span>(<span class=\"params\">pairs</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pair <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> pairs <span class=\"keyword\">if</span> filterPair(pair)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用上面的函数进行处理，返回Voc对象和句对的list</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">loadPrepareData</span>(<span class=\"params\">corpus, corpus_name, datafile</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Start preparing training data ...&quot;</span>)</span><br><span class=\"line\">    voc, pairs = readVocs(datafile, corpus_name)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Read &#123;!s&#125; sentence pairs&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">len</span>(pairs)))</span><br><span class=\"line\">    pairs = filterPairs(pairs)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Trimmed to &#123;!s&#125; sentence pairs&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">len</span>(pairs)))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Counting words...&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> pairs:</span><br><span class=\"line\">        voc.addSentence(pair[<span class=\"number\">0</span>])</span><br><span class=\"line\">        voc.addSentence(pair[<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Counted words:&quot;</span>, voc.num_words)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> voc, pairs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Load/Assemble voc and pairs</span></span><br><span class=\"line\"><span class=\"comment\"># save_dir = os.path.join(&quot;data&quot;, &quot;save&quot;)</span></span><br><span class=\"line\">voc, pairs = loadPrepareData(corpus, corpus_name, datafile)</span><br><span class=\"line\"><span class=\"comment\"># 输出一些句对</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\npairs:&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> pairs[:<span class=\"number\">10</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(pair)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MIN_COUNT = <span class=\"number\">3</span>    <span class=\"comment\"># 阈值为3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">trimRareWords</span>(<span class=\"params\">voc, pairs, MIN_COUNT</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 去掉voc中频次小于3的词</span></span><br><span class=\"line\">    voc.trim(MIN_COUNT)</span><br><span class=\"line\">    <span class=\"comment\"># 保留的句对</span></span><br><span class=\"line\">    keep_pairs = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> pairs:</span><br><span class=\"line\">        input_sentence = pair[<span class=\"number\">0</span>]</span><br><span class=\"line\">        output_sentence = pair[<span class=\"number\">1</span>]</span><br><span class=\"line\">        keep_input = <span class=\"literal\">True</span></span><br><span class=\"line\">        keep_output = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"comment\"># 检查问题</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> input_sentence.split(<span class=\"string\">&#x27; &#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> voc.word2index:</span><br><span class=\"line\">                keep_input = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"comment\"># 检查答案</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> output_sentence.split(<span class=\"string\">&#x27; &#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> voc.word2index:</span><br><span class=\"line\">                keep_output = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果问题和答案都只包含高频词，我们才保留这个句对</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> keep_input <span class=\"keyword\">and</span> keep_output:</span><br><span class=\"line\">            keep_pairs.append(pair)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Trimmed from &#123;&#125; pairs to &#123;&#125;, &#123;:.4f&#125; of total&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">len</span>(pairs),</span><br><span class=\"line\">\t\t<span class=\"built_in\">len</span>(keep_pairs), <span class=\"built_in\">len</span>(keep_pairs) / <span class=\"built_in\">len</span>(pairs)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> keep_pairs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际进行处理</span></span><br><span class=\"line\">pairs = trimRareWords(voc, pairs, MIN_COUNT)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把句子的词变成ID</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">indexesFromSentence</span>(<span class=\"params\">voc, sentence</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [voc.word2index[word] <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> sentence.split(<span class=\"string\">&#x27; &#x27;</span>)] + [EOS_token]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># l是多个长度不同句子(list)，使用zip_longest padding成定长，长度为最长句子的长度。</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">zeroPadding</span>(<span class=\"params\">l, fillvalue=PAD_token</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>(itertools.zip_longest(*l, fillvalue=fillvalue))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># l是二维的padding后的list</span></span><br><span class=\"line\"><span class=\"comment\"># 返回m和l的大小一样，如果某个位置是padding，那么值为0，否则为1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">binaryMatrix</span>(<span class=\"params\">l, value=PAD_token</span>):</span><br><span class=\"line\">    m = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, seq <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(l):</span><br><span class=\"line\">        m.append([])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> seq:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> token == PAD_token:</span><br><span class=\"line\">                m[i].append(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                m[i].append(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把输入句子变成ID，然后再padding，同时返回lengths这个list，标识实际长度。</span></span><br><span class=\"line\"><span class=\"comment\"># 返回的padVar是一个LongTensor，shape是(batch, max_length)，</span></span><br><span class=\"line\"><span class=\"comment\"># lengths是一个list，长度为(batch,)，表示每个句子的实际长度。</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inputVar</span>(<span class=\"params\">l, voc</span>):</span><br><span class=\"line\">    indexes_batch = [indexesFromSentence(voc, sentence) <span class=\"keyword\">for</span> sentence <span class=\"keyword\">in</span> l]</span><br><span class=\"line\">    lengths = torch.tensor([<span class=\"built_in\">len</span>(indexes) <span class=\"keyword\">for</span> indexes <span class=\"keyword\">in</span> indexes_batch])</span><br><span class=\"line\">    padList = zeroPadding(indexes_batch)</span><br><span class=\"line\">    padVar = torch.LongTensor(padList)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> padVar, lengths</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对输出句子进行padding，然后用binaryMatrix得到每个位置是padding(0)还是非padding，</span></span><br><span class=\"line\"><span class=\"comment\"># 同时返回最大最长句子的长度(也就是padding后的长度)</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值padVar是LongTensor，shape是(batch, max_target_length)</span></span><br><span class=\"line\"><span class=\"comment\"># mask是ByteTensor，shape也是(batch, max_target_length)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outputVar</span>(<span class=\"params\">l, voc</span>):</span><br><span class=\"line\">    indexes_batch = [indexesFromSentence(voc, sentence) <span class=\"keyword\">for</span> sentence <span class=\"keyword\">in</span> l]</span><br><span class=\"line\">    max_target_len = <span class=\"built_in\">max</span>([<span class=\"built_in\">len</span>(indexes) <span class=\"keyword\">for</span> indexes <span class=\"keyword\">in</span> indexes_batch])</span><br><span class=\"line\">    padList = zeroPadding(indexes_batch)</span><br><span class=\"line\">    mask = binaryMatrix(padList)</span><br><span class=\"line\">    mask = torch.ByteTensor(mask)</span><br><span class=\"line\">    padVar = torch.LongTensor(padList)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> padVar, mask, max_target_len</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 处理一个batch的pair句对</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">batch2TrainData</span>(<span class=\"params\">voc, pair_batch</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 按照句子的长度(词数)排序</span></span><br><span class=\"line\">    pair_batch.sort(key=<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(x[<span class=\"number\">0</span>].split(<span class=\"string\">&quot; &quot;</span>)), reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    input_batch, output_batch = [], []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> pair_batch:</span><br><span class=\"line\">        input_batch.append(pair[<span class=\"number\">0</span>])</span><br><span class=\"line\">        output_batch.append(pair[<span class=\"number\">1</span>])</span><br><span class=\"line\">    inp, lengths = inputVar(input_batch, voc)</span><br><span class=\"line\">    output, mask, max_target_len = outputVar(output_batch, voc)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inp, lengths, output, mask, max_target_len</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\">small_batch_size = <span class=\"number\">5</span></span><br><span class=\"line\">batches = batch2TrainData(voc, [random.choice(pairs) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(small_batch_size)])</span><br><span class=\"line\">input_variable, lengths, target_variable, mask, max_target_len = batches</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;input_variable:&quot;</span>, input_variable)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;lengths:&quot;</span>, lengths)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_variable:&quot;</span>, target_variable)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;mask:&quot;</span>, mask)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;max_target_len:&quot;</span>, max_target_len)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EncoderRNN</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, hidden_size, embedding, n_layers=<span class=\"number\">1</span>, dropout=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(EncoderRNN, self).__init__()</span><br><span class=\"line\">        self.n_layers = n_layers</span><br><span class=\"line\">        self.hidden_size = hidden_size</span><br><span class=\"line\">        self.embedding = embedding</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化GRU，这里输入和hidden大小都是hidden_size，这里假设embedding层的输出大小是hidden_size</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果只有一层，那么不进行Dropout，否则使用传入的参数dropout进行GRU的Dropout。</span></span><br><span class=\"line\">        self.gru = nn.GRU(hidden_size, hidden_size, n_layers,</span><br><span class=\"line\">                          dropout=(<span class=\"number\">0</span> <span class=\"keyword\">if</span> n_layers == <span class=\"number\">1</span> <span class=\"keyword\">else</span> dropout), bidirectional=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, input_seq, input_lengths, hidden=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 输入是(max_length, batch)，Embedding之后变成(max_length, batch, hidden_size)</span></span><br><span class=\"line\">        embedded = self.embedding(input_seq)</span><br><span class=\"line\">        <span class=\"comment\"># Pack padded batch of sequences for RNN module</span></span><br><span class=\"line\">        <span class=\"comment\"># 因为RNN(GRU)要知道实际长度，所以PyTorch提供了函数pack_padded_sequence把输入向量和长度</span></span><br><span class=\"line\">        <span class=\"comment\"># pack到一个对象PackedSequence里，这样便于使用。</span></span><br><span class=\"line\">        packed = torch.nn.utils.rnn.pack_padded_sequence(embedded, input_lengths)</span><br><span class=\"line\">        <span class=\"comment\"># 通过GRU进行forward计算，需要传入输入和隐变量</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果传入的输入是一个Tensor (max_length, batch, hidden_size)</span></span><br><span class=\"line\">        <span class=\"comment\"># 那么输出outputs是(max_length, batch, hidden_size*num_directions)。</span></span><br><span class=\"line\">        <span class=\"comment\"># 第三维是hidden_size和num_directions的混合，它们实际排列顺序是num_directions在前面，</span></span><br><span class=\"line\">        <span class=\"comment\"># 因此我们可以使用outputs.view(seq_len, batch, num_directions, hidden_size)得到4维的向量。</span></span><br><span class=\"line\">        <span class=\"comment\"># 其中第三维是方向，第四位是隐状态。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 而如果输入是PackedSequence对象，那么输出outputs也是一个PackedSequence对象，我们需要用</span></span><br><span class=\"line\">        <span class=\"comment\"># 函数pad_packed_sequence把它变成shape为(max_length, batch, hidden*num_directions)的向量以及</span></span><br><span class=\"line\">        <span class=\"comment\"># 一个list，表示输出的长度，当然这个list和输入的input_lengths完全一样，因此通常我们不需要它。</span></span><br><span class=\"line\">        outputs, hidden = self.gru(packed, hidden)</span><br><span class=\"line\">        <span class=\"comment\"># 参考前面的注释，我们得到outputs为(max_length, batch, hidden*num_directions)</span></span><br><span class=\"line\">        outputs, _ = torch.nn.utils.rnn.pad_packed_sequence(outputs)</span><br><span class=\"line\">        <span class=\"comment\"># 我们需要把输出的num_directions双向的向量加起来</span></span><br><span class=\"line\">        <span class=\"comment\"># 因为outputs的第三维是先放前向的hidden_size个结果，然后再放后向的hidden_size个结果</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以outputs[:, :, :self.hidden_size]得到前向的结果</span></span><br><span class=\"line\">        <span class=\"comment\"># outputs[:, :, self.hidden_size:]是后向的结果</span></span><br><span class=\"line\">        <span class=\"comment\"># 注意，如果bidirectional是False，则outputs第三维的大小就是hidden_size，</span></span><br><span class=\"line\">        <span class=\"comment\"># 这时outputs[:, : ,self.hidden_size:]是不存在的，因此也不会加上去。</span></span><br><span class=\"line\">        <span class=\"comment\"># 对Python slicing不熟的读者可以看看下面的例子：</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># &gt;&gt;&gt; a=[1,2,3]</span></span><br><span class=\"line\">        <span class=\"comment\"># &gt;&gt;&gt; a[:3]</span></span><br><span class=\"line\">        <span class=\"comment\"># [1, 2, 3]</span></span><br><span class=\"line\">        <span class=\"comment\"># &gt;&gt;&gt; a[3:]</span></span><br><span class=\"line\">        <span class=\"comment\"># []</span></span><br><span class=\"line\">        <span class=\"comment\"># &gt;&gt;&gt; a[:3]+a[3:]</span></span><br><span class=\"line\">        <span class=\"comment\"># [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 这样就不用写下面的代码了：</span></span><br><span class=\"line\">        <span class=\"comment\"># if bidirectional:</span></span><br><span class=\"line\">        <span class=\"comment\">#     outputs = outputs[:, :, :self.hidden_size] + outputs[:, : ,self.hidden_size:]</span></span><br><span class=\"line\">        outputs = outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]</span><br><span class=\"line\">        <span class=\"comment\"># 返回最终的输出和最后时刻的隐状态。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> outputs, hidden</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Luong 注意力layer</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Attn</span>(torch.nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, method, hidden_size</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Attn, self).__init__()</span><br><span class=\"line\">        self.method = method</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.method <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;dot&#x27;</span>, <span class=\"string\">&#x27;general&#x27;</span>, <span class=\"string\">&#x27;concat&#x27;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(self.method, <span class=\"string\">&quot;is not an appropriate attention method.&quot;</span>)</span><br><span class=\"line\">        self.hidden_size = hidden_size</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.method == <span class=\"string\">&#x27;general&#x27;</span>:</span><br><span class=\"line\">            self.attn = torch.nn.Linear(self.hidden_size, hidden_size)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.method == <span class=\"string\">&#x27;concat&#x27;</span>:</span><br><span class=\"line\">            self.attn = torch.nn.Linear(self.hidden_size * <span class=\"number\">2</span>, hidden_size)</span><br><span class=\"line\">            self.v = torch.nn.Parameter(torch.FloatTensor(hidden_size))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">dot_score</span>(<span class=\"params\">self, hidden, encoder_output</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 输入hidden的shape是(1, batch=64, hidden_size=500)</span></span><br><span class=\"line\">        <span class=\"comment\"># encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)</span></span><br><span class=\"line\">        <span class=\"comment\"># hidden * encoder_output得到的shape是(10, 64, 500)，然后对第3维求和就可以计算出score。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> torch.<span class=\"built_in\">sum</span>(hidden * encoder_output, dim=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">general_score</span>(<span class=\"params\">self, hidden, encoder_output</span>):</span><br><span class=\"line\">        energy = self.attn(encoder_output)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> torch.<span class=\"built_in\">sum</span>(hidden * energy, dim=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">concat_score</span>(<span class=\"params\">self, hidden, encoder_output</span>):</span><br><span class=\"line\">        energy = self.attn(torch.cat((hidden.expand(encoder_output.size(<span class=\"number\">0</span>), -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),</span><br><span class=\"line\">                                      encoder_output), <span class=\"number\">2</span>)).tanh()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> torch.<span class=\"built_in\">sum</span>(self.v * energy, dim=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 输入是上一个时刻的隐状态hidden和所有时刻的Encoder的输出encoder_outputs</span></span><br><span class=\"line\">    <span class=\"comment\"># 输出是注意力的概率，也就是长度为input_lengths的向量，它的和加起来是1。</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, hidden, encoder_outputs</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 计算注意力的score，输入hidden的shape是(1, batch=64, hidden_size=500)，</span></span><br><span class=\"line\">        <span class=\"comment\"># 表示t时刻batch数据的隐状态</span></span><br><span class=\"line\">        <span class=\"comment\"># encoder_outputs的shape是(input_lengths=10, batch=64, hidden_size=500)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.method == <span class=\"string\">&#x27;general&#x27;</span>:</span><br><span class=\"line\">            attn_energies = self.general_score(hidden, encoder_outputs)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.method == <span class=\"string\">&#x27;concat&#x27;</span>:</span><br><span class=\"line\">            attn_energies = self.concat_score(hidden, encoder_outputs)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.method == <span class=\"string\">&#x27;dot&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 计算内积，参考dot_score函数</span></span><br><span class=\"line\">            attn_energies = self.dot_score(hidden, encoder_outputs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Transpose max_length and batch_size dimensions</span></span><br><span class=\"line\">        <span class=\"comment\"># 把attn_energies从(max_length=10, batch=64)转置成(64, 10)</span></span><br><span class=\"line\">        attn_energies = attn_energies.t()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 使用softmax函数把score变成概率，shape仍然是(64, 10)，然后用unsqueeze(1)变成</span></span><br><span class=\"line\">        <span class=\"comment\"># (64, 1, 10)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> F.softmax(attn_energies, dim=<span class=\"number\">1</span>).unsqueeze(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LuongAttnDecoderRNN</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, attn_model, embedding, hidden_size, output_size, n_layers=<span class=\"number\">1</span>, dropout=<span class=\"number\">0.1</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(LuongAttnDecoderRNN, self).__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 保存到self里，attn_model就是前面定义的Attn类的对象。</span></span><br><span class=\"line\">        self.attn_model = attn_model</span><br><span class=\"line\">        self.hidden_size = hidden_size</span><br><span class=\"line\">        self.output_size = output_size</span><br><span class=\"line\">        self.n_layers = n_layers</span><br><span class=\"line\">        self.dropout = dropout</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 定义Decoder的layers</span></span><br><span class=\"line\">        self.embedding = embedding</span><br><span class=\"line\">        self.embedding_dropout = nn.Dropout(dropout)</span><br><span class=\"line\">        self.gru = nn.GRU(hidden_size, hidden_size, n_layers, dropout=(<span class=\"number\">0</span> <span class=\"keyword\">if</span> n_layers == <span class=\"number\">1</span> <span class=\"keyword\">else</span> dropout))</span><br><span class=\"line\">        self.concat = nn.Linear(hidden_size * <span class=\"number\">2</span>, hidden_size)</span><br><span class=\"line\">        self.out = nn.Linear(hidden_size, output_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.attn = Attn(attn_model, hidden_size)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, input_step, last_hidden, encoder_outputs</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 注意：decoder每一步只能处理一个时刻的数据，因为t时刻计算完了才能计算t+1时刻。</span></span><br><span class=\"line\">        <span class=\"comment\"># input_step的shape是(1, 64)，64是batch，1是当前输入的词ID(来自上一个时刻的输出)</span></span><br><span class=\"line\">        <span class=\"comment\"># 通过embedding层变成(1, 64, 500)，然后进行dropout，shape不变。</span></span><br><span class=\"line\">        embedded = self.embedding(input_step)</span><br><span class=\"line\">        embedded = self.embedding_dropout(embedded)</span><br><span class=\"line\">        <span class=\"comment\"># 把embedded传入GRU进行forward计算</span></span><br><span class=\"line\">        <span class=\"comment\"># 得到rnn_output的shape是(1, 64, 500)</span></span><br><span class=\"line\">        <span class=\"comment\"># hidden是(2, 64, 500)，因为是两层的GRU，所以第一维是2。</span></span><br><span class=\"line\">        rnn_output, hidden = self.gru(embedded, last_hidden)</span><br><span class=\"line\">        <span class=\"comment\"># 计算注意力权重， 根据前面的分析，attn_weights的shape是(64, 1, 10)</span></span><br><span class=\"line\">        attn_weights = self.attn(rnn_output, encoder_outputs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># encoder_outputs是(10, 64, 500)</span></span><br><span class=\"line\">        <span class=\"comment\"># encoder_outputs.transpose(0, 1)后的shape是(64, 10, 500)</span></span><br><span class=\"line\">        <span class=\"comment\"># attn_weights.bmm后是(64, 1, 500)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># bmm是批量的矩阵乘法，第一维是batch，我们可以把attn_weights看成64个(1,10)的矩阵</span></span><br><span class=\"line\">        <span class=\"comment\"># 把encoder_outputs.transpose(0, 1)看成64个(10, 500)的矩阵</span></span><br><span class=\"line\">        <span class=\"comment\"># 那么bmm就是64个(1, 10)矩阵 x (10, 500)矩阵，最终得到(64, 1, 500)</span></span><br><span class=\"line\">        context = attn_weights.bmm(encoder_outputs.transpose(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"comment\"># 把context向量和GRU的输出拼接起来</span></span><br><span class=\"line\">        <span class=\"comment\"># rnn_output从(1, 64, 500)变成(64, 500)</span></span><br><span class=\"line\">        rnn_output = rnn_output.squeeze(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\"># context从(64, 1, 500)变成(64, 500)</span></span><br><span class=\"line\">        context = context.squeeze(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 拼接得到(64, 1000)</span></span><br><span class=\"line\">        concat_input = torch.cat((rnn_output, context), <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># self.concat是一个矩阵(1000, 500)，</span></span><br><span class=\"line\">        <span class=\"comment\"># self.concat(concat_input)的输出是(64, 500)</span></span><br><span class=\"line\">        <span class=\"comment\"># 然后用tanh把输出返回变成(-1,1)，concat_output的shape是(64, 500)</span></span><br><span class=\"line\">        concat_output = torch.tanh(self.concat(concat_input))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># out是(500, 词典大小=7826)</span></span><br><span class=\"line\">        output = self.out(concat_output)</span><br><span class=\"line\">        <span class=\"comment\"># 用softmax变成概率，表示当前时刻输出每个词的概率。</span></span><br><span class=\"line\">        output = F.softmax(output, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 返回 output和新的隐状态</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output, hidden</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">maskNLLLoss</span>(<span class=\"params\">inp, target, mask</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 计算实际的词的个数，因为padding是0，非padding是1，因此sum就可以得到词的个数</span></span><br><span class=\"line\">    nTotal = mask.<span class=\"built_in\">sum</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    crossEntropy = -torch.log(torch.gather(inp, <span class=\"number\">1</span>, target.view(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)).squeeze(<span class=\"number\">1</span>))</span><br><span class=\"line\">    loss = crossEntropy.masked_select(mask).mean()</span><br><span class=\"line\">    loss = loss.to(device)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> loss, nTotal.item()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>(<span class=\"params\">input_variable, lengths, target_variable, mask, max_target_len, encoder, decoder, embedding,</span></span><br><span class=\"line\"><span class=\"params\">          encoder_optimizer, decoder_optimizer, batch_size, clip, max_length=MAX_LENGTH</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 梯度清空</span></span><br><span class=\"line\">    encoder_optimizer.zero_grad()</span><br><span class=\"line\">    decoder_optimizer.zero_grad()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 设置device，从而支持GPU，当然如果没有GPU也能工作。</span></span><br><span class=\"line\">    input_variable = input_variable.to(device)</span><br><span class=\"line\">    lengths = lengths.to(device)</span><br><span class=\"line\">    target_variable = target_variable.to(device)</span><br><span class=\"line\">    mask = mask.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化变量</span></span><br><span class=\"line\">    loss = <span class=\"number\">0</span></span><br><span class=\"line\">    print_losses = []</span><br><span class=\"line\">    n_totals = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># encoder的Forward计算</span></span><br><span class=\"line\">    encoder_outputs, encoder_hidden = encoder(input_variable, lengths)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Decoder的初始输入是SOS，我们需要构造(1, batch)的输入，表示第一个时刻batch个输入。</span></span><br><span class=\"line\">    decoder_input = torch.LongTensor([[SOS_token <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(batch_size)]])</span><br><span class=\"line\">    decoder_input = decoder_input.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 注意：Encoder是双向的，而Decoder是单向的，因此从下往上取n_layers个</span></span><br><span class=\"line\">    decoder_hidden = encoder_hidden[:decoder.n_layers]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 确定是否teacher forcing</span></span><br><span class=\"line\">    use_teacher_forcing = <span class=\"literal\">True</span> <span class=\"keyword\">if</span> random.random() &lt; teacher_forcing_ratio <span class=\"keyword\">else</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 一次处理一个时刻</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> use_teacher_forcing:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_target_len):</span><br><span class=\"line\">            decoder_output, decoder_hidden = decoder(</span><br><span class=\"line\">                decoder_input, decoder_hidden, encoder_outputs</span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"comment\"># Teacher forcing: 下一个时刻的输入是当前正确答案</span></span><br><span class=\"line\">            decoder_input = target_variable[t].view(<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 计算累计的loss</span></span><br><span class=\"line\">            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])</span><br><span class=\"line\">            loss += mask_loss</span><br><span class=\"line\">            print_losses.append(mask_loss.item() * nTotal)</span><br><span class=\"line\">            n_totals += nTotal</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_target_len):</span><br><span class=\"line\">            decoder_output, decoder_hidden = decoder(</span><br><span class=\"line\">                decoder_input, decoder_hidden, encoder_outputs</span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"comment\"># 不是teacher forcing: 下一个时刻的输入是当前模型预测概率最高的值</span></span><br><span class=\"line\">            _, topi = decoder_output.topk(<span class=\"number\">1</span>)</span><br><span class=\"line\">            decoder_input = torch.LongTensor([[topi[i][<span class=\"number\">0</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(batch_size)]])</span><br><span class=\"line\">            decoder_input = decoder_input.to(device)</span><br><span class=\"line\">            <span class=\"comment\"># 计算累计的loss</span></span><br><span class=\"line\">            mask_loss, nTotal = maskNLLLoss(decoder_output, target_variable[t], mask[t])</span><br><span class=\"line\">            loss += mask_loss</span><br><span class=\"line\">            print_losses.append(mask_loss.item() * nTotal)</span><br><span class=\"line\">            n_totals += nTotal</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 反向计算</span></span><br><span class=\"line\">    loss.backward()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 对encoder和decoder进行梯度裁剪</span></span><br><span class=\"line\">    _ = torch.nn.utils.clip_grad_norm_(encoder.parameters(), clip)</span><br><span class=\"line\">    _ = torch.nn.utils.clip_grad_norm_(decoder.parameters(), clip)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 更新参数</span></span><br><span class=\"line\">    encoder_optimizer.step()</span><br><span class=\"line\">    decoder_optimizer.step()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(print_losses) / n_totals</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">trainIters</span>(<span class=\"params\">model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,</span></span><br><span class=\"line\"><span class=\"params\">               embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,</span></span><br><span class=\"line\"><span class=\"params\">               print_every, save_every, clip, corpus_name, loadFilename</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 随机选择n_iteration个batch的数据(pair)</span></span><br><span class=\"line\">    training_batches = [batch2TrainData(voc, [random.choice(pairs) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(batch_size)])</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n_iteration)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Initializing ...&#x27;</span>)</span><br><span class=\"line\">    start_iteration = <span class=\"number\">1</span></span><br><span class=\"line\">    print_loss = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> loadFilename:</span><br><span class=\"line\">        start_iteration = checkpoint[<span class=\"string\">&#x27;iteration&#x27;</span>] + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 训练</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Training...&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> iteration <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start_iteration, n_iteration + <span class=\"number\">1</span>):</span><br><span class=\"line\">        training_batch = training_batches[iteration - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        input_variable, lengths, target_variable, mask, max_target_len = training_batch</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练一个batch的数据</span></span><br><span class=\"line\">        loss = train(input_variable, lengths, target_variable, mask, max_target_len, encoder,</span><br><span class=\"line\">                     decoder, embedding, encoder_optimizer, decoder_optimizer, batch_size, clip)</span><br><span class=\"line\">        print_loss += loss</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 进度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> iteration % print_every == <span class=\"number\">0</span>:</span><br><span class=\"line\">            print_loss_avg = print_loss / print_every</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Iteration: &#123;&#125;; Percent complete: &#123;:.1f&#125;%; Average loss: &#123;:.4f&#125;&quot;</span></span><br><span class=\"line\">                  .<span class=\"built_in\">format</span>(iteration, iteration / n_iteration * <span class=\"number\">100</span>, print_loss_avg))</span><br><span class=\"line\">            print_loss = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 保存checkpoint</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iteration % save_every == <span class=\"number\">0</span>):</span><br><span class=\"line\">            directory = os.path.join(save_dir, model_name, corpus_name, <span class=\"string\">&#x27;&#123;&#125;-&#123;&#125;_&#123;&#125;&#x27;</span></span><br><span class=\"line\">                                     .<span class=\"built_in\">format</span>(encoder_n_layers, decoder_n_layers, hidden_size))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(directory):</span><br><span class=\"line\">                os.makedirs(directory)</span><br><span class=\"line\">            torch.save(&#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;iteration&#x27;</span>: iteration,</span><br><span class=\"line\">                <span class=\"string\">&#x27;en&#x27;</span>: encoder.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;de&#x27;</span>: decoder.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;en_opt&#x27;</span>: encoder_optimizer.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;de_opt&#x27;</span>: decoder_optimizer.state_dict(),</span><br><span class=\"line\">                <span class=\"string\">&#x27;loss&#x27;</span>: loss,</span><br><span class=\"line\">                <span class=\"string\">&#x27;voc_dict&#x27;</span>: voc.__dict__,</span><br><span class=\"line\">                <span class=\"string\">&#x27;embedding&#x27;</span>: embedding.state_dict()</span><br><span class=\"line\">            &#125;, os.path.join(directory, <span class=\"string\">&#x27;&#123;&#125;_&#123;&#125;.tar&#x27;</span>.<span class=\"built_in\">format</span>(iteration, <span class=\"string\">&#x27;checkpoint&#x27;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GreedySearchDecoder</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, encoder, decoder</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(GreedySearchDecoder, self).__init__()</span><br><span class=\"line\">        self.encoder = encoder</span><br><span class=\"line\">        self.decoder = decoder</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, input_seq, input_length, max_length</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Encoder的Forward计算</span></span><br><span class=\"line\">        encoder_outputs, encoder_hidden = self.encoder(input_seq, input_length)</span><br><span class=\"line\">        <span class=\"comment\"># 把Encoder最后时刻的隐状态作为Decoder的初始值</span></span><br><span class=\"line\">        decoder_hidden = encoder_hidden[:decoder.n_layers]</span><br><span class=\"line\">        <span class=\"comment\"># 因为我们的函数都是要求(time,batch)，因此即使只有一个数据，也要做出二维的。</span></span><br><span class=\"line\">        <span class=\"comment\"># Decoder的初始输入是SOS</span></span><br><span class=\"line\">        decoder_input = torch.ones(<span class=\"number\">1</span>, <span class=\"number\">1</span>, device=device, dtype=torch.long) * SOS_token</span><br><span class=\"line\">        <span class=\"comment\"># 用于保存解码结果的tensor</span></span><br><span class=\"line\">        all_tokens = torch.zeros([<span class=\"number\">0</span>], device=device, dtype=torch.long)</span><br><span class=\"line\">        all_scores = torch.zeros([<span class=\"number\">0</span>], device=device)</span><br><span class=\"line\">        <span class=\"comment\"># 循环，这里只使用长度限制，后面处理的时候把EOS去掉了。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_length):</span><br><span class=\"line\">            <span class=\"comment\"># Decoder forward一步</span></span><br><span class=\"line\">            decoder_output, decoder_hidden = self.decoder(decoder_input, decoder_hidden,</span><br><span class=\"line\">\t\t\t\t\t\t\t\tencoder_outputs)</span><br><span class=\"line\">            <span class=\"comment\"># decoder_outputs是(batch=1, vob_size)</span></span><br><span class=\"line\">            <span class=\"comment\"># 使用max返回概率最大的词和得分</span></span><br><span class=\"line\">            decoder_scores, decoder_input = torch.<span class=\"built_in\">max</span>(decoder_output, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 把解码结果保存到all_tokens和all_scores里</span></span><br><span class=\"line\">            all_tokens = torch.cat((all_tokens, decoder_input), dim=<span class=\"number\">0</span>)</span><br><span class=\"line\">            all_scores = torch.cat((all_scores, decoder_scores), dim=<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\"># decoder_input是当前时刻输出的词的ID，这是个一维的向量，因为max会减少一维。</span></span><br><span class=\"line\">            <span class=\"comment\"># 但是decoder要求有一个batch维度，因此用unsqueeze增加batch维度。</span></span><br><span class=\"line\">            decoder_input = torch.unsqueeze(decoder_input, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 返回所有的词和得分。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> all_tokens, all_scores</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">evaluate</span>(<span class=\"params\">encoder, decoder, searcher, voc, sentence, max_length=MAX_LENGTH</span>):</span><br><span class=\"line\">    <span class=\"comment\">### 把输入的一个batch句子变成id</span></span><br><span class=\"line\">    indexes_batch = [indexesFromSentence(voc, sentence)]</span><br><span class=\"line\">    <span class=\"comment\"># 创建lengths tensor</span></span><br><span class=\"line\">    lengths = torch.tensor([<span class=\"built_in\">len</span>(indexes) <span class=\"keyword\">for</span> indexes <span class=\"keyword\">in</span> indexes_batch])</span><br><span class=\"line\">    <span class=\"comment\"># 转置</span></span><br><span class=\"line\">    input_batch = torch.LongTensor(indexes_batch).transpose(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 放到合适的设备上(比如GPU)</span></span><br><span class=\"line\">    input_batch = input_batch.to(device)</span><br><span class=\"line\">    lengths = lengths.to(device)</span><br><span class=\"line\">    <span class=\"comment\"># 用searcher解码</span></span><br><span class=\"line\">    tokens, scores = searcher(input_batch, lengths, max_length)</span><br><span class=\"line\">    <span class=\"comment\"># ID变成词。</span></span><br><span class=\"line\">    decoded_words = [voc.index2word[token.item()] <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> tokens]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decoded_words</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">evaluateInput</span>(<span class=\"params\">encoder, decoder, searcher, voc</span>):</span><br><span class=\"line\">    input_sentence = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 得到用户终端的输入</span></span><br><span class=\"line\">            input_sentence = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;&gt; &#x27;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 是否退出</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> input_sentence == <span class=\"string\">&#x27;q&#x27;</span> <span class=\"keyword\">or</span> input_sentence == <span class=\"string\">&#x27;quit&#x27;</span>: <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\"># 句子归一化</span></span><br><span class=\"line\">            input_sentence = normalizeString(input_sentence)</span><br><span class=\"line\">            <span class=\"comment\"># 生成响应Evaluate sentence</span></span><br><span class=\"line\">            output_words = evaluate(encoder, decoder, searcher, voc, input_sentence)</span><br><span class=\"line\">            <span class=\"comment\"># 去掉EOS后面的内容</span></span><br><span class=\"line\">            words = []</span><br><span class=\"line\">            <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> output_words:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> word == <span class=\"string\">&#x27;EOS&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> word != <span class=\"string\">&#x27;PAD&#x27;</span>:</span><br><span class=\"line\">                    words.append(word)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Bot:&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>.join(words))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: Encountered unknown word.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置模型</span></span><br><span class=\"line\">model_name = <span class=\"string\">&#x27;cb_model&#x27;</span></span><br><span class=\"line\">attn_model = <span class=\"string\">&#x27;dot&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># attn_model = &#x27;general&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># attn_model = &#x27;concat&#x27;</span></span><br><span class=\"line\">hidden_size = <span class=\"number\">500</span></span><br><span class=\"line\">encoder_n_layers = <span class=\"number\">2</span></span><br><span class=\"line\">decoder_n_layers = <span class=\"number\">2</span></span><br><span class=\"line\">dropout = <span class=\"number\">0.1</span></span><br><span class=\"line\">batch_size = <span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从哪个checkpoint恢复，如果是None，那么从头开始训练。</span></span><br><span class=\"line\"><span class=\"comment\"># loadFilename = None</span></span><br><span class=\"line\"></span><br><span class=\"line\">loadFilename = <span class=\"string\">&quot;./model_Seq2seq/cb_model/cornell movie-dialogs corpus/2-2_500/5000_checkpoint.tar&quot;</span></span><br><span class=\"line\">checkpoint_iter = <span class=\"number\">5000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果loadFilename不空，则从中加载模型</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> loadFilename:</span><br><span class=\"line\">    <span class=\"comment\"># 如果训练和加载是一条机器，那么直接加载</span></span><br><span class=\"line\">    checkpoint = torch.load(loadFilename)</span><br><span class=\"line\">    <span class=\"comment\"># 否则比如checkpoint是在GPU上得到的，但是我们现在又用CPU来训练或者测试，那么注释掉下面的代码</span></span><br><span class=\"line\">    <span class=\"comment\"># checkpoint = torch.load(loadFilename, map_location=torch.device(&#x27;cpu&#x27;))</span></span><br><span class=\"line\">    encoder_sd = checkpoint[<span class=\"string\">&#x27;en&#x27;</span>]</span><br><span class=\"line\">    decoder_sd = checkpoint[<span class=\"string\">&#x27;de&#x27;</span>]</span><br><span class=\"line\">    encoder_optimizer_sd = checkpoint[<span class=\"string\">&#x27;en_opt&#x27;</span>]</span><br><span class=\"line\">    decoder_optimizer_sd = checkpoint[<span class=\"string\">&#x27;de_opt&#x27;</span>]</span><br><span class=\"line\">    embedding_sd = checkpoint[<span class=\"string\">&#x27;embedding&#x27;</span>]</span><br><span class=\"line\">    voc.__dict__ = checkpoint[<span class=\"string\">&#x27;voc_dict&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Building encoder and decoder ...&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 初始化word embedding</span></span><br><span class=\"line\">embedding = nn.Embedding(voc.num_words, hidden_size)</span><br><span class=\"line\"><span class=\"keyword\">if</span> loadFilename:</span><br><span class=\"line\">    embedding.load_state_dict(embedding_sd)</span><br><span class=\"line\"><span class=\"comment\"># 初始化encoder和decoder模型</span></span><br><span class=\"line\">encoder = EncoderRNN(hidden_size, embedding, encoder_n_layers, dropout)</span><br><span class=\"line\">decoder = LuongAttnDecoderRNN(attn_model, embedding, hidden_size, voc.num_words,</span><br><span class=\"line\">                              decoder_n_layers, dropout)</span><br><span class=\"line\"><span class=\"keyword\">if</span> loadFilename:</span><br><span class=\"line\">    encoder.load_state_dict(encoder_sd)</span><br><span class=\"line\">    decoder.load_state_dict(decoder_sd)</span><br><span class=\"line\"><span class=\"comment\"># 使用合适的设备</span></span><br><span class=\"line\">encoder = encoder.to(device)</span><br><span class=\"line\">decoder = decoder.to(device)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Models built and ready to go!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置训练的超参数和优化器</span></span><br><span class=\"line\">clip = <span class=\"number\">50.0</span></span><br><span class=\"line\">teacher_forcing_ratio = <span class=\"number\">1.0</span></span><br><span class=\"line\">learning_rate = <span class=\"number\">0.0001</span></span><br><span class=\"line\">decoder_learning_ratio = <span class=\"number\">5.0</span></span><br><span class=\"line\">n_iteration = <span class=\"number\">5000</span></span><br><span class=\"line\">print_every = <span class=\"number\">1</span></span><br><span class=\"line\">save_every = <span class=\"number\">1000</span></span><br><span class=\"line\">save_dir = <span class=\"string\">&quot;./model_Seq2seq_1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置进入训练模式，从而开启dropout</span></span><br><span class=\"line\">encoder.train()</span><br><span class=\"line\">decoder.train()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化优化器</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Building optimizers ...&#x27;</span>)</span><br><span class=\"line\">encoder_optimizer = optim.Adam(encoder.parameters(), lr=learning_rate)</span><br><span class=\"line\">decoder_optimizer = optim.Adam(decoder.parameters(), lr=learning_rate * decoder_learning_ratio)</span><br><span class=\"line\"><span class=\"keyword\">if</span> loadFilename:</span><br><span class=\"line\">    encoder_optimizer.load_state_dict(encoder_optimizer_sd)</span><br><span class=\"line\">    decoder_optimizer.load_state_dict(decoder_optimizer_sd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始训练</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Starting Training!&quot;</span>)</span><br><span class=\"line\">trainIters(model_name, voc, pairs, encoder, decoder, encoder_optimizer, decoder_optimizer,</span><br><span class=\"line\">           embedding, encoder_n_layers, decoder_n_layers, save_dir, n_iteration, batch_size,</span><br><span class=\"line\">           print_every, save_every, clip, corpus_name, loadFilename)</span><br><span class=\"line\"></span><br><span class=\"line\">end_time = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;time: %.1fs&quot;</span> % (end_time - start_time))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入eval模式，从而去掉dropout。</span></span><br><span class=\"line\">encoder.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\">decoder.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构造searcher对象</span></span><br><span class=\"line\">searcher = GreedySearchDecoder(encoder, decoder)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\">evaluateInput(encoder, decoder, searcher, voc)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"算法知识点","date":"2023-02-01T12:23:56.000Z","description":"对学习算法的一些总结和摘抄~","sticky":1,"cover":"https://cdn.educba.com/academy/wp-content/uploads/2019/04/Types-of-Algorithms.jpg","_content":"\n\n\n## 首先声明！！！\n\n---\n* 1.有转载内容，仅供参考~\n* 2.知识点为本人总结，如有使用注明出处~\n* 3.如有不足，欢迎批评指正~\n\n---\n\n\n\n# 一、时间复杂度*\n\n![](test1.png)\n\n* 作者：yxc\n* 链接：https://www.acwing.com/blog/content/32/\n* 来源：AcWing\n* 非商业转载请注明出处。\n\n\n# 二、空间复杂度\n\n![](test2.png)\n\n* 作者：jaylenwanghitsz\n* 链接：https://www.acwing.com/blog/content/16975/\n* 来源：AcWing\n* 非商业转载请注明出处。\n\n\n\n# 三、小技巧\n\n## 1.algorithm库的使用\n\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<sstream>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10;\n\n\nint main()\n{\n    // 1.max()、min()、abs()函数\n    \n    int a = 3, b = 4;\n    //求最大值\n    int Max = max(a,b);\n    //求最小值\n    int Min = min(a,b);\n    //求绝对值\n    int Abs = abs(-3);\n    cout << Max << Min << Abs;\n    \n    // 2.交换函数：swap()\n    \n    int a = 3, b = 4;\n    swap(a,b);\n    cout << a << b;\n    return 0;\n    \n    // 3.翻转函数：reverse()\n    \n    int a[5] = {11,22,33,44,55};\n    reverse(a,a+5);\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n    return 0;\n\n    // 4.排序函数：sort()\n    \n    int a[5] = {55,44,33,22,11};\n\t\n    sort(a,a+5);\n\t\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n        \n    // 5.填充函数：fill()\n    \n    int a[5] = {11,33,22};\n\t\n    fill(a+3,a+5,9999);\t\t\t\t\t\t\t\t\n\t\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n    return 0;\n\n    // 6.C++新语法：\n    // count(a, b, c) (a, b)的区间内c的个数\n    // find(a, b, c) 在(a, b)区间内找c并返回其指针\n\n    cin>>n;\n    for(int i=1;i<=n;i++) cin>>a[i];\n\t\n    if(count(a+1,a+n+1,a[1])==n){\n        cout<<0<<'\\n';\n        return;\n    }\n\t\n    if(count(a+1,a+n+1,1)>=1){\n        cout<<-1<<'\\n';\n        return;\n    }\n\t\n    if(count(a+1,a+n+1,a[1])<n){\n        int t=find(a+1,a+n+1,2)-a;\n        for(int i=1;i<=n;i++){\n            while(a[i]!=2){\n                a[i]=(a[i]+1)/2;\n                c.push_back({i,t});\n            }\n        }\n    }\n\t\n    return 0;\n}\n```\n\n## 2. cstring 库使用\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>                  //头文件\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint h[N],g[N];\nint s[N][N];\nint n;\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n    \n    memset(g,1,sizeof g)           //将g数组每一位都填充1（用cstring库）\n    memset(s,1,sizeof s)           //二维填充\n    \n    fill(g,g+N,1)                  //同上，填充数组（用的algorithm库）\n    fill(s[0],s[0]+N*N,1)          //二维填充\n    \n    memcpy(h,g,sizeof g)           //复制g数组中每一位到h数组中（复制备份数组）\n    \n    return 0;\n}\n```\n\n## 3.增广数组\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n\nusing namespace std;\n\nconst int N=10;\n\nint n;\n\n//上下左右四个坐标(0,1; 0,-1; 1,0; -1,0)\nint s[2][5]={\n  0,0,1,-1,\n  1,-1,0,0\n};\n\n//遍历四个方向的坐标\nvoid turn(int x,int y)\n{\n    for(int i=0;i<4;i++){\n        int a=x+s[0][i];\n        int b=y+s[1][i];\n        //判断边界\n        if(a<0||a>=n||b<0||b>=n) continue;\n        //进行操作\n        .....\n    }\n}\n\n\nint main()\n{\n    cin>>n;\n    turn();\n    return 0;\n}\n```\n## 4.位运算\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;                //1e5+10=100010=10^5+10\n\n\nint main()\n{\n    int n;\n    cin>>n;\n    \n    for(int i=0;i<1<<n;i++)        //i<1<<n=i<2^n\n    \n    for(int i=0;i<n;i++) n>>i&1    //取出n的二进制位中所有的1\n    \n    for(int i=0;i<4;i++)           //取某行某列为n*i+j;(当i<n,j<n)\n        for(int j=0;j<4;j++)\n            if(op>>(4*i+j)&1)\n            \n    for(int i=0;i<n;i++) n*10+i;   //把个位加进去n里\n    \n    while(n){\n        int x=n%10;                //把n的每一位取出来\n        n/=10;                     \n    }\n    \n    return 0;\n}\n```\n\n## 5.sstream库的使用\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<sstream>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10;\n\nint n;\nint a[N];\n\n\nint main()\n{\n    int cnt;\n    cin>>cnt;\n    \n    string line;\n    getline(cin,line);               //读第一行回车（没有可以不用写）\n\t\n    while(cnt--){\n        getline(cin,line);           //过滤每一行的换行符\n        \n        stringstream ssin(line);     //用ssin代替cin读入每一行\n        \n        while(ssin>>a[n]) n++;       //把数字提取出来存进数组\n    }\n\t\n    return 0;\n}\n```\n\n---\n\n","source":"_posts/算法知识点.md","raw":"---\ntitle: 算法知识点\ndate: 2023/2/1 20:23:56 \ndescription: 对学习算法的一些总结和摘抄~\n\nsticky: 1\ncategories: Algorithm \ntags:\n  - 算法\ncover: https://cdn.educba.com/academy/wp-content/uploads/2019/04/Types-of-Algorithms.jpg\n---\n\n\n\n## 首先声明！！！\n\n---\n* 1.有转载内容，仅供参考~\n* 2.知识点为本人总结，如有使用注明出处~\n* 3.如有不足，欢迎批评指正~\n\n---\n\n\n\n# 一、时间复杂度*\n\n![](test1.png)\n\n* 作者：yxc\n* 链接：https://www.acwing.com/blog/content/32/\n* 来源：AcWing\n* 非商业转载请注明出处。\n\n\n# 二、空间复杂度\n\n![](test2.png)\n\n* 作者：jaylenwanghitsz\n* 链接：https://www.acwing.com/blog/content/16975/\n* 来源：AcWing\n* 非商业转载请注明出处。\n\n\n\n# 三、小技巧\n\n## 1.algorithm库的使用\n\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<sstream>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10;\n\n\nint main()\n{\n    // 1.max()、min()、abs()函数\n    \n    int a = 3, b = 4;\n    //求最大值\n    int Max = max(a,b);\n    //求最小值\n    int Min = min(a,b);\n    //求绝对值\n    int Abs = abs(-3);\n    cout << Max << Min << Abs;\n    \n    // 2.交换函数：swap()\n    \n    int a = 3, b = 4;\n    swap(a,b);\n    cout << a << b;\n    return 0;\n    \n    // 3.翻转函数：reverse()\n    \n    int a[5] = {11,22,33,44,55};\n    reverse(a,a+5);\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n    return 0;\n\n    // 4.排序函数：sort()\n    \n    int a[5] = {55,44,33,22,11};\n\t\n    sort(a,a+5);\n\t\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n        \n    // 5.填充函数：fill()\n    \n    int a[5] = {11,33,22};\n\t\n    fill(a+3,a+5,9999);\t\t\t\t\t\t\t\t\n\t\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n    return 0;\n\n    // 6.C++新语法：\n    // count(a, b, c) (a, b)的区间内c的个数\n    // find(a, b, c) 在(a, b)区间内找c并返回其指针\n\n    cin>>n;\n    for(int i=1;i<=n;i++) cin>>a[i];\n\t\n    if(count(a+1,a+n+1,a[1])==n){\n        cout<<0<<'\\n';\n        return;\n    }\n\t\n    if(count(a+1,a+n+1,1)>=1){\n        cout<<-1<<'\\n';\n        return;\n    }\n\t\n    if(count(a+1,a+n+1,a[1])<n){\n        int t=find(a+1,a+n+1,2)-a;\n        for(int i=1;i<=n;i++){\n            while(a[i]!=2){\n                a[i]=(a[i]+1)/2;\n                c.push_back({i,t});\n            }\n        }\n    }\n\t\n    return 0;\n}\n```\n\n## 2. cstring 库使用\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>                  //头文件\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint h[N],g[N];\nint s[N][N];\nint n;\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n    \n    memset(g,1,sizeof g)           //将g数组每一位都填充1（用cstring库）\n    memset(s,1,sizeof s)           //二维填充\n    \n    fill(g,g+N,1)                  //同上，填充数组（用的algorithm库）\n    fill(s[0],s[0]+N*N,1)          //二维填充\n    \n    memcpy(h,g,sizeof g)           //复制g数组中每一位到h数组中（复制备份数组）\n    \n    return 0;\n}\n```\n\n## 3.增广数组\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n\nusing namespace std;\n\nconst int N=10;\n\nint n;\n\n//上下左右四个坐标(0,1; 0,-1; 1,0; -1,0)\nint s[2][5]={\n  0,0,1,-1,\n  1,-1,0,0\n};\n\n//遍历四个方向的坐标\nvoid turn(int x,int y)\n{\n    for(int i=0;i<4;i++){\n        int a=x+s[0][i];\n        int b=y+s[1][i];\n        //判断边界\n        if(a<0||a>=n||b<0||b>=n) continue;\n        //进行操作\n        .....\n    }\n}\n\n\nint main()\n{\n    cin>>n;\n    turn();\n    return 0;\n}\n```\n## 4.位运算\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;                //1e5+10=100010=10^5+10\n\n\nint main()\n{\n    int n;\n    cin>>n;\n    \n    for(int i=0;i<1<<n;i++)        //i<1<<n=i<2^n\n    \n    for(int i=0;i<n;i++) n>>i&1    //取出n的二进制位中所有的1\n    \n    for(int i=0;i<4;i++)           //取某行某列为n*i+j;(当i<n,j<n)\n        for(int j=0;j<4;j++)\n            if(op>>(4*i+j)&1)\n            \n    for(int i=0;i<n;i++) n*10+i;   //把个位加进去n里\n    \n    while(n){\n        int x=n%10;                //把n的每一位取出来\n        n/=10;                     \n    }\n    \n    return 0;\n}\n```\n\n## 5.sstream库的使用\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<sstream>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10;\n\nint n;\nint a[N];\n\n\nint main()\n{\n    int cnt;\n    cin>>cnt;\n    \n    string line;\n    getline(cin,line);               //读第一行回车（没有可以不用写）\n\t\n    while(cnt--){\n        getline(cin,line);           //过滤每一行的换行符\n        \n        stringstream ssin(line);     //用ssin代替cin读入每一行\n        \n        while(ssin>>a[n]) n++;       //把数字提取出来存进数组\n    }\n\t\n    return 0;\n}\n```\n\n---\n\n","slug":"算法知识点","published":1,"updated":"2024-06-20T02:17:15.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvoa0011hwtv1suu4q9u","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.有转载内容，仅供参考~</li>\n<li>2.知识点为本人总结，如有使用注明出处~</li>\n<li>3.如有不足，欢迎批评指正~</li>\n</ul>\n<hr>\n<h1>一、时间复杂度*</h1>\n<p><img src=\"/2023/02/01/%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9/test1.png\" alt></p>\n<ul>\n<li>作者：yxc</li>\n<li>链接：<a href=\"https://www.acwing.com/blog/content/32/\">https://www.acwing.com/blog/content/32/</a></li>\n<li>来源：AcWing</li>\n<li>非商业转载请注明出处。</li>\n</ul>\n<h1>二、空间复杂度</h1>\n<p><img src=\"/2023/02/01/%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9/test2.png\" alt></p>\n<ul>\n<li>作者：jaylenwanghitsz</li>\n<li>链接：<a href=\"https://www.acwing.com/blog/content/16975/\">https://www.acwing.com/blog/content/16975/</a></li>\n<li>来源：AcWing</li>\n<li>非商业转载请注明出处。</li>\n</ul>\n<h1>三、小技巧</h1>\n<h2 id=\"1-algorithm库的使用\">1.algorithm库的使用</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.max()、min()、abs()函数</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"comment\">//求最大值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Max = <span class=\"built_in\">max</span>(a,b);</span><br><span class=\"line\">    <span class=\"comment\">//求最小值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Min = <span class=\"built_in\">min</span>(a,b);</span><br><span class=\"line\">    <span class=\"comment\">//求绝对值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Abs = <span class=\"built_in\">abs</span>(<span class=\"number\">-3</span>);</span><br><span class=\"line\">    cout &lt;&lt; Max &lt;&lt; Min &lt;&lt; Abs;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2.交换函数：swap()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">    cout &lt;&lt; a &lt;&lt; b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3.翻转函数：reverse()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">11</span>,<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">44</span>,<span class=\"number\">55</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a,a+<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4.排序函数：sort()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">55</span>,<span class=\"number\">44</span>,<span class=\"number\">33</span>,<span class=\"number\">22</span>,<span class=\"number\">11</span>&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a,a+<span class=\"number\">5</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 5.填充函数：fill()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">11</span>,<span class=\"number\">33</span>,<span class=\"number\">22</span>&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(a+<span class=\"number\">3</span>,a+<span class=\"number\">5</span>,<span class=\"number\">9999</span>);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 6.C++新语法：</span></span><br><span class=\"line\">    <span class=\"comment\">// count(a, b, c) (a, b)的区间内c的个数</span></span><br><span class=\"line\">    <span class=\"comment\">// find(a, b, c) 在(a, b)区间内找c并返回其指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">count</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,a[<span class=\"number\">1</span>])==n)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">count</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,<span class=\"number\">1</span>)&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"number\">-1</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">count</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,a[<span class=\"number\">1</span>])&lt;n)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=<span class=\"built_in\">find</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,<span class=\"number\">2</span>)-a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a[i]!=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                a[i]=(a[i]+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">                c.<span class=\"built_in\">push_back</span>(&#123;i,t&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-cstring-库使用\">2. cstring 库使用</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span>                  <span class=\"comment\">//头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],g[N];</span><br><span class=\"line\"><span class=\"type\">int</span> s[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(g,<span class=\"number\">1</span>,<span class=\"keyword\">sizeof</span> g)           <span class=\"comment\">//将g数组每一位都填充1（用cstring库）</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(s,<span class=\"number\">1</span>,<span class=\"keyword\">sizeof</span> s)           <span class=\"comment\">//二维填充</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(g,g+N,<span class=\"number\">1</span>)                  <span class=\"comment\">//同上，填充数组（用的algorithm库）</span></span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(s[<span class=\"number\">0</span>],s[<span class=\"number\">0</span>]+N*N,<span class=\"number\">1</span>)          <span class=\"comment\">//二维填充</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(h,g,<span class=\"keyword\">sizeof</span> g)           <span class=\"comment\">//复制g数组中每一位到h数组中（复制备份数组）</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-增广数组\">3.增广数组</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上下左右四个坐标(0,1; 0,-1; 1,0; -1,0)</span></span><br><span class=\"line\"><span class=\"type\">int</span> s[<span class=\"number\">2</span>][<span class=\"number\">5</span>]=&#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,</span><br><span class=\"line\">  <span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历四个方向的坐标</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">turn</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a=x+s[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">        <span class=\"type\">int</span> b=y+s[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">        <span class=\"comment\">//判断边界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a&lt;<span class=\"number\">0</span>||a&gt;=n||b&lt;<span class=\"number\">0</span>||b&gt;=n) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"comment\">//进行操作</span></span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">turn</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-位运算\">4.位运算</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;                <span class=\"comment\">//1e5+10=100010=10^5+10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1</span>&lt;&lt;n;i++)        <span class=\"comment\">//i&lt;1&lt;&lt;n=i&lt;2^n</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) n&gt;&gt;i&amp;<span class=\"number\">1</span>    <span class=\"comment\">//取出n的二进制位中所有的1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)           <span class=\"comment\">//取某行某列为n*i+j;(当i&lt;n,j&lt;n)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">4</span>;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(op&gt;&gt;(<span class=\"number\">4</span>*i+j)&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) n*<span class=\"number\">10</span>+i;   <span class=\"comment\">//把个位加进去n里</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x=n%<span class=\"number\">10</span>;                <span class=\"comment\">//把n的每一位取出来</span></span><br><span class=\"line\">        n/=<span class=\"number\">10</span>;                     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-sstream库的使用\">5.sstream库的使用</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">    cin&gt;&gt;cnt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    string line;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(cin,line);               <span class=\"comment\">//读第一行回车（没有可以不用写）</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cnt--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin,line);           <span class=\"comment\">//过滤每一行的换行符</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">stringstream <span class=\"title\">ssin</span><span class=\"params\">(line)</span></span>;     <span class=\"comment\">//用ssin代替cin读入每一行</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ssin&gt;&gt;a[n]) n++;       <span class=\"comment\">//把数字提取出来存进数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.有转载内容，仅供参考~</li>\n<li>2.知识点为本人总结，如有使用注明出处~</li>\n<li>3.如有不足，欢迎批评指正~</li>\n</ul>\n<hr>\n<h1>一、时间复杂度*</h1>\n<p><img src=\"/2023/02/01/%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9/test1.png\" alt></p>\n<ul>\n<li>作者：yxc</li>\n<li>链接：<a href=\"https://www.acwing.com/blog/content/32/\">https://www.acwing.com/blog/content/32/</a></li>\n<li>来源：AcWing</li>\n<li>非商业转载请注明出处。</li>\n</ul>\n<h1>二、空间复杂度</h1>\n<p><img src=\"/2023/02/01/%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9/test2.png\" alt></p>\n<ul>\n<li>作者：jaylenwanghitsz</li>\n<li>链接：<a href=\"https://www.acwing.com/blog/content/16975/\">https://www.acwing.com/blog/content/16975/</a></li>\n<li>来源：AcWing</li>\n<li>非商业转载请注明出处。</li>\n</ul>\n<h1>三、小技巧</h1>\n<h2 id=\"1-algorithm库的使用\">1.algorithm库的使用</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.max()、min()、abs()函数</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"comment\">//求最大值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Max = <span class=\"built_in\">max</span>(a,b);</span><br><span class=\"line\">    <span class=\"comment\">//求最小值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Min = <span class=\"built_in\">min</span>(a,b);</span><br><span class=\"line\">    <span class=\"comment\">//求绝对值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Abs = <span class=\"built_in\">abs</span>(<span class=\"number\">-3</span>);</span><br><span class=\"line\">    cout &lt;&lt; Max &lt;&lt; Min &lt;&lt; Abs;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2.交换函数：swap()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">    cout &lt;&lt; a &lt;&lt; b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3.翻转函数：reverse()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">11</span>,<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">44</span>,<span class=\"number\">55</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a,a+<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4.排序函数：sort()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">55</span>,<span class=\"number\">44</span>,<span class=\"number\">33</span>,<span class=\"number\">22</span>,<span class=\"number\">11</span>&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a,a+<span class=\"number\">5</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 5.填充函数：fill()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">11</span>,<span class=\"number\">33</span>,<span class=\"number\">22</span>&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(a+<span class=\"number\">3</span>,a+<span class=\"number\">5</span>,<span class=\"number\">9999</span>);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 6.C++新语法：</span></span><br><span class=\"line\">    <span class=\"comment\">// count(a, b, c) (a, b)的区间内c的个数</span></span><br><span class=\"line\">    <span class=\"comment\">// find(a, b, c) 在(a, b)区间内找c并返回其指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">count</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,a[<span class=\"number\">1</span>])==n)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">count</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,<span class=\"number\">1</span>)&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"number\">-1</span>&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">count</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,a[<span class=\"number\">1</span>])&lt;n)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=<span class=\"built_in\">find</span>(a+<span class=\"number\">1</span>,a+n+<span class=\"number\">1</span>,<span class=\"number\">2</span>)-a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a[i]!=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                a[i]=(a[i]+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">                c.<span class=\"built_in\">push_back</span>(&#123;i,t&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-cstring-库使用\">2. cstring 库使用</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span>                  <span class=\"comment\">//头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],g[N];</span><br><span class=\"line\"><span class=\"type\">int</span> s[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(g,<span class=\"number\">1</span>,<span class=\"keyword\">sizeof</span> g)           <span class=\"comment\">//将g数组每一位都填充1（用cstring库）</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(s,<span class=\"number\">1</span>,<span class=\"keyword\">sizeof</span> s)           <span class=\"comment\">//二维填充</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(g,g+N,<span class=\"number\">1</span>)                  <span class=\"comment\">//同上，填充数组（用的algorithm库）</span></span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(s[<span class=\"number\">0</span>],s[<span class=\"number\">0</span>]+N*N,<span class=\"number\">1</span>)          <span class=\"comment\">//二维填充</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(h,g,<span class=\"keyword\">sizeof</span> g)           <span class=\"comment\">//复制g数组中每一位到h数组中（复制备份数组）</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-增广数组\">3.增广数组</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上下左右四个坐标(0,1; 0,-1; 1,0; -1,0)</span></span><br><span class=\"line\"><span class=\"type\">int</span> s[<span class=\"number\">2</span>][<span class=\"number\">5</span>]=&#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,</span><br><span class=\"line\">  <span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历四个方向的坐标</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">turn</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a=x+s[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">        <span class=\"type\">int</span> b=y+s[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">        <span class=\"comment\">//判断边界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a&lt;<span class=\"number\">0</span>||a&gt;=n||b&lt;<span class=\"number\">0</span>||b&gt;=n) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"comment\">//进行操作</span></span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">turn</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-位运算\">4.位运算</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;                <span class=\"comment\">//1e5+10=100010=10^5+10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1</span>&lt;&lt;n;i++)        <span class=\"comment\">//i&lt;1&lt;&lt;n=i&lt;2^n</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) n&gt;&gt;i&amp;<span class=\"number\">1</span>    <span class=\"comment\">//取出n的二进制位中所有的1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)           <span class=\"comment\">//取某行某列为n*i+j;(当i&lt;n,j&lt;n)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">4</span>;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(op&gt;&gt;(<span class=\"number\">4</span>*i+j)&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) n*<span class=\"number\">10</span>+i;   <span class=\"comment\">//把个位加进去n里</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x=n%<span class=\"number\">10</span>;                <span class=\"comment\">//把n的每一位取出来</span></span><br><span class=\"line\">        n/=<span class=\"number\">10</span>;                     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-sstream库的使用\">5.sstream库的使用</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">    cin&gt;&gt;cnt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    string line;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(cin,line);               <span class=\"comment\">//读第一行回车（没有可以不用写）</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cnt--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin,line);           <span class=\"comment\">//过滤每一行的换行符</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">stringstream <span class=\"title\">ssin</span><span class=\"params\">(line)</span></span>;     <span class=\"comment\">//用ssin代替cin读入每一行</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ssin&gt;&gt;a[n]) n++;       <span class=\"comment\">//把数字提取出来存进数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"算法模板","date":"2023-02-01T11:56:26.000Z","description":"记录学习算法的基本模板*","sticky":1,"cover":"https://cdn.educba.com/academy/wp-content/uploads/2019/04/Types-of-Algorithms.jpg","_content":"\n\n\n## 首先声明！！！\n\n---\n\n* 1.内容可能有点多，涵盖大部分的基础算法模板。\n* 2.如有使用注明出处。\n* 3.如有改进地方欢迎批评指正~\n\n---\n\n\n\n\n\n# * 常用xcpc竞赛模板（数论、计算几何）\n\n\n\n## 一、二维计算几何：\n\n```c++\nnamespace Geometry\n{\n    const double pi = acos(-1);\n    const double eps = 1e-8;\n    // 点与向量\n    struct Point\n    {\n        double x, y;\n        Point(double x = 0, double y = 0) : x(x), y(y) {}\n        bool operator==(const Point a) const\n        {\n            return (fabs(x - a.x) <= eps && fabs(y - a.y) <= eps);\n        }\n    };\n\n    typedef Point Vector;\n    Vector operator+(Vector A, Vector B)\n    {\n        return Vector(A.x + B.x, A.y + B.y);\n    }\n    Vector operator-(Vector A, Vector B)\n    {\n        return Vector(A.x - B.x, A.y - B.y);\n    }\n    Vector operator*(Vector A, double p)\n    {\n        return Vector(A.x * p, A.y * p);\n    }\n    Vector operator/(Vector A, double p)\n    {\n        return Vector(A.x / p, A.y / p);\n    }\n\n    int sign(double x)\n    { // 符号函数\n        if (fabs(x) < eps)\n            return 0;\n        if (x < 0)\n            return -1;\n        return 1;\n    }\n    int cmp(double x, double y)\n    { // 比较函数\n        if (fabs(x - y) < eps)\n            return 0;\n        if (x < y)\n            return -1;\n        return 1;\n    }\n\n    double dot(Point a, Point b)\n    { // 向量点积\n        return a.x * b.x + a.y * b.y;\n    }\n\n    double cross(Point a, Point b)\n    { // 向量叉积\n        return a.x * b.y - b.x * a.y;\n    }\n\n    double get_length(Point a)\n    { // 求向量模长\n        return sqrt(dot(a, a));\n    }\n\n    double get_angle(Point a, Point b)\n    { // 求A->B的有向角\n        return acos(dot(a, b) / get_length(a) / get_length(b));\n    }\n\n    double area(Point a, Point b, Point c)\n    { // A为顶点，向量AB与向量AC的叉积，即三角形ABC的面积的2倍（有向）\n        return cross(b - a, c - a);\n    }\n\n    Point rotate(Point a, double angle)\n    { // 将向量A顺时针旋转angle度\n        return Point(a.x * cos(angle) + a.y * sin(angle), -a.x * sin(angle) + a.y * cos(angle));\n    }\n\n    Point get_line_intersection(Point p, Vector v, Point q, Vector w)\n    { // 两直线的交点\n        // 使用前提，直线必须有交点\n        // cross(v, w) == 0则两直线平行或者重合\n        Vector u = p - q;\n        double t = cross(w, u) / cross(v, w);\n        return p + v * t;\n    }\n\n    double distance_to_line(Point p, Point a, Point b)\n    { // 点到直线的距离，直线为AB所在直线\n        Vector v1 = b - a, v2 = p - a;\n        return fabs(cross(v1, v2) / get_length(v1));\n    }\n\n    double distance_to_segment(Point p, Point a, Point b)\n    { // 点到线段的距离，线段为线段AB\n        if (a == b)\n            return get_length(p - a);\n\n        Vector v1 = b - a, v2 = p - a, v3 = p - b;\n        if (sign(dot(v1, v2)) < 0)\n            return get_length(v2);\n        if (sign(dot(v1, v3)) > 0)\n            return get_length(v3);\n        return distance_to_line(p, a, b);\n    }\n\n    Point get_line_projection(Point p, Point a, Point b)\n    { // 点在直线上的投影，直线为AB所在直线\n        Vector v = b - a;\n        return a + v * (dot(v, p - a) / dot(v, v));\n    }\n\n    bool on_segment(Point p, Point a, Point b)\n    { // 点是否在线段上\n        return sign(cross(p - a, p - b)) == 0 && sign(dot(p - a, p - b)) <= 0;\n    }\n\n    bool segment_intersection(Point a1, Point a2, Point b1, Point b2)\n    { // 判断两个线段是否相交\n        double c1 = cross(a2 - a1, b1 - a1), c2 = cross(a2 - a1, b2 - a1);\n        double c3 = cross(b2 - b1, a2 - b1), c4 = cross(b2 - b1, a1 - b1);\n        return sign(c1) * sign(c2) <= 0 && sign(c3) * sign(c4) <= 0;\n    }\n    // 多边形\n    double polygon_area(Point p[], int n)\n    { // 求多边形面积\n        double s = 0;\n        for (int i = 1; i + 1 < n; i++)\n            s += cross(p[i] - p[0], p[i + 1] - p[i]);\n        return s / 2;\n    }\n}\nusing namespace Geometry;\n```\n\n\n\n## 二、快速幂+组合数：\n\n```c++\nusing i64 = int64_t;\nconstexpr i64 mod = 1e9+7;\ni64 fpow(i64 x, i64 r)\n{\n    i64 result = 1;\n    while (r)\n    {\n        if (r & 1)result = result * x % mod;\n        r >>= 1;\n        x = x * x % mod;\n    }\n    return result;\n}\nnamespace binom {\n    i64 fac[N], ifac[N];\n    int __ = []\n    {\n        fac[0] = 1;\n        for (int i = 1; i <= N - 5; i++)\n            fac[i] = fac[i - 1] * i % mod;\n        ifac[N - 5] = fpow(fac[N - 5], mod - 2);\n        for (int i = N - 5; i; i--)\n            ifac[i - 1] = ifac[i] * i % mod;\n        return 0;\n    }();\n\n    inline i64 C(int n, int m)\n    {\n        if (n < m || m < 0)return 0;\n        return fac[n] * ifac[m] % mod * ifac[n - m] % mod;\n    }\n\n    inline i64 A(int n, int m)\n    {\n        if (n < m || m < 0)return 0;\n        return fac[n] * ifac[n - m] % mod;\n    }\n}\nusing namespace binom;\n```\n\n\n\n## 三、卡特兰数  C(2*n,n)-C(2*n,n-1) ：\n\n```c++\n//分解质因数求组合数（可适用于mod非质数）\nint primes[N],cnt;\nbool st[N];\n\n//筛质数\nvoid init(int n)\n{\n    for(int i=2;i<=n;i++){\n        if(!st[i]) primes[cnt++]=i;\n        for(int j=0;primes[j]*i<=n;j++){\n            st[primes[j]*i]=true;\n            if(i%primes[j]==0) break;\n        }\n    }\n}\n\n//快速幂\nint qmi(int a,int k)\n{\n    int res=1;\n    while(k){\n        if(k&1)res=res*a%mod;\n        a=a*a%mod;\n        k>>=1;\n    }\n    return res;\n}\n\n//分解质因数\nint get(int n,int p)\n{\n    int s=0;\n    for(int j=n;j;j/=p) s+=j/p;\n    return s;\n}\n\n//分解质因数的方式求组合数\nint C(int a,int b)\n{\n    int res=1;\n    for(int i=0;i<cnt;i++){\n        int p=primes[i];\n        int s=get(a,p)-get(b,p)-get(a-b,p);\n        res=res*qmi(p,s)%mod;\n    }\n    return res;\n}\n\n\nvoid slove()\n{\n    cin>>n>>mod;\n    cout<<(C(2*n,n)-C(2*n,n+1)+mod)%mod<<'\\n';\n}\n```\n\n\n\n## 四、欧拉、莫比乌斯函数：\n\n```c++\nint primes[N],cnt;\nint mobius[N],s[N];\nbool st[N];\n\n//线性筛求欧拉函数\nvoid oula(int n)\n{\n    phi[1]=1;\n    for(int i=2;i<=n;i++){\n        if(!st[i]){\n            primes[cnt++]=i;\n            phi[i]=i-1;\n        }\n        for(int j=0;primes[j]*i<=n;j++){\n            st[primes[j]*i]=true;\n            if(i%primes[j]==0){\n                phi[i*primes[j]]=phi[i]*primes[j];\n                break;\n            }\n            phi[i*primes[j]]=phi[i]*(primes[j]-1);\n        }\n    }\n}\n\n//线性筛求莫比乌斯函数\nvoid init(int n)\n{\n    mobius[1]=1;\n    for(int i=2;i<=n;i++){\n        if(!st[i]){\n            primes[cnt++]=i;\n            mobius[i]=-1;\n        }\n        for(int j=0;primes[j]*i<=n;j++){\n            st[primes[j]*i]=true;\n            if(i%primes[j]==0){\n                mobius[primes[j]*i]=0;\n                break;\n            }\n            mobius[primes[j]*i]=mobius[i]*-1;\n        }\n    }\n    for(int i=1;i<=n;i++) s[i]=s[i-1]+mobius[i];\n}\n\n//除数分块\nvoid slove()\n{\n    int a,b,d;\n    cin>>a>>b>>d;\n    a/=d,b/=d;\n\n    int res=0,n=min(a,b);\n    for(int l=1,r;l<=n;l=r+1){\n        r=min(n,min(a/(a/l),b/(b/l)));\n        res+=(s[r]-s[l-1])*(a/l)*(b/l);\n    }\n\n    cout<<res<<'\\n';\n}\n```\n\n\n\n## 五、矩阵快速幂：\n\n```c++\n//矩阵运算\nvoid mul(int a[][N],int b[][N],int c[][N])\n{\n    int t[N][N]={0};\n    for(int i=0;i<N;i++)\n        for(int j=0;j<N;j++)\n            for(int k=0;k<N;k++)\n                t[i][j]=(t[i][j]+a[i][k]*b[k][j])%m;\n\t\t\t\t\n    memcpy(c,t,sizeof t);\n}\n\n\nvoid slove()\n{\n    cin>>n>>m;\n\t\n    //构造系数矩阵\n    int f1[N][N]={1,1,1};\n    int a[N][N]={\n         {0,1,0},\n         {1,1,1},\n         {0,0,1}\n    };\n\t\n    //快速幂\n    int k=n-1;\n    while(k){\n        if(k%2) mul(f1,a,f1);\n        mul(a,a,a);\n        k>>=1;\n    }\n\t\n    cout<<f1[2]<<'\\n';\n}\n```\n\n\n\n## 六、向量叉积应用：\n\n```c++\n//定义点结构体\nstruct Point{\n    double x,y;\n    double angle;\n    bool operator < (const point &t){\n        return angle<t.angle;\n    }\n}p[N];\n\n//求叉积\ndouble cross(Point a,Point b,Point c){\n    return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);\n}\n\n//判定线线的位置关系\nbool check(Point a,Point b,Point c,Point d){\n    return cross(a,b,c)*cross(a,b,d)<=0;\n}\n\n//求两直线的交点\nPoint getNode(Point a,Point u,Point b,Point v)\n{\n    double t=(a-b)*v/(v*u);\n    return a+u*t;\n}\n\n//求三角形面积\ndouble get_s(Point a,Point b,Point c){\n    return cross(a,b,c)/2;\n}\n\n//极角排序（atan2函数）\nbool atan2cmp(Point a,Point b)\n{\n    if(a.angle==b.angle) return a.x<b.x;\n    else return a.angle<a.angle;\n}\n\n//极角排序（叉积）\nbool crosscmp(Point a,Point b)\n{\n    double f=cross(p[pos],a,b);\n    if(f==0) return a.x-p[pos].x<b.x-p[pos].x;\n    else if(f>0) return true;\n    else return false;\n}\n```\n\n\n\n## 七、凸包+旋转卡壳：\n\n```c++\nstruct P{\n    int x,y;\n}p[N],s[N];\n\n//求叉积\nint cross(P a,P b,P c){\n    return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);\n}\n\n//求两点距离\nint dis(P a,P b){\n    return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);\n}\n\n//比较排序\nbool cmp(P a,P b)\n{\n    if(a.x==b.x) return a.y<b.y;\n    return a.x<b.x;\n}\n\n//求凸包的Andrew算法\nvoid Andrew()\n{\n    sort(p+1,p+n+1,cmp);\n\t\n    //求上凸包\n    int top=0;\n    for(int i=1;i<=n;i++){\n        while(top>1&&cross(s[top-1],s[top],p[i])<=0) top--\n        s[++top]=p[i];\n    }\n\t\n    //求下凸包\n    int t=top;\n    for(int i=n-1;i>=1;i--){\n        while(top>t&&cross(s[top-1],s[top],p[i])<=0) top--;\n        s[++top]=p[i];\n    }\n\t\n    n=top-1;\n}\n\n//旋转卡壳\nint rotating_calipers()\n{\n    int res=0;\n    for(int i=1,j=2;i<=n;i++){\n        while(cross(s[i],s[i+1],s[j])<cross(s[i],s[i+1],s[j+1])) j=j%n+1;\n        res=max({res,dis(s[i],s[j]),dis(s[i+1],s[j])});\n    }\n    return res;\n}\n```\n\n\n\n## 八、自适应辛普森积分：\n\n```c++\ndouble eps=1e-6;\ndouble l,r;\n\n//积分函数\ndouble f(double x){\n    return sqrt(x*x*x);\n}\n\n//辛普森公式\ndouble simpson(double l,double r){\n    return (f(l)+f(r)+4*f((l+r)/2))*(r-l)/6;\n}\n\n//自适应\ndouble asr(double a,double b,double ans)\n{\n    auto m=(l+r)/2,a=simpson(l,m),b=simpson(m,r);\n    if(fabs(a+b-ans)<eps) return ans;\n    return asr(l,m,a)+asr(m,r,b);\n}\n```\n\n\n\n## 九、记忆化搜索求期望：\n\n\n```c++\nvector<PII> c[N];\nint d[N],a[N];\ndouble f[N];\nint T,n,m,k;\n\n\ndouble dfs(int u)\n{\n    if(f[u]>0) return f[u];\n    if(u==0) return f[u]=0;\n\n    f[u]=0;\n    for(auto p:c[u]){\n        int i=p.x,j=p.y;\n        f[u]+=(dfs(i)+j)*1.0/d[u];\n    }\n\n    return f[u];\n}\n\n\nvoid slove()\n{\n    cin>>n>>m;\n\n    while(m--){\n        int u,v,w;\n        cin>>u>>v>>w;\n        c[u].push_back({v,w});\n        d[u]++;\n    }\n\n    printf(\"%.2lf\\n\",dfs(1));\n}\n```\n\n\n\n## 十、概率dp：\n\n```c++\nint w,b;\ndouble f[N][N];\n\nint main()\n{\n    cin>>w>>b;\n    for(int i=1;i<=b;i++) f[0][i]=0;\n    for(int i=1;i<=w;i++) f[i][0]=1;\n\t\n    for(int i=1;i<=w;i++){\n        for(int j=1;j<=b;j++){\n            f[i][j]+=(double)i/(i+j);\n            if(i>=1&&j>=2) f[i][j]++(double)j/(i+j)*(j-1)/(i+j-1)*f[i-1][j-2];\n            if(j>=3) f[i][j]+=(double)j/(i+j)*(j-1)/(i+j-1)*(j-2)/(i+j-2)*f[i][j-3];\n        }\n    }\n    printf(\"%.9lf\\n\",f[w][b]);\n}\n```\n\n\n\n\n\n# 一、基础算法\n\n\n\n## 1.排序：\n\n### 1.1 冒泡排序：\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n;\nint g[N];\n\n//冒泡排序 \nvoid bubble_sort()\n{\n    for(int i=0;i<n;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(g[j]>g[j+1])\n                swap(g[j],g[j+1]);\n}\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n\t\n    bubble_sort();\n\t\n    for(int i=0;i<n;i++) cout<<g[i]<<' ';\n\t\n    return 0;\n}\n```\n\n### 1.2 选择排序\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n;\nint g[N];\n\n//选择排序 \nvoid selection_sort()\n{\n    for(int i=0;i<n-1;i++){\n        int min=i;\n        \n        for(int j=i+1;j<n;j++){ \n            if(g[j]<g[min])\n                min=j;\n        }\n        \n        swap(g[min],g[i]);\n    }\t\n}\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n\t\n    selection_sort();\n\t\n    for(int i=0;i<n;i++) cout<<g[i]<<' ';\n\t\n    return 0;\n}\n```\n\n### 1.3 插入排序\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n;\nint g[N];\n\n//插入排序 \nvoid insertion_sort()\n{ \n    for(int i=1;i<n;i++){\n        int res=g[i];\n        int j=i-1;\n\t\t\n        while(j>=0&&g[j]>res){\n            g[j+1]=g[j];\n            j--;\n        }\n\t\t\n        g[j+1]=res;\n    }\t\n}\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n\t\n    insertion_sort();\n\t\n    for(int i=0;i<n;i++) cout<<g[i]<<' ';\n\t\n    return 0;\n}\n```\n\n### 1.4 快速排序\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint q[N];\nint n;\n\n//快速排序 \nvoid quick_sort(int q[],int l,int r)\n{\n    if(l>=r) return;\n\t\n    int x=q[(l+r)>>1],i=l-1,j=r+1;\n    while(i<j){\n        do i++; while(q[i]<x);\n        do j--; while(q[j]>x);\n        if(i<j) swap(q[i],q[j]);\n    }\n\t\n    quick_sort(q,l,j);\n    quick_sort(q,j+1,r);\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++) scanf(\"%d\",&q[i]);\n\t\n    quick_sort(q,0,n-1);\n\t\n    for(int i=0;i<n;i++) printf(\"%d \",q[i]);\n\t \n    return 0;\n}\n```\n\n### 1.5 归并排序\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\nconst int N =1e5+10;\n\nint q[N],tmp[N];\nint n;\n\n//归并排序\nvoid mergesort(int q[],int l,int r)\n{\n    if(l>=r) return;\n\n    int mid=l+r>>1;\n\n    mergesort(q,l,mid),mergesort(q,mid+1,r);\n\n    int k=0,i=l,j=mid+1;\n    while(i<=mid&&j<=r){\n        if(q[i]<=q[j]) tmp[k++]=q[i++];\n        else  tmp[k++]=q[j++];\n    }\n        \n    while(i<=mid) tmp[k++]= q[i++];\n    while(j<=r) tmp[k++]=q[j++];\n\n    for (i=l,j=0;i<=r;i++,j++) q[i]=tmp[j];\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++ ) scanf(\"%d\",&q[i]);\n\n    mergesort(q,0,n-1);\n\n    for (int i=0;i<n;i++) printf(\"%d \",q[i]);\n\n    return 0;\n}\n\n```\n\n\n\n## 2.二分\n\n### 2.1 整数二分\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint q[N];\nint n,m;\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=0;i<n;i++) scanf(\"%d\",&q[i]);\n\t\n    while(m--){\n        int x;\n        scanf(\"%d\",&x);\n\t\t\n        int l=0,r=n-1;\n        while(l<r){\n            int mid=l+r>>1;\n            if(q[mid]>=x) r=mid;\n            else l=mid+1;\n        }\n\t\t\n        if(q[l]!=x) printf(\"-1 -1\\n\");\n        else{\n            printf(\"%d \",l);\n            int l=0,r=n-1;\n            while(l<r){\n                int mid=l+r+1>>1;\n                if(q[mid]<=x) l=mid;\n                else r=mid-1;\n            }\n            printf(\"%d\\n\",l);\n        }\n    }\n\t\n    return 0;\n}\n```\n\n### 2.2 小数二分\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n\nint main()\n{\n    double n;\n    cin>>n;\n    \n    double l=-10000,r=10000;\n    while(r-l>1e-8){\n        double mid=(l+r)/2;\n        if(mid*mid*mid>=n) r=mid;\n        else  l=mid;\n    }\n    \n    printf(\"%.6lf\",l);\n    \n    return 0;\n}\n```\n\n\n\n## 3.前缀和\n\n### 3.1 线性前缀和\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n,m;\nint g[N],s[N];\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) cin>>g[i],s[i]=s[i-1]+g[i];\n\t\n    while(m--){\n        int l,r;\n        cin>>l>>r;\n        cout<<s[r]-s[l-1]<<endl;\n    }\n\t\n    return 0;\n}\n```\n\n### 3.2 二维前缀和\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1010;\n\nint n,m,p;\nint g[N][N],s[N][N];\n\n\nint main()\n{\n    cin>>n>>m>>p;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            cin>>g[i][j];\n            s[i][j]=s[i][j-1]+s[i-1][j]-s[i-1][j-1]+g[i][j];\n        }\n    }\n\t\n    while(p--){\n        int x1,x2,y1,y2;\n        cin>>x1>>y1>>x2>>y2;\n        LL sum=s[x2][y2]-s[x1-1][y2]-s[x2][y1-1]+s[x1-1][y1-1];\n        cout<<sum<<endl;\n    }\n\t\n    return 0;\n} \n```\n\n\n## 4.差分\n\n### 4.1 线性差分\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint a[N],b[N];\nint n,m;\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&a[i]);\n        b[i]=a[i]-a[i-1];\n    }\n\t\n    while(m--){\n        int l,r,c;\n        scanf(\"%d%d%d\",&l,&r,&c);\n        b[l]+=c;\n        b[r+1]-=c;\n    }\n\t\n    for(int i=1;i<=n;i++){\n        a[i]=a[i-1]+b[i];\n        printf(\"%d \",a[i]);\n    }\n\t\n    return 0;\n} \n```\n\n### 4.2 二维差分\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1010;\n\nint n,m,q;\nint a[N][N],b[N][N];\n\n//差分函数 \nvoid insert(int x1,int y1,int x2,int y2,int c)\n{\n    b[x1][y1]+=c;\n    b[x2+1][y1]-=c;\n    b[x1][y2+1]-=c;\n    b[x2+1][y2+1]+=c;\n}\n\n\nint main()\n{\n    cin>>n>>m>>q;\n\t\n    //预处理出差分 \n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            scanf(\"%d\",&a[i][j]);\n            insert(i,j,i,j,a[i][j]);\n        }\n    }     \n    \n    //查询时操作 \n    while(q--){\n        int x1,y1,x2,y2,c;\n        cin>>x1>>y1>>x2>>y2>>c;\n        insert(x1,y1,x2,y2,c);\n    }\n\t\n    //差分还原后输出 \n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            b[i][j]+=b[i-1][j]+b[i][j-1]-b[i-1][j-1];\n            printf(\"%d \",b[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\t\n    return 0;\n}\n```\n\n\n\n## 5.双指针\n\n### 5.1 头尾指针\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint  a[N],b[N];\nint n,m,x;\n\n\nint main()\n{\n    cin>>n>>m>>x;\n    for(int i=0;i<n;i++) cin>>a[i];\n    for(int i=0;i<m;i++) cin>>b[i];\n\t\n    int i,j=m-1;\n    for(i=0;i<n;i++){\n        while(j>=0&&a[i]+b[j]>x) j--;\n        if(a[i]+b[j]==x) break;\n    }\n\t\n    cout<<i<<' '<<j<<endl;\n\t\n    return 0;\n}\n```\n\n### 5.2 头双指针\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n,m;\nint a[N],b[N];\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=0;i<n;i++) cin>>a[i];\n    for(int i=0;i<m;i++) cin>>b[i];\n\t\n    for(int i=0,j=0;i<m;i++){\n        if(a[j]==b[i]) j++;\n        if(j==n){\n            printf(\"Yes\");\n            return 0;\n        }\n    }\n    \n    printf(\"No\");\n\t\n    return 0;\n}\n```\n\n### 5.3 快慢指针（链表）\n```c++\n public class ListNode {\n      int val;\n      ListNode next;\n      ListNode() {}\n      ListNode(int val) { this.val = val; }\n      ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n  }\n```\n```c++\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode p = head, q = head;\n        while(q != null && q.next != null){\n            q = q.next.next;\n            p = p.next;\n        }\n        return p;\n    }\n}\n```\n\n\n\n## 6.贪心\n\n### 6.1 区间选点\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nstruct Range{\n    int l,r;\n}range[N];\n\nbool cmp(Range a,Range b)\n{\n    if(a.r==b.r) return a.l<b.r;\n    return a.r<b.r;\n}\n\n\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>range[i].l>>range[i].r;\n\t\n    sort(range,range+n,cmp);\n\t\n    int sum=1,res=range[0].r;\n    for(int i=1;i<n;i++){\n        if(res<range[i].l){\n            res=range[i].r;\n            sum++;\n        }\n    }\n\t\n    cout<<sum<<endl;\n\t\n    return 0;\n}\n```\n\n### 6.2 区间分组\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\npriority_queue <int,vector<int>,greater<int> > heap;\n\nconst int N=1e5+10;\n\nstruct Range{\n    int l,r;\n}range[N];\n\n\nbool cmp(Range a,Range b){\n    return a.l<b.l;\n}\n\n\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>range[i].l>>range[i].r;\n\t\n    sort(range,range+n,cmp);\n\t\n    for(int i=0;i<n;i++){\n        Range r=range[i];\n        if(heap.empty()||heap.top()>=r.l) heap.push(r.r);\n        else{\n            heap.pop();\n            heap.push(r.r);\n        }\n    }\n\t\n    cout<<heap.size()<<endl;\n\t\n    return 0;\n}\n```\n\n### 6.3 哈夫曼树\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\npriority_queue<int,vector<int>,greater<int> > q;\n\n\nint main()\n{\n    int n,p;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&p);\n        q.push(p);\n    }\n    \n    int x,y,sum=0;\n    while(q.size()>1){\n        x=q.top();\n        q.pop();\n        y=q.top();\n        q.pop();\n        q.push(x+y);\n        sum+=x+y;\n    }\n\t\n    printf(\"%d\",sum);\n\t\n    return 0;\n}\n```\n\n### 6.4 选址问题\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10;\n\nint n;\nint g[N];\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n\t\n    sort(g,g+n);\n\t\n    LL sum=0;\n    for(int i=0;i<n;i++) sum+=abs(g[i]-g[n/2]);\n\t\n    cout<<sum<<endl;\n\t\n    return 0;\n}\n```\n\n### 6.5 推公式\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10;\n\nint n;\nLL ct[N];\n\nstruct P{\n    int x,y,z;\n}g[N];\n\n\nbool cmp(P a,P b){\n    return a.z<b.z;\n}\n\n\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        int a,b;\n        cin>>a>>b;\n        g[i].x=a,g[i].y=b,g[i].z=a+b;\n    }\n\t\n    sort(g+1,g+n+1,cmp);\n\t\n    for(int i=1;i<=n;i++) ct[i]=ct[i-1]+g[i].x;\n\t\n    LL sum=-2e17;\n    for(int i=1;i<=n;i++){\n        LL t=ct[i-1]-g[i].y;\n        sum=max(sum,t);\n    }\n\t\n    cout<<sum<<endl;\n\t\n    return 0;\n}\n```\n\n\n\n## 7.位运算\n\n### 7.1 朴素版\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint a[N];\n\n\nint check(int n)\n{\n    int sum=0;\n    while(n){\n        if(n&1) sum++;\n        n>>=1;\n    }\n    return sum;\n}\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&a[i]);\n        printf(\"%d \",check(a[i]));\n    }\n\t\n    return 0;\n}\n```\n\n### 7.2 x&-x\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    \n    while(n--)\n    {\n        int x,s=0;\n        scanf(\"%d\",&x);\n        for(int i=x;i;i-=i&-i) s++;\n        printf(\"%d \",s);\n    }\n\n    return 0;\n}\n```\n\n---\n\n\n\n\n\n# 二、数据结构\n\n\n\n## 1.线性表\n\n### 1.1 数组\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n;\nint g[N];\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n\t\n    for(int i=0;i<n;i++) cout<<g[i]<<' ';\n\t\n    return 0;\n}\n```\n\n### 1.2 哈希表\n```c++\n#include<iostream>\n#include<algorithm>\n \nusing namespace std;\n\nconst int N=1e5+3,null=1e9+7;   \n\nint h[N];\nint n;\n\n\nint find(int x)\n{\n    int k=(x%N+N)%N;\n    while(h[k]!=null&&h[k]!=x){\n        if(k==N) k=0;\n        k++;\n    }\n    return k;\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    fill(h,h+N,null);\n\t\n    while(n--){\n        int x;\n        char op[2];\n        scanf(\"%s%d\",&op,&x);\n        int k=find(x); \n\t\t\n        if(op[0]=='I') h[k]=x;\n        else{\n            if(h[k]==null) printf(\"No\\n\");\n            else  printf(\"Yes\\n\");\n        }\n    }\n    return 0;\n}\n```\n\n\n\n## 2.链表\n\n### 说明：C++里有三种链表的应用方法\n\n* #### 1.指针（最基本的链表）\n* #### 2.结构体（链表的一个变种）\n* #### 3.数组模拟（运行速度快，理解起来有点绕）\n\n### 这里主要展示数组模拟~\n\n### 2.1 单链表\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\n//head 表示头结点的下标 \n//e[i] 表示节点i的值 \n//ne[i] 表示节点i的next指针是多少 \n//idx 存储当前已经用到了哪个点 \nint head,e[N],ne[N],idx;\n\n//初始化 \nvoid init()\n{\n    head=-1;\n    idx=0; \n} \n\n//在头节点后面插入节点 \nvoid add_to_head(int x)\n{\n    e[idx]=x;\n    ne[idx]=head;\n    head=idx++;\n}\n\n//在k节点后面插入节点\nvoid add(int k,int x)\n{\n    e[idx]=x;\n    ne[idx]=ne[k];\n    ne[k]=idx++;\n}\n\n//删除节点 \nvoid remove(int k)\n{\n    ne[k]=ne[ne[k]];\n}\n\n\nint main()\n{\n    int m;\n    cin>>m;\n    init();\n\t\n    while(m--){\n        int k,x;\n        char op;\n\t\t\n        cin>>op;\n        if(op=='H'){\n            cin>>x;\n            add_to_head(x);\n        }\n        else if(op=='D'){\n            cin>>k;\n            if(!k)  head=ne[head];\n            remove(k-1);\n        }\n        else{\n            cin>>k>>x;\n            add(k-1,x);\n        }\n    }\n\t\n    for(int i=head;i!=-1;i=ne[i]) \n        cout<<e[i]<<' ';\n\n    return 0;\n}\n```\n\n### 2.2 双链表\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint m;\nint e[N],l[N],r[N],idx;\n\n//初始化\nvoid init()\n{\n    r[0]=1,l[1]=0;\n    idx=2;\n} \n\n//在第k个点左右插入一个点\nvoid add(int k,int x)\n{\n    e[idx]=x;\n    r[idx]=r[k],l[idx]=k;\n    l[r[k]]=idx,r[k]=idx++;\n}\n\n//删除第k个点\nvoid removes(int k)\n{\n    r[l[k]]=r[k];\n    l[r[k]]=l[k];\n}\n\n\nint main()\n{\n    init();\n\t\n    cin>>m;\n\t\n    while(m--){\n        string op;\n        int k,x;\n        cin>>op;\n\t\t\n        if(op==\"L\"){\n            cin>>x;\n            add(0,x);\n        }\n        else if(op==\"R\"){\n            cin>>x;\n            add(l[1],x);\n        }\n        else if(op==\"D\"){\n            cin>>k;\n            removes(k+1);\n        }\n        else if(op==\"IL\"){\n            cin>>k>>x;\n            add(l[k+1],x);\n        }\n        else{\n            cin>>k>>x;\n            add(k+1,x);\n        }\n    }\n\t\n    for(int i=r[0];i!=1;i=r[i]) \n        cout<<e[i]<<' ';\n\t\n    return 0;\n}\n```\n\n\n\n## 3.栈\n\n### 3.1 STL容器\n```c++\n#include<iostream>\n#include<algorithm>\n#include<stack>\n\nusing namespace std;\n\nstack<int> st;\nstring s;\nint n;\n\n\nint main()\n{\n    cin>>n;\n\t\n    while(n--){\n        cin>>s;\n        if(s==\"push\"){\n            int x;\n            cin>>x;\n            st.push(x);\n        }\n        else if(s==\"empty\"){\n            if(st.size()) printf(\"NO\\n\");\n            else  printf(\"YES\\n\");\n        }\n        else if(s==\"query\")\n            printf(\"%d\\n\",st.top());\n        else st.pop();\n    }\n\t\n    return 0;\n}\n```\n\n### 3.2 数组模拟\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n;\nint st[N],tt=-1;\nstring s;\n\n\nint main()\n{\n    cin>>n; \n\t\n    while(n--){\n        cin>>s;\n        if(s==\"push\"){\n            int x;\n            cin>>x;\n            st[++tt]=x;\n        }\n        else if(s==\"empty\"){\n            if(tt!=-1) printf(\"NO\\n\");\n            else  printf(\"YES\\n\");\n        }\n        else if(s==\"query\")\n            printf(\"%d\\n\",st[tt]);\n        else tt--;\n    }\n    \n    return 0;\n} \n```\n\n\n\n## 4.队列\n\n### 4.1 STL容器\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\nqueue<int> q;\nstring s;\nint n;\n\n\nint main()\n{\n    cin>>n;\n\t\n    while(n--){\n        cin>>s;\n        if(s==\"push\"){\n            int x;\n            cin>>x;\n            q.push(x);\n        }\n        else if(s==\"empty\"){\n            if(q.size()) printf(\"NO\\n\");\n            else  printf(\"YES\\n\");\n        }\n        else if(s==\"query\")\n            printf(\"%d\\n\",q.front());\n        else q.pop();\n    }\n\t\n    return 0;\n}\n```\n\n### 4.2 数组模拟\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10; \n\nint n;\nint q[N],hh=0,tt=-1;\nstring s;\n\n\nint main()\n{\n    cin>>n;\n\t\n    while(n--){\n        cin>>s;\n        if(s==\"push\"){\n            int x;\n            cin>>x;\n            q[++tt]=x;\n        }\n        else if(s==\"empty\"){\n            if(tt<hh) printf(\"YES\\n\");\n            else  printf(\"NO\\n\");\n        }\n        else if(s==\"pop\") hh++;\n        else printf(\"%d\\n\",q[hh]);\n    }\n\t\n    return 0;\n}\n```\n\n\n\n## 5.树\n\n### 5.1 并查集\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint fa[N];\nint n,m;\n\n\nint find(int x)\n{\n    if(fa[x]!=x) fa[x]=find(fa[x]);\n    return fa[x];\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) fa[i]=i;\n\t\n    while(m--){\n        int a,b;\n        char op[2];\n        scanf(\"%s%d%d\",&op,&a,&b);\n        if(op[0]=='M') fa[find(a)]=find(b);\n        else{\n            if(find(a)==find(b)) printf(\"Yes\\n\");\n            else  printf(\"No\\n\");\n        }\n    }\n\t\n    return 0;\n}\n```\n\n### 5.2 Trie树\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\n//下标是0的点，既是根结点，又是空节点\n//idx是节点，son[p][u]为指向下一个节点的指针 \nint son[N][26],cnt[N],idx=0; \nchar str[N];\n\n//插入节点\nvoid insert(char str[])\n{\n    int p=0;\n    for(int i=0;str[i];i++){\n        int u=str[i]-'a';\n        if(!son[p][u]) son[p][u]=++idx;\n        p=son[p][u];\n    }\n    cnt[p]++;\n} \n\n//查询节点\nint query(char str[])\n{\n    int p=0;\n    for(int i=0;str[i];i++){\n        int u=str[i]-'a';\n        if(!son[p][u]) return 0;\n        p=son[p][u];\n    }\n    return cnt[p];\n} \n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    while(n--){\n        char op[2];\n        scanf(\"%s%s\",&op,&str);\n        \n        if(op[0]=='I') insert(str);\n        else printf(\"%d\\n\",query(str));\n    }\n\t\n    return 0;\n} \n```\n\n\n\n## 6.图\n\n### 6.1 邻接矩阵\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=510,INF=1e9+7;\n\nint g[N][N];\nint n,m;\n\n\nint main()\n{\n    cin>>n>>m;\n    fill(g[0],g[0]+N*N,INF);\n\t\n    while(m--){\n        int a,b,c;\n        cin>>a>>b>>c;\n        \n        //有向图\n        g[a][b]=min(g[a][b],c);\n        //无向图\n        g[a][b]=g[b][a]=min(g[a][b],c);\n    }\n\t\n    return 0;\n}\n```\n\n### 6.2 邻接表\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10,INF=1e9+7;\n\nint h[N],e[N],ne[N],w[N],idx;\nint n,m;\n\n//添加节点\nvoid add(int a,int b,int c)\n{\n    e[idx]=b;\n    w[idx]=c;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    fill(h,h+N,-1);\n\t\n    while(m--){\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n\t\t\n        //有向图\n        add(a,b,c);\n        //无向图\n        add(a,b,c),add(b,a,c);\n    }\n\t\n    return 0;\n} \n```\n\n\n\n## 7.树状数组+线段树\n\n### 7.1 树状数组\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define x first\n#define y second\n\nusing namespace std;\n\ntypedef long long LL;\n\ntypedef pair<int,int> PII;\n\nconst int N=1e6+10;\n\nLL a[N],c[N];\nLL T,n,m;\n\nLL query(LL x)\n{\n    LL s=0;\n    for(;x;x-=x&(-x)) s+=c[x];\n    return s;\n}\n\nvoid add(LL x,LL s){\n    for(;x<=n;x+=x&(-x)) c[x]+=s;\n}\n\n \nint main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>n>>m;\n    for(int i=1;i<=n;i++){\n        cin>>a[i];\n        add(i,a[i]);\n    }\n\t\n    while(m--){\n        LL t,x,y;\n        cin>>t>>x>>y;\n\t\t\n        if(t) add(x,y);\n        else cout<<query(y)-query(x-1)<<endl;\n    }\n\t\n    return 0;\n}\n```\n\n### 7.2 线段树\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define x first\n#define y second\n\nusing namespace std;\n\ntypedef long long LL;\n\ntypedef pair<int,int> PII;\n\nconst int N=1e6+10;\n\nLL a[N],c[N];\nLL T,n,m;\n\nstruct Node\n{\n    int l,r;\n    int v;  // 区间[l, r]中的最大值\n}tr[N*4];\n\n\nvoid pushup(int u)  // 由子节点的信息，来计算父节点的信息\n{\n    tr[u].v=max(tr[u<<1].v,tr[u<<1|1].v);\n}\n\n\nvoid build(int u,int l,int r)\n{\n    tr[u]={l,r};\n    if(l==r) return;\n    int mid=l+r>>1;\n    build(u<<1,l,mid), build(u<<1|1,mid+1,r);\n}\n\n\nint query(int u,int l,int r)\n{\n    if(tr[u].l>=l &&tr[u].r<=r) return tr[u].v;   // 树中节点，已经被完全包含在[l,r]中了\n\n    int mid=tr[u].l+tr[u].r>>1;\n    int v=0;\n    if(l<=mid) v=query(u<<1,l,r);\n    if(r>mid) v=max(v,query(u<<1|1,l,r));\n\n    return v;\n}\n\n\nvoid modify(int u,int x,int v)\n{\n    if(tr[u].l==x&&tr[u].r== x) tr[u].v=v;\n    else{\n        int mid=tr[u].l+tr[u].r>>1;\n        if(x<=mid) modify(u<<1,x,v);\n        else modify(u<<1|1,x,v);\n        pushup(u);\n    }\n}\n\n\nint main()\n{\n    int n=0,last=0;\n    scanf(\"%d%d\",&m,&p);\n    build(1,1,m);\n\n    int x;\n    char op[2];\n    while(m--)\n    {\n        scanf(\"%s%d\",op,&x);\n        if(*op=='Q'){\n            last=query(1,n-x+1,n);\n            printf(\"%d\\n\",last);\n        }\n        else{\n            modify(1,n+1,((LL)last+x)%p);\n            n++;\n        }\n    }\n\n    return 0;\n}\n```\n\n\n\n## 8.C++ STL容器及函数（只列出较为常用的）\n\n### 8.1 常用函数*\n```c++\n#include<iostream>\n#include<algorithm>        //头文件\n\nusing namespace std;\n\n\nint main()\n{\n    //1.max()、min()、abs()函数\n    int a = 3, b = 4;\n    //求最大值\n    int Max = max(a,b);\n    //求最小值\n    int Min = min(a,b);\n    //求绝对值\n    int Abs = abs(-3);\n    cout << Max << Min << Abs;\n    \n    //2.交换函数：swap()\n    int a = 3, b = 4;\n    swap(a,b);\n\t\n    //3.排序函数：sort()\n    int a[5] = {55,44,33,22,11};\n    sort(a,a+5);\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n        \n    //4.填充函数：fill() (很多人都用memset，但是我就喜欢fill)\n    int a[5] = {11,33,22};\n    fill(a+3,a+5,9999);\t\t\t\t\t\t\t\t\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n    \n    //5.翻转函数：reverse()\n    int a[5] = {11,22,33,44,55};\n    reverse(a,a+5);\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n        \n    return 0;\n}\n```\n\n\n### 8.2 vector（动态数组）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>           //头文件\n\nusing namespace std;\n\n//初始化\n//方式一：初始化一维可变长数组\nvector<int> c; //定义了一个名为num的存int数据的一维数组\nvector<double> c;//定义了一个名为num的存double数据的一维数组\nvector<node> c;//node是结构体类型\n \n//方式二：初始化二维可变长数组\nvector<int> c[5];//定义可变长二维数组\n//注意：行是不可变的（只有5行），而列可变可以在指定行添加元素\n//第一维固定长度为5，第二维长度可以改变\n \n//方式三:初始化二维均可变长数组\nvector<vectot<int> > c;//定义一个行和列均可变的二维数组\n\n\nint main()\n{\n    //访问\n    //方式一：单个访问，假设num数组中已经有了5个元素\n    cout<<c[4]<<\"\\n\";  //输出第五个数据\n    //一二维可变数组和普通数组的访问方法一样\n \n    //方式二:遍历\n    for(int i=0;i<c.size();i++)\n        cout<<c[i]<<\" \";\n \n    //方式三：智能指针\n    for(auto i : c)\n        cout<<i<<\" \";\n        \n    return 0;\n}\n```\n\n```c++\n---\n相关方法函数如下：c指定为数组名称\n\n代码\t含义\nc.front()\t返回第一个数据\nc.back()\t返回最后一个数据\nc.push_back(element)\t在尾部加一个数据 O(1)\nc.pop_back()\t删除最后一个数据 O(1)\nc.size()\t返回实际数据个数（unsigned类型） O(1)\nc.clear()\t清除元素个数 O(N),N为元素个数\nc.resize(n,v)\t改变数组大小为n,n个空间数值赋为v，如果没有默认赋值为0\nc.insert(it,x)\t\n向任意迭代器it插入一个元素x O(N)，\n\n例：c.insert(c.begin()+2,-1) 将-1插入c[2]的位置\n\nc.erase(first,last)\t删除[first,last)的所有元素\nc.begin()\t返回首元素的迭代器（通俗来说就是地址）\nc.end()\t返回最后一个元素后一个位置的迭代器（地址）\nc.empty()\t判断是否为空，为空返回真，反之返回假\n注意： end()返回的是最后一个元素的后一个位置的地址，不是最后一个元素的\n---\n```\n\n### 8.3 stack（栈）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<stack>           //头文件\n\nusing namespace std;\n\n//初始化\nstack<int> st;\nstack<string> st;\nstack<node> st;//node是结构体类型\n\n\nint main()\n{\n    //访问函数\n    push()\t压栈，增加元素 O(1)\n    pop()\t移除栈顶元素 O(1)\n    top()\t取得栈顶元素（但不删除）O(1)\n    empty()\t检测栈内是否为空，空为真 O(1)\n    size()\t返回stack内元素的个数 O(1)\n        \n    return 0;\n}\n```\n\n### 8.4 queue（队列）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>           //头文件\n\nusing namespace std;\n\n//普通队列初始化\nqueue<int> q;\nqueue<string> q;\nqueue<node> q;//node是结构体类型\n\n//优先队列初始化定义\npriority_queue<int> q;\n//优先队列设置优先级\npriority_queue<int, vector<int>, greater<int> > q;\n//最后两个>之间要有空格，旧版c++编译器会把\">>\"当成右移符！！！\n\n\nint main()\n{\n    //普通队列访问函数\n    front()\t返回队首元素 O(1)\n    back()\t返回队尾元素 O(1)\n    push()\t尾部添加一个元素副本 进队O(1)\n    pop()\t删除第一个元素 出队 O(1)\n    size()\t返回队列中元素个数，返回值类型unsigned int O(1)\n    empty()\t判断是否为空，队列为空，返回true O(1)\n    \n    //优先队列访问函数\n    top()\t访问队首元素\n    push()\t入队\n    pop()\t堆顶（队首）元素出队\n    size()\t队列元素个数\n    empty()\t是否为空\n    注意没有clear()！\t不提供该方法\n    优先队列只能通过top()访问队首元素（优先级最高的元素）\n    \n    //注：栈的取第一个元素为top();而普通队列的为front();优先队列为top();\n        \n    return 0;\n}\n```\n\n### 8.5 pair\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n//初始化\n\npair<string,int>p(\"wangyaqi\",1);//带初始值的\npair<string,int>p;//不带初始值的\n\n\nint main()\n{\n    //访问函数\n    pair<int,int>p[20];\n    for(int i=0;i<20;i++){\n        //和结构体类似，first代表第一个元素，second代表第二个元素\n        cout<<p[i].first<<\" \"<<p[i].second;\n    }\n        \n    return 0;\n}\n```\n\n### 8.6 string字符串\n```c++\n#include<iostream>\n#include<algorithm>\n#include<string>       //头文件（可写可不写，iostream里自带）\n\nusing namespace std;\n\n//定义\nstring s;\n\n\nint main()\n{\n    //使用操作\n    for(int i=0;i<s.size();i++) \n        cout<<s[i]<<\" \";\n    \n    //拼接\n    string s1;\n    string s2;\n    s1 = \"123\";\n    s2 = \"456\";\n    string s = s1 + s2;\n    cout<<s;   //123456\n    \n    return 0;\n}\n```\n\n\n---\n\n\n\n\n\n# 三、搜索和图论\n\n\n\n## 1.DFS深度优先搜索\n\n### 1.1 基础深搜\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\nconst int N=10;\n\nint path[N];\nbool st[N];\nint n;\n\n\nvoid dfs(int u)\n{\n    if(u==n){\n        for(int i=0;i<n;i++) printf(\"%d \",path[i]);\n        printf(\"\\n\");\n        return;\n    }\n\t\n    for(int i=1;i<=n;i++){\n        if(!st[i]){\n            path[u]=i;\n            st[i]=true;\n            dfs(u+1);\n            st[i]=false;\n        }\n    }\n}\n\n\nint main()\n{\n    cin>>n;\n\t\n    dfs(0);\n\t\n    return 0;\n}\n```\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=20;\n\nbool col[N],dg[N],udg[N];\nchar g[N][N];\nint n;\n\n\nvoid dfs(int u)\n{\n    if(u==n){\n        for(int i=0;i<n;i++) puts(g[i]);\n        puts(\"\");\n        return;\n    }\n\t\n    for(int i=0;i<n;i++){\n        if(!col[i]&&!dg[u+i]&&!udg[n-u+i]){\n            g[u][i]='Q';\n            col[i]=dg[u+i]=udg[n-u+i]=true;\n            dfs(u+1);\n            col[i]=dg[u+i]=udg[n-u+i]=false;\n            g[u][i]='.';\n        }\n    } \n}\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++)\n        for(int j=0;j<n;j++)\n            g[i][j]='.';\n\t\n    dfs(0);\n\t\n    return 0;\n}\n```\n\n### 1.2 图的深搜\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint h[N],e[2*N],ne[2*N],idx;\nbool st[N];\nint n;\n\nint ans=N; \n\n//邻接表存储图 \nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n//以u为根的子树中点的数量 \nint dfs(int u)\n{\n    st[u]=true;\n    int sum=1,res=0;\n    //sum存当前子树节点节点总个数 \n    for(int i=h[u];i!=-1;i=ne[i]){\n        int j=e[i];\n        if(!st[j]){\n            int s=dfs(j);     \n            //搜索子树节点个数并累加到s中 \n            res=max(res,s);\n            //更新res值 \n            sum+=s;\n            //累加节点u的子树节点 \n        }\n    }\n    //res存当前子树节点最大值 \n    res=max(res,n-sum);\n    //ans存所有节点的res最小值（重心） \n    ans=min(ans,res);\n    //返回子树节点总数 \n    return sum;\n}\n\n\nint main()\n{\n    fill(h,h+N,-1);\n\t\n    cin>>n;\n    for(int i=0;i<n-1;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(a,b),add(b,a);\n    }\n\t\n    dfs(1);\n\t\n    cout<<ans<<endl;\n\t\n    return 0;\n} \n```\n\n\n\n## 2.BFS广度优先搜索\n\n### 2.1 基础搜索\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n\nusing namespace std;\n\ntypedef pair<int,int> PII;\n\nconst int N=110;\n\nint g[N][N],d[N][N];\nPII q[N*N];\nint n,m;\n\nint s[2][4]={\n    0,0,1,-1,\n    1,-1,0,0\n};\n\n\nint bfs()\n{\n    int hh=0,tt=0;\n    q[0]={0,0};\n\t\n    fill(d[0],d[0]+N*N,-1);\n    d[0][0]=0;\n\t\n    while(hh<=tt){ \n        PII t=q[hh++];\n        for(int i=0;i<4;i++){\n            int x=t.first+s[0][i];\n            int y=t.second+s[1][i];\n            if(x>=0&&x<n&&y>=0&&y<m&&g[x][y]==0&&d[x][y]==-1){\n                d[x][y]=d[t.first][t.second]+1;\n                q[++tt]={x,y};\n            }\n        }\n    }\n\t\n    return d[n-1][m-1];\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=0;i<n;i++)\n        for(int j=0;j<m;j++)\n            cin>>g[i][j];\n\n\t\n    cout<<bfs()<<endl;\n\t\n    return 0;\n} \n```\n\n### 2.2 图的广搜\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint h[N],e[N],ne[N],idx;\nint q[N],d[N];\nint n,m;\n\n//邻接表存储图 \nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nint bfs()\n{\n    int hh=0,tt=0;\n    fill(d,d+N,-1);\n    q[0]=1,d[1]=0;\n\t//数组q模拟队列 \n    while(hh<=tt){\n        int t=q[hh++];\n        for(int i=h[t];i!=-1;i=ne[i]){\n            int j=e[i];\n            if(d[j]==-1){\n                d[j]=d[t]+1;\n                q[++tt]=j;\n            }\n        }\n    }\n    //d[n]记录路径长度+判断\n    return d[n];\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    //fill填充h数组\n    fill(h,h+N,-1);\n\t\n    for(int i=0;i<m;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(a,b);\n    }\n\t\n    cout<<bfs()<<endl;\n\t\n    return 0;\n}\n```\n\n### 2.3 有向图拓扑排序\n\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint h[N],e[N],ne[N],idx;\nint q[N],d[N];   //d数组存储节点入度 \nint n,m;\n\n//邻接表存储图（数组模拟单链表） \nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n//拓扑排序 \nbool topsort()\n{\n    int hh=0,tt=-1;\n    //把入度为0的所有节点加进队列 \n    for(int i=1;i<=n;i++){\n        if(!d[i]) q[++tt]=i;\n    }\n    //数组模拟队列 \n    while(hh<=tt){\n        int t=q[hh++];\n        //遍历图 \n        for(int i=h[t];i!=-1;i=ne[i]){\n            int j=e[i]; \n            d[j]--;    //j节点入度-1 \n            if(!d[j]) q[++tt]=j;\n            //如果节点入度为0，则加入队列 \n        }\n    }\n    //判断是否遍历完成 \n    return tt==n-1;\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    fill(h,h+N,-1);\n\n    for(int i=0;i<n;i++){\n        int a,b;\n        cin>>a>>b;\n        add(a,b);\n        d[b]++;    //节点入度++             \n    }\n    //遍历队列即为序列 \n    if(topsort()){\n        for(int i=0;i<n;i++){\n            printf(\"%d \",q[i]);\n        }\n    }\n    else printf(\"-1\");\n\n    return 0;\n} \n```\n\n\n\n## 3.最短路径算法\n\n### 3.1 朴素Dijkstra最短路（不存在负权边）\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=510,INF=1e9+7;\n\nint g[N][N];\nint dist[N];\nbool st[N];\nint n,m;\n\n\nint dijkstra()\n{\n    fill(dist,dist+N,INF);\n    dist[1]=0;\n\t\n    for(int i=0;i<n;i++){\n        int t=-1;\n        for(int j=1;j<=n;j++)\n            if(!st[j]&&(t==-1||dist[t]>dist[j]))\n                t=j;\n        for(int j=1;j<=n;j++)\n            dist[j]=min(dist[j],dist[t]+g[t][j]);\n        st[t]=true;\n    }\n\t\n    return dist[n];\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    fill(g[0],g[0]+N*N,INF);\n\t\n    while(m--){\n        int a,b,c;\n        cin>>a>>b>>c;\n        g[a][b]=min(g[a][b],c);\n    }\n\t\n    int t=dijkstra();\n\t\n    if(t==INF) printf(\"-1\");\n    else printf(\"%d\",dist[n]);\n\t\n    return 0;\n}\n```\n\n### 3.2 堆优化Dijkstra最短路\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\nconst int N=1e6+10,INF=1e9+7;\n\ntypedef pair<int,int> PII;\n\nint h[N],w[N],e[N],ne[N],idx;\nint dist[N],n,m;\nbool st[N];\n\n\nvoid add(int a,int b,int c)\n{\n    w[idx]=c;\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nint dijkstra()\n{\n    fill(dist,dist+N,INF);\n    dist[1]=0;\n\t\n    priority_queue<PII,vector<PII>,greater<PII> > heap;\n    heap.push({0,1});\n\t\n    while(heap.size()){\n        PII t=heap.top();\n        heap.pop();\n\t\t\n        int ver=t.second,distance=t.first;\n        if(st[ver]) continue;\n        st[ver]=true;\n\t\t\n        for(int i=h[ver];i!=-1;i=ne[i]){\n            int j=e[i];\n            if(dist[j]>distance+w[i]){\n                dist[j]=distance+w[i];\n                heap.push({dist[j],j});\n            }\n        }\n    }\n\t\n    if(dist[n]==INF) return -1;\n    return dist[n];\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    fill(h,h+N,-1);\n\n    while(m--){\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n    }\n\t\n    printf(\"%d\",dijkstra());\n\t\n    return 0;\n}\n```\n\n### 3.3 bellman-ford最短路（有边数限制）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n\nusing namespace std;\n\nconst int N=510,M=10010,INF=1e9+7;\n\nint dist[N],backup[N];\nint n,m,k;\n\nstruct Edge{\n    int a,b,w;\n}edges[M];\n\n\nvoid bellman_ford()\n{\n    fill(dist,dist+N,INF);\n    dist[1]=0;\n\t\n    for(int i=0;i<k;i++){\n        memcpy(backup,dist,sizeof dist);\n        for(int j=0;j<m;j++){\n            int a=edges[j].a,b=edges[j].b,w=edges[j].w;\n            dist[b]=min(dist[b],backup[a]+w);\n        }\n    }\n}\n\n\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=0;i<m;i++){\n        int a,b,w;\n        scanf(\"%d%d%d\",&a,&b,&w);\n        edges[i]={a,b,w};\n    }\n\t\n    bellman_ford();\n\t\n    if(dist[n]>INF/2) printf(\"impossible\");\n    else  printf(\"%d\",dist[n]);\n\t\n    return 0;\n}\n```\n\n### 3.4 spfa最短路（存在负权边）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\nconst int N=1e5+10,INF=1e9+7;\n\nint h[N],e[N],ne[N],w[N],idx;\nint dist[N],n,m;\nbool st[N];\n\n\nvoid add(int a,int b,int c)\n{\n    e[idx]=b;\n    w[idx]=c;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nvoid spfa()\n{\n    fill(dist,dist+N,INF);\n    dist[1]=0;\n\t\n    queue<int> q;\n    q.push(1);\n    st[1]=true;\n\t\n    while(q.size()){\n        int t=q.front();\n        q.pop();\n        st[t]=false;\n\t\t\n        for(int i=h[t];i!=-1;i=ne[i]){\n            int j=e[i];\n            if(dist[j]>dist[t]+w[i]){\n                dist[j]=dist[t]+w[i];\n                if(!st[j]){\n                    q.push(j);\n                    st[j]=true;\t\n                } \n            } \n        }\n    }\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    fill(h,h+N,-1);\n\t\n    while(m--){\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n    }\n\t\n    spfa();\n\t\n    if(dist[n]==INF) printf(\"impossible\");\n    else  printf(\"%d\",dist[n]);\n\t\n    return 0;\n} \n```\n\n### 3.5 Floyd最短路（多源）\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=510,INF=1e9+7;\n\nint g[N][N];\nint n,m,k;\n\n\nvoid floyd()\n{\n    for(int p=1;p<=n;p++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                g[i][j]=min(g[i][j],g[i][p]+g[p][j]);\n}\n\n\nint main()\n{\n    cin>>n>>m>>k;\n    fill(g[0],g[0]+N*N,INF);\n    for(int i=1;i<=n;i++) g[i][i]=0; \n\t\n    while(m--){\n        int a,b,c;\n        cin>>a>>b>>c;\n        g[a][b]=min(g[a][b],c);\n    }\n\t\n    floyd();\n\t\n    while(k--){\n        int a,b;\n        cin>>a>>b;\n        if(g[a][b]>=1e6) printf(\"impossible\\n\");\n        else  printf(\"%d\\n\",g[a][b]);\n    }\n\t\n    return 0;\n} \n```\n\n\n\n## 4.最小生成树\n\n### 4.1 Prim算法\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=510,INF=1e9+7;\n\nint g[N][N],dist[N];\nbool st[N];\nint n,m;\n\n\nint prim()\n{\n    //初始化dist数组 \n    fill(dist,dist+N,INF);\n\t\n    int res=0;\n    for(int i=0;i<n;i++){\n        //找到距离集合最小权的边并赋予t \n        int t=-1;\n        for(int j=1;j<=n;j++)\n            if(!st[j]&&(t==-1||dist[t]>dist[j]))\n                t=j;\n                \n        //把t加到集合里 \n        st[t]=true;\n        \n        //i!=0，把边加到res里 \n        if(i){\n            //如果最小值为INF，则无边到集合中 \n            if(dist[t]==INF) return INF;\n            res+=dist[t];\n        }\n        \n        //更新节点到集合的最短距离 \n        for(int j=1;j<=n;j++)\n            dist[j]=min(dist[j],g[t][j]);\n    }\n\t\n    return res;\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    fill(g[0],g[0]+N*N,INF);\n\t\n    while(m--){\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        g[a][b]=g[b][a]=min(g[a][b],c);\n    }\n\t\n    int t=prim();\n\t\n    if(t==INF) printf(\"impossible\");\n    else  printf(\"%d\",t);\n\t\n    return 0;\n} \n```\n\n### 4.2 Kruskal算法\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\nconst int N=2e5+10;\n\nint n,m;\nint p[N];\n\nstruct Edge{\n    int a,b,w;\n}edges[N];\n\nbool cmp(Edge a,Edge b){\n    return a.w<b.w;\n}\n\nint find(int x)\n{\n    if(p[x]!=x) p[x]=find(p[x]);\n    return p[x];\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n\t\n    for(int i=0;i<m;i++){\n        int a,b,w;\n        scanf(\"%d%d%d\",&a,&b,&w);\n        edges[i]={a,b,w};\n    }\n\t\n    sort(edges,edges+m,cmp);\n\t\n    for(int i=1;i<=n;i++) p[i]=i;\n\t\n    int sum=0,ans=0;\n    for(int i=0;i<m;i++){\n        int a=edges[i].a,b=edges[i].b,w=edges[i].w;\n        a=find(a),b=find(b);\n        if(a!=b){\n            p[a]=b;\n            sum+=w;\n            ans++;\n        }\n    }\n\t\n    if(ans<n-1) printf(\"impossible\");\n    else  printf(\"%d\",sum);\n\t\n    return 0;\n}\n```\n\n\n\n## 5.二分图\n\n### 5.1 染色法判定\n```c++\n#include<iostream> \n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10,M=2*N;\n\nint h[N],e[M],ne[M],idx;\nint color[N];\nint n,m;\n\n\nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nbool dfs(int u,int c)\n{\n    color[u]=c;\n    for(int i=h[u];i!=-1;i=ne[i]){\n        int j=e[i];\n        if(!color[j]&&!dfs(j,3-c)) return false;\n        if(color[j]==c) return false;\n    }\n    return true;\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    fill(h,h+N,-1);\n\t\n    while(m--){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(a,b),add(b,a);\n    }\n\t\n    bool flag=true;\n    for(int i=1;i<=n;i++){\n        if(!color[i]&&!dfs(i,1)){\n            flag=false;\n            break;\n        }\n    }\n\t\n    if(flag) printf(\"Yes\");\n    else  printf(\"No\");\n\t\n    return 0;\n}\n```\n\n### 5.2 匈牙利算法匹配\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=510,M=1e5+10;\n\nint h[N],e[M],ne[M],idx;\nint match[N];\nint n1,n2,m;\nbool st[N];\n\n\nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nbool find(int x)\n{\n    for(int i=h[x];i!=-1;i=ne[i]){\n        int j=e[i];\n        if(!st[j]){\n            st[j]=true;\n            if(!match[j]||find(match[j])){\n                match[j]=x;\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\nint main()\n{\n    scanf(\"%d%d%d\",&n1,&n2,&m);\n    fill(h,h+N,-1);\n\t\n    while(m--){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(a,b);\n    }\n\t\n    int res=0;\n    for(int i=1;i<=n1;i++){\n        fill(st,st+N,false);\n        if(find(i)) res++;\n    }\n    printf(\"%d\",res);\n\t\n    return 0;\n} \n```\n---\n\n\n\n\n\n# 四、数论\n\n\n\n## 1.质数（素数）\n\n### 1.1 试除法求质数\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n\nbool prime(int x)\n{\n    if(x<2) return false;\n    \n    for(int i=2;i<=x/i;i++)\n        if(x%i==0) \n            return false;\n\n    return true;\n}\n\n\nint main()\n{\n    int n;\n    cin>>n;\n    \n    while(n--){\n        int x;\n        cin>>x;\n        if(prime(x)) printf(\"Yes\\n\");\n        else  printf(\"No\\n\");\n    }\n\t\n    return 0;\n}\n```\n\n### 1.2 分解质因数\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n\nint main()\n{\n    int n;\n    cin>>n;\n\t\n    while(n--){\n        int x;\n        cin>>x;\n\t\t\n        for(int i=2;i<=x/i;i++){\n            if(x%i==0){\n                int ans=0;\n                while(x%i==0){\n                    x/=i;\n                    ans++;\n                }\n                printf(\"%d %d\\n\",i,ans);\n            }\n        }\n\t\t\n        if(x>1) printf(\"%d %d\\n\",x,1);\n\t\t\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```\n\n### 1.3 筛质数\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e6+10;\n\nbool st[N];\nint n,cnt;\n\n\nvoid get_prime(int n)\n{\n    for(int i=2;i<=n;i++){\n        if(!st[i]) cnt++;\n        for(int j=i+i;j<=n;j+=i){\n            st[j]=true;\n        }\n    }\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n\t\n    get_prime(n);\n\t\n    printf(\"%d\",cnt);\n\t\n    return 0;\n}\n```\n\n\n\n## 2. 约数（因数）\n\n### 2.1 试除法求约数\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nvector<int> primes;\nint n;\n\n\nvector<int> prime(int x)\n{\n    vector<int> p;\n    for(int i=1;i<=x/i;i++){\n        if(x%i==0){\n            p.push_back(i);\n            if(x/i!=i) p.push_back(x/i);\n        }\n    }\n    sort(p.begin(),p.end()); \n    return p;\n}\n\n\nint main()\n{\n    cin>>n;\n\t\n    while(n--){\n        int x;\n        cin>>x;\n\t\t\n        primes=prime(x);\n        for(int i=0;i<primes.size();i++) printf(\"%d \",primes[i]);\n        printf(\"\\n\");\n    }\n\t\n    return 0;\n}\n```\n\n### 2.2 约数个数\n```c++\n#include<iostream>\n#include<algorithm>\n#include<unordered_map> \n\nusing namespace std;\n\nconst int mod=1e9+7;\n\n\nint main()\n{\n    int n;\n    cin>>n;\n\t\n    unordered_map<int,int> primes;\n    while(n--){\n        int x;\n        cin>>x;\n\t\t\n        for(int i=2;i<=x/i;i++){\n            while(x%i==0){\n                x/=i;\n                primes[i]++;\n            }\n        }\n        if(x>1)  primes[x]++;\n    }\n\t\n    long long ans=1;\n    for(auto t:primes) ans=ans*(t.second+1)%mod;\n\t\n    cout<<ans<<endl;\n\t\n    return 0;\n}\n```\n\n### 2.3 约数之和\n```c++\n#include<iostream>\n#include<algorithm>\n#include<unordered_map> \n\nusing namespace std;\n\nconst int mod=1e9+7;\n\n\nint main()\n{\n    int n;\n    cin>>n;\n\t\n    unordered_map<int,int> primes;\n    while(n--){\n        int x;\n        cin>>x;\n        //试除法判断约数并累加 \n        for(int i=2;i<=x/i;i++){\n            while(x%i==0){\n                x/=i;\n                primes[i]++;\n            }\n        }\n        if(x>1)  primes[x]++;\n    }\n\t\n    long long ans=1;\n    for(auto t:primes){\n        //t遍历哈希primes\n        int p=t.first,s=t.second;\n        //p为n的第k个约数，s为第k个约数的个数\n        long long sum=1;\n        //求(1+p1^1+p1^2+...+p1^s);\n        while(s--) sum=(sum*p+1)%mod;\n        //求(1+p2^1+...+p1^s)*(1+p2^1+...+p2^s)*...*(1+pk^1+...+pk^s);\n        ans=ans*sum%mod;\n    }\n\t\n    cout<<ans<<endl;\n\t\n    return 0;\n}\n```\n\n\n\n## 3.大整数运算\n\n### 3.1 加法\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nvector<int> A,B,C;\nstring a,b;\n\n\nvector<int> add(vector<int> &A,vector<int> &B)\n{\n    if(A.size()<B.size()) return add(B,A);\n    \n    vector<int> C;\n    int t=0;\n    \n    for(int i=0;i<A.size()||i<B.size();i++){\n        if(i<A.size()) t+=A[i];\n        if(i<B.size()) t+=B[i];\n        C.push_back(t%10);\n        t/=10;\n    }\n    \n    if(t) C.push_back(1);\n    \n    return C;\n}\n\n\nint main()\n{\n    cin>>a>>b;\n    for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');\n    for(int i=b.size()-1;i>=0;i--) B.push_back(b[i]-'0');\n\t\n    C=add(A,B);\n\t\n    for(int i=C.size()-1;i>=0;i--) printf(\"%d\",C[i]);\n    \n    return 0;\n}\n```\n\n### 3.2 减法\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nvector<int> A,B,C;\nstring a,b;\n\n\nbool cmp(vector<int> &A,vector<int> &B)\n{\n    if(A.size()!=B.size()) return A.size()>B.size();\n    \n    for(int i=A.size()-1;i>=0;i--){\n        if(A[i]!=B[i])\n            return A[i]>B[i];\n    }\n    \n    return true;\n}\n\n\nvector<int> sub(vector<int> &A,vector<int> &B)\n{\n    vector<int> c;\n    \n    for(int i=0,t=0;i<A.size();i++){\n        t=A[i]-t;\n        if(i<B.size()) t-=B[i];\n        c.push_back((t+10)%10);\n        t<0?t=1:t=0;\n    }\n    \n    while(c.size()>1&&c.back()==0) c.pop_back();\n    \n    return c;\n}\n\n\nint main()\n{\n    cin>>a>>b;\n    for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');\n    for(int i=b.size()-1;i>=0;i--) B.push_back(b[i]-'0')\n\n    if(cmp(A,B)){\n        C=sub(A,B);\n        for(int i=C.size()-1;i>=0;i--) printf(\"%d\",C[i]);\n    }\n    else{\n        C=sub(B,A);\n        for(int i=C.size()-1;i>=0;i--) printf(\"%d\",C[i]);\n    }\n    \n    return 0;\n}\n```\n\n### 3.3 乘法\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nvector<int> A,C;\nstring a;\nint b;\n\n\nvector<int> mul(vector<int> &A,int b)\n{\n    vector<int> c;\n    int t=0;\n    \n    for(int i=0;i<A.size()||t;i++){\n        if(i<A.size()) t+=A[i]*b;\n        c.push_back(t%10);\n        t/=10;\n    }\n    \n    return c;\n}\n\n\nint main()\n{\n    cin>>a>>b;\n    for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');\n\n    C=mul(A,b);\n\n    for(int i=C.size()-1;i>=0;i--) printf(\"%d\",C[i]);\n    \n    return 0;\n}\n```\n\n### 3.4 除法\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nstring a;\nvector<int> A;\nint B,r;\n\n\nvector<int> div(vector<int> &A,int b)\n{\n    vector<int> C;\n    \n    for(int i=A.size()-1;i>=0;i--){\n        r=r*10+A[i];\n        C.push_back(r/b);\n        r%=b;\n    }\n    \n    reverse(C.begin(),C.end());\n    while(C.size()>1&&C.back()==0) C.pop_back();\n    \n    return C;\n}\n\n\nint main()\n{\n    cin>>a>>B;\n    for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');\n\n    vector<int> C=div(A,B);\n\n    for(int i=C.size()-1;i>=0;i--) cout<<C[i];\n\n    cout<<endl<<r<<endl;\n\n    return 0;\n}\n```\n\n\n\n## 4.最大公约数（最小公倍数）\n\n### 4.1 欧几里得算法（辗转相除法）\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n\nint gcd(int a,int b){\n    return b?gcd(b,a%b):a;\n}\n\n\nint main()\n{\n    int n;\n    cin>>n;\n\t\n    while(n--){\n        int a,b;\n        cin>>a>>b;\n\t\t\n        //最大公约数\n        printf(\"%d\\n\",gcd(a,b));\n        //最小公倍数\n        printf(\"%d\\n\",a*gcd(a,b)/b);\n    }\n\t\n    return 0;\n}\n```\n\n### 4.2 扩展欧几里得算法\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n// 公式ax+by=gcd(ai,bi)\nint exgcd(int a,int b,int &x,int &y){\n    if(!b){\n        x=1,y=0;\n        return a;\n    }\n    int d=exgcd(b,a%b,y,x);\n    y-=a/b*x;\n    return d;\n}\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    while(n--){\n        int a,b,x,y;\n        scanf(\"%d%d\",&a,&b);\n        exgcd(a,b,x,y);\n        printf(\"%d %d\\n\",x,y);\n    }\n\t\n    return 0;\n}\n```\n\n\n\n## 5.快速幂\n\n### 5.1 基础快速幂\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\n\nLL k(LL a,LL b,LL mod)\n{\n    LL sum=1;\n    while(b){\n        if(b&1) sum=sum*a%mod;\n        a=a*a%mod;\n        b>>=1;\n    }\n    return sum%mod;\n}\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    while(n--){\n        LL a,b,p;\n        scanf(\"%lld%lld%lld\",&a,&b,&p);\n        printf(\"%lld\\n\",k(a,b,p));\n    }\n\t\n    return 0;\n}\n```\n\n### 5.2 快速幂求逆元\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\n\nLL k(LL a,LL b,LL mod)\n{\n    LL sum=1;\n    while(b){\n        if(b&1) sum=sum*a%mod;\n        a=a*a%mod;\n        b>>=1;\n    }\n    return sum%mod;\n}\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    while(n--){\n        LL a,p,t;\n        scanf(\"%lld%lld\",&a,&p);\n        if(a%p) printf(\"%lld\\n\",k(a,p-2,p));\n        else  printf(\"impossible\\n\");\n    }\n\t\n    return 0;\n}\n```\n\n### 5.3 矩阵快速幂\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n//定义矩阵结构体\nstruct Matrix\n{\n    int a[3][3];\n    Matrix() memset(a,0,sizeof(a));\n    //矩阵乘法\n    Matrix operator*(const Matrix &b) const\n    {\n        Matrix res;\n        for(int i=1; i<=2; i++)\n            for(int j=1; j<=2; j++)\n                for(int k=1; k<=2; k++)\n                    res.a[i][j]=res.a[i][j]+a[i][k]*b.a[k][j];\n        return res;\n    }\n};\n\nMatrix base,ans;\n\n//初始化base,ans\nvoid init()\n{\n    //矩阵\n    //[0，1]\n    //[1，1]\n    base.a[1][1]=0;//这个11位置一定要初始化\n    base.a[2][2]=base.a[1][2]=base.a[2][1]=1;\n    //初始斐波那契数列f1=1,f2=1\n    ans.a[1][1]=1;\n    ans.a[1][2]=1;\n\n}\n//快速幂\nvoid qpow(int n)\n{\n    //传入n次幂\n    while(n){\n        if(n&1)ans=ans*base;//n为奇数\n        base=base*base;\n        n>>=1;// n/=2\n    }\n}\n\nint main()\n{\n    int n;\n    while(scanf(\"%d\",&n)!=EOF){\n        init();//每次初始化矩阵\n        qpow(n-2);//快速幂优化\n        cout<<ans.a[1][2]<<endl;\n    }\n\n    return 0;\n}\n```\n\n\n\n## 6.组合数\n\n### 6.1 普通递推\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\nconst int N=10010,mod=1e9+7;\n\nint n;\nint c[N][N];\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<N;i++){\n        c[i][1]=i;\n        c[i][i]=1;\n    }\n\t\n    for(int i=2;i<N;i++){\n        for(int j=2;j<=i;j++){\n            c[i][j]=(c[i-1][j-1]+c[i-1][j])%mod;\n        }\n    }\n\t\n    while(n--){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        printf(\"%d\\n\",c[a][b]);\n    }\n\t\n    return 0;\n} \n```\n\n### 6.2  C(a,b) = a!/(b-a)!*b!（预处理）\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10,mod=1e9+7;\n\nint n;\nLL f[N],inf[N];\n\n\nLL q(LL a,LL k,LL p)\n{\n    LL sum=1;\n    while(k){\n        if(k&1) sum=(LL)sum*a%p;\n        a=(LL)a*a%p;\n        k>>=1;\n    }\n    return sum;\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n\t\n    f[0]=inf[0]=1;\n    for(int i=1;i<N;i++){\n        f[i]=(LL)f[i-1]*i%mod;\n        inf[i]=(LL)inf[i-1]*q(i,mod-2,mod)%mod;\n    }\n\t\n    while(n--){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        printf(\"%d\\n\",(LL)f[a]*inf[a-b]%mod*inf[b]%mod);\n    }\n\t\n    return 0;\n} \n\n```\n\n### 6.3  C(a,b) = C(a%p,b%p)*C(a/p,b/p)（lucas定理）\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\nint p;\n\n//快速幂求逆元\nint q(LL a,LL k,LL p)\n{\n    int res=1;\n    while(k){\n        if(k&1) res=(LL)res*a%p;\n        a=(LL)a*a%p;\n        k>>=1;\n    }\n    return res;\n}\n\n//求组合数 \nint c(LL a,LL b)\n{\n    int sum=1;\n    for(int i=1,j=a;i<=b;i++,j--){\n        sum=(LL)sum*j%p;\n        sum=(LL)sum*q(i,p-2,p)%p;\n    }\n    return sum;\n}\n\n//卢卡斯定理\nint lucas(LL a,LL b)\n{\n    if(a<p&&b<p) return c(a,b);\n    return (LL)c(a%p,b%p)*lucas(a/p,b/p)%p;\n}\n\n\nint main()\n{\n    int n;\n    cin>>n;\n\t\n    while(n--){\n        LL a,b;\n        cin>>a>>b>>p;\n        cout<<lucas(a,b)<<endl;\n    }\n\t\n    return 0;\n} \n```\n\n### 6.4 不取模运算C(a,b)\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nconst int N=5010;\n\nint primes[N],cnt;\nint sum[N]; \nbool st[N];\n\n//线性筛法 \nvoid get_primes(int n)\n{\n    for(int i=2;i<=n;i++){\n        if(!st[i]) primes[cnt++]=i;\n        for(int j=0;primes[j]<=n/i;j++){\n            st[primes[j]*i]=true;\n            if(i%primes[j]==0) break;\n        }\n    }\n}\n\n//求a！里p因子的个数 \nint get(int n,int p)\n{\n    int res=0;\n    while(n){\n        res+=n/p;\n        n/=p;\n    }\n    return res;\n}\n\n//高精度乘法 \nvector<int> mul(vector<int> a,int b)\n{\n    vector<int> c;\n    int t=0;\n\t\n    for(int i=0;i<a.size();i++){\n        t+=a[i]*b;\n        c.push_back(t%10);\n        t/=10;\n    }\n\t\n\twhile(t){\n        c.push_back(t%10);\n        t/=10;\n    }\n\t\n    return c;\n}\n\n\nint main()\n{\n    int a,b;\n    cin>>a>>b;\n\t\n    get_primes(a);\n\t\n    for(int i=0;i<cnt;i++){\n        int p=primes[i];\n        sum[i]=get(a,p)-get(b,p)-get(a-b,p);\n    }\n\t\n    vector<int> res;\n    res.push_back(1);\n\t\n    for(int i=0;i<cnt;i++){\n        for(int j=0;j<sum[i];j++){\n            res=mul(res,primes[i]);\n\t\n    for(int i=res.size()-1;i>=0;i--) \n        printf(\"%d\",res[i]);\n\t\n    return 0;\n}\n```\n\n\n\n## 7.博弈论\n\n### 7.1 Nim博弈\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    int sum=0;\n    while(n--){\n        int x; \n        scanf(\"%d\",&x);\n        sum^=x;\n    }\n    if(sum)  printf(\"Yes\");\n    else  printf(\"No\");\n\t\n    return 0;\n} \n```\n\n### 7.2 集合-Nim博弈（sg函数）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<unordered_set>\n\nusing namespace std;\n\nconst int N=110,M=10010;\n\nint n,k;\nint s[N],f[M];\n\n\nint sg(int x)\n{\n    if(f[x]!=-1) return f[x];\n\t\n    unordered_set<int> S;\n    for(int i=0;i<k;i++)\n        if(s[i]<=x) \n            S.insert(sg(x-s[i]));\n\t\n    for(int i=0;;i++)\n        if(!S.count(i))\n            return f[x]=i;\n}\n\n\nint main()\n{\n    cin>>k;\n    for(int i=0;i<k;i++) cin>>s[i];\n    cin>>n;\n\t\n    fill(f,f+M,-1);\n\t\n    int res=0;\n    while(n--){\n        int a;\n        cin>>a;\n        res^=sg(a);\n    }\n\t\n    if(res) printf(\"Yes\");\n    else  printf(\"No\");\n\t\n    return 0;\n}\n```\n---\n\n\n\n\n\n# 五、动态规划\n\n\n\n## 1.背包问题\n\n### 1.1 01背包\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e3+10;\n\nint n,V;\nint dp[N],w[N],v[N];\n\n\nint main()\n{\n    cin>>n>>V;\n    for(int i=0;i<n;i++) cin>>v[i]>>w[i];\n    \n    for(int i=0;i<n;i++)\n        for(int j=V;j>=v[i];j--)\n            dp[j]=max(dp[j],dp[j-v[i]]+w[i]);\n            \n    cout<<dp[V]<<endl;\n    \n    return 0;\n}\n```\n\n### 1.2 完全背包\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint v[N],w[N],dp[N];\nint n,m;\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) cin>>v[i]>>w[i];\n\t\n    for(int i=1;i<=n;i++)\n        for(int j=v[i];j<=m;j++)\n            dp[j]=max(dp[j],dp[j-v[i]]+w[i]);\n\t\n    cout<<dp[m]<<endl;\n\t\n    return 0;\n}\n```\n\n### 1.3 多重背包\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=110;\n\nint v[N],w[N],s[N];\nint dp[N][N];\nint n,m;\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) cin>>v[i]>>w[i]>>s[i];\n\t\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            for(int k=0;k<=s[i]&&k*v[i]<=j;k++)\n                dp[i][j]=max(dp[i][j],dp[i-1][j-k*v[i]]+k*w[i]);\n\t\n    cout<<dp[n][m]<<endl;\n\t\n    return 0;\n}\n```\n\n### 1.4 分组背包\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=110;\n\nint v[N][N],w[N][N],s[N];\nint dp[N];\nint n,m;\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++){\n        cin>>s[i];\n        for(int j=0;j<s[i];j++) cin>>v[i][j]>>w[i][j];\n    }\n\t\n    for(int i=1;i<=n;i++)\n        for(int j=m;j>=0;j--)\n            for(int k=0;k<s[i];k++)\n                if(v[i][k]<=j)\n                    dp[j]=max(dp[j],dp[j-v[i][k]]+w[i][k]);\n\t\n    cout<<dp[m]<<endl;\n\t\n    return 0;\n}\n```\n\n\n\n## 2.线性dp\n\n\n### 2.1 数字三角形\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e3+10;\n\nint n;\nint g[N][N];\nint dp[N][N];\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++)\n        for(int j=0;j<=i;j++)\n            cin>>g[i][j];\n            \n    for(int i=n-1;i>=0;i--)\n        for(int j=0;j<=i;j++)\n            dp[i][j]=max(dp[i+1][j+1],dp[i+1][j])+g[i][j];\n    \n    cout<<dp[0][0]<<endl;\n    \n    return 0;\n}\n```\n\n### 2.2 最长上升子序列 \n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e3+10;\n\nint n;\nint g[N],dp[N];\n\n\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++) cin>>g[i];\n    \n    fill(dp,dp+n,1);\n    \n    int res=1;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<i;j++){\n            if(g[i]>g[j])\n                dp[i]=max(dp[i],dp[j]+1);\n        }\n        res=max(dp[i],res);\n    }\n    \n    cout<<res<<endl;\n    \n    return 0;\n}\n```\n\n### 2.3 最长公共子序列\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1010;\n\nint m,n;\nint dp[N][N];\nchar a[N],b[N];\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    scanf(\"%s%s\",a+1,b+1);\n\t\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            dp[i][j]=max(dp[i-1][j],dp[i][j-1]);\n            if(a[i]==b[j])\n                dp[i][j]=max(dp[i][j],dp[i-1][j-1]+1);\n        }\n    }\n\t\n    printf(\"%d\",dp[n][m]);\n\t\n    return 0;\n}\n```\n\n### 2.4 最短编辑距离\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1010;\n\nint m,n;\nint dp[N][N];\nchar a[N],b[N];\n\n\nint main()\n{\n\t\n    scanf(\"%d%s\",&n,a+1);\n    scanf(\"%d%s\",&m,b+1);\n\t\n    //一定要考虑边界问题！！！\n    for (int i=0;i<=m;i++) dp[0][i]=i;\n    for (int i=0;i<=n;i++) dp[i][0]=i;\n\t\n    //相等即直接转换状态，不相等取所有状态的最小值再+1\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            if(a[i]==b[j])\n                dp[i][j]=dp[i-1][j-1];\n            else \n                dp[i][j]=min(min(dp[i-1][j],dp[i-1][j-1]),dp[i][j-1])+1;\n        }\n    }\n\t\n    printf(\"%d\",dp[n][m]);\n\t\n    return 0;\n}\n```\n\n\n\n## 3.进阶dp\n\n### 3.1 区间dp\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=310;\n\nint n;\nint s[N];\nint dp[N][N];\n\n\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        int a;\n        scanf(\"%d\",&a);\n        s[i]=s[i-1]+a;\n    }\n\t\n    for(int len=1;len<n;len++){\n        for(int i=1;i+len<=n;i++){\n            int l=i,r=i+len;\n            dp[l][r]=1e9+7;\n            for(int k=l;k<r;k++){\n                dp[l][r]=min(dp[l][r],dp[l][k]+dp[k+1][r]+s[r]-s[l-1]);\n            }\n        }\n    }\n\t\n    cout<<dp[1][n]<<endl;\n\t\n    return 0;\n}\n```\n\n### 3.2状态压缩dp\n\n#### 蒙德里安的梦想\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=12,M=1<<N;\n\nlong long dp[N][M];\nint n,m;\nbool st[M];\n\n\nint main()\n{\n    //预处理\n    while(cin>>n>>m,n||m){\n        fill(dp[0],dp[0]+N*M,0);\n\t\t\n        for(int i=0;i<1<<n;i++){\n            st[i]=true;\n            int cnt=0;\n            for(int j=0;j<n;j++){\n                if(i>>j&1){\n                    if(cnt&1) st[i]=false;\n                    cnt=0;\n                }\n                else cnt++;\n            }\n            if(cnt&1) st[i]=false;\n        }\n\t\t\n        dp[0][0]=1;\n        for(int i=1;i<=m;i++)\n            for(int j=0;j<1<<n;j++)\n                for(int k=0;k<1<<n;k++)\n                    if(!(j&k)&&st[j|k])\n                        dp[i][j]+=dp[i-1][k];\n\t\t\t\t\t\t\n        cout<<dp[m][0]<<endl;\n    }\n    return 0;\n}\n```\n\n#### 状态压缩dp求哈密顿路径\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=20,M=1<<N;\n\nint n;\nint w[N][N];\nint dp[M][N];\n\n\nint main()\n{\n    cin>>n;\n\t\n    for(int i=0;i<n;i++)\n        for(int j=0;j<n;j++)\n            cin>>w[i][j];\n\t\t\t\n    fill(dp[0],dp[0]+M*N,0x3f3f3f);\n\t\n    dp[1][0]=0;\n    for(int i=0;i<1<<n;i++)\n        for(int j=0;j<n;j++)\n            if(i>>j&1)\n                for(int k=0;k<n;k++)\n                    if((i-(1<<j))>>k&1)\n                        dp[i][j]=min(dp[i][j],dp[i-(1<<j)][k]+w[k][j]);\n\t\n    cout<<dp[(1<<n)-1][n-1]<<endl;\n\t\n    return 0;\n}\n```\n\n### 3.3 树形dp\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=6010;\n\nint n;\nint happy[N];\nint h[N],e[N],ne[N],idx;\nint dp[N][2];\nbool father[N];\n\n\nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nvoid dfs(int u)\n{\n    dp[u][1]=happy[u];\n\t\n    for(int i=h[u];i!=-1;i=ne[i]){\n        int j=e[i];\n        dfs(j);\n        dp[u][0]+=max(dp[j][0],dp[j][1]);\n        dp[u][1]+=dp[j][0];\n    }\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) scanf(\"%d\",&happy[i]);\n\t\n    fill(h,h+N,-1);\n    for(int i=0;i<n-1;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        father[a]=true;\n        add(b,a);\n    }\n\t\n    int root=1;\n    while(father[root]) root++;\n\t\n    dfs(root);\n\t\n    printf(\"%d\",max(dp[root][0],dp[root][1]));\n\t\n    return 0;\n}\n```\n\n\n\n## 4.记忆化搜索\n\n### 4.1 斐波那契（记录值）\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint dp[N];\nint n;\n\n//斐波那契递归写法\nint F(int n)\n{\n    if(n==0||n==1) return 1;\n    if(dp[n]!=-1) return dp[N];\n    else{\n        dp[n]=F(n-1)+F(n-2);\n        return dp[n];\n    }\n}\n\n\nint main()\n{\n    cin>>n;\n    \n    fill(dp,dp+N,-1);\n    \n    F(n);\n    \n    return 0;\n}\n```\n\n### 4.2 滑雪\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=310;\n\nint n,m;\nint g[N][N];\nint f[N][N];\n\nint s[2][4]={\n    1,-1,0,0,\n    0,0,1,-1\n};\n\n\nint dp(int x,int y)\n{\n    if(f[x][y]!=0) return f[x][y];\n\t\n    f[x][y]=1;\n    for(int i=0;i<4;i++){\n        int a=x+s[0][i],b=y+s[1][i];\n        if(a>=1&&a<=n&&b>=1&&b<=m&&g[a][b]<g[x][y])\n            f[x][y]=max(f[x][y],dp(a,b)+1);\n    }\n\t\n    return f[x][y];\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            cin>>g[i][j];\n\t\n    int sum=0;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            sum=max(sum,dp(i,j));\n\t\n    cout<<sum<<endl;\n\t\n    return 0;\n}\n```\n\n---\n\n","source":"_posts/算法模板.md","raw":"---\ntitle: 算法模板\ndate: 2023/2/1 19:56:26 \ndescription: 记录学习算法的基本模板*\n\nsticky: 1\ncategories: Algorithm\ntags:\n  - 算法\ncover: https://cdn.educba.com/academy/wp-content/uploads/2019/04/Types-of-Algorithms.jpg\n---\n\n\n\n## 首先声明！！！\n\n---\n\n* 1.内容可能有点多，涵盖大部分的基础算法模板。\n* 2.如有使用注明出处。\n* 3.如有改进地方欢迎批评指正~\n\n---\n\n\n\n\n\n# * 常用xcpc竞赛模板（数论、计算几何）\n\n\n\n## 一、二维计算几何：\n\n```c++\nnamespace Geometry\n{\n    const double pi = acos(-1);\n    const double eps = 1e-8;\n    // 点与向量\n    struct Point\n    {\n        double x, y;\n        Point(double x = 0, double y = 0) : x(x), y(y) {}\n        bool operator==(const Point a) const\n        {\n            return (fabs(x - a.x) <= eps && fabs(y - a.y) <= eps);\n        }\n    };\n\n    typedef Point Vector;\n    Vector operator+(Vector A, Vector B)\n    {\n        return Vector(A.x + B.x, A.y + B.y);\n    }\n    Vector operator-(Vector A, Vector B)\n    {\n        return Vector(A.x - B.x, A.y - B.y);\n    }\n    Vector operator*(Vector A, double p)\n    {\n        return Vector(A.x * p, A.y * p);\n    }\n    Vector operator/(Vector A, double p)\n    {\n        return Vector(A.x / p, A.y / p);\n    }\n\n    int sign(double x)\n    { // 符号函数\n        if (fabs(x) < eps)\n            return 0;\n        if (x < 0)\n            return -1;\n        return 1;\n    }\n    int cmp(double x, double y)\n    { // 比较函数\n        if (fabs(x - y) < eps)\n            return 0;\n        if (x < y)\n            return -1;\n        return 1;\n    }\n\n    double dot(Point a, Point b)\n    { // 向量点积\n        return a.x * b.x + a.y * b.y;\n    }\n\n    double cross(Point a, Point b)\n    { // 向量叉积\n        return a.x * b.y - b.x * a.y;\n    }\n\n    double get_length(Point a)\n    { // 求向量模长\n        return sqrt(dot(a, a));\n    }\n\n    double get_angle(Point a, Point b)\n    { // 求A->B的有向角\n        return acos(dot(a, b) / get_length(a) / get_length(b));\n    }\n\n    double area(Point a, Point b, Point c)\n    { // A为顶点，向量AB与向量AC的叉积，即三角形ABC的面积的2倍（有向）\n        return cross(b - a, c - a);\n    }\n\n    Point rotate(Point a, double angle)\n    { // 将向量A顺时针旋转angle度\n        return Point(a.x * cos(angle) + a.y * sin(angle), -a.x * sin(angle) + a.y * cos(angle));\n    }\n\n    Point get_line_intersection(Point p, Vector v, Point q, Vector w)\n    { // 两直线的交点\n        // 使用前提，直线必须有交点\n        // cross(v, w) == 0则两直线平行或者重合\n        Vector u = p - q;\n        double t = cross(w, u) / cross(v, w);\n        return p + v * t;\n    }\n\n    double distance_to_line(Point p, Point a, Point b)\n    { // 点到直线的距离，直线为AB所在直线\n        Vector v1 = b - a, v2 = p - a;\n        return fabs(cross(v1, v2) / get_length(v1));\n    }\n\n    double distance_to_segment(Point p, Point a, Point b)\n    { // 点到线段的距离，线段为线段AB\n        if (a == b)\n            return get_length(p - a);\n\n        Vector v1 = b - a, v2 = p - a, v3 = p - b;\n        if (sign(dot(v1, v2)) < 0)\n            return get_length(v2);\n        if (sign(dot(v1, v3)) > 0)\n            return get_length(v3);\n        return distance_to_line(p, a, b);\n    }\n\n    Point get_line_projection(Point p, Point a, Point b)\n    { // 点在直线上的投影，直线为AB所在直线\n        Vector v = b - a;\n        return a + v * (dot(v, p - a) / dot(v, v));\n    }\n\n    bool on_segment(Point p, Point a, Point b)\n    { // 点是否在线段上\n        return sign(cross(p - a, p - b)) == 0 && sign(dot(p - a, p - b)) <= 0;\n    }\n\n    bool segment_intersection(Point a1, Point a2, Point b1, Point b2)\n    { // 判断两个线段是否相交\n        double c1 = cross(a2 - a1, b1 - a1), c2 = cross(a2 - a1, b2 - a1);\n        double c3 = cross(b2 - b1, a2 - b1), c4 = cross(b2 - b1, a1 - b1);\n        return sign(c1) * sign(c2) <= 0 && sign(c3) * sign(c4) <= 0;\n    }\n    // 多边形\n    double polygon_area(Point p[], int n)\n    { // 求多边形面积\n        double s = 0;\n        for (int i = 1; i + 1 < n; i++)\n            s += cross(p[i] - p[0], p[i + 1] - p[i]);\n        return s / 2;\n    }\n}\nusing namespace Geometry;\n```\n\n\n\n## 二、快速幂+组合数：\n\n```c++\nusing i64 = int64_t;\nconstexpr i64 mod = 1e9+7;\ni64 fpow(i64 x, i64 r)\n{\n    i64 result = 1;\n    while (r)\n    {\n        if (r & 1)result = result * x % mod;\n        r >>= 1;\n        x = x * x % mod;\n    }\n    return result;\n}\nnamespace binom {\n    i64 fac[N], ifac[N];\n    int __ = []\n    {\n        fac[0] = 1;\n        for (int i = 1; i <= N - 5; i++)\n            fac[i] = fac[i - 1] * i % mod;\n        ifac[N - 5] = fpow(fac[N - 5], mod - 2);\n        for (int i = N - 5; i; i--)\n            ifac[i - 1] = ifac[i] * i % mod;\n        return 0;\n    }();\n\n    inline i64 C(int n, int m)\n    {\n        if (n < m || m < 0)return 0;\n        return fac[n] * ifac[m] % mod * ifac[n - m] % mod;\n    }\n\n    inline i64 A(int n, int m)\n    {\n        if (n < m || m < 0)return 0;\n        return fac[n] * ifac[n - m] % mod;\n    }\n}\nusing namespace binom;\n```\n\n\n\n## 三、卡特兰数  C(2*n,n)-C(2*n,n-1) ：\n\n```c++\n//分解质因数求组合数（可适用于mod非质数）\nint primes[N],cnt;\nbool st[N];\n\n//筛质数\nvoid init(int n)\n{\n    for(int i=2;i<=n;i++){\n        if(!st[i]) primes[cnt++]=i;\n        for(int j=0;primes[j]*i<=n;j++){\n            st[primes[j]*i]=true;\n            if(i%primes[j]==0) break;\n        }\n    }\n}\n\n//快速幂\nint qmi(int a,int k)\n{\n    int res=1;\n    while(k){\n        if(k&1)res=res*a%mod;\n        a=a*a%mod;\n        k>>=1;\n    }\n    return res;\n}\n\n//分解质因数\nint get(int n,int p)\n{\n    int s=0;\n    for(int j=n;j;j/=p) s+=j/p;\n    return s;\n}\n\n//分解质因数的方式求组合数\nint C(int a,int b)\n{\n    int res=1;\n    for(int i=0;i<cnt;i++){\n        int p=primes[i];\n        int s=get(a,p)-get(b,p)-get(a-b,p);\n        res=res*qmi(p,s)%mod;\n    }\n    return res;\n}\n\n\nvoid slove()\n{\n    cin>>n>>mod;\n    cout<<(C(2*n,n)-C(2*n,n+1)+mod)%mod<<'\\n';\n}\n```\n\n\n\n## 四、欧拉、莫比乌斯函数：\n\n```c++\nint primes[N],cnt;\nint mobius[N],s[N];\nbool st[N];\n\n//线性筛求欧拉函数\nvoid oula(int n)\n{\n    phi[1]=1;\n    for(int i=2;i<=n;i++){\n        if(!st[i]){\n            primes[cnt++]=i;\n            phi[i]=i-1;\n        }\n        for(int j=0;primes[j]*i<=n;j++){\n            st[primes[j]*i]=true;\n            if(i%primes[j]==0){\n                phi[i*primes[j]]=phi[i]*primes[j];\n                break;\n            }\n            phi[i*primes[j]]=phi[i]*(primes[j]-1);\n        }\n    }\n}\n\n//线性筛求莫比乌斯函数\nvoid init(int n)\n{\n    mobius[1]=1;\n    for(int i=2;i<=n;i++){\n        if(!st[i]){\n            primes[cnt++]=i;\n            mobius[i]=-1;\n        }\n        for(int j=0;primes[j]*i<=n;j++){\n            st[primes[j]*i]=true;\n            if(i%primes[j]==0){\n                mobius[primes[j]*i]=0;\n                break;\n            }\n            mobius[primes[j]*i]=mobius[i]*-1;\n        }\n    }\n    for(int i=1;i<=n;i++) s[i]=s[i-1]+mobius[i];\n}\n\n//除数分块\nvoid slove()\n{\n    int a,b,d;\n    cin>>a>>b>>d;\n    a/=d,b/=d;\n\n    int res=0,n=min(a,b);\n    for(int l=1,r;l<=n;l=r+1){\n        r=min(n,min(a/(a/l),b/(b/l)));\n        res+=(s[r]-s[l-1])*(a/l)*(b/l);\n    }\n\n    cout<<res<<'\\n';\n}\n```\n\n\n\n## 五、矩阵快速幂：\n\n```c++\n//矩阵运算\nvoid mul(int a[][N],int b[][N],int c[][N])\n{\n    int t[N][N]={0};\n    for(int i=0;i<N;i++)\n        for(int j=0;j<N;j++)\n            for(int k=0;k<N;k++)\n                t[i][j]=(t[i][j]+a[i][k]*b[k][j])%m;\n\t\t\t\t\n    memcpy(c,t,sizeof t);\n}\n\n\nvoid slove()\n{\n    cin>>n>>m;\n\t\n    //构造系数矩阵\n    int f1[N][N]={1,1,1};\n    int a[N][N]={\n         {0,1,0},\n         {1,1,1},\n         {0,0,1}\n    };\n\t\n    //快速幂\n    int k=n-1;\n    while(k){\n        if(k%2) mul(f1,a,f1);\n        mul(a,a,a);\n        k>>=1;\n    }\n\t\n    cout<<f1[2]<<'\\n';\n}\n```\n\n\n\n## 六、向量叉积应用：\n\n```c++\n//定义点结构体\nstruct Point{\n    double x,y;\n    double angle;\n    bool operator < (const point &t){\n        return angle<t.angle;\n    }\n}p[N];\n\n//求叉积\ndouble cross(Point a,Point b,Point c){\n    return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);\n}\n\n//判定线线的位置关系\nbool check(Point a,Point b,Point c,Point d){\n    return cross(a,b,c)*cross(a,b,d)<=0;\n}\n\n//求两直线的交点\nPoint getNode(Point a,Point u,Point b,Point v)\n{\n    double t=(a-b)*v/(v*u);\n    return a+u*t;\n}\n\n//求三角形面积\ndouble get_s(Point a,Point b,Point c){\n    return cross(a,b,c)/2;\n}\n\n//极角排序（atan2函数）\nbool atan2cmp(Point a,Point b)\n{\n    if(a.angle==b.angle) return a.x<b.x;\n    else return a.angle<a.angle;\n}\n\n//极角排序（叉积）\nbool crosscmp(Point a,Point b)\n{\n    double f=cross(p[pos],a,b);\n    if(f==0) return a.x-p[pos].x<b.x-p[pos].x;\n    else if(f>0) return true;\n    else return false;\n}\n```\n\n\n\n## 七、凸包+旋转卡壳：\n\n```c++\nstruct P{\n    int x,y;\n}p[N],s[N];\n\n//求叉积\nint cross(P a,P b,P c){\n    return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);\n}\n\n//求两点距离\nint dis(P a,P b){\n    return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);\n}\n\n//比较排序\nbool cmp(P a,P b)\n{\n    if(a.x==b.x) return a.y<b.y;\n    return a.x<b.x;\n}\n\n//求凸包的Andrew算法\nvoid Andrew()\n{\n    sort(p+1,p+n+1,cmp);\n\t\n    //求上凸包\n    int top=0;\n    for(int i=1;i<=n;i++){\n        while(top>1&&cross(s[top-1],s[top],p[i])<=0) top--\n        s[++top]=p[i];\n    }\n\t\n    //求下凸包\n    int t=top;\n    for(int i=n-1;i>=1;i--){\n        while(top>t&&cross(s[top-1],s[top],p[i])<=0) top--;\n        s[++top]=p[i];\n    }\n\t\n    n=top-1;\n}\n\n//旋转卡壳\nint rotating_calipers()\n{\n    int res=0;\n    for(int i=1,j=2;i<=n;i++){\n        while(cross(s[i],s[i+1],s[j])<cross(s[i],s[i+1],s[j+1])) j=j%n+1;\n        res=max({res,dis(s[i],s[j]),dis(s[i+1],s[j])});\n    }\n    return res;\n}\n```\n\n\n\n## 八、自适应辛普森积分：\n\n```c++\ndouble eps=1e-6;\ndouble l,r;\n\n//积分函数\ndouble f(double x){\n    return sqrt(x*x*x);\n}\n\n//辛普森公式\ndouble simpson(double l,double r){\n    return (f(l)+f(r)+4*f((l+r)/2))*(r-l)/6;\n}\n\n//自适应\ndouble asr(double a,double b,double ans)\n{\n    auto m=(l+r)/2,a=simpson(l,m),b=simpson(m,r);\n    if(fabs(a+b-ans)<eps) return ans;\n    return asr(l,m,a)+asr(m,r,b);\n}\n```\n\n\n\n## 九、记忆化搜索求期望：\n\n\n```c++\nvector<PII> c[N];\nint d[N],a[N];\ndouble f[N];\nint T,n,m,k;\n\n\ndouble dfs(int u)\n{\n    if(f[u]>0) return f[u];\n    if(u==0) return f[u]=0;\n\n    f[u]=0;\n    for(auto p:c[u]){\n        int i=p.x,j=p.y;\n        f[u]+=(dfs(i)+j)*1.0/d[u];\n    }\n\n    return f[u];\n}\n\n\nvoid slove()\n{\n    cin>>n>>m;\n\n    while(m--){\n        int u,v,w;\n        cin>>u>>v>>w;\n        c[u].push_back({v,w});\n        d[u]++;\n    }\n\n    printf(\"%.2lf\\n\",dfs(1));\n}\n```\n\n\n\n## 十、概率dp：\n\n```c++\nint w,b;\ndouble f[N][N];\n\nint main()\n{\n    cin>>w>>b;\n    for(int i=1;i<=b;i++) f[0][i]=0;\n    for(int i=1;i<=w;i++) f[i][0]=1;\n\t\n    for(int i=1;i<=w;i++){\n        for(int j=1;j<=b;j++){\n            f[i][j]+=(double)i/(i+j);\n            if(i>=1&&j>=2) f[i][j]++(double)j/(i+j)*(j-1)/(i+j-1)*f[i-1][j-2];\n            if(j>=3) f[i][j]+=(double)j/(i+j)*(j-1)/(i+j-1)*(j-2)/(i+j-2)*f[i][j-3];\n        }\n    }\n    printf(\"%.9lf\\n\",f[w][b]);\n}\n```\n\n\n\n\n\n# 一、基础算法\n\n\n\n## 1.排序：\n\n### 1.1 冒泡排序：\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n;\nint g[N];\n\n//冒泡排序 \nvoid bubble_sort()\n{\n    for(int i=0;i<n;i++)\n        for(int j=0;j<n-i-1;j++)\n            if(g[j]>g[j+1])\n                swap(g[j],g[j+1]);\n}\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n\t\n    bubble_sort();\n\t\n    for(int i=0;i<n;i++) cout<<g[i]<<' ';\n\t\n    return 0;\n}\n```\n\n### 1.2 选择排序\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n;\nint g[N];\n\n//选择排序 \nvoid selection_sort()\n{\n    for(int i=0;i<n-1;i++){\n        int min=i;\n        \n        for(int j=i+1;j<n;j++){ \n            if(g[j]<g[min])\n                min=j;\n        }\n        \n        swap(g[min],g[i]);\n    }\t\n}\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n\t\n    selection_sort();\n\t\n    for(int i=0;i<n;i++) cout<<g[i]<<' ';\n\t\n    return 0;\n}\n```\n\n### 1.3 插入排序\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n;\nint g[N];\n\n//插入排序 \nvoid insertion_sort()\n{ \n    for(int i=1;i<n;i++){\n        int res=g[i];\n        int j=i-1;\n\t\t\n        while(j>=0&&g[j]>res){\n            g[j+1]=g[j];\n            j--;\n        }\n\t\t\n        g[j+1]=res;\n    }\t\n}\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n\t\n    insertion_sort();\n\t\n    for(int i=0;i<n;i++) cout<<g[i]<<' ';\n\t\n    return 0;\n}\n```\n\n### 1.4 快速排序\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint q[N];\nint n;\n\n//快速排序 \nvoid quick_sort(int q[],int l,int r)\n{\n    if(l>=r) return;\n\t\n    int x=q[(l+r)>>1],i=l-1,j=r+1;\n    while(i<j){\n        do i++; while(q[i]<x);\n        do j--; while(q[j]>x);\n        if(i<j) swap(q[i],q[j]);\n    }\n\t\n    quick_sort(q,l,j);\n    quick_sort(q,j+1,r);\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++) scanf(\"%d\",&q[i]);\n\t\n    quick_sort(q,0,n-1);\n\t\n    for(int i=0;i<n;i++) printf(\"%d \",q[i]);\n\t \n    return 0;\n}\n```\n\n### 1.5 归并排序\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\nconst int N =1e5+10;\n\nint q[N],tmp[N];\nint n;\n\n//归并排序\nvoid mergesort(int q[],int l,int r)\n{\n    if(l>=r) return;\n\n    int mid=l+r>>1;\n\n    mergesort(q,l,mid),mergesort(q,mid+1,r);\n\n    int k=0,i=l,j=mid+1;\n    while(i<=mid&&j<=r){\n        if(q[i]<=q[j]) tmp[k++]=q[i++];\n        else  tmp[k++]=q[j++];\n    }\n        \n    while(i<=mid) tmp[k++]= q[i++];\n    while(j<=r) tmp[k++]=q[j++];\n\n    for (i=l,j=0;i<=r;i++,j++) q[i]=tmp[j];\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++ ) scanf(\"%d\",&q[i]);\n\n    mergesort(q,0,n-1);\n\n    for (int i=0;i<n;i++) printf(\"%d \",q[i]);\n\n    return 0;\n}\n\n```\n\n\n\n## 2.二分\n\n### 2.1 整数二分\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint q[N];\nint n,m;\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=0;i<n;i++) scanf(\"%d\",&q[i]);\n\t\n    while(m--){\n        int x;\n        scanf(\"%d\",&x);\n\t\t\n        int l=0,r=n-1;\n        while(l<r){\n            int mid=l+r>>1;\n            if(q[mid]>=x) r=mid;\n            else l=mid+1;\n        }\n\t\t\n        if(q[l]!=x) printf(\"-1 -1\\n\");\n        else{\n            printf(\"%d \",l);\n            int l=0,r=n-1;\n            while(l<r){\n                int mid=l+r+1>>1;\n                if(q[mid]<=x) l=mid;\n                else r=mid-1;\n            }\n            printf(\"%d\\n\",l);\n        }\n    }\n\t\n    return 0;\n}\n```\n\n### 2.2 小数二分\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n\nint main()\n{\n    double n;\n    cin>>n;\n    \n    double l=-10000,r=10000;\n    while(r-l>1e-8){\n        double mid=(l+r)/2;\n        if(mid*mid*mid>=n) r=mid;\n        else  l=mid;\n    }\n    \n    printf(\"%.6lf\",l);\n    \n    return 0;\n}\n```\n\n\n\n## 3.前缀和\n\n### 3.1 线性前缀和\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n,m;\nint g[N],s[N];\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) cin>>g[i],s[i]=s[i-1]+g[i];\n\t\n    while(m--){\n        int l,r;\n        cin>>l>>r;\n        cout<<s[r]-s[l-1]<<endl;\n    }\n\t\n    return 0;\n}\n```\n\n### 3.2 二维前缀和\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1010;\n\nint n,m,p;\nint g[N][N],s[N][N];\n\n\nint main()\n{\n    cin>>n>>m>>p;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            cin>>g[i][j];\n            s[i][j]=s[i][j-1]+s[i-1][j]-s[i-1][j-1]+g[i][j];\n        }\n    }\n\t\n    while(p--){\n        int x1,x2,y1,y2;\n        cin>>x1>>y1>>x2>>y2;\n        LL sum=s[x2][y2]-s[x1-1][y2]-s[x2][y1-1]+s[x1-1][y1-1];\n        cout<<sum<<endl;\n    }\n\t\n    return 0;\n} \n```\n\n\n## 4.差分\n\n### 4.1 线性差分\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint a[N],b[N];\nint n,m;\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&a[i]);\n        b[i]=a[i]-a[i-1];\n    }\n\t\n    while(m--){\n        int l,r,c;\n        scanf(\"%d%d%d\",&l,&r,&c);\n        b[l]+=c;\n        b[r+1]-=c;\n    }\n\t\n    for(int i=1;i<=n;i++){\n        a[i]=a[i-1]+b[i];\n        printf(\"%d \",a[i]);\n    }\n\t\n    return 0;\n} \n```\n\n### 4.2 二维差分\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1010;\n\nint n,m,q;\nint a[N][N],b[N][N];\n\n//差分函数 \nvoid insert(int x1,int y1,int x2,int y2,int c)\n{\n    b[x1][y1]+=c;\n    b[x2+1][y1]-=c;\n    b[x1][y2+1]-=c;\n    b[x2+1][y2+1]+=c;\n}\n\n\nint main()\n{\n    cin>>n>>m>>q;\n\t\n    //预处理出差分 \n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            scanf(\"%d\",&a[i][j]);\n            insert(i,j,i,j,a[i][j]);\n        }\n    }     \n    \n    //查询时操作 \n    while(q--){\n        int x1,y1,x2,y2,c;\n        cin>>x1>>y1>>x2>>y2>>c;\n        insert(x1,y1,x2,y2,c);\n    }\n\t\n    //差分还原后输出 \n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            b[i][j]+=b[i-1][j]+b[i][j-1]-b[i-1][j-1];\n            printf(\"%d \",b[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\t\n    return 0;\n}\n```\n\n\n\n## 5.双指针\n\n### 5.1 头尾指针\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint  a[N],b[N];\nint n,m,x;\n\n\nint main()\n{\n    cin>>n>>m>>x;\n    for(int i=0;i<n;i++) cin>>a[i];\n    for(int i=0;i<m;i++) cin>>b[i];\n\t\n    int i,j=m-1;\n    for(i=0;i<n;i++){\n        while(j>=0&&a[i]+b[j]>x) j--;\n        if(a[i]+b[j]==x) break;\n    }\n\t\n    cout<<i<<' '<<j<<endl;\n\t\n    return 0;\n}\n```\n\n### 5.2 头双指针\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n,m;\nint a[N],b[N];\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=0;i<n;i++) cin>>a[i];\n    for(int i=0;i<m;i++) cin>>b[i];\n\t\n    for(int i=0,j=0;i<m;i++){\n        if(a[j]==b[i]) j++;\n        if(j==n){\n            printf(\"Yes\");\n            return 0;\n        }\n    }\n    \n    printf(\"No\");\n\t\n    return 0;\n}\n```\n\n### 5.3 快慢指针（链表）\n```c++\n public class ListNode {\n      int val;\n      ListNode next;\n      ListNode() {}\n      ListNode(int val) { this.val = val; }\n      ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n  }\n```\n```c++\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode p = head, q = head;\n        while(q != null && q.next != null){\n            q = q.next.next;\n            p = p.next;\n        }\n        return p;\n    }\n}\n```\n\n\n\n## 6.贪心\n\n### 6.1 区间选点\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nstruct Range{\n    int l,r;\n}range[N];\n\nbool cmp(Range a,Range b)\n{\n    if(a.r==b.r) return a.l<b.r;\n    return a.r<b.r;\n}\n\n\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>range[i].l>>range[i].r;\n\t\n    sort(range,range+n,cmp);\n\t\n    int sum=1,res=range[0].r;\n    for(int i=1;i<n;i++){\n        if(res<range[i].l){\n            res=range[i].r;\n            sum++;\n        }\n    }\n\t\n    cout<<sum<<endl;\n\t\n    return 0;\n}\n```\n\n### 6.2 区间分组\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\npriority_queue <int,vector<int>,greater<int> > heap;\n\nconst int N=1e5+10;\n\nstruct Range{\n    int l,r;\n}range[N];\n\n\nbool cmp(Range a,Range b){\n    return a.l<b.l;\n}\n\n\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>range[i].l>>range[i].r;\n\t\n    sort(range,range+n,cmp);\n\t\n    for(int i=0;i<n;i++){\n        Range r=range[i];\n        if(heap.empty()||heap.top()>=r.l) heap.push(r.r);\n        else{\n            heap.pop();\n            heap.push(r.r);\n        }\n    }\n\t\n    cout<<heap.size()<<endl;\n\t\n    return 0;\n}\n```\n\n### 6.3 哈夫曼树\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\npriority_queue<int,vector<int>,greater<int> > q;\n\n\nint main()\n{\n    int n,p;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&p);\n        q.push(p);\n    }\n    \n    int x,y,sum=0;\n    while(q.size()>1){\n        x=q.top();\n        q.pop();\n        y=q.top();\n        q.pop();\n        q.push(x+y);\n        sum+=x+y;\n    }\n\t\n    printf(\"%d\",sum);\n\t\n    return 0;\n}\n```\n\n### 6.4 选址问题\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10;\n\nint n;\nint g[N];\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n\t\n    sort(g,g+n);\n\t\n    LL sum=0;\n    for(int i=0;i<n;i++) sum+=abs(g[i]-g[n/2]);\n\t\n    cout<<sum<<endl;\n\t\n    return 0;\n}\n```\n\n### 6.5 推公式\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10;\n\nint n;\nLL ct[N];\n\nstruct P{\n    int x,y,z;\n}g[N];\n\n\nbool cmp(P a,P b){\n    return a.z<b.z;\n}\n\n\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        int a,b;\n        cin>>a>>b;\n        g[i].x=a,g[i].y=b,g[i].z=a+b;\n    }\n\t\n    sort(g+1,g+n+1,cmp);\n\t\n    for(int i=1;i<=n;i++) ct[i]=ct[i-1]+g[i].x;\n\t\n    LL sum=-2e17;\n    for(int i=1;i<=n;i++){\n        LL t=ct[i-1]-g[i].y;\n        sum=max(sum,t);\n    }\n\t\n    cout<<sum<<endl;\n\t\n    return 0;\n}\n```\n\n\n\n## 7.位运算\n\n### 7.1 朴素版\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint a[N];\n\n\nint check(int n)\n{\n    int sum=0;\n    while(n){\n        if(n&1) sum++;\n        n>>=1;\n    }\n    return sum;\n}\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&a[i]);\n        printf(\"%d \",check(a[i]));\n    }\n\t\n    return 0;\n}\n```\n\n### 7.2 x&-x\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    \n    while(n--)\n    {\n        int x,s=0;\n        scanf(\"%d\",&x);\n        for(int i=x;i;i-=i&-i) s++;\n        printf(\"%d \",s);\n    }\n\n    return 0;\n}\n```\n\n---\n\n\n\n\n\n# 二、数据结构\n\n\n\n## 1.线性表\n\n### 1.1 数组\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n;\nint g[N];\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++) cin>>g[i];\n\t\n    for(int i=0;i<n;i++) cout<<g[i]<<' ';\n\t\n    return 0;\n}\n```\n\n### 1.2 哈希表\n```c++\n#include<iostream>\n#include<algorithm>\n \nusing namespace std;\n\nconst int N=1e5+3,null=1e9+7;   \n\nint h[N];\nint n;\n\n\nint find(int x)\n{\n    int k=(x%N+N)%N;\n    while(h[k]!=null&&h[k]!=x){\n        if(k==N) k=0;\n        k++;\n    }\n    return k;\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    fill(h,h+N,null);\n\t\n    while(n--){\n        int x;\n        char op[2];\n        scanf(\"%s%d\",&op,&x);\n        int k=find(x); \n\t\t\n        if(op[0]=='I') h[k]=x;\n        else{\n            if(h[k]==null) printf(\"No\\n\");\n            else  printf(\"Yes\\n\");\n        }\n    }\n    return 0;\n}\n```\n\n\n\n## 2.链表\n\n### 说明：C++里有三种链表的应用方法\n\n* #### 1.指针（最基本的链表）\n* #### 2.结构体（链表的一个变种）\n* #### 3.数组模拟（运行速度快，理解起来有点绕）\n\n### 这里主要展示数组模拟~\n\n### 2.1 单链表\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\n//head 表示头结点的下标 \n//e[i] 表示节点i的值 \n//ne[i] 表示节点i的next指针是多少 \n//idx 存储当前已经用到了哪个点 \nint head,e[N],ne[N],idx;\n\n//初始化 \nvoid init()\n{\n    head=-1;\n    idx=0; \n} \n\n//在头节点后面插入节点 \nvoid add_to_head(int x)\n{\n    e[idx]=x;\n    ne[idx]=head;\n    head=idx++;\n}\n\n//在k节点后面插入节点\nvoid add(int k,int x)\n{\n    e[idx]=x;\n    ne[idx]=ne[k];\n    ne[k]=idx++;\n}\n\n//删除节点 \nvoid remove(int k)\n{\n    ne[k]=ne[ne[k]];\n}\n\n\nint main()\n{\n    int m;\n    cin>>m;\n    init();\n\t\n    while(m--){\n        int k,x;\n        char op;\n\t\t\n        cin>>op;\n        if(op=='H'){\n            cin>>x;\n            add_to_head(x);\n        }\n        else if(op=='D'){\n            cin>>k;\n            if(!k)  head=ne[head];\n            remove(k-1);\n        }\n        else{\n            cin>>k>>x;\n            add(k-1,x);\n        }\n    }\n\t\n    for(int i=head;i!=-1;i=ne[i]) \n        cout<<e[i]<<' ';\n\n    return 0;\n}\n```\n\n### 2.2 双链表\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint m;\nint e[N],l[N],r[N],idx;\n\n//初始化\nvoid init()\n{\n    r[0]=1,l[1]=0;\n    idx=2;\n} \n\n//在第k个点左右插入一个点\nvoid add(int k,int x)\n{\n    e[idx]=x;\n    r[idx]=r[k],l[idx]=k;\n    l[r[k]]=idx,r[k]=idx++;\n}\n\n//删除第k个点\nvoid removes(int k)\n{\n    r[l[k]]=r[k];\n    l[r[k]]=l[k];\n}\n\n\nint main()\n{\n    init();\n\t\n    cin>>m;\n\t\n    while(m--){\n        string op;\n        int k,x;\n        cin>>op;\n\t\t\n        if(op==\"L\"){\n            cin>>x;\n            add(0,x);\n        }\n        else if(op==\"R\"){\n            cin>>x;\n            add(l[1],x);\n        }\n        else if(op==\"D\"){\n            cin>>k;\n            removes(k+1);\n        }\n        else if(op==\"IL\"){\n            cin>>k>>x;\n            add(l[k+1],x);\n        }\n        else{\n            cin>>k>>x;\n            add(k+1,x);\n        }\n    }\n\t\n    for(int i=r[0];i!=1;i=r[i]) \n        cout<<e[i]<<' ';\n\t\n    return 0;\n}\n```\n\n\n\n## 3.栈\n\n### 3.1 STL容器\n```c++\n#include<iostream>\n#include<algorithm>\n#include<stack>\n\nusing namespace std;\n\nstack<int> st;\nstring s;\nint n;\n\n\nint main()\n{\n    cin>>n;\n\t\n    while(n--){\n        cin>>s;\n        if(s==\"push\"){\n            int x;\n            cin>>x;\n            st.push(x);\n        }\n        else if(s==\"empty\"){\n            if(st.size()) printf(\"NO\\n\");\n            else  printf(\"YES\\n\");\n        }\n        else if(s==\"query\")\n            printf(\"%d\\n\",st.top());\n        else st.pop();\n    }\n\t\n    return 0;\n}\n```\n\n### 3.2 数组模拟\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint n;\nint st[N],tt=-1;\nstring s;\n\n\nint main()\n{\n    cin>>n; \n\t\n    while(n--){\n        cin>>s;\n        if(s==\"push\"){\n            int x;\n            cin>>x;\n            st[++tt]=x;\n        }\n        else if(s==\"empty\"){\n            if(tt!=-1) printf(\"NO\\n\");\n            else  printf(\"YES\\n\");\n        }\n        else if(s==\"query\")\n            printf(\"%d\\n\",st[tt]);\n        else tt--;\n    }\n    \n    return 0;\n} \n```\n\n\n\n## 4.队列\n\n### 4.1 STL容器\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\nqueue<int> q;\nstring s;\nint n;\n\n\nint main()\n{\n    cin>>n;\n\t\n    while(n--){\n        cin>>s;\n        if(s==\"push\"){\n            int x;\n            cin>>x;\n            q.push(x);\n        }\n        else if(s==\"empty\"){\n            if(q.size()) printf(\"NO\\n\");\n            else  printf(\"YES\\n\");\n        }\n        else if(s==\"query\")\n            printf(\"%d\\n\",q.front());\n        else q.pop();\n    }\n\t\n    return 0;\n}\n```\n\n### 4.2 数组模拟\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10; \n\nint n;\nint q[N],hh=0,tt=-1;\nstring s;\n\n\nint main()\n{\n    cin>>n;\n\t\n    while(n--){\n        cin>>s;\n        if(s==\"push\"){\n            int x;\n            cin>>x;\n            q[++tt]=x;\n        }\n        else if(s==\"empty\"){\n            if(tt<hh) printf(\"YES\\n\");\n            else  printf(\"NO\\n\");\n        }\n        else if(s==\"pop\") hh++;\n        else printf(\"%d\\n\",q[hh]);\n    }\n\t\n    return 0;\n}\n```\n\n\n\n## 5.树\n\n### 5.1 并查集\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint fa[N];\nint n,m;\n\n\nint find(int x)\n{\n    if(fa[x]!=x) fa[x]=find(fa[x]);\n    return fa[x];\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) fa[i]=i;\n\t\n    while(m--){\n        int a,b;\n        char op[2];\n        scanf(\"%s%d%d\",&op,&a,&b);\n        if(op[0]=='M') fa[find(a)]=find(b);\n        else{\n            if(find(a)==find(b)) printf(\"Yes\\n\");\n            else  printf(\"No\\n\");\n        }\n    }\n\t\n    return 0;\n}\n```\n\n### 5.2 Trie树\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\n//下标是0的点，既是根结点，又是空节点\n//idx是节点，son[p][u]为指向下一个节点的指针 \nint son[N][26],cnt[N],idx=0; \nchar str[N];\n\n//插入节点\nvoid insert(char str[])\n{\n    int p=0;\n    for(int i=0;str[i];i++){\n        int u=str[i]-'a';\n        if(!son[p][u]) son[p][u]=++idx;\n        p=son[p][u];\n    }\n    cnt[p]++;\n} \n\n//查询节点\nint query(char str[])\n{\n    int p=0;\n    for(int i=0;str[i];i++){\n        int u=str[i]-'a';\n        if(!son[p][u]) return 0;\n        p=son[p][u];\n    }\n    return cnt[p];\n} \n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    while(n--){\n        char op[2];\n        scanf(\"%s%s\",&op,&str);\n        \n        if(op[0]=='I') insert(str);\n        else printf(\"%d\\n\",query(str));\n    }\n\t\n    return 0;\n} \n```\n\n\n\n## 6.图\n\n### 6.1 邻接矩阵\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=510,INF=1e9+7;\n\nint g[N][N];\nint n,m;\n\n\nint main()\n{\n    cin>>n>>m;\n    fill(g[0],g[0]+N*N,INF);\n\t\n    while(m--){\n        int a,b,c;\n        cin>>a>>b>>c;\n        \n        //有向图\n        g[a][b]=min(g[a][b],c);\n        //无向图\n        g[a][b]=g[b][a]=min(g[a][b],c);\n    }\n\t\n    return 0;\n}\n```\n\n### 6.2 邻接表\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10,INF=1e9+7;\n\nint h[N],e[N],ne[N],w[N],idx;\nint n,m;\n\n//添加节点\nvoid add(int a,int b,int c)\n{\n    e[idx]=b;\n    w[idx]=c;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    fill(h,h+N,-1);\n\t\n    while(m--){\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n\t\t\n        //有向图\n        add(a,b,c);\n        //无向图\n        add(a,b,c),add(b,a,c);\n    }\n\t\n    return 0;\n} \n```\n\n\n\n## 7.树状数组+线段树\n\n### 7.1 树状数组\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define x first\n#define y second\n\nusing namespace std;\n\ntypedef long long LL;\n\ntypedef pair<int,int> PII;\n\nconst int N=1e6+10;\n\nLL a[N],c[N];\nLL T,n,m;\n\nLL query(LL x)\n{\n    LL s=0;\n    for(;x;x-=x&(-x)) s+=c[x];\n    return s;\n}\n\nvoid add(LL x,LL s){\n    for(;x<=n;x+=x&(-x)) c[x]+=s;\n}\n\n \nint main()\n{\n    ios::sync_with_stdio(false);\n\t\n    cin>>n>>m;\n    for(int i=1;i<=n;i++){\n        cin>>a[i];\n        add(i,a[i]);\n    }\n\t\n    while(m--){\n        LL t,x,y;\n        cin>>t>>x>>y;\n\t\t\n        if(t) add(x,y);\n        else cout<<query(y)-query(x-1)<<endl;\n    }\n\t\n    return 0;\n}\n```\n\n### 7.2 线段树\n\n```c++\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define x first\n#define y second\n\nusing namespace std;\n\ntypedef long long LL;\n\ntypedef pair<int,int> PII;\n\nconst int N=1e6+10;\n\nLL a[N],c[N];\nLL T,n,m;\n\nstruct Node\n{\n    int l,r;\n    int v;  // 区间[l, r]中的最大值\n}tr[N*4];\n\n\nvoid pushup(int u)  // 由子节点的信息，来计算父节点的信息\n{\n    tr[u].v=max(tr[u<<1].v,tr[u<<1|1].v);\n}\n\n\nvoid build(int u,int l,int r)\n{\n    tr[u]={l,r};\n    if(l==r) return;\n    int mid=l+r>>1;\n    build(u<<1,l,mid), build(u<<1|1,mid+1,r);\n}\n\n\nint query(int u,int l,int r)\n{\n    if(tr[u].l>=l &&tr[u].r<=r) return tr[u].v;   // 树中节点，已经被完全包含在[l,r]中了\n\n    int mid=tr[u].l+tr[u].r>>1;\n    int v=0;\n    if(l<=mid) v=query(u<<1,l,r);\n    if(r>mid) v=max(v,query(u<<1|1,l,r));\n\n    return v;\n}\n\n\nvoid modify(int u,int x,int v)\n{\n    if(tr[u].l==x&&tr[u].r== x) tr[u].v=v;\n    else{\n        int mid=tr[u].l+tr[u].r>>1;\n        if(x<=mid) modify(u<<1,x,v);\n        else modify(u<<1|1,x,v);\n        pushup(u);\n    }\n}\n\n\nint main()\n{\n    int n=0,last=0;\n    scanf(\"%d%d\",&m,&p);\n    build(1,1,m);\n\n    int x;\n    char op[2];\n    while(m--)\n    {\n        scanf(\"%s%d\",op,&x);\n        if(*op=='Q'){\n            last=query(1,n-x+1,n);\n            printf(\"%d\\n\",last);\n        }\n        else{\n            modify(1,n+1,((LL)last+x)%p);\n            n++;\n        }\n    }\n\n    return 0;\n}\n```\n\n\n\n## 8.C++ STL容器及函数（只列出较为常用的）\n\n### 8.1 常用函数*\n```c++\n#include<iostream>\n#include<algorithm>        //头文件\n\nusing namespace std;\n\n\nint main()\n{\n    //1.max()、min()、abs()函数\n    int a = 3, b = 4;\n    //求最大值\n    int Max = max(a,b);\n    //求最小值\n    int Min = min(a,b);\n    //求绝对值\n    int Abs = abs(-3);\n    cout << Max << Min << Abs;\n    \n    //2.交换函数：swap()\n    int a = 3, b = 4;\n    swap(a,b);\n\t\n    //3.排序函数：sort()\n    int a[5] = {55,44,33,22,11};\n    sort(a,a+5);\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n        \n    //4.填充函数：fill() (很多人都用memset，但是我就喜欢fill)\n    int a[5] = {11,33,22};\n    fill(a+3,a+5,9999);\t\t\t\t\t\t\t\t\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n    \n    //5.翻转函数：reverse()\n    int a[5] = {11,22,33,44,55};\n    reverse(a,a+5);\n    for(int i = 0; i < 5; i++) \n        cout << a[i] << ' ';\n        \n    return 0;\n}\n```\n\n\n### 8.2 vector（动态数组）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>           //头文件\n\nusing namespace std;\n\n//初始化\n//方式一：初始化一维可变长数组\nvector<int> c; //定义了一个名为num的存int数据的一维数组\nvector<double> c;//定义了一个名为num的存double数据的一维数组\nvector<node> c;//node是结构体类型\n \n//方式二：初始化二维可变长数组\nvector<int> c[5];//定义可变长二维数组\n//注意：行是不可变的（只有5行），而列可变可以在指定行添加元素\n//第一维固定长度为5，第二维长度可以改变\n \n//方式三:初始化二维均可变长数组\nvector<vectot<int> > c;//定义一个行和列均可变的二维数组\n\n\nint main()\n{\n    //访问\n    //方式一：单个访问，假设num数组中已经有了5个元素\n    cout<<c[4]<<\"\\n\";  //输出第五个数据\n    //一二维可变数组和普通数组的访问方法一样\n \n    //方式二:遍历\n    for(int i=0;i<c.size();i++)\n        cout<<c[i]<<\" \";\n \n    //方式三：智能指针\n    for(auto i : c)\n        cout<<i<<\" \";\n        \n    return 0;\n}\n```\n\n```c++\n---\n相关方法函数如下：c指定为数组名称\n\n代码\t含义\nc.front()\t返回第一个数据\nc.back()\t返回最后一个数据\nc.push_back(element)\t在尾部加一个数据 O(1)\nc.pop_back()\t删除最后一个数据 O(1)\nc.size()\t返回实际数据个数（unsigned类型） O(1)\nc.clear()\t清除元素个数 O(N),N为元素个数\nc.resize(n,v)\t改变数组大小为n,n个空间数值赋为v，如果没有默认赋值为0\nc.insert(it,x)\t\n向任意迭代器it插入一个元素x O(N)，\n\n例：c.insert(c.begin()+2,-1) 将-1插入c[2]的位置\n\nc.erase(first,last)\t删除[first,last)的所有元素\nc.begin()\t返回首元素的迭代器（通俗来说就是地址）\nc.end()\t返回最后一个元素后一个位置的迭代器（地址）\nc.empty()\t判断是否为空，为空返回真，反之返回假\n注意： end()返回的是最后一个元素的后一个位置的地址，不是最后一个元素的\n---\n```\n\n### 8.3 stack（栈）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<stack>           //头文件\n\nusing namespace std;\n\n//初始化\nstack<int> st;\nstack<string> st;\nstack<node> st;//node是结构体类型\n\n\nint main()\n{\n    //访问函数\n    push()\t压栈，增加元素 O(1)\n    pop()\t移除栈顶元素 O(1)\n    top()\t取得栈顶元素（但不删除）O(1)\n    empty()\t检测栈内是否为空，空为真 O(1)\n    size()\t返回stack内元素的个数 O(1)\n        \n    return 0;\n}\n```\n\n### 8.4 queue（队列）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>           //头文件\n\nusing namespace std;\n\n//普通队列初始化\nqueue<int> q;\nqueue<string> q;\nqueue<node> q;//node是结构体类型\n\n//优先队列初始化定义\npriority_queue<int> q;\n//优先队列设置优先级\npriority_queue<int, vector<int>, greater<int> > q;\n//最后两个>之间要有空格，旧版c++编译器会把\">>\"当成右移符！！！\n\n\nint main()\n{\n    //普通队列访问函数\n    front()\t返回队首元素 O(1)\n    back()\t返回队尾元素 O(1)\n    push()\t尾部添加一个元素副本 进队O(1)\n    pop()\t删除第一个元素 出队 O(1)\n    size()\t返回队列中元素个数，返回值类型unsigned int O(1)\n    empty()\t判断是否为空，队列为空，返回true O(1)\n    \n    //优先队列访问函数\n    top()\t访问队首元素\n    push()\t入队\n    pop()\t堆顶（队首）元素出队\n    size()\t队列元素个数\n    empty()\t是否为空\n    注意没有clear()！\t不提供该方法\n    优先队列只能通过top()访问队首元素（优先级最高的元素）\n    \n    //注：栈的取第一个元素为top();而普通队列的为front();优先队列为top();\n        \n    return 0;\n}\n```\n\n### 8.5 pair\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n//初始化\n\npair<string,int>p(\"wangyaqi\",1);//带初始值的\npair<string,int>p;//不带初始值的\n\n\nint main()\n{\n    //访问函数\n    pair<int,int>p[20];\n    for(int i=0;i<20;i++){\n        //和结构体类似，first代表第一个元素，second代表第二个元素\n        cout<<p[i].first<<\" \"<<p[i].second;\n    }\n        \n    return 0;\n}\n```\n\n### 8.6 string字符串\n```c++\n#include<iostream>\n#include<algorithm>\n#include<string>       //头文件（可写可不写，iostream里自带）\n\nusing namespace std;\n\n//定义\nstring s;\n\n\nint main()\n{\n    //使用操作\n    for(int i=0;i<s.size();i++) \n        cout<<s[i]<<\" \";\n    \n    //拼接\n    string s1;\n    string s2;\n    s1 = \"123\";\n    s2 = \"456\";\n    string s = s1 + s2;\n    cout<<s;   //123456\n    \n    return 0;\n}\n```\n\n\n---\n\n\n\n\n\n# 三、搜索和图论\n\n\n\n## 1.DFS深度优先搜索\n\n### 1.1 基础深搜\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\nconst int N=10;\n\nint path[N];\nbool st[N];\nint n;\n\n\nvoid dfs(int u)\n{\n    if(u==n){\n        for(int i=0;i<n;i++) printf(\"%d \",path[i]);\n        printf(\"\\n\");\n        return;\n    }\n\t\n    for(int i=1;i<=n;i++){\n        if(!st[i]){\n            path[u]=i;\n            st[i]=true;\n            dfs(u+1);\n            st[i]=false;\n        }\n    }\n}\n\n\nint main()\n{\n    cin>>n;\n\t\n    dfs(0);\n\t\n    return 0;\n}\n```\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=20;\n\nbool col[N],dg[N],udg[N];\nchar g[N][N];\nint n;\n\n\nvoid dfs(int u)\n{\n    if(u==n){\n        for(int i=0;i<n;i++) puts(g[i]);\n        puts(\"\");\n        return;\n    }\n\t\n    for(int i=0;i<n;i++){\n        if(!col[i]&&!dg[u+i]&&!udg[n-u+i]){\n            g[u][i]='Q';\n            col[i]=dg[u+i]=udg[n-u+i]=true;\n            dfs(u+1);\n            col[i]=dg[u+i]=udg[n-u+i]=false;\n            g[u][i]='.';\n        }\n    } \n}\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++)\n        for(int j=0;j<n;j++)\n            g[i][j]='.';\n\t\n    dfs(0);\n\t\n    return 0;\n}\n```\n\n### 1.2 图的深搜\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint h[N],e[2*N],ne[2*N],idx;\nbool st[N];\nint n;\n\nint ans=N; \n\n//邻接表存储图 \nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n//以u为根的子树中点的数量 \nint dfs(int u)\n{\n    st[u]=true;\n    int sum=1,res=0;\n    //sum存当前子树节点节点总个数 \n    for(int i=h[u];i!=-1;i=ne[i]){\n        int j=e[i];\n        if(!st[j]){\n            int s=dfs(j);     \n            //搜索子树节点个数并累加到s中 \n            res=max(res,s);\n            //更新res值 \n            sum+=s;\n            //累加节点u的子树节点 \n        }\n    }\n    //res存当前子树节点最大值 \n    res=max(res,n-sum);\n    //ans存所有节点的res最小值（重心） \n    ans=min(ans,res);\n    //返回子树节点总数 \n    return sum;\n}\n\n\nint main()\n{\n    fill(h,h+N,-1);\n\t\n    cin>>n;\n    for(int i=0;i<n-1;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(a,b),add(b,a);\n    }\n\t\n    dfs(1);\n\t\n    cout<<ans<<endl;\n\t\n    return 0;\n} \n```\n\n\n\n## 2.BFS广度优先搜索\n\n### 2.1 基础搜索\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n\nusing namespace std;\n\ntypedef pair<int,int> PII;\n\nconst int N=110;\n\nint g[N][N],d[N][N];\nPII q[N*N];\nint n,m;\n\nint s[2][4]={\n    0,0,1,-1,\n    1,-1,0,0\n};\n\n\nint bfs()\n{\n    int hh=0,tt=0;\n    q[0]={0,0};\n\t\n    fill(d[0],d[0]+N*N,-1);\n    d[0][0]=0;\n\t\n    while(hh<=tt){ \n        PII t=q[hh++];\n        for(int i=0;i<4;i++){\n            int x=t.first+s[0][i];\n            int y=t.second+s[1][i];\n            if(x>=0&&x<n&&y>=0&&y<m&&g[x][y]==0&&d[x][y]==-1){\n                d[x][y]=d[t.first][t.second]+1;\n                q[++tt]={x,y};\n            }\n        }\n    }\n\t\n    return d[n-1][m-1];\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=0;i<n;i++)\n        for(int j=0;j<m;j++)\n            cin>>g[i][j];\n\n\t\n    cout<<bfs()<<endl;\n\t\n    return 0;\n} \n```\n\n### 2.2 图的广搜\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint h[N],e[N],ne[N],idx;\nint q[N],d[N];\nint n,m;\n\n//邻接表存储图 \nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nint bfs()\n{\n    int hh=0,tt=0;\n    fill(d,d+N,-1);\n    q[0]=1,d[1]=0;\n\t//数组q模拟队列 \n    while(hh<=tt){\n        int t=q[hh++];\n        for(int i=h[t];i!=-1;i=ne[i]){\n            int j=e[i];\n            if(d[j]==-1){\n                d[j]=d[t]+1;\n                q[++tt]=j;\n            }\n        }\n    }\n    //d[n]记录路径长度+判断\n    return d[n];\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    //fill填充h数组\n    fill(h,h+N,-1);\n\t\n    for(int i=0;i<m;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(a,b);\n    }\n\t\n    cout<<bfs()<<endl;\n\t\n    return 0;\n}\n```\n\n### 2.3 有向图拓扑排序\n\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint h[N],e[N],ne[N],idx;\nint q[N],d[N];   //d数组存储节点入度 \nint n,m;\n\n//邻接表存储图（数组模拟单链表） \nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n//拓扑排序 \nbool topsort()\n{\n    int hh=0,tt=-1;\n    //把入度为0的所有节点加进队列 \n    for(int i=1;i<=n;i++){\n        if(!d[i]) q[++tt]=i;\n    }\n    //数组模拟队列 \n    while(hh<=tt){\n        int t=q[hh++];\n        //遍历图 \n        for(int i=h[t];i!=-1;i=ne[i]){\n            int j=e[i]; \n            d[j]--;    //j节点入度-1 \n            if(!d[j]) q[++tt]=j;\n            //如果节点入度为0，则加入队列 \n        }\n    }\n    //判断是否遍历完成 \n    return tt==n-1;\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    fill(h,h+N,-1);\n\n    for(int i=0;i<n;i++){\n        int a,b;\n        cin>>a>>b;\n        add(a,b);\n        d[b]++;    //节点入度++             \n    }\n    //遍历队列即为序列 \n    if(topsort()){\n        for(int i=0;i<n;i++){\n            printf(\"%d \",q[i]);\n        }\n    }\n    else printf(\"-1\");\n\n    return 0;\n} \n```\n\n\n\n## 3.最短路径算法\n\n### 3.1 朴素Dijkstra最短路（不存在负权边）\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=510,INF=1e9+7;\n\nint g[N][N];\nint dist[N];\nbool st[N];\nint n,m;\n\n\nint dijkstra()\n{\n    fill(dist,dist+N,INF);\n    dist[1]=0;\n\t\n    for(int i=0;i<n;i++){\n        int t=-1;\n        for(int j=1;j<=n;j++)\n            if(!st[j]&&(t==-1||dist[t]>dist[j]))\n                t=j;\n        for(int j=1;j<=n;j++)\n            dist[j]=min(dist[j],dist[t]+g[t][j]);\n        st[t]=true;\n    }\n\t\n    return dist[n];\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    fill(g[0],g[0]+N*N,INF);\n\t\n    while(m--){\n        int a,b,c;\n        cin>>a>>b>>c;\n        g[a][b]=min(g[a][b],c);\n    }\n\t\n    int t=dijkstra();\n\t\n    if(t==INF) printf(\"-1\");\n    else printf(\"%d\",dist[n]);\n\t\n    return 0;\n}\n```\n\n### 3.2 堆优化Dijkstra最短路\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\nconst int N=1e6+10,INF=1e9+7;\n\ntypedef pair<int,int> PII;\n\nint h[N],w[N],e[N],ne[N],idx;\nint dist[N],n,m;\nbool st[N];\n\n\nvoid add(int a,int b,int c)\n{\n    w[idx]=c;\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nint dijkstra()\n{\n    fill(dist,dist+N,INF);\n    dist[1]=0;\n\t\n    priority_queue<PII,vector<PII>,greater<PII> > heap;\n    heap.push({0,1});\n\t\n    while(heap.size()){\n        PII t=heap.top();\n        heap.pop();\n\t\t\n        int ver=t.second,distance=t.first;\n        if(st[ver]) continue;\n        st[ver]=true;\n\t\t\n        for(int i=h[ver];i!=-1;i=ne[i]){\n            int j=e[i];\n            if(dist[j]>distance+w[i]){\n                dist[j]=distance+w[i];\n                heap.push({dist[j],j});\n            }\n        }\n    }\n\t\n    if(dist[n]==INF) return -1;\n    return dist[n];\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    fill(h,h+N,-1);\n\n    while(m--){\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n    }\n\t\n    printf(\"%d\",dijkstra());\n\t\n    return 0;\n}\n```\n\n### 3.3 bellman-ford最短路（有边数限制）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n\nusing namespace std;\n\nconst int N=510,M=10010,INF=1e9+7;\n\nint dist[N],backup[N];\nint n,m,k;\n\nstruct Edge{\n    int a,b,w;\n}edges[M];\n\n\nvoid bellman_ford()\n{\n    fill(dist,dist+N,INF);\n    dist[1]=0;\n\t\n    for(int i=0;i<k;i++){\n        memcpy(backup,dist,sizeof dist);\n        for(int j=0;j<m;j++){\n            int a=edges[j].a,b=edges[j].b,w=edges[j].w;\n            dist[b]=min(dist[b],backup[a]+w);\n        }\n    }\n}\n\n\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=0;i<m;i++){\n        int a,b,w;\n        scanf(\"%d%d%d\",&a,&b,&w);\n        edges[i]={a,b,w};\n    }\n\t\n    bellman_ford();\n\t\n    if(dist[n]>INF/2) printf(\"impossible\");\n    else  printf(\"%d\",dist[n]);\n\t\n    return 0;\n}\n```\n\n### 3.4 spfa最短路（存在负权边）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<queue>\n\nusing namespace std;\n\nconst int N=1e5+10,INF=1e9+7;\n\nint h[N],e[N],ne[N],w[N],idx;\nint dist[N],n,m;\nbool st[N];\n\n\nvoid add(int a,int b,int c)\n{\n    e[idx]=b;\n    w[idx]=c;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nvoid spfa()\n{\n    fill(dist,dist+N,INF);\n    dist[1]=0;\n\t\n    queue<int> q;\n    q.push(1);\n    st[1]=true;\n\t\n    while(q.size()){\n        int t=q.front();\n        q.pop();\n        st[t]=false;\n\t\t\n        for(int i=h[t];i!=-1;i=ne[i]){\n            int j=e[i];\n            if(dist[j]>dist[t]+w[i]){\n                dist[j]=dist[t]+w[i];\n                if(!st[j]){\n                    q.push(j);\n                    st[j]=true;\t\n                } \n            } \n        }\n    }\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    fill(h,h+N,-1);\n\t\n    while(m--){\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n    }\n\t\n    spfa();\n\t\n    if(dist[n]==INF) printf(\"impossible\");\n    else  printf(\"%d\",dist[n]);\n\t\n    return 0;\n} \n```\n\n### 3.5 Floyd最短路（多源）\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=510,INF=1e9+7;\n\nint g[N][N];\nint n,m,k;\n\n\nvoid floyd()\n{\n    for(int p=1;p<=n;p++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                g[i][j]=min(g[i][j],g[i][p]+g[p][j]);\n}\n\n\nint main()\n{\n    cin>>n>>m>>k;\n    fill(g[0],g[0]+N*N,INF);\n    for(int i=1;i<=n;i++) g[i][i]=0; \n\t\n    while(m--){\n        int a,b,c;\n        cin>>a>>b>>c;\n        g[a][b]=min(g[a][b],c);\n    }\n\t\n    floyd();\n\t\n    while(k--){\n        int a,b;\n        cin>>a>>b;\n        if(g[a][b]>=1e6) printf(\"impossible\\n\");\n        else  printf(\"%d\\n\",g[a][b]);\n    }\n\t\n    return 0;\n} \n```\n\n\n\n## 4.最小生成树\n\n### 4.1 Prim算法\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=510,INF=1e9+7;\n\nint g[N][N],dist[N];\nbool st[N];\nint n,m;\n\n\nint prim()\n{\n    //初始化dist数组 \n    fill(dist,dist+N,INF);\n\t\n    int res=0;\n    for(int i=0;i<n;i++){\n        //找到距离集合最小权的边并赋予t \n        int t=-1;\n        for(int j=1;j<=n;j++)\n            if(!st[j]&&(t==-1||dist[t]>dist[j]))\n                t=j;\n                \n        //把t加到集合里 \n        st[t]=true;\n        \n        //i!=0，把边加到res里 \n        if(i){\n            //如果最小值为INF，则无边到集合中 \n            if(dist[t]==INF) return INF;\n            res+=dist[t];\n        }\n        \n        //更新节点到集合的最短距离 \n        for(int j=1;j<=n;j++)\n            dist[j]=min(dist[j],g[t][j]);\n    }\n\t\n    return res;\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    fill(g[0],g[0]+N*N,INF);\n\t\n    while(m--){\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        g[a][b]=g[b][a]=min(g[a][b],c);\n    }\n\t\n    int t=prim();\n\t\n    if(t==INF) printf(\"impossible\");\n    else  printf(\"%d\",t);\n\t\n    return 0;\n} \n```\n\n### 4.2 Kruskal算法\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\nconst int N=2e5+10;\n\nint n,m;\nint p[N];\n\nstruct Edge{\n    int a,b,w;\n}edges[N];\n\nbool cmp(Edge a,Edge b){\n    return a.w<b.w;\n}\n\nint find(int x)\n{\n    if(p[x]!=x) p[x]=find(p[x]);\n    return p[x];\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n\t\n    for(int i=0;i<m;i++){\n        int a,b,w;\n        scanf(\"%d%d%d\",&a,&b,&w);\n        edges[i]={a,b,w};\n    }\n\t\n    sort(edges,edges+m,cmp);\n\t\n    for(int i=1;i<=n;i++) p[i]=i;\n\t\n    int sum=0,ans=0;\n    for(int i=0;i<m;i++){\n        int a=edges[i].a,b=edges[i].b,w=edges[i].w;\n        a=find(a),b=find(b);\n        if(a!=b){\n            p[a]=b;\n            sum+=w;\n            ans++;\n        }\n    }\n\t\n    if(ans<n-1) printf(\"impossible\");\n    else  printf(\"%d\",sum);\n\t\n    return 0;\n}\n```\n\n\n\n## 5.二分图\n\n### 5.1 染色法判定\n```c++\n#include<iostream> \n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10,M=2*N;\n\nint h[N],e[M],ne[M],idx;\nint color[N];\nint n,m;\n\n\nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nbool dfs(int u,int c)\n{\n    color[u]=c;\n    for(int i=h[u];i!=-1;i=ne[i]){\n        int j=e[i];\n        if(!color[j]&&!dfs(j,3-c)) return false;\n        if(color[j]==c) return false;\n    }\n    return true;\n}\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    fill(h,h+N,-1);\n\t\n    while(m--){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(a,b),add(b,a);\n    }\n\t\n    bool flag=true;\n    for(int i=1;i<=n;i++){\n        if(!color[i]&&!dfs(i,1)){\n            flag=false;\n            break;\n        }\n    }\n\t\n    if(flag) printf(\"Yes\");\n    else  printf(\"No\");\n\t\n    return 0;\n}\n```\n\n### 5.2 匈牙利算法匹配\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=510,M=1e5+10;\n\nint h[N],e[M],ne[M],idx;\nint match[N];\nint n1,n2,m;\nbool st[N];\n\n\nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nbool find(int x)\n{\n    for(int i=h[x];i!=-1;i=ne[i]){\n        int j=e[i];\n        if(!st[j]){\n            st[j]=true;\n            if(!match[j]||find(match[j])){\n                match[j]=x;\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\nint main()\n{\n    scanf(\"%d%d%d\",&n1,&n2,&m);\n    fill(h,h+N,-1);\n\t\n    while(m--){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(a,b);\n    }\n\t\n    int res=0;\n    for(int i=1;i<=n1;i++){\n        fill(st,st+N,false);\n        if(find(i)) res++;\n    }\n    printf(\"%d\",res);\n\t\n    return 0;\n} \n```\n---\n\n\n\n\n\n# 四、数论\n\n\n\n## 1.质数（素数）\n\n### 1.1 试除法求质数\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n\nbool prime(int x)\n{\n    if(x<2) return false;\n    \n    for(int i=2;i<=x/i;i++)\n        if(x%i==0) \n            return false;\n\n    return true;\n}\n\n\nint main()\n{\n    int n;\n    cin>>n;\n    \n    while(n--){\n        int x;\n        cin>>x;\n        if(prime(x)) printf(\"Yes\\n\");\n        else  printf(\"No\\n\");\n    }\n\t\n    return 0;\n}\n```\n\n### 1.2 分解质因数\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n\nint main()\n{\n    int n;\n    cin>>n;\n\t\n    while(n--){\n        int x;\n        cin>>x;\n\t\t\n        for(int i=2;i<=x/i;i++){\n            if(x%i==0){\n                int ans=0;\n                while(x%i==0){\n                    x/=i;\n                    ans++;\n                }\n                printf(\"%d %d\\n\",i,ans);\n            }\n        }\n\t\t\n        if(x>1) printf(\"%d %d\\n\",x,1);\n\t\t\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```\n\n### 1.3 筛质数\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e6+10;\n\nbool st[N];\nint n,cnt;\n\n\nvoid get_prime(int n)\n{\n    for(int i=2;i<=n;i++){\n        if(!st[i]) cnt++;\n        for(int j=i+i;j<=n;j+=i){\n            st[j]=true;\n        }\n    }\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n\t\n    get_prime(n);\n\t\n    printf(\"%d\",cnt);\n\t\n    return 0;\n}\n```\n\n\n\n## 2. 约数（因数）\n\n### 2.1 试除法求约数\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nvector<int> primes;\nint n;\n\n\nvector<int> prime(int x)\n{\n    vector<int> p;\n    for(int i=1;i<=x/i;i++){\n        if(x%i==0){\n            p.push_back(i);\n            if(x/i!=i) p.push_back(x/i);\n        }\n    }\n    sort(p.begin(),p.end()); \n    return p;\n}\n\n\nint main()\n{\n    cin>>n;\n\t\n    while(n--){\n        int x;\n        cin>>x;\n\t\t\n        primes=prime(x);\n        for(int i=0;i<primes.size();i++) printf(\"%d \",primes[i]);\n        printf(\"\\n\");\n    }\n\t\n    return 0;\n}\n```\n\n### 2.2 约数个数\n```c++\n#include<iostream>\n#include<algorithm>\n#include<unordered_map> \n\nusing namespace std;\n\nconst int mod=1e9+7;\n\n\nint main()\n{\n    int n;\n    cin>>n;\n\t\n    unordered_map<int,int> primes;\n    while(n--){\n        int x;\n        cin>>x;\n\t\t\n        for(int i=2;i<=x/i;i++){\n            while(x%i==0){\n                x/=i;\n                primes[i]++;\n            }\n        }\n        if(x>1)  primes[x]++;\n    }\n\t\n    long long ans=1;\n    for(auto t:primes) ans=ans*(t.second+1)%mod;\n\t\n    cout<<ans<<endl;\n\t\n    return 0;\n}\n```\n\n### 2.3 约数之和\n```c++\n#include<iostream>\n#include<algorithm>\n#include<unordered_map> \n\nusing namespace std;\n\nconst int mod=1e9+7;\n\n\nint main()\n{\n    int n;\n    cin>>n;\n\t\n    unordered_map<int,int> primes;\n    while(n--){\n        int x;\n        cin>>x;\n        //试除法判断约数并累加 \n        for(int i=2;i<=x/i;i++){\n            while(x%i==0){\n                x/=i;\n                primes[i]++;\n            }\n        }\n        if(x>1)  primes[x]++;\n    }\n\t\n    long long ans=1;\n    for(auto t:primes){\n        //t遍历哈希primes\n        int p=t.first,s=t.second;\n        //p为n的第k个约数，s为第k个约数的个数\n        long long sum=1;\n        //求(1+p1^1+p1^2+...+p1^s);\n        while(s--) sum=(sum*p+1)%mod;\n        //求(1+p2^1+...+p1^s)*(1+p2^1+...+p2^s)*...*(1+pk^1+...+pk^s);\n        ans=ans*sum%mod;\n    }\n\t\n    cout<<ans<<endl;\n\t\n    return 0;\n}\n```\n\n\n\n## 3.大整数运算\n\n### 3.1 加法\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nvector<int> A,B,C;\nstring a,b;\n\n\nvector<int> add(vector<int> &A,vector<int> &B)\n{\n    if(A.size()<B.size()) return add(B,A);\n    \n    vector<int> C;\n    int t=0;\n    \n    for(int i=0;i<A.size()||i<B.size();i++){\n        if(i<A.size()) t+=A[i];\n        if(i<B.size()) t+=B[i];\n        C.push_back(t%10);\n        t/=10;\n    }\n    \n    if(t) C.push_back(1);\n    \n    return C;\n}\n\n\nint main()\n{\n    cin>>a>>b;\n    for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');\n    for(int i=b.size()-1;i>=0;i--) B.push_back(b[i]-'0');\n\t\n    C=add(A,B);\n\t\n    for(int i=C.size()-1;i>=0;i--) printf(\"%d\",C[i]);\n    \n    return 0;\n}\n```\n\n### 3.2 减法\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nvector<int> A,B,C;\nstring a,b;\n\n\nbool cmp(vector<int> &A,vector<int> &B)\n{\n    if(A.size()!=B.size()) return A.size()>B.size();\n    \n    for(int i=A.size()-1;i>=0;i--){\n        if(A[i]!=B[i])\n            return A[i]>B[i];\n    }\n    \n    return true;\n}\n\n\nvector<int> sub(vector<int> &A,vector<int> &B)\n{\n    vector<int> c;\n    \n    for(int i=0,t=0;i<A.size();i++){\n        t=A[i]-t;\n        if(i<B.size()) t-=B[i];\n        c.push_back((t+10)%10);\n        t<0?t=1:t=0;\n    }\n    \n    while(c.size()>1&&c.back()==0) c.pop_back();\n    \n    return c;\n}\n\n\nint main()\n{\n    cin>>a>>b;\n    for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');\n    for(int i=b.size()-1;i>=0;i--) B.push_back(b[i]-'0')\n\n    if(cmp(A,B)){\n        C=sub(A,B);\n        for(int i=C.size()-1;i>=0;i--) printf(\"%d\",C[i]);\n    }\n    else{\n        C=sub(B,A);\n        for(int i=C.size()-1;i>=0;i--) printf(\"%d\",C[i]);\n    }\n    \n    return 0;\n}\n```\n\n### 3.3 乘法\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nvector<int> A,C;\nstring a;\nint b;\n\n\nvector<int> mul(vector<int> &A,int b)\n{\n    vector<int> c;\n    int t=0;\n    \n    for(int i=0;i<A.size()||t;i++){\n        if(i<A.size()) t+=A[i]*b;\n        c.push_back(t%10);\n        t/=10;\n    }\n    \n    return c;\n}\n\n\nint main()\n{\n    cin>>a>>b;\n    for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');\n\n    C=mul(A,b);\n\n    for(int i=C.size()-1;i>=0;i--) printf(\"%d\",C[i]);\n    \n    return 0;\n}\n```\n\n### 3.4 除法\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nstring a;\nvector<int> A;\nint B,r;\n\n\nvector<int> div(vector<int> &A,int b)\n{\n    vector<int> C;\n    \n    for(int i=A.size()-1;i>=0;i--){\n        r=r*10+A[i];\n        C.push_back(r/b);\n        r%=b;\n    }\n    \n    reverse(C.begin(),C.end());\n    while(C.size()>1&&C.back()==0) C.pop_back();\n    \n    return C;\n}\n\n\nint main()\n{\n    cin>>a>>B;\n    for(int i=a.size()-1;i>=0;i--) A.push_back(a[i]-'0');\n\n    vector<int> C=div(A,B);\n\n    for(int i=C.size()-1;i>=0;i--) cout<<C[i];\n\n    cout<<endl<<r<<endl;\n\n    return 0;\n}\n```\n\n\n\n## 4.最大公约数（最小公倍数）\n\n### 4.1 欧几里得算法（辗转相除法）\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n\nint gcd(int a,int b){\n    return b?gcd(b,a%b):a;\n}\n\n\nint main()\n{\n    int n;\n    cin>>n;\n\t\n    while(n--){\n        int a,b;\n        cin>>a>>b;\n\t\t\n        //最大公约数\n        printf(\"%d\\n\",gcd(a,b));\n        //最小公倍数\n        printf(\"%d\\n\",a*gcd(a,b)/b);\n    }\n\t\n    return 0;\n}\n```\n\n### 4.2 扩展欧几里得算法\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n// 公式ax+by=gcd(ai,bi)\nint exgcd(int a,int b,int &x,int &y){\n    if(!b){\n        x=1,y=0;\n        return a;\n    }\n    int d=exgcd(b,a%b,y,x);\n    y-=a/b*x;\n    return d;\n}\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    while(n--){\n        int a,b,x,y;\n        scanf(\"%d%d\",&a,&b);\n        exgcd(a,b,x,y);\n        printf(\"%d %d\\n\",x,y);\n    }\n\t\n    return 0;\n}\n```\n\n\n\n## 5.快速幂\n\n### 5.1 基础快速幂\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\n\nLL k(LL a,LL b,LL mod)\n{\n    LL sum=1;\n    while(b){\n        if(b&1) sum=sum*a%mod;\n        a=a*a%mod;\n        b>>=1;\n    }\n    return sum%mod;\n}\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    while(n--){\n        LL a,b,p;\n        scanf(\"%lld%lld%lld\",&a,&b,&p);\n        printf(\"%lld\\n\",k(a,b,p));\n    }\n\t\n    return 0;\n}\n```\n\n### 5.2 快速幂求逆元\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\n\nLL k(LL a,LL b,LL mod)\n{\n    LL sum=1;\n    while(b){\n        if(b&1) sum=sum*a%mod;\n        a=a*a%mod;\n        b>>=1;\n    }\n    return sum%mod;\n}\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    while(n--){\n        LL a,p,t;\n        scanf(\"%lld%lld\",&a,&p);\n        if(a%p) printf(\"%lld\\n\",k(a,p-2,p));\n        else  printf(\"impossible\\n\");\n    }\n\t\n    return 0;\n}\n```\n\n### 5.3 矩阵快速幂\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n//定义矩阵结构体\nstruct Matrix\n{\n    int a[3][3];\n    Matrix() memset(a,0,sizeof(a));\n    //矩阵乘法\n    Matrix operator*(const Matrix &b) const\n    {\n        Matrix res;\n        for(int i=1; i<=2; i++)\n            for(int j=1; j<=2; j++)\n                for(int k=1; k<=2; k++)\n                    res.a[i][j]=res.a[i][j]+a[i][k]*b.a[k][j];\n        return res;\n    }\n};\n\nMatrix base,ans;\n\n//初始化base,ans\nvoid init()\n{\n    //矩阵\n    //[0，1]\n    //[1，1]\n    base.a[1][1]=0;//这个11位置一定要初始化\n    base.a[2][2]=base.a[1][2]=base.a[2][1]=1;\n    //初始斐波那契数列f1=1,f2=1\n    ans.a[1][1]=1;\n    ans.a[1][2]=1;\n\n}\n//快速幂\nvoid qpow(int n)\n{\n    //传入n次幂\n    while(n){\n        if(n&1)ans=ans*base;//n为奇数\n        base=base*base;\n        n>>=1;// n/=2\n    }\n}\n\nint main()\n{\n    int n;\n    while(scanf(\"%d\",&n)!=EOF){\n        init();//每次初始化矩阵\n        qpow(n-2);//快速幂优化\n        cout<<ans.a[1][2]<<endl;\n    }\n\n    return 0;\n}\n```\n\n\n\n## 6.组合数\n\n### 6.1 普通递推\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\nconst int N=10010,mod=1e9+7;\n\nint n;\nint c[N][N];\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<N;i++){\n        c[i][1]=i;\n        c[i][i]=1;\n    }\n\t\n    for(int i=2;i<N;i++){\n        for(int j=2;j<=i;j++){\n            c[i][j]=(c[i-1][j-1]+c[i-1][j])%mod;\n        }\n    }\n\t\n    while(n--){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        printf(\"%d\\n\",c[a][b]);\n    }\n\t\n    return 0;\n} \n```\n\n### 6.2  C(a,b) = a!/(b-a)!*b!（预处理）\n```c++\n#include<iostream>\n#include<algorithm> \n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10,mod=1e9+7;\n\nint n;\nLL f[N],inf[N];\n\n\nLL q(LL a,LL k,LL p)\n{\n    LL sum=1;\n    while(k){\n        if(k&1) sum=(LL)sum*a%p;\n        a=(LL)a*a%p;\n        k>>=1;\n    }\n    return sum;\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n\t\n    f[0]=inf[0]=1;\n    for(int i=1;i<N;i++){\n        f[i]=(LL)f[i-1]*i%mod;\n        inf[i]=(LL)inf[i-1]*q(i,mod-2,mod)%mod;\n    }\n\t\n    while(n--){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        printf(\"%d\\n\",(LL)f[a]*inf[a-b]%mod*inf[b]%mod);\n    }\n\t\n    return 0;\n} \n\n```\n\n### 6.3  C(a,b) = C(a%p,b%p)*C(a/p,b/p)（lucas定理）\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\ntypedef long long LL;\n\nint p;\n\n//快速幂求逆元\nint q(LL a,LL k,LL p)\n{\n    int res=1;\n    while(k){\n        if(k&1) res=(LL)res*a%p;\n        a=(LL)a*a%p;\n        k>>=1;\n    }\n    return res;\n}\n\n//求组合数 \nint c(LL a,LL b)\n{\n    int sum=1;\n    for(int i=1,j=a;i<=b;i++,j--){\n        sum=(LL)sum*j%p;\n        sum=(LL)sum*q(i,p-2,p)%p;\n    }\n    return sum;\n}\n\n//卢卡斯定理\nint lucas(LL a,LL b)\n{\n    if(a<p&&b<p) return c(a,b);\n    return (LL)c(a%p,b%p)*lucas(a/p,b/p)%p;\n}\n\n\nint main()\n{\n    int n;\n    cin>>n;\n\t\n    while(n--){\n        LL a,b;\n        cin>>a>>b>>p;\n        cout<<lucas(a,b)<<endl;\n    }\n\t\n    return 0;\n} \n```\n\n### 6.4 不取模运算C(a,b)\n```c++\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nconst int N=5010;\n\nint primes[N],cnt;\nint sum[N]; \nbool st[N];\n\n//线性筛法 \nvoid get_primes(int n)\n{\n    for(int i=2;i<=n;i++){\n        if(!st[i]) primes[cnt++]=i;\n        for(int j=0;primes[j]<=n/i;j++){\n            st[primes[j]*i]=true;\n            if(i%primes[j]==0) break;\n        }\n    }\n}\n\n//求a！里p因子的个数 \nint get(int n,int p)\n{\n    int res=0;\n    while(n){\n        res+=n/p;\n        n/=p;\n    }\n    return res;\n}\n\n//高精度乘法 \nvector<int> mul(vector<int> a,int b)\n{\n    vector<int> c;\n    int t=0;\n\t\n    for(int i=0;i<a.size();i++){\n        t+=a[i]*b;\n        c.push_back(t%10);\n        t/=10;\n    }\n\t\n\twhile(t){\n        c.push_back(t%10);\n        t/=10;\n    }\n\t\n    return c;\n}\n\n\nint main()\n{\n    int a,b;\n    cin>>a>>b;\n\t\n    get_primes(a);\n\t\n    for(int i=0;i<cnt;i++){\n        int p=primes[i];\n        sum[i]=get(a,p)-get(b,p)-get(a-b,p);\n    }\n\t\n    vector<int> res;\n    res.push_back(1);\n\t\n    for(int i=0;i<cnt;i++){\n        for(int j=0;j<sum[i];j++){\n            res=mul(res,primes[i]);\n\t\n    for(int i=res.size()-1;i>=0;i--) \n        printf(\"%d\",res[i]);\n\t\n    return 0;\n}\n```\n\n\n\n## 7.博弈论\n\n### 7.1 Nim博弈\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\t\n    int sum=0;\n    while(n--){\n        int x; \n        scanf(\"%d\",&x);\n        sum^=x;\n    }\n    if(sum)  printf(\"Yes\");\n    else  printf(\"No\");\n\t\n    return 0;\n} \n```\n\n### 7.2 集合-Nim博弈（sg函数）\n```c++\n#include<iostream>\n#include<algorithm>\n#include<unordered_set>\n\nusing namespace std;\n\nconst int N=110,M=10010;\n\nint n,k;\nint s[N],f[M];\n\n\nint sg(int x)\n{\n    if(f[x]!=-1) return f[x];\n\t\n    unordered_set<int> S;\n    for(int i=0;i<k;i++)\n        if(s[i]<=x) \n            S.insert(sg(x-s[i]));\n\t\n    for(int i=0;;i++)\n        if(!S.count(i))\n            return f[x]=i;\n}\n\n\nint main()\n{\n    cin>>k;\n    for(int i=0;i<k;i++) cin>>s[i];\n    cin>>n;\n\t\n    fill(f,f+M,-1);\n\t\n    int res=0;\n    while(n--){\n        int a;\n        cin>>a;\n        res^=sg(a);\n    }\n\t\n    if(res) printf(\"Yes\");\n    else  printf(\"No\");\n\t\n    return 0;\n}\n```\n---\n\n\n\n\n\n# 五、动态规划\n\n\n\n## 1.背包问题\n\n### 1.1 01背包\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e3+10;\n\nint n,V;\nint dp[N],w[N],v[N];\n\n\nint main()\n{\n    cin>>n>>V;\n    for(int i=0;i<n;i++) cin>>v[i]>>w[i];\n    \n    for(int i=0;i<n;i++)\n        for(int j=V;j>=v[i];j--)\n            dp[j]=max(dp[j],dp[j-v[i]]+w[i]);\n            \n    cout<<dp[V]<<endl;\n    \n    return 0;\n}\n```\n\n### 1.2 完全背包\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint v[N],w[N],dp[N];\nint n,m;\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) cin>>v[i]>>w[i];\n\t\n    for(int i=1;i<=n;i++)\n        for(int j=v[i];j<=m;j++)\n            dp[j]=max(dp[j],dp[j-v[i]]+w[i]);\n\t\n    cout<<dp[m]<<endl;\n\t\n    return 0;\n}\n```\n\n### 1.3 多重背包\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=110;\n\nint v[N],w[N],s[N];\nint dp[N][N];\nint n,m;\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) cin>>v[i]>>w[i]>>s[i];\n\t\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            for(int k=0;k<=s[i]&&k*v[i]<=j;k++)\n                dp[i][j]=max(dp[i][j],dp[i-1][j-k*v[i]]+k*w[i]);\n\t\n    cout<<dp[n][m]<<endl;\n\t\n    return 0;\n}\n```\n\n### 1.4 分组背包\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=110;\n\nint v[N][N],w[N][N],s[N];\nint dp[N];\nint n,m;\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++){\n        cin>>s[i];\n        for(int j=0;j<s[i];j++) cin>>v[i][j]>>w[i][j];\n    }\n\t\n    for(int i=1;i<=n;i++)\n        for(int j=m;j>=0;j--)\n            for(int k=0;k<s[i];k++)\n                if(v[i][k]<=j)\n                    dp[j]=max(dp[j],dp[j-v[i][k]]+w[i][k]);\n\t\n    cout<<dp[m]<<endl;\n\t\n    return 0;\n}\n```\n\n\n\n## 2.线性dp\n\n\n### 2.1 数字三角形\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e3+10;\n\nint n;\nint g[N][N];\nint dp[N][N];\n\n\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++)\n        for(int j=0;j<=i;j++)\n            cin>>g[i][j];\n            \n    for(int i=n-1;i>=0;i--)\n        for(int j=0;j<=i;j++)\n            dp[i][j]=max(dp[i+1][j+1],dp[i+1][j])+g[i][j];\n    \n    cout<<dp[0][0]<<endl;\n    \n    return 0;\n}\n```\n\n### 2.2 最长上升子序列 \n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e3+10;\n\nint n;\nint g[N],dp[N];\n\n\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++) cin>>g[i];\n    \n    fill(dp,dp+n,1);\n    \n    int res=1;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<i;j++){\n            if(g[i]>g[j])\n                dp[i]=max(dp[i],dp[j]+1);\n        }\n        res=max(dp[i],res);\n    }\n    \n    cout<<res<<endl;\n    \n    return 0;\n}\n```\n\n### 2.3 最长公共子序列\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1010;\n\nint m,n;\nint dp[N][N];\nchar a[N],b[N];\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    scanf(\"%s%s\",a+1,b+1);\n\t\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            dp[i][j]=max(dp[i-1][j],dp[i][j-1]);\n            if(a[i]==b[j])\n                dp[i][j]=max(dp[i][j],dp[i-1][j-1]+1);\n        }\n    }\n\t\n    printf(\"%d\",dp[n][m]);\n\t\n    return 0;\n}\n```\n\n### 2.4 最短编辑距离\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1010;\n\nint m,n;\nint dp[N][N];\nchar a[N],b[N];\n\n\nint main()\n{\n\t\n    scanf(\"%d%s\",&n,a+1);\n    scanf(\"%d%s\",&m,b+1);\n\t\n    //一定要考虑边界问题！！！\n    for (int i=0;i<=m;i++) dp[0][i]=i;\n    for (int i=0;i<=n;i++) dp[i][0]=i;\n\t\n    //相等即直接转换状态，不相等取所有状态的最小值再+1\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            if(a[i]==b[j])\n                dp[i][j]=dp[i-1][j-1];\n            else \n                dp[i][j]=min(min(dp[i-1][j],dp[i-1][j-1]),dp[i][j-1])+1;\n        }\n    }\n\t\n    printf(\"%d\",dp[n][m]);\n\t\n    return 0;\n}\n```\n\n\n\n## 3.进阶dp\n\n### 3.1 区间dp\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=310;\n\nint n;\nint s[N];\nint dp[N][N];\n\n\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        int a;\n        scanf(\"%d\",&a);\n        s[i]=s[i-1]+a;\n    }\n\t\n    for(int len=1;len<n;len++){\n        for(int i=1;i+len<=n;i++){\n            int l=i,r=i+len;\n            dp[l][r]=1e9+7;\n            for(int k=l;k<r;k++){\n                dp[l][r]=min(dp[l][r],dp[l][k]+dp[k+1][r]+s[r]-s[l-1]);\n            }\n        }\n    }\n\t\n    cout<<dp[1][n]<<endl;\n\t\n    return 0;\n}\n```\n\n### 3.2状态压缩dp\n\n#### 蒙德里安的梦想\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=12,M=1<<N;\n\nlong long dp[N][M];\nint n,m;\nbool st[M];\n\n\nint main()\n{\n    //预处理\n    while(cin>>n>>m,n||m){\n        fill(dp[0],dp[0]+N*M,0);\n\t\t\n        for(int i=0;i<1<<n;i++){\n            st[i]=true;\n            int cnt=0;\n            for(int j=0;j<n;j++){\n                if(i>>j&1){\n                    if(cnt&1) st[i]=false;\n                    cnt=0;\n                }\n                else cnt++;\n            }\n            if(cnt&1) st[i]=false;\n        }\n\t\t\n        dp[0][0]=1;\n        for(int i=1;i<=m;i++)\n            for(int j=0;j<1<<n;j++)\n                for(int k=0;k<1<<n;k++)\n                    if(!(j&k)&&st[j|k])\n                        dp[i][j]+=dp[i-1][k];\n\t\t\t\t\t\t\n        cout<<dp[m][0]<<endl;\n    }\n    return 0;\n}\n```\n\n#### 状态压缩dp求哈密顿路径\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=20,M=1<<N;\n\nint n;\nint w[N][N];\nint dp[M][N];\n\n\nint main()\n{\n    cin>>n;\n\t\n    for(int i=0;i<n;i++)\n        for(int j=0;j<n;j++)\n            cin>>w[i][j];\n\t\t\t\n    fill(dp[0],dp[0]+M*N,0x3f3f3f);\n\t\n    dp[1][0]=0;\n    for(int i=0;i<1<<n;i++)\n        for(int j=0;j<n;j++)\n            if(i>>j&1)\n                for(int k=0;k<n;k++)\n                    if((i-(1<<j))>>k&1)\n                        dp[i][j]=min(dp[i][j],dp[i-(1<<j)][k]+w[k][j]);\n\t\n    cout<<dp[(1<<n)-1][n-1]<<endl;\n\t\n    return 0;\n}\n```\n\n### 3.3 树形dp\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=6010;\n\nint n;\nint happy[N];\nint h[N],e[N],ne[N],idx;\nint dp[N][2];\nbool father[N];\n\n\nvoid add(int a,int b)\n{\n    e[idx]=b;\n    ne[idx]=h[a];\n    h[a]=idx++;\n}\n\n\nvoid dfs(int u)\n{\n    dp[u][1]=happy[u];\n\t\n    for(int i=h[u];i!=-1;i=ne[i]){\n        int j=e[i];\n        dfs(j);\n        dp[u][0]+=max(dp[j][0],dp[j][1]);\n        dp[u][1]+=dp[j][0];\n    }\n}\n\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) scanf(\"%d\",&happy[i]);\n\t\n    fill(h,h+N,-1);\n    for(int i=0;i<n-1;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        father[a]=true;\n        add(b,a);\n    }\n\t\n    int root=1;\n    while(father[root]) root++;\n\t\n    dfs(root);\n\t\n    printf(\"%d\",max(dp[root][0],dp[root][1]));\n\t\n    return 0;\n}\n```\n\n\n\n## 4.记忆化搜索\n\n### 4.1 斐波那契（记录值）\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint dp[N];\nint n;\n\n//斐波那契递归写法\nint F(int n)\n{\n    if(n==0||n==1) return 1;\n    if(dp[n]!=-1) return dp[N];\n    else{\n        dp[n]=F(n-1)+F(n-2);\n        return dp[n];\n    }\n}\n\n\nint main()\n{\n    cin>>n;\n    \n    fill(dp,dp+N,-1);\n    \n    F(n);\n    \n    return 0;\n}\n```\n\n### 4.2 滑雪\n```c++\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=310;\n\nint n,m;\nint g[N][N];\nint f[N][N];\n\nint s[2][4]={\n    1,-1,0,0,\n    0,0,1,-1\n};\n\n\nint dp(int x,int y)\n{\n    if(f[x][y]!=0) return f[x][y];\n\t\n    f[x][y]=1;\n    for(int i=0;i<4;i++){\n        int a=x+s[0][i],b=y+s[1][i];\n        if(a>=1&&a<=n&&b>=1&&b<=m&&g[a][b]<g[x][y])\n            f[x][y]=max(f[x][y],dp(a,b)+1);\n    }\n\t\n    return f[x][y];\n}\n\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            cin>>g[i][j];\n\t\n    int sum=0;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            sum=max(sum,dp(i,j));\n\t\n    cout<<sum<<endl;\n\t\n    return 0;\n}\n```\n\n---\n\n","slug":"算法模板","published":1,"updated":"2024-06-20T02:17:01.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxn9rvoa0013hwtv34kgd6b2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.内容可能有点多，涵盖大部分的基础算法模板。</li>\n<li>2.如有使用注明出处。</li>\n<li>3.如有改进地方欢迎批评指正~</li>\n</ul>\n<hr>\n<h1>* 常用xcpc竞赛模板（数论、计算几何）</h1>\n<h2 id=\"一、二维计算几何：\">一、二维计算几何：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> Geometry</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 点与向量</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">Point</span>(<span class=\"type\">double</span> x = <span class=\"number\">0</span>, <span class=\"type\">double</span> y = <span class=\"number\">0</span>) : <span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">        <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> Point a) <span class=\"type\">const</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> (<span class=\"built_in\">fabs</span>(x - a.x) &lt;= eps &amp;&amp; <span class=\"built_in\">fabs</span>(y - a.y) &lt;= eps);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> Point Vector;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>+(Vector A, Vector B)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(A.x + B.x, A.y + B.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>-(Vector A, Vector B)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(A.x - B.x, A.y - B.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>*(Vector A, <span class=\"type\">double</span> p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(A.x * p, A.y * p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>/(Vector A, <span class=\"type\">double</span> p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(A.x / p, A.y / p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sign</span><span class=\"params\">(<span class=\"type\">double</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 符号函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(x) &lt; eps)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">double</span> x, <span class=\"type\">double</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 比较函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(x - y) &lt; eps)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; y)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">dot</span><span class=\"params\">(Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 向量点积</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x * b.x + a.y * b.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">cross</span><span class=\"params\">(Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 向量叉积</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x * b.y - b.x * a.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">get_length</span><span class=\"params\">(Point a)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 求向量模长</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(<span class=\"built_in\">dot</span>(a, a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">get_angle</span><span class=\"params\">(Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 求A-&gt;B的有向角</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">acos</span>(<span class=\"built_in\">dot</span>(a, b) / <span class=\"built_in\">get_length</span>(a) / <span class=\"built_in\">get_length</span>(b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">area</span><span class=\"params\">(Point a, Point b, Point c)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// A为顶点，向量AB与向量AC的叉积，即三角形ABC的面积的2倍（有向）</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">cross</span>(b - a, c - a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Point <span class=\"title\">rotate</span><span class=\"params\">(Point a, <span class=\"type\">double</span> angle)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 将向量A顺时针旋转angle度</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Point</span>(a.x * <span class=\"built_in\">cos</span>(angle) + a.y * <span class=\"built_in\">sin</span>(angle), -a.x * <span class=\"built_in\">sin</span>(angle) + a.y * <span class=\"built_in\">cos</span>(angle));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Point <span class=\"title\">get_line_intersection</span><span class=\"params\">(Point p, Vector v, Point q, Vector w)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 两直线的交点</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用前提，直线必须有交点</span></span><br><span class=\"line\">        <span class=\"comment\">// cross(v, w) == 0则两直线平行或者重合</span></span><br><span class=\"line\">        Vector u = p - q;</span><br><span class=\"line\">        <span class=\"type\">double</span> t = <span class=\"built_in\">cross</span>(w, u) / <span class=\"built_in\">cross</span>(v, w);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p + v * t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">distance_to_line</span><span class=\"params\">(Point p, Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 点到直线的距离，直线为AB所在直线</span></span><br><span class=\"line\">        Vector v1 = b - a, v2 = p - a;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">fabs</span>(<span class=\"built_in\">cross</span>(v1, v2) / <span class=\"built_in\">get_length</span>(v1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">distance_to_segment</span><span class=\"params\">(Point p, Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 点到线段的距离，线段为线段AB</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">get_length</span>(p - a);</span><br><span class=\"line\"></span><br><span class=\"line\">        Vector v1 = b - a, v2 = p - a, v3 = p - b;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">sign</span>(<span class=\"built_in\">dot</span>(v1, v2)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">get_length</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">sign</span>(<span class=\"built_in\">dot</span>(v1, v3)) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">get_length</span>(v3);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">distance_to_line</span>(p, a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Point <span class=\"title\">get_line_projection</span><span class=\"params\">(Point p, Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 点在直线上的投影，直线为AB所在直线</span></span><br><span class=\"line\">        Vector v = b - a;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + v * (<span class=\"built_in\">dot</span>(v, p - a) / <span class=\"built_in\">dot</span>(v, v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">on_segment</span><span class=\"params\">(Point p, Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 点是否在线段上</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sign</span>(<span class=\"built_in\">cross</span>(p - a, p - b)) == <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">sign</span>(<span class=\"built_in\">dot</span>(p - a, p - b)) &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">segment_intersection</span><span class=\"params\">(Point a1, Point a2, Point b1, Point b2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 判断两个线段是否相交</span></span><br><span class=\"line\">        <span class=\"type\">double</span> c1 = <span class=\"built_in\">cross</span>(a2 - a1, b1 - a1), c2 = <span class=\"built_in\">cross</span>(a2 - a1, b2 - a1);</span><br><span class=\"line\">        <span class=\"type\">double</span> c3 = <span class=\"built_in\">cross</span>(b2 - b1, a2 - b1), c4 = <span class=\"built_in\">cross</span>(b2 - b1, a1 - b1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sign</span>(c1) * <span class=\"built_in\">sign</span>(c2) &lt;= <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">sign</span>(c3) * <span class=\"built_in\">sign</span>(c4) &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多边形</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">polygon_area</span><span class=\"params\">(Point p[], <span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 求多边形面积</span></span><br><span class=\"line\">        <span class=\"type\">double</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i + <span class=\"number\">1</span> &lt; n; i++)</span><br><span class=\"line\">            s += <span class=\"built_in\">cross</span>(p[i] - p[<span class=\"number\">0</span>], p[i + <span class=\"number\">1</span>] - p[i]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s / <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Geometry;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、快速幂-组合数：\">二、快速幂+组合数：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> i64 = <span class=\"type\">int64_t</span>;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> i64 mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\">i64 <span class=\"title\">fpow</span><span class=\"params\">(i64 x, i64 r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    i64 result = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &amp; <span class=\"number\">1</span>)result = result * x % mod;</span><br><span class=\"line\">        r &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        x = x * x % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> binom &#123;</span><br><span class=\"line\">    i64 fac[N], ifac[N];</span><br><span class=\"line\">    <span class=\"type\">int</span> __ = []</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fac[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= N - <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">            fac[i] = fac[i - <span class=\"number\">1</span>] * i % mod;</span><br><span class=\"line\">        ifac[N - <span class=\"number\">5</span>] = <span class=\"built_in\">fpow</span>(fac[N - <span class=\"number\">5</span>], mod - <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = N - <span class=\"number\">5</span>; i; i--)</span><br><span class=\"line\">            ifac[i - <span class=\"number\">1</span>] = ifac[i] * i % mod;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> i64 <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; m || m &lt; <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fac[n] * ifac[m] % mod * ifac[n - m] % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> i64 <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; m || m &lt; <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fac[n] * ifac[n - m] % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> binom;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、卡特兰数-C-2n-n-C-2n-n-1-：\">三、卡特兰数  C(2<em>n,n)-C(2</em>n,n-1) ：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分解质因数求组合数（可适用于mod非质数）</span></span><br><span class=\"line\"><span class=\"type\">int</span> primes[N],cnt;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//筛质数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class=\"line\">            st[primes[j]*i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%primes[j]==<span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">qmi</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k&amp;<span class=\"number\">1</span>)res=res*a%mod;</span><br><span class=\"line\">        a=a*a%mod;</span><br><span class=\"line\">        k&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分解质因数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=n;j;j/=p) s+=j/p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分解质因数的方式求组合数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cnt;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p=primes[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> s=<span class=\"built_in\">get</span>(a,p)-<span class=\"built_in\">get</span>(b,p)-<span class=\"built_in\">get</span>(a-b,p);</span><br><span class=\"line\">        res=res*<span class=\"built_in\">qmi</span>(p,s)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;mod;</span><br><span class=\"line\">    cout&lt;&lt;(<span class=\"built_in\">C</span>(<span class=\"number\">2</span>*n,n)-<span class=\"built_in\">C</span>(<span class=\"number\">2</span>*n,n+<span class=\"number\">1</span>)+mod)%mod&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、欧拉、莫比乌斯函数：\">四、欧拉、莫比乌斯函数：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> primes[N],cnt;</span><br><span class=\"line\"><span class=\"type\">int</span> mobius[N],s[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线性筛求欧拉函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">oula</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    phi[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i])&#123;</span><br><span class=\"line\">            primes[cnt++]=i;</span><br><span class=\"line\">            phi[i]=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class=\"line\">            st[primes[j]*i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%primes[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                phi[i*primes[j]]=phi[i]*primes[j];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            phi[i*primes[j]]=phi[i]*(primes[j]<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线性筛求莫比乌斯函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    mobius[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i])&#123;</span><br><span class=\"line\">            primes[cnt++]=i;</span><br><span class=\"line\">            mobius[i]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class=\"line\">            st[primes[j]*i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%primes[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                mobius[primes[j]*i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mobius[primes[j]*i]=mobius[i]*<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) s[i]=s[i<span class=\"number\">-1</span>]+mobius[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//除数分块</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,d;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;d;</span><br><span class=\"line\">    a/=d,b/=d;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>,n=<span class=\"built_in\">min</span>(a,b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=n;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        r=<span class=\"built_in\">min</span>(n,<span class=\"built_in\">min</span>(a/(a/l),b/(b/l)));</span><br><span class=\"line\">        res+=(s[r]-s[l<span class=\"number\">-1</span>])*(a/l)*(b/l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout&lt;&lt;res&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、矩阵快速幂：\">五、矩阵快速幂：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//矩阵运算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mul</span><span class=\"params\">(<span class=\"type\">int</span> a[][N],<span class=\"type\">int</span> b[][N],<span class=\"type\">int</span> c[][N])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t[N][N]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;N;j++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;N;k++)</span><br><span class=\"line\">                t[i][j]=(t[i][j]+a[i][k]*b[k][j])%m;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(c,t,<span class=\"keyword\">sizeof</span> t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//构造系数矩阵</span></span><br><span class=\"line\">    <span class=\"type\">int</span> f1[N][N]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[N][N]=&#123;</span><br><span class=\"line\">         &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">         &#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">         &#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//快速幂</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k%<span class=\"number\">2</span>) <span class=\"built_in\">mul</span>(f1,a,f1);</span><br><span class=\"line\">        <span class=\"built_in\">mul</span>(a,a,a);</span><br><span class=\"line\">        k&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;f1[<span class=\"number\">2</span>]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、向量叉积应用：\">六、向量叉积应用：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义点结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x,y;</span><br><span class=\"line\">    <span class=\"type\">double</span> angle;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"type\">const</span> point &amp;t)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> angle&lt;t.angle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求叉积</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">cross</span><span class=\"params\">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判定线线的位置关系</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(Point a,Point b,Point c,Point d)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">cross</span>(a,b,c)*<span class=\"built_in\">cross</span>(a,b,d)&lt;=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求两直线的交点</span></span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">getNode</span><span class=\"params\">(Point a,Point u,Point b,Point v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> t=(a-b)*v/(v*u);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+u*t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求三角形面积</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">get_s</span><span class=\"params\">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">cross</span>(a,b,c)/<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//极角排序（atan2函数）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">atan2cmp</span><span class=\"params\">(Point a,Point b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.angle==b.angle) <span class=\"keyword\">return</span> a.x&lt;b.x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> a.angle&lt;a.angle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//极角排序（叉积）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">crosscmp</span><span class=\"params\">(Point a,Point b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> f=<span class=\"built_in\">cross</span>(p[pos],a,b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> a.x-p[pos].x&lt;b.x-p[pos].x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(f&gt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、凸包-旋转卡壳：\">七、凸包+旋转卡壳：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">P</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">&#125;p[N],s[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求叉积</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">cross</span><span class=\"params\">(P a,P b,P c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求两点距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dis</span><span class=\"params\">(P a,P b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(P a,P b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x==b.x) <span class=\"keyword\">return</span> a.y&lt;b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x&lt;b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求凸包的Andrew算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Andrew</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p+<span class=\"number\">1</span>,p+n+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//求上凸包</span></span><br><span class=\"line\">    <span class=\"type\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(top&gt;<span class=\"number\">1</span>&amp;&amp;<span class=\"built_in\">cross</span>(s[top<span class=\"number\">-1</span>],s[top],p[i])&lt;=<span class=\"number\">0</span>) top--</span><br><span class=\"line\">        s[++top]=p[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//求下凸包</span></span><br><span class=\"line\">    <span class=\"type\">int</span> t=top;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">1</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(top&gt;t&amp;&amp;<span class=\"built_in\">cross</span>(s[top<span class=\"number\">-1</span>],s[top],p[i])&lt;=<span class=\"number\">0</span>) top--;</span><br><span class=\"line\">        s[++top]=p[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    n=top<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//旋转卡壳</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">rotating_calipers</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,j=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">cross</span>(s[i],s[i+<span class=\"number\">1</span>],s[j])&lt;<span class=\"built_in\">cross</span>(s[i],s[i+<span class=\"number\">1</span>],s[j+<span class=\"number\">1</span>])) j=j%n+<span class=\"number\">1</span>;</span><br><span class=\"line\">        res=<span class=\"built_in\">max</span>(&#123;res,<span class=\"built_in\">dis</span>(s[i],s[j]),<span class=\"built_in\">dis</span>(s[i+<span class=\"number\">1</span>],s[j])&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"八、自适应辛普森积分：\">八、自适应辛普森积分：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> l,r;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//积分函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">double</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x*x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//辛普森公式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">simpson</span><span class=\"params\">(<span class=\"type\">double</span> l,<span class=\"type\">double</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">f</span>(l)+<span class=\"built_in\">f</span>(r)+<span class=\"number\">4</span>*<span class=\"built_in\">f</span>((l+r)/<span class=\"number\">2</span>))*(r-l)/<span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自适应</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">asr</span><span class=\"params\">(<span class=\"type\">double</span> a,<span class=\"type\">double</span> b,<span class=\"type\">double</span> ans)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> m=(l+r)/<span class=\"number\">2</span>,a=<span class=\"built_in\">simpson</span>(l,m),b=<span class=\"built_in\">simpson</span>(m,r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(a+b-ans)&lt;eps) <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">asr</span>(l,m,a)+<span class=\"built_in\">asr</span>(m,r,b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、记忆化搜索求期望：\">九、记忆化搜索求期望：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;PII&gt; c[N];</span><br><span class=\"line\"><span class=\"type\">int</span> d[N],a[N];</span><br><span class=\"line\"><span class=\"type\">double</span> f[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[u]&gt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> f[u];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> f[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    f[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p:c[u])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i=p.x,j=p.y;</span><br><span class=\"line\">        f[u]+=(<span class=\"built_in\">dfs</span>(i)+j)*<span class=\"number\">1.0</span>/d[u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[u];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u,v,w;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class=\"line\">        c[u].<span class=\"built_in\">push_back</span>(&#123;v,w&#125;);</span><br><span class=\"line\">        d[u]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2lf\\n&quot;</span>,<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十、概率dp：\">十、概率dp：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> w,b;</span><br><span class=\"line\"><span class=\"type\">double</span> f[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;w&gt;&gt;b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=b;i++) f[<span class=\"number\">0</span>][i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=w;i++) f[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=w;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=b;j++)&#123;</span><br><span class=\"line\">            f[i][j]+=(<span class=\"type\">double</span>)i/(i+j);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">1</span>&amp;&amp;j&gt;=<span class=\"number\">2</span>) f[i][j]++(<span class=\"type\">double</span>)j/(i+j)*(j<span class=\"number\">-1</span>)/(i+j<span class=\"number\">-1</span>)*f[i<span class=\"number\">-1</span>][j<span class=\"number\">-2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&gt;=<span class=\"number\">3</span>) f[i][j]+=(<span class=\"type\">double</span>)j/(i+j)*(j<span class=\"number\">-1</span>)/(i+j<span class=\"number\">-1</span>)*(j<span class=\"number\">-2</span>)/(i+j<span class=\"number\">-2</span>)*f[i][j<span class=\"number\">-3</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.9lf\\n&quot;</span>,f[w][b]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>一、基础算法</h1>\n<h2 id=\"1-排序：\">1.排序：</h2>\n<h3 id=\"1-1-冒泡排序：\">1.1 冒泡排序：</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//冒泡排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n-i<span class=\"number\">-1</span>;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(g[j]&gt;g[j+<span class=\"number\">1</span>])</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(g[j],g[j+<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">bubble_sort</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cout&lt;&lt;g[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-选择排序\">1.2 选择排序</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//选择排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">selection_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> min=i;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(g[j]&lt;g[min])</span><br><span class=\"line\">                min=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(g[min],g[i]);</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">selection_sort</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cout&lt;&lt;g[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-插入排序\">1.3 插入排序</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertion_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res=g[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> j=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&gt;=<span class=\"number\">0</span>&amp;&amp;g[j]&gt;res)&#123;</span><br><span class=\"line\">            g[j+<span class=\"number\">1</span>]=g[j];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        g[j+<span class=\"number\">1</span>]=res;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">insertion_sort</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cout&lt;&lt;g[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-快速排序\">1.4 快速排序</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> q[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"type\">int</span> q[],<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> x=q[(l+r)&gt;&gt;<span class=\"number\">1</span>],i=l<span class=\"number\">-1</span>,j=r+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++; <span class=\"keyword\">while</span>(q[i]&lt;x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j--; <span class=\"keyword\">while</span>(q[j]&gt;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;j) <span class=\"built_in\">swap</span>(q[i],q[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q,l,j);</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q,j+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[i]);</span><br><span class=\"line\">\t </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-5-归并排序\">1.5 归并排序</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N =<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> q[N],tmp[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//归并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mergesort</span><span class=\"params\">(<span class=\"type\">int</span> q[],<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">mergesort</span>(q,l,mid),<span class=\"built_in\">mergesort</span>(q,mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"number\">0</span>,i=l,j=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i]&lt;=q[j]) tmp[k++]=q[i++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  tmp[k++]=q[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=mid) tmp[k++]= q[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;=r) tmp[k++]=q[j++];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=l,j=<span class=\"number\">0</span>;i&lt;=r;i++,j++) q[i]=tmp[j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++ ) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">mergesort</span>(q,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-二分\">2.二分</h2>\n<h3 id=\"2-1-整数二分\">2.1 整数二分</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> q[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(q[mid]&gt;=x) r=mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[l]!=x) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1 -1\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,l);</span><br><span class=\"line\">            <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> mid=l+r+<span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(q[mid]&lt;=x) l=mid;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> r=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-小数二分\">2.2 小数二分</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">double</span> l=<span class=\"number\">-10000</span>,r=<span class=\"number\">10000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-l&gt;<span class=\"number\">1e-8</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mid*mid*mid&gt;=n) r=mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  l=mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.6lf&quot;</span>,l);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-前缀和\">3.前缀和</h2>\n<h3 id=\"3-1-线性前缀和\">3.1 线性前缀和</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N],s[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;g[i],s[i]=s[i<span class=\"number\">-1</span>]+g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l,r;</span><br><span class=\"line\">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">        cout&lt;&lt;s[r]-s[l<span class=\"number\">-1</span>]&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-二维前缀和\">3.2 二维前缀和</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N],s[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;g[i][j];</span><br><span class=\"line\">            s[i][j]=s[i][j<span class=\"number\">-1</span>]+s[i<span class=\"number\">-1</span>][j]-s[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+g[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x1,x2,y1,y2;</span><br><span class=\"line\">        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class=\"line\">        LL sum=s[x2][y2]-s[x1<span class=\"number\">-1</span>][y2]-s[x2][y1<span class=\"number\">-1</span>]+s[x1<span class=\"number\">-1</span>][y1<span class=\"number\">-1</span>];</span><br><span class=\"line\">        cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"4-差分\">4.差分</h2>\n<h3 id=\"4-1-线性差分\">4.1 线性差分</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        b[i]=a[i]-a[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l,r,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;c);</span><br><span class=\"line\">        b[l]+=c;</span><br><span class=\"line\">        b[r+<span class=\"number\">1</span>]-=c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+b[i];</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-二维差分\">4.2 二维差分</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N][N],b[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//差分函数 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> x1,<span class=\"type\">int</span> y1,<span class=\"type\">int</span> x2,<span class=\"type\">int</span> y2,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    b[x1][y1]+=c;</span><br><span class=\"line\">    b[x2+<span class=\"number\">1</span>][y1]-=c;</span><br><span class=\"line\">    b[x1][y2+<span class=\"number\">1</span>]-=c;</span><br><span class=\"line\">    b[x2+<span class=\"number\">1</span>][y2+<span class=\"number\">1</span>]+=c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//预处理出差分 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class=\"line\">            <span class=\"built_in\">insert</span>(i,j,i,j,a[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//查询时操作 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x1,y1,x2,y2,c;</span><br><span class=\"line\">        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;</span><br><span class=\"line\">        <span class=\"built_in\">insert</span>(x1,y1,x2,y2,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//差分还原后输出 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            b[i][j]+=b[i<span class=\"number\">-1</span>][j]+b[i][j<span class=\"number\">-1</span>]-b[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,b[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-双指针\">5.双指针</h2>\n<h3 id=\"5-1-头尾指针\">5.1 头尾指针</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span>  a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,x;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) cin&gt;&gt;b[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> i,j=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&gt;=<span class=\"number\">0</span>&amp;&amp;a[i]+b[j]&gt;x) j--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i]+b[j]==x) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;i&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt;j&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-头双指针\">5.2 头双指针</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) cin&gt;&gt;b[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[j]==b[i]) j++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==n)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-快慢指针（链表）\">5.3 快慢指针（链表）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListNode</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> val;</span><br><span class=\"line\">     ListNode next;</span><br><span class=\"line\">     <span class=\"built_in\">ListNode</span>() &#123;&#125;</span><br><span class=\"line\">     <span class=\"built_in\">ListNode</span>(<span class=\"type\">int</span> val) &#123; <span class=\"keyword\">this</span>.val = val; &#125;</span><br><span class=\"line\">     <span class=\"built_in\">ListNode</span>(<span class=\"type\">int</span> val, ListNode next) &#123; <span class=\"keyword\">this</span>.val = val; <span class=\"keyword\">this</span>.next = next; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">middleNode</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode p = head, q = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q != null &amp;&amp; q.next != null)&#123;</span><br><span class=\"line\">            q = q.next.next;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-贪心\">6.贪心</h2>\n<h3 id=\"6-1-区间选点\">6.1 区间选点</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Range</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r;</span><br><span class=\"line\">&#125;range[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Range a,Range b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.r==b.r) <span class=\"keyword\">return</span> a.l&lt;b.r;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.r&lt;b.r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;range[i].l&gt;&gt;range[i].r;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(range,range+n,cmp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">1</span>,res=range[<span class=\"number\">0</span>].r;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res&lt;range[i].l)&#123;</span><br><span class=\"line\">            res=range[i].r;</span><br><span class=\"line\">            sum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-区间分组\">6.2 区间分组</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue &lt;<span class=\"type\">int</span>,vector&lt;<span class=\"type\">int</span>&gt;,greater&lt;<span class=\"type\">int</span>&gt; &gt; heap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Range</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r;</span><br><span class=\"line\">&#125;range[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Range a,Range b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.l&lt;b.l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;range[i].l&gt;&gt;range[i].r;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(range,range+n,cmp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        Range r=range[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(heap.<span class=\"built_in\">empty</span>()||heap.<span class=\"built_in\">top</span>()&gt;=r.l) heap.<span class=\"built_in\">push</span>(r.r);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            heap.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            heap.<span class=\"built_in\">push</span>(r.r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;heap.<span class=\"built_in\">size</span>()&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-3-哈夫曼树\">6.3 哈夫曼树</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>,vector&lt;<span class=\"type\">int</span>&gt;,greater&lt;<span class=\"type\">int</span>&gt; &gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,p;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;p);</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        x=q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        y=q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(x+y);</span><br><span class=\"line\">        sum+=x+y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-选址问题\">6.4 选址问题</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(g,g+n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    LL sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) sum+=<span class=\"built_in\">abs</span>(g[i]-g[n/<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-5-推公式\">6.5 推公式</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">LL ct[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">P</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">&#125;g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(P a,P b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.z&lt;b.z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        g[i].x=a,g[i].y=b,g[i].z=a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(g+<span class=\"number\">1</span>,g+n+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) ct[i]=ct[i<span class=\"number\">-1</span>]+g[i].x;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    LL sum=<span class=\"number\">-2e17</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        LL t=ct[i<span class=\"number\">-1</span>]-g[i].y;</span><br><span class=\"line\">        sum=<span class=\"built_in\">max</span>(sum,t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-位运算\">7.位运算</h2>\n<h3 id=\"7-1-朴素版\">7.1 朴素版</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>) sum++;</span><br><span class=\"line\">        n&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,<span class=\"built_in\">check</span>(a[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-x-x\">7.2 x&amp;-x</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,s=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=x;i;i-=i&amp;-i) s++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1>二、数据结构</h1>\n<h2 id=\"1-线性表\">1.线性表</h2>\n<h3 id=\"1-1-数组\">1.1 数组</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cout&lt;&lt;g[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-哈希表\">1.2 哈希表</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">3</span>,null=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k=(x%N+N)%N;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h[k]!=null&amp;&amp;h[k]!=x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==N) k=<span class=\"number\">0</span>;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,null);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d&quot;</span>,&amp;op,&amp;x);</span><br><span class=\"line\">        <span class=\"type\">int</span> k=<span class=\"built_in\">find</span>(x); </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;I&#x27;</span>) h[k]=x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(h[k]==null) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-链表\">2.链表</h2>\n<h3 id=\"说明：C-里有三种链表的应用方法\">说明：C++里有三种链表的应用方法</h3>\n<ul>\n<li>\n<h4 id=\"1-指针（最基本的链表）\">1.指针（最基本的链表）</h4>\n</li>\n<li>\n<h4 id=\"2-结构体（链表的一个变种）\">2.结构体（链表的一个变种）</h4>\n</li>\n<li>\n<h4 id=\"3-数组模拟（运行速度快，理解起来有点绕）\">3.数组模拟（运行速度快，理解起来有点绕）</h4>\n</li>\n</ul>\n<h3 id=\"这里主要展示数组模拟\">这里主要展示数组模拟~</h3>\n<h3 id=\"2-1-单链表\">2.1 单链表</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//head 表示头结点的下标 </span></span><br><span class=\"line\"><span class=\"comment\">//e[i] 表示节点i的值 </span></span><br><span class=\"line\"><span class=\"comment\">//ne[i] 表示节点i的next指针是多少 </span></span><br><span class=\"line\"><span class=\"comment\">//idx 存储当前已经用到了哪个点 </span></span><br><span class=\"line\"><span class=\"type\">int</span> head,e[N],ne[N],idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    head=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    idx=<span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在头节点后面插入节点 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_to_head</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=x;</span><br><span class=\"line\">    ne[idx]=head;</span><br><span class=\"line\">    head=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在k节点后面插入节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=x;</span><br><span class=\"line\">    ne[idx]=ne[k];</span><br><span class=\"line\">    ne[k]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除节点 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ne[k]=ne[ne[k]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    cin&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k,x;</span><br><span class=\"line\">        <span class=\"type\">char</span> op;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        cin&gt;&gt;op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op==<span class=\"string\">&#x27;H&#x27;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add_to_head</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"string\">&#x27;D&#x27;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!k)  head=ne[head];</span><br><span class=\"line\">            <span class=\"built_in\">remove</span>(k<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cin&gt;&gt;k&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(k<span class=\"number\">-1</span>,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head;i!=<span class=\"number\">-1</span>;i=ne[i]) </span><br><span class=\"line\">        cout&lt;&lt;e[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-双链表\">2.2 双链表</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> m;</span><br><span class=\"line\"><span class=\"type\">int</span> e[N],l[N],r[N],idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    r[<span class=\"number\">0</span>]=<span class=\"number\">1</span>,l[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    idx=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在第k个点左右插入一个点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=x;</span><br><span class=\"line\">    r[idx]=r[k],l[idx]=k;</span><br><span class=\"line\">    l[r[k]]=idx,r[k]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除第k个点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">removes</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    r[l[k]]=r[k];</span><br><span class=\"line\">    l[r[k]]=l[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;m;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        string op;</span><br><span class=\"line\">        <span class=\"type\">int</span> k,x;</span><br><span class=\"line\">        cin&gt;&gt;op;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op==<span class=\"string\">&quot;L&quot;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(<span class=\"number\">0</span>,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"string\">&quot;R&quot;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(l[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"string\">&quot;D&quot;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;k;</span><br><span class=\"line\">            <span class=\"built_in\">removes</span>(k+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"string\">&quot;IL&quot;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;k&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(l[k+<span class=\"number\">1</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cin&gt;&gt;k&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(k+<span class=\"number\">1</span>,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=r[<span class=\"number\">0</span>];i!=<span class=\"number\">1</span>;i=r[i]) </span><br><span class=\"line\">        cout&lt;&lt;e[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-栈\">3.栈</h2>\n<h3 id=\"3-1-STL容器\">3.1 STL容器</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; st;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;push&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            st.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;empty&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(st.<span class=\"built_in\">size</span>()) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;query&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,st.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">        <span class=\"keyword\">else</span> st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-数组模拟\">3.2 数组模拟</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> st[N],tt=<span class=\"number\">-1</span>;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n; </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;push&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            st[++tt]=x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;empty&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tt!=<span class=\"number\">-1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;query&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,st[tt]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tt--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"4-队列\">4.队列</h2>\n<h3 id=\"4-1-STL容器\">4.1 STL容器</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;push&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;empty&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(q.<span class=\"built_in\">size</span>()) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;query&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,q.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">        <span class=\"keyword\">else</span> q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-数组模拟\">4.2 数组模拟</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N],hh=<span class=\"number\">0</span>,tt=<span class=\"number\">-1</span>;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;push&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            q[++tt]=x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;empty&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tt&lt;hh) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;pop&quot;</span>) hh++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,q[hh]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-树\">5.树</h2>\n<h3 id=\"5-1-并查集\">5.1 并查集</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> fa[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[x]!=x) fa[x]=<span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d%d&quot;</span>,&amp;op,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;M&#x27;</span>) fa[<span class=\"built_in\">find</span>(a)]=<span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(a)==<span class=\"built_in\">find</span>(b)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-Trie树\">5.2 Trie树</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下标是0的点，既是根结点，又是空节点</span></span><br><span class=\"line\"><span class=\"comment\">//idx是节点，son[p][u]为指向下一个节点的指针 </span></span><br><span class=\"line\"><span class=\"type\">int</span> son[N][<span class=\"number\">26</span>],cnt[N],idx=<span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"type\">char</span> str[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> str[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;str[i];i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u=str[i]-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!son[p][u]) son[p][u]=++idx;</span><br><span class=\"line\">        p=son[p][u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cnt[p]++;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">char</span> str[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;str[i];i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u=str[i]-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!son[p][u]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        p=son[p][u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt[p];</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%s&quot;</span>,&amp;op,&amp;str);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;I&#x27;</span>) <span class=\"built_in\">insert</span>(str);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">query</span>(str));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"6-图\">6.图</h2>\n<h3 id=\"6-1-邻接矩阵\">6.1 邻接矩阵</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(g[<span class=\"number\">0</span>],g[<span class=\"number\">0</span>]+N*N,INF);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//有向图</span></span><br><span class=\"line\">        g[a][b]=<span class=\"built_in\">min</span>(g[a][b],c);</span><br><span class=\"line\">        <span class=\"comment\">//无向图</span></span><br><span class=\"line\">        g[a][b]=g[b][a]=<span class=\"built_in\">min</span>(g[a][b],c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-邻接表\">6.2 邻接表</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[N],ne[N],w[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    w[idx]=c;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">//有向图</span></span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b,c);</span><br><span class=\"line\">        <span class=\"comment\">//无向图</span></span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b,c),<span class=\"built_in\">add</span>(b,a,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"7-树状数组-线段树\">7.树状数组+线段树</h2>\n<h3 id=\"7-1-树状数组\">7.1 树状数组</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[N],c[N];</span><br><span class=\"line\">LL T,n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(LL x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x;x-=x&amp;(-x)) s+=c[x];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(LL x,LL s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x&lt;=n;x+=x&amp;(-x)) c[x]+=s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(i,a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        LL t,x,y;</span><br><span class=\"line\">        cin&gt;&gt;t&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t) <span class=\"built_in\">add</span>(x,y);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"built_in\">query</span>(y)-<span class=\"built_in\">query</span>(x<span class=\"number\">-1</span>)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-线段树\">7.2 线段树</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[N],c[N];</span><br><span class=\"line\">LL T,n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r;</span><br><span class=\"line\">    <span class=\"type\">int</span> v;  <span class=\"comment\">// 区间[l, r]中的最大值</span></span><br><span class=\"line\">&#125;tr[N*<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> u)</span>  <span class=\"comment\">// 由子节点的信息，来计算父节点的信息</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tr[u].v=<span class=\"built_in\">max</span>(tr[u&lt;&lt;<span class=\"number\">1</span>].v,tr[u&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tr[u]=&#123;l,r&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(u&lt;&lt;<span class=\"number\">1</span>,l,mid), <span class=\"built_in\">build</span>(u&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tr[u].l&gt;=l &amp;&amp;tr[u].r&lt;=r) <span class=\"keyword\">return</span> tr[u].v;   <span class=\"comment\">// 树中节点，已经被完全包含在[l,r]中了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> v=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&lt;=mid) v=<span class=\"built_in\">query</span>(u&lt;&lt;<span class=\"number\">1</span>,l,r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&gt;mid) v=<span class=\"built_in\">max</span>(v,<span class=\"built_in\">query</span>(u&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> x,<span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tr[u].l==x&amp;&amp;tr[u].r== x) tr[u].v=v;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;=mid) <span class=\"built_in\">modify</span>(u&lt;&lt;<span class=\"number\">1</span>,x,v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(u&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,x,v);</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=<span class=\"number\">0</span>,last=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;p);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d&quot;</span>,op,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*op==<span class=\"string\">&#x27;Q&#x27;</span>)&#123;</span><br><span class=\"line\">            last=<span class=\"built_in\">query</span>(<span class=\"number\">1</span>,n-x+<span class=\"number\">1</span>,n);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,last);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,((LL)last+x)%p);</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-C-STL容器及函数（只列出较为常用的）\">8.C++ STL容器及函数（只列出较为常用的）</h2>\n<h3 id=\"8-1-常用函数\">8.1 常用函数*</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span>        <span class=\"comment\">//头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.max()、min()、abs()函数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"comment\">//求最大值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Max = <span class=\"built_in\">max</span>(a,b);</span><br><span class=\"line\">    <span class=\"comment\">//求最小值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Min = <span class=\"built_in\">min</span>(a,b);</span><br><span class=\"line\">    <span class=\"comment\">//求绝对值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Abs = <span class=\"built_in\">abs</span>(<span class=\"number\">-3</span>);</span><br><span class=\"line\">    cout &lt;&lt; Max &lt;&lt; Min &lt;&lt; Abs;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2.交换函数：swap()</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//3.排序函数：sort()</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">55</span>,<span class=\"number\">44</span>,<span class=\"number\">33</span>,<span class=\"number\">22</span>,<span class=\"number\">11</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a,a+<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//4.填充函数：fill() (很多人都用memset，但是我就喜欢fill)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">11</span>,<span class=\"number\">33</span>,<span class=\"number\">22</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(a+<span class=\"number\">3</span>,a+<span class=\"number\">5</span>,<span class=\"number\">9999</span>);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//5.翻转函数：reverse()</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">11</span>,<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">44</span>,<span class=\"number\">55</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a,a+<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-2-vector（动态数组）\">8.2 vector（动态数组）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span>           <span class=\"comment\">//头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"comment\">//方式一：初始化一维可变长数组</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; c; <span class=\"comment\">//定义了一个名为num的存int数据的一维数组</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">double</span>&gt; c;<span class=\"comment\">//定义了一个名为num的存double数据的一维数组</span></span><br><span class=\"line\">vector&lt;node&gt; c;<span class=\"comment\">//node是结构体类型</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//方式二：初始化二维可变长数组</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; c[<span class=\"number\">5</span>];<span class=\"comment\">//定义可变长二维数组</span></span><br><span class=\"line\"><span class=\"comment\">//注意：行是不可变的（只有5行），而列可变可以在指定行添加元素</span></span><br><span class=\"line\"><span class=\"comment\">//第一维固定长度为5，第二维长度可以改变</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//方式三:初始化二维均可变长数组</span></span><br><span class=\"line\">vector&lt;vectot&lt;<span class=\"type\">int</span>&gt; &gt; c;<span class=\"comment\">//定义一个行和列均可变的二维数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//访问</span></span><br><span class=\"line\">    <span class=\"comment\">//方式一：单个访问，假设num数组中已经有了5个元素</span></span><br><span class=\"line\">    cout&lt;&lt;c[<span class=\"number\">4</span>]&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;  <span class=\"comment\">//输出第五个数据</span></span><br><span class=\"line\">    <span class=\"comment\">//一二维可变数组和普通数组的访问方法一样</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//方式二:遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;c.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        cout&lt;&lt;c[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//方式三：智能指针</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : c)</span><br><span class=\"line\">        cout&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">相关方法函数如下：c指定为数组名称</span><br><span class=\"line\"></span><br><span class=\"line\">代码\t含义</span><br><span class=\"line\">c.<span class=\"built_in\">front</span>()\t返回第一个数据</span><br><span class=\"line\">c.<span class=\"built_in\">back</span>()\t返回最后一个数据</span><br><span class=\"line\">c.<span class=\"built_in\">push_back</span>(element)\t在尾部加一个数据 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">c.<span class=\"built_in\">pop_back</span>()\t删除最后一个数据 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">c.<span class=\"built_in\">size</span>()\t返回实际数据个数（<span class=\"type\">unsigned</span>类型） <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">c.<span class=\"built_in\">clear</span>()\t清除元素个数 <span class=\"built_in\">O</span>(N),N为元素个数</span><br><span class=\"line\">c.<span class=\"built_in\">resize</span>(n,v)\t改变数组大小为n,n个空间数值赋为v，如果没有默认赋值为<span class=\"number\">0</span></span><br><span class=\"line\">c.<span class=\"built_in\">insert</span>(it,x)\t</span><br><span class=\"line\">向任意迭代器it插入一个元素<span class=\"function\">x <span class=\"title\">O</span><span class=\"params\">(N)</span>，</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">例：c.<span class=\"title\">insert</span><span class=\"params\">(c.begin()+<span class=\"number\">2</span>,<span class=\"number\">-1</span>)</span> 将-1插入c[2]的位置</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">c.<span class=\"title\">erase</span><span class=\"params\">(first,last)</span>\t删除[first,last)的所有元素</span></span><br><span class=\"line\"><span class=\"function\">c.<span class=\"title\">begin</span><span class=\"params\">()</span>\t返回首元素的迭代器（通俗来说就是地址）</span></span><br><span class=\"line\"><span class=\"function\">c.<span class=\"title\">end</span><span class=\"params\">()</span>\t返回最后一个元素后一个位置的迭代器（地址）</span></span><br><span class=\"line\"><span class=\"function\">c.<span class=\"title\">empty</span><span class=\"params\">()</span>\t判断是否为空，为空返回真，反之返回假</span></span><br><span class=\"line\"><span class=\"function\">注意： <span class=\"title\">end</span><span class=\"params\">()</span>返回的是最后一个元素的后一个位置的地址，不是最后一个元素的</span></span><br><span class=\"line\"><span class=\"function\">---</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-3-stack（栈）\">8.3 stack（栈）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span>           <span class=\"comment\">//头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; st;</span><br><span class=\"line\">stack&lt;string&gt; st;</span><br><span class=\"line\">stack&lt;node&gt; st;<span class=\"comment\">//node是结构体类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//访问函数</span></span><br><span class=\"line\">    <span class=\"built_in\">push</span>()\t压栈，增加元素 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">pop</span>()\t移除栈顶元素 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">top</span>()\t取得栈顶元素（但不删除）<span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">empty</span>()\t检测栈内是否为空，空为真 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">size</span>()\t返回stack内元素的个数 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-4-queue（队列）\">8.4 queue（队列）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span>           <span class=\"comment\">//头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通队列初始化</span></span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">queue&lt;string&gt; q;</span><br><span class=\"line\">queue&lt;node&gt; q;<span class=\"comment\">//node是结构体类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优先队列初始化定义</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\"><span class=\"comment\">//优先队列设置优先级</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt; &gt; q;</span><br><span class=\"line\"><span class=\"comment\">//最后两个&gt;之间要有空格，旧版c++编译器会把&quot;&gt;&gt;&quot;当成右移符！！！</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//普通队列访问函数</span></span><br><span class=\"line\">    <span class=\"built_in\">front</span>()\t返回队首元素 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">back</span>()\t返回队尾元素 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">push</span>()\t尾部添加一个元素副本 进队<span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">pop</span>()\t删除第一个元素 出队 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">size</span>()\t返回队列中元素个数，返回值类型<span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title\">O</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">empty</span><span class=\"params\">()</span>\t判断是否为空，队列为空，返回<span class=\"literal\">true</span> <span class=\"title\">O</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">//优先队列访问函数</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">top</span><span class=\"params\">()</span>\t访问队首元素</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">push</span><span class=\"params\">()</span>\t入队</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">pop</span><span class=\"params\">()</span>\t堆顶（队首）元素出队</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">size</span><span class=\"params\">()</span>\t队列元素个数</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">empty</span><span class=\"params\">()</span>\t是否为空</span></span><br><span class=\"line\"><span class=\"function\">    注意没有<span class=\"title\">clear</span><span class=\"params\">()</span>！\t不提供该方法</span></span><br><span class=\"line\"><span class=\"function\">    优先队列只能通过<span class=\"title\">top</span><span class=\"params\">()</span>访问队首元素（优先级最高的元素）</span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">//注：栈的取第一个元素为top();而普通队列的为front();优先队列为top();</span></span></span><br><span class=\"line\"><span class=\"function\">        </span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">return</span> 0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-5-pair\">8.5 pair</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">pair&lt;string,<span class=\"type\">int</span>&gt;<span class=\"built_in\">p</span>(<span class=\"string\">&quot;wangyaqi&quot;</span>,<span class=\"number\">1</span>);<span class=\"comment\">//带初始值的</span></span><br><span class=\"line\">pair&lt;string,<span class=\"type\">int</span>&gt;p;<span class=\"comment\">//不带初始值的</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//访问函数</span></span><br><span class=\"line\">    pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;p[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//和结构体类似，first代表第一个元素，second代表第二个元素</span></span><br><span class=\"line\">        cout&lt;&lt;p[i].first&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;p[i].second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-6-string字符串\">8.6 string字符串</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span>       <span class=\"comment\">//头文件（可写可不写，iostream里自带）</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">size</span>();i++) </span><br><span class=\"line\">        cout&lt;&lt;s[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//拼接</span></span><br><span class=\"line\">    string s1;</span><br><span class=\"line\">    string s2;</span><br><span class=\"line\">    s1 = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    s2 = <span class=\"string\">&quot;456&quot;</span>;</span><br><span class=\"line\">    string s = s1 + s2;</span><br><span class=\"line\">    cout&lt;&lt;s;   <span class=\"comment\">//123456</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1>三、搜索和图论</h1>\n<h2 id=\"1-DFS深度优先搜索\">1.DFS深度优先搜索</h2>\n<h3 id=\"1-1-基础深搜\">1.1 基础深搜</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> path[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,path[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i])&#123;</span><br><span class=\"line\">            path[u]=i;</span><br><span class=\"line\">            st[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(u+<span class=\"number\">1</span>);</span><br><span class=\"line\">            st[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> col[N],dg[N],udg[N];</span><br><span class=\"line\"><span class=\"type\">char</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">puts</span>(g[i]);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!col[i]&amp;&amp;!dg[u+i]&amp;&amp;!udg[n-u+i])&#123;</span><br><span class=\"line\">            g[u][i]=<span class=\"string\">&#x27;Q&#x27;</span>;</span><br><span class=\"line\">            col[i]=dg[u+i]=udg[n-u+i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(u+<span class=\"number\">1</span>);</span><br><span class=\"line\">            col[i]=dg[u+i]=udg[n-u+i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            g[u][i]=<span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">            g[i][j]=<span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-图的深搜\">1.2 图的深搜</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[<span class=\"number\">2</span>*N],ne[<span class=\"number\">2</span>*N],idx;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> ans=N; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表存储图 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以u为根的子树中点的数量 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">1</span>,res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//sum存当前子树节点节点总个数 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[u];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[j])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> s=<span class=\"built_in\">dfs</span>(j);     </span><br><span class=\"line\">            <span class=\"comment\">//搜索子树节点个数并累加到s中 </span></span><br><span class=\"line\">            res=<span class=\"built_in\">max</span>(res,s);</span><br><span class=\"line\">            <span class=\"comment\">//更新res值 </span></span><br><span class=\"line\">            sum+=s;</span><br><span class=\"line\">            <span class=\"comment\">//累加节点u的子树节点 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//res存当前子树节点最大值 </span></span><br><span class=\"line\">    res=<span class=\"built_in\">max</span>(res,n-sum);</span><br><span class=\"line\">    <span class=\"comment\">//ans存所有节点的res最小值（重心） </span></span><br><span class=\"line\">    ans=<span class=\"built_in\">min</span>(ans,res);</span><br><span class=\"line\">    <span class=\"comment\">//返回子树节点总数 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b),<span class=\"built_in\">add</span>(b,a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"2-BFS广度优先搜索\">2.BFS广度优先搜索</h2>\n<h3 id=\"2-1-基础搜索\">2.1 基础搜索</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N],d[N][N];</span><br><span class=\"line\">PII q[N*N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> s[<span class=\"number\">2</span>][<span class=\"number\">4</span>]=&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> hh=<span class=\"number\">0</span>,tt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    q[<span class=\"number\">0</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(d[<span class=\"number\">0</span>],d[<span class=\"number\">0</span>]+N*N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    d[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(hh&lt;=tt)&#123; </span><br><span class=\"line\">        PII t=q[hh++];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x=t.first+s[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">            <span class=\"type\">int</span> y=t.second+s[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class=\"number\">0</span>&amp;&amp;y&lt;m&amp;&amp;g[x][y]==<span class=\"number\">0</span>&amp;&amp;d[x][y]==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                d[x][y]=d[t.first][t.second]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q[++tt]=&#123;x,y&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[n<span class=\"number\">-1</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)</span><br><span class=\"line\">            cin&gt;&gt;g[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"built_in\">bfs</span>()&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-图的广搜\">2.2 图的广搜</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[N],ne[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N],d[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表存储图 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> hh=<span class=\"number\">0</span>,tt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(d,d+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    q[<span class=\"number\">0</span>]=<span class=\"number\">1</span>,d[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//数组q模拟队列 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(hh&lt;=tt)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=q[hh++];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[t];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[j]==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                d[j]=d[t]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q[++tt]=j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//d[n]记录路径长度+判断</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"comment\">//fill填充h数组</span></span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"built_in\">bfs</span>()&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-有向图拓扑排序\">2.3 有向图拓扑排序</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[N],ne[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N],d[N];   <span class=\"comment\">//d数组存储节点入度 </span></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表存储图（数组模拟单链表） </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拓扑排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">topsort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> hh=<span class=\"number\">0</span>,tt=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//把入度为0的所有节点加进队列 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!d[i]) q[++tt]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//数组模拟队列 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(hh&lt;=tt)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=q[hh++];</span><br><span class=\"line\">        <span class=\"comment\">//遍历图 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[t];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=e[i]; </span><br><span class=\"line\">            d[j]--;    <span class=\"comment\">//j节点入度-1 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!d[j]) q[++tt]=j;</span><br><span class=\"line\">            <span class=\"comment\">//如果节点入度为0，则加入队列 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否遍历完成 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tt==n<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b);</span><br><span class=\"line\">        d[b]++;    <span class=\"comment\">//节点入度++             </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//遍历队列即为序列 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">topsort</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"3-最短路径算法\">3.最短路径算法</h2>\n<h3 id=\"3-1-朴素Dijkstra最短路（不存在负权边）\">3.1 朴素Dijkstra最短路（不存在负权边）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> dist[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dist,dist+N,INF);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!st[j]&amp;&amp;(t==<span class=\"number\">-1</span>||dist[t]&gt;dist[j]))</span><br><span class=\"line\">                t=j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            dist[j]=<span class=\"built_in\">min</span>(dist[j],dist[t]+g[t][j]);</span><br><span class=\"line\">        st[t]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(g[<span class=\"number\">0</span>],g[<span class=\"number\">0</span>]+N*N,INF);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">        g[a][b]=<span class=\"built_in\">min</span>(g[a][b],c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"built_in\">dijkstra</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t==INF) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dist[n]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-堆优化Dijkstra最短路\">3.2 堆优化Dijkstra最短路</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],w[N],e[N],ne[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> dist[N],n,m;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    w[idx]=c;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dist,dist+N,INF);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt; &gt; heap;</span><br><span class=\"line\">    heap.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(heap.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">        PII t=heap.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        heap.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"type\">int</span> ver=t.second,distance=t.first;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st[ver]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        st[ver]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[ver];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[j]&gt;distance+w[i])&#123;</span><br><span class=\"line\">                dist[j]=distance+w[i];</span><br><span class=\"line\">                heap.<span class=\"built_in\">push</span>(&#123;dist[j],j&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist[n]==INF) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"built_in\">dijkstra</span>());</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-bellman-ford最短路（有边数限制）\">3.3 bellman-ford最短路（有边数限制）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,M=<span class=\"number\">10010</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> dist[N],backup[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,w;</span><br><span class=\"line\">&#125;edges[M];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bellman_ford</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dist,dist+N,INF);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(backup,dist,<span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a=edges[j].a,b=edges[j].b,w=edges[j].w;</span><br><span class=\"line\">            dist[b]=<span class=\"built_in\">min</span>(dist[b],backup[a]+w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;w);</span><br><span class=\"line\">        edges[i]=&#123;a,b,w&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">bellman_ford</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist[n]&gt;INF/<span class=\"number\">2</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dist[n]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-spfa最短路（存在负权边）\">3.4 spfa最短路（存在负权边）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[N],ne[N],w[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> dist[N],n,m;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    w[idx]=c;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dist,dist+N,INF);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    st[<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        st[t]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[t];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[j]&gt;dist[t]+w[i])&#123;</span><br><span class=\"line\">                dist[j]=dist[t]+w[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!st[j])&#123;</span><br><span class=\"line\">                    q.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">                    st[j]=<span class=\"literal\">true</span>;\t</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">spfa</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist[n]==INF) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dist[n]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"3-5-Floyd最短路（多源）\">3.5 Floyd最短路（多源）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> p=<span class=\"number\">1</span>;p&lt;=n;p++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">                g[i][j]=<span class=\"built_in\">min</span>(g[i][j],g[i][p]+g[p][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(g[<span class=\"number\">0</span>],g[<span class=\"number\">0</span>]+N*N,INF);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) g[i][i]=<span class=\"number\">0</span>; </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">        g[a][b]=<span class=\"built_in\">min</span>(g[a][b],c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">floyd</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(g[a][b]&gt;=<span class=\"number\">1e6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,g[a][b]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"4-最小生成树\">4.最小生成树</h2>\n<h3 id=\"4-1-Prim算法\">4.1 Prim算法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N],dist[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">prim</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化dist数组 </span></span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dist,dist+N,INF);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到距离集合最小权的边并赋予t </span></span><br><span class=\"line\">        <span class=\"type\">int</span> t=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!st[j]&amp;&amp;(t==<span class=\"number\">-1</span>||dist[t]&gt;dist[j]))</span><br><span class=\"line\">                t=j;</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"comment\">//把t加到集合里 </span></span><br><span class=\"line\">        st[t]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//i!=0，把边加到res里 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果最小值为INF，则无边到集合中 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[t]==INF) <span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">            res+=dist[t];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//更新节点到集合的最短距离 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            dist[j]=<span class=\"built_in\">min</span>(dist[j],g[t][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(g[<span class=\"number\">0</span>],g[<span class=\"number\">0</span>]+N*N,INF);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">        g[a][b]=g[b][a]=<span class=\"built_in\">min</span>(g[a][b],c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"built_in\">prim</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t==INF) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,t);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-Kruskal算法\">4.2 Kruskal算法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">2e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,w;</span><br><span class=\"line\">&#125;edges[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Edge a,Edge b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.w&lt;b.w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p[x]!=x) p[x]=<span class=\"built_in\">find</span>(p[x]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;w);</span><br><span class=\"line\">        edges[i]=&#123;a,b,w&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(edges,edges+m,cmp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a=edges[i].a,b=edges[i].b,w=edges[i].w;</span><br><span class=\"line\">        a=<span class=\"built_in\">find</span>(a),b=<span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a!=b)&#123;</span><br><span class=\"line\">            p[a]=b;</span><br><span class=\"line\">            sum+=w;</span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans&lt;n<span class=\"number\">-1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-二分图\">5.二分图</h2>\n<h3 id=\"5-1-染色法判定\">5.1 染色法判定</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>,M=<span class=\"number\">2</span>*N;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[M],ne[M],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> color[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    color[u]=c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[u];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!color[j]&amp;&amp;!<span class=\"built_in\">dfs</span>(j,<span class=\"number\">3</span>-c)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(color[j]==c) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b),<span class=\"built_in\">add</span>(b,a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!color[i]&amp;&amp;!<span class=\"built_in\">dfs</span>(i,<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">            flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-匈牙利算法匹配\">5.2 匈牙利算法匹配</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,M=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[M],ne[M],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> match[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n1,n2,m;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[x];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[j])&#123;</span><br><span class=\"line\">            st[j]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!match[j]||<span class=\"built_in\">find</span>(match[j]))&#123;</span><br><span class=\"line\">                match[j]=x;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n1,&amp;n2,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">fill</span>(st,st+N,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(i)) res++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,res);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<hr>\n<h1>四、数论</h1>\n<h2 id=\"1-质数（素数）\">1.质数（素数）</h2>\n<h3 id=\"1-1-试除法求质数\">1.1 试除法求质数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">prime</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=x/i;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x%i==<span class=\"number\">0</span>) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">prime</span>(x)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-分解质因数\">1.2 分解质因数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(x%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    x/=i;</span><br><span class=\"line\">                    ans++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>,i,ans);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>,x,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-筛质数\">1.3 筛质数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_prime</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i]) cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+i;j&lt;=n;j+=i)&#123;</span><br><span class=\"line\">            st[j]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">get_prime</span>(n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,cnt);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-约数（因数）\">2. 约数（因数）</h2>\n<h3 id=\"2-1-试除法求约数\">2.1 试除法求约数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; primes;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">prime</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=x/i;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            p.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x/i!=i) p.<span class=\"built_in\">push_back</span>(x/i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>()); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        primes=<span class=\"built_in\">prime</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;primes.<span class=\"built_in\">size</span>();i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,primes[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-约数个数\">2.2 约数个数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unordered_map&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; primes;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(x%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                x/=i;</span><br><span class=\"line\">                primes[i]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>)  primes[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> t:primes) ans=ans*(t.second+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-约数之和\">2.3 约数之和</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unordered_map&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; primes;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        <span class=\"comment\">//试除法判断约数并累加 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(x%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                x/=i;</span><br><span class=\"line\">                primes[i]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>)  primes[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> t:primes)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//t遍历哈希primes</span></span><br><span class=\"line\">        <span class=\"type\">int</span> p=t.first,s=t.second;</span><br><span class=\"line\">        <span class=\"comment\">//p为n的第k个约数，s为第k个约数的个数</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//求(1+p1^1+p1^2+...+p1^s);</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(s--) sum=(sum*p+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\">        <span class=\"comment\">//求(1+p2^1+...+p1^s)*(1+p2^1+...+p2^s)*...*(1+pk^1+...+pk^s);</span></span><br><span class=\"line\">        ans=ans*sum%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-大整数运算\">3.大整数运算</h2>\n<h3 id=\"3-1-加法\">3.1 加法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; A,B,C;</span><br><span class=\"line\">string a,b;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">add</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.<span class=\"built_in\">size</span>()&lt;B.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> <span class=\"built_in\">add</span>(B,A);</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>()||i&lt;B.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;A.<span class=\"built_in\">size</span>()) t+=A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;B.<span class=\"built_in\">size</span>()) t+=B[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) C.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=a.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=b.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) B.<span class=\"built_in\">push_back</span>(b[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    C=<span class=\"built_in\">add</span>(A,B);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-减法\">3.2 减法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; A,B,C;</span><br><span class=\"line\">string a,b;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.<span class=\"built_in\">size</span>()!=B.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> A.<span class=\"built_in\">size</span>()&gt;B.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=A.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i]!=B[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[i]&gt;B[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sub</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; c;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>,t=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        t=A[i]-t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;B.<span class=\"built_in\">size</span>()) t-=B[i];</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>((t+<span class=\"number\">10</span>)%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t&lt;<span class=\"number\">0</span>?t=<span class=\"number\">1</span>:t=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>&amp;&amp;c.<span class=\"built_in\">back</span>()==<span class=\"number\">0</span>) c.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=a.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=b.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) B.<span class=\"built_in\">push_back</span>(b[i]-<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">cmp</span>(A,B))&#123;</span><br><span class=\"line\">        C=<span class=\"built_in\">sub</span>(A,B);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        C=<span class=\"built_in\">sub</span>(B,A);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-乘法\">3.3 乘法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; A,C;</span><br><span class=\"line\">string a;</span><br><span class=\"line\"><span class=\"type\">int</span> b;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mul</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; c;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>()||t;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;A.<span class=\"built_in\">size</span>()) t+=A[i]*b;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=a.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    C=<span class=\"built_in\">mul</span>(A,b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-除法\">3.4 除法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">string a;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; A;</span><br><span class=\"line\"><span class=\"type\">int</span> B,r;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">div</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=A.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        r=r*<span class=\"number\">10</span>+A[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(r/b);</span><br><span class=\"line\">        r%=b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(C.<span class=\"built_in\">begin</span>(),C.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(C.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>&amp;&amp;C.<span class=\"built_in\">back</span>()==<span class=\"number\">0</span>) C.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;B;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=a.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C=<span class=\"built_in\">div</span>(A,B);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) cout&lt;&lt;C[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    cout&lt;&lt;endl&lt;&lt;r&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-最大公约数（最小公倍数）\">4.最大公约数（最小公倍数）</h2>\n<h3 id=\"4-1-欧几里得算法（辗转相除法）\">4.1 欧几里得算法（辗转相除法）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">//最大公约数</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">gcd</span>(a,b));</span><br><span class=\"line\">        <span class=\"comment\">//最小公倍数</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a*<span class=\"built_in\">gcd</span>(a,b)/b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-扩展欧几里得算法\">4.2 扩展欧几里得算法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 公式ax+by=gcd(ai,bi)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!b)&#123;</span><br><span class=\"line\">        x=<span class=\"number\">1</span>,y=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> d=<span class=\"built_in\">exgcd</span>(b,a%b,y,x);</span><br><span class=\"line\">    y-=a/b*x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">exgcd</span>(a,b,x,y);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>,x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-快速幂\">5.快速幂</h2>\n<h3 id=\"5-1-基础快速幂\">5.1 基础快速幂</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">k</span><span class=\"params\">(LL a,LL b,LL mod)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) sum=sum*a%mod;</span><br><span class=\"line\">        a=a*a%mod;</span><br><span class=\"line\">        b&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        LL a,b,p;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld&quot;</span>,&amp;a,&amp;b,&amp;p);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">k</span>(a,b,p));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-快速幂求逆元\">5.2 快速幂求逆元</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">k</span><span class=\"params\">(LL a,LL b,LL mod)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) sum=sum*a%mod;</span><br><span class=\"line\">        a=a*a%mod;</span><br><span class=\"line\">        b&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        LL a,p,t;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>,&amp;a,&amp;p);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a%p) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">k</span>(a,p<span class=\"number\">-2</span>,p));</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-矩阵快速幂\">5.3 矩阵快速幂</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义矩阵结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Matrix</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">3</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"built_in\">Matrix</span>() <span class=\"built_in\">memset</span>(a,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"comment\">//矩阵乘法</span></span><br><span class=\"line\">    Matrix <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> Matrix &amp;b) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Matrix res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">2</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>; j&lt;=<span class=\"number\">2</span>; j++)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>; k&lt;=<span class=\"number\">2</span>; k++)</span><br><span class=\"line\">                    res.a[i][j]=res.a[i][j]+a[i][k]*b.a[k][j];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix base,ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化base,ans</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//矩阵</span></span><br><span class=\"line\">    <span class=\"comment\">//[0，1]</span></span><br><span class=\"line\">    <span class=\"comment\">//[1，1]</span></span><br><span class=\"line\">    base.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;<span class=\"comment\">//这个11位置一定要初始化</span></span><br><span class=\"line\">    base.a[<span class=\"number\">2</span>][<span class=\"number\">2</span>]=base.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=base.a[<span class=\"number\">2</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//初始斐波那契数列f1=1,f2=1</span></span><br><span class=\"line\">    ans.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    ans.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//传入n次幂</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)ans=ans*base;<span class=\"comment\">//n为奇数</span></span><br><span class=\"line\">        base=base*base;</span><br><span class=\"line\">        n&gt;&gt;=<span class=\"number\">1</span>;<span class=\"comment\">// n/=2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();<span class=\"comment\">//每次初始化矩阵</span></span><br><span class=\"line\">        <span class=\"built_in\">qpow</span>(n<span class=\"number\">-2</span>);<span class=\"comment\">//快速幂优化</span></span><br><span class=\"line\">        cout&lt;&lt;ans.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-组合数\">6.组合数</h2>\n<h3 id=\"6-1-普通递推\">6.1 普通递推</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10010</span>,mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> c[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">        c[i][<span class=\"number\">1</span>]=i;</span><br><span class=\"line\">        c[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">2</span>;j&lt;=i;j++)&#123;</span><br><span class=\"line\">            c[i][j]=(c[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+c[i<span class=\"number\">-1</span>][j])%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,c[a][b]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-C-a-b-a-b-a-b-（预处理）\">6.2  C(a,b) = a!/(b-a)!*b!（预处理）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>,mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">LL f[N],inf[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">q</span><span class=\"params\">(LL a,LL k,LL p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k&amp;<span class=\"number\">1</span>) sum=(LL)sum*a%p;</span><br><span class=\"line\">        a=(LL)a*a%p;</span><br><span class=\"line\">        k&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    f[<span class=\"number\">0</span>]=inf[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">        f[i]=(LL)f[i<span class=\"number\">-1</span>]*i%mod;</span><br><span class=\"line\">        inf[i]=(LL)inf[i<span class=\"number\">-1</span>]*<span class=\"built_in\">q</span>(i,mod<span class=\"number\">-2</span>,mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,(LL)f[a]*inf[a-b]%mod*inf[b]%mod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-3-C-a-b-C-a-p-b-p-C-a-p-b-p-（lucas定理）\">6.3  C(a,b) = C(a%p,b%p)*C(a/p,b/p)（lucas定理）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂求逆元</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">q</span><span class=\"params\">(LL a,LL k,LL p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k&amp;<span class=\"number\">1</span>) res=(LL)res*a%p;</span><br><span class=\"line\">        a=(LL)a*a%p;</span><br><span class=\"line\">        k&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求组合数 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">c</span><span class=\"params\">(LL a,LL b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,j=a;i&lt;=b;i++,j--)&#123;</span><br><span class=\"line\">        sum=(LL)sum*j%p;</span><br><span class=\"line\">        sum=(LL)sum*<span class=\"built_in\">q</span>(i,p<span class=\"number\">-2</span>,p)%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//卢卡斯定理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lucas</span><span class=\"params\">(LL a,LL b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&lt;p&amp;&amp;b&lt;p) <span class=\"keyword\">return</span> <span class=\"built_in\">c</span>(a,b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (LL)<span class=\"built_in\">c</span>(a%p,b%p)*<span class=\"built_in\">lucas</span>(a/p,b/p)%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        LL a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">lucas</span>(a,b)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-不取模运算C-a-b\">6.4 不取模运算C(a,b)</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">5010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> primes[N],cnt;</span><br><span class=\"line\"><span class=\"type\">int</span> sum[N]; </span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线性筛法 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_primes</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;primes[j]&lt;=n/i;j++)&#123;</span><br><span class=\"line\">            st[primes[j]*i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%primes[j]==<span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求a！里p因子的个数 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        res+=n/p;</span><br><span class=\"line\">        n/=p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//高精度乘法 </span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mul</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; c;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        t+=a[i]*b;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t)&#123;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">get_primes</span>(a);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cnt;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p=primes[i];</span><br><span class=\"line\">        sum[i]=<span class=\"built_in\">get</span>(a,p)-<span class=\"built_in\">get</span>(b,p)-<span class=\"built_in\">get</span>(a-b,p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; res;</span><br><span class=\"line\">    res.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cnt;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;sum[i];j++)&#123;</span><br><span class=\"line\">            res=<span class=\"built_in\">mul</span>(res,primes[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=res.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,res[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-博弈论\">7.博弈论</h2>\n<h3 id=\"7-1-Nim博弈\">7.1 Nim博弈</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x; </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        sum^=x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum)  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-集合-Nim博弈（sg函数）\">7.2 集合-Nim博弈（sg函数）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unordered_set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">110</span>,M=<span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,k;</span><br><span class=\"line\"><span class=\"type\">int</span> s[N],f[M];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sg</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[x]!=<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> f[x];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    unordered_set&lt;<span class=\"type\">int</span>&gt; S;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i]&lt;=x) </span><br><span class=\"line\">            S.<span class=\"built_in\">insert</span>(<span class=\"built_in\">sg</span>(x-s[i]));</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S.<span class=\"built_in\">count</span>(i))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> f[x]=i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++) cin&gt;&gt;s[i];</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(f,f+M,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a;</span><br><span class=\"line\">        cin&gt;&gt;a;</span><br><span class=\"line\">        res^=<span class=\"built_in\">sg</span>(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1>五、动态规划</h1>\n<h2 id=\"1-背包问题\">1.背包问题</h2>\n<h3 id=\"1-1-01背包\">1.1 01背包</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,V;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N],w[N],v[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;V;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=V;j&gt;=v[i];j--)</span><br><span class=\"line\">            dp[j]=<span class=\"built_in\">max</span>(dp[j],dp[j-v[i]]+w[i]);</span><br><span class=\"line\">            </span><br><span class=\"line\">    cout&lt;&lt;dp[V]&lt;&lt;endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-完全背包\">1.2 完全背包</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> v[N],w[N],dp[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=v[i];j&lt;=m;j++)</span><br><span class=\"line\">            dp[j]=<span class=\"built_in\">max</span>(dp[j],dp[j-v[i]]+w[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;dp[m]&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-多重背包\">1.3 多重背包</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> v[N],w[N],s[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i]&gt;&gt;s[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=s[i]&amp;&amp;k*v[i]&lt;=j;k++)</span><br><span class=\"line\">                dp[i][j]=<span class=\"built_in\">max</span>(dp[i][j],dp[i<span class=\"number\">-1</span>][j-k*v[i]]+k*w[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;dp[n][m]&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-分组背包\">1.4 分组背包</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> v[N][N],w[N][N],s[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;s[i];j++) cin&gt;&gt;v[i][j]&gt;&gt;w[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=m;j&gt;=<span class=\"number\">0</span>;j--)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;s[i];k++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v[i][k]&lt;=j)</span><br><span class=\"line\">                    dp[j]=<span class=\"built_in\">max</span>(dp[j],dp[j-v[i][k]]+w[i][k]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;dp[m]&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-线性dp\">2.线性dp</h2>\n<h3 id=\"2-1-数字三角形\">2.1 数字三角形</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=i;j++)</span><br><span class=\"line\">            cin&gt;&gt;g[i][j];</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=i;j++)</span><br><span class=\"line\">            dp[i][j]=<span class=\"built_in\">max</span>(dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>],dp[i+<span class=\"number\">1</span>][j])+g[i][j];</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout&lt;&lt;dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]&lt;&lt;endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-最长上升子序列\">2.2 最长上升子序列</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N],dp[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dp,dp+n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(g[i]&gt;g[j])</span><br><span class=\"line\">                dp[i]=<span class=\"built_in\">max</span>(dp[i],dp[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res=<span class=\"built_in\">max</span>(dp[i],res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-最长公共子序列\">2.3 最长公共子序列</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> m,n;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][N];</span><br><span class=\"line\"><span class=\"type\">char</span> a[N],b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%s&quot;</span>,a+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            dp[i][j]=<span class=\"built_in\">max</span>(dp[i<span class=\"number\">-1</span>][j],dp[i][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i]==b[j])</span><br><span class=\"line\">                dp[i][j]=<span class=\"built_in\">max</span>(dp[i][j],dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dp[n][m]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-最短编辑距离\">2.4 最短编辑距离</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> m,n;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][N];</span><br><span class=\"line\"><span class=\"type\">char</span> a[N],b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%s&quot;</span>,&amp;n,a+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%s&quot;</span>,&amp;m,b+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//一定要考虑边界问题！！！</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;i++) dp[<span class=\"number\">0</span>][i]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++) dp[i][<span class=\"number\">0</span>]=i;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//相等即直接转换状态，不相等取所有状态的最小值再+1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i]==b[j])</span><br><span class=\"line\">                dp[i][j]=dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">                dp[i][j]=<span class=\"built_in\">min</span>(<span class=\"built_in\">min</span>(dp[i<span class=\"number\">-1</span>][j],dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]),dp[i][j<span class=\"number\">-1</span>])+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dp[n][m]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-进阶dp\">3.进阶dp</h2>\n<h3 id=\"3-1-区间dp\">3.1 区间dp</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">310</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> s[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a);</span><br><span class=\"line\">        s[i]=s[i<span class=\"number\">-1</span>]+a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> len=<span class=\"number\">1</span>;len&lt;n;len++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i+len&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l=i,r=i+len;</span><br><span class=\"line\">            dp[l][r]=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=l;k&lt;r;k++)&#123;</span><br><span class=\"line\">                dp[l][r]=<span class=\"built_in\">min</span>(dp[l][r],dp[l][k]+dp[k+<span class=\"number\">1</span>][r]+s[r]-s[l<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;dp[<span class=\"number\">1</span>][n]&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2状态压缩dp\">3.2状态压缩dp</h3>\n<h4 id=\"蒙德里安的梦想\">蒙德里安的梦想</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">12</span>,M=<span class=\"number\">1</span>&lt;&lt;N;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> dp[N][M];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[M];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//预处理</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n&gt;&gt;m,n||m)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">fill</span>(dp[<span class=\"number\">0</span>],dp[<span class=\"number\">0</span>]+N*M,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1</span>&lt;&lt;n;i++)&#123;</span><br><span class=\"line\">            st[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;&gt;j&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt&amp;<span class=\"number\">1</span>) st[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">                    cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> cnt++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cnt&amp;<span class=\"number\">1</span>) st[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">1</span>&lt;&lt;n;j++)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">1</span>&lt;&lt;n;k++)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!(j&amp;k)&amp;&amp;st[j|k])</span><br><span class=\"line\">                        dp[i][j]+=dp[i<span class=\"number\">-1</span>][k];</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">        cout&lt;&lt;dp[m][<span class=\"number\">0</span>]&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"状态压缩dp求哈密顿路径\">状态压缩dp求哈密顿路径</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">20</span>,M=<span class=\"number\">1</span>&lt;&lt;N;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> w[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[M][N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">            cin&gt;&gt;w[i][j];</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dp[<span class=\"number\">0</span>],dp[<span class=\"number\">0</span>]+M*N,<span class=\"number\">0x3f3f3f</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1</span>&lt;&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;&gt;j&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;n;k++)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((i-(<span class=\"number\">1</span>&lt;&lt;j))&gt;&gt;k&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">                        dp[i][j]=<span class=\"built_in\">min</span>(dp[i][j],dp[i-(<span class=\"number\">1</span>&lt;&lt;j)][k]+w[k][j]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;dp[(<span class=\"number\">1</span>&lt;&lt;n)<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>]&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-树形dp\">3.3 树形dp</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">6010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> happy[N];</span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[N],ne[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> father[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dp[u][<span class=\"number\">1</span>]=happy[u];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[u];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(j);</span><br><span class=\"line\">        dp[u][<span class=\"number\">0</span>]+=<span class=\"built_in\">max</span>(dp[j][<span class=\"number\">0</span>],dp[j][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        dp[u][<span class=\"number\">1</span>]+=dp[j][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;happy[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        father[a]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(b,a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> root=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(father[root]) root++;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(root);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"built_in\">max</span>(dp[root][<span class=\"number\">0</span>],dp[root][<span class=\"number\">1</span>]));</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-记忆化搜索\">4.记忆化搜索</h2>\n<h3 id=\"4-1-斐波那契（记录值）\">4.1 斐波那契（记录值）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> dp[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//斐波那契递归写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>||n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dp[n]!=<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> dp[N];</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        dp[n]=<span class=\"built_in\">F</span>(n<span class=\"number\">-1</span>)+<span class=\"built_in\">F</span>(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dp,dp+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">F</span>(n);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-滑雪\">4.2 滑雪</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">310</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> f[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> s[<span class=\"number\">2</span>][<span class=\"number\">4</span>]=&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dp</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[x][y]!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> f[x][y];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    f[x][y]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a=x+s[<span class=\"number\">0</span>][i],b=y+s[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a&gt;=<span class=\"number\">1</span>&amp;&amp;a&lt;=n&amp;&amp;b&gt;=<span class=\"number\">1</span>&amp;&amp;b&lt;=m&amp;&amp;g[a][b]&lt;g[x][y])</span><br><span class=\"line\">            f[x][y]=<span class=\"built_in\">max</span>(f[x][y],<span class=\"built_in\">dp</span>(a,b)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[x][y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">            cin&gt;&gt;g[i][j];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">            sum=<span class=\"built_in\">max</span>(sum,<span class=\"built_in\">dp</span>(i,j));</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{"gallery":{"0":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.2ea4c5b998603f8c2063c80f8f9928b5?rik=3Ks8xULgcFIU2Q&riu=http%3a%2f%2fimg.xintp.com%2f2019%2f12%2f10%2fta0ybcui0lh.jpg&ehk=fBDxTTIr1rLMFa4DcH%2f2db4qQTMEAvmS4GL%2faUZwDd0%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"1":{"full_link":"https://pic3.zhimg.com/v2-c6ae9c3aff36b9b221258f6a90577902_r.jpg","thumb_link":null,"descr":null},"2":{"full_link":"https://img.zcool.cn/community/01ff5b571e18be6ac7253812858f12.jpg@1280w_1l_2o_100sh.jpg","thumb_link":null,"descr":null},"3":{"full_link":"https://pic.3gbizhi.com/2019/1112/20191112013312648.jpg","thumb_link":null,"descr":null},"4":{"full_link":"https://pic.ntimg.cn/file/20180618/24969966_231417073000_2.jpg","thumb_link":null,"descr":null},"5":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.0b7b7f15b83e7326de9078d0998d5eac?rik=KDIsnoDnAZ%2b5mw&riu=http%3a%2f%2fwww.obzhi.com%2fwp-content%2fuploads%2f2020%2f09%2fkejigan.jpg&ehk=6nuckhqgEl%2fAyE7ZDxsZnTs1%2bLpurRBJEk6V%2fhbe1cw%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"6":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.6bd64f5690838c0dee6246e1d84e902f?rik=Pu115KJ4uy8Aug&riu=http%3a%2f%2fwww.gufengjia.com%2fd%2ffile%2fimages%2f201906281449%2f13-1P605100Z1-51.jpg&ehk=OKZGwyPwoXNZJfWpTchsYK%2bjczpfqO2vO5bkibSRKO4%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null},"7":{"full_link":"https://ts1.cn.mm.bing.net/th/id/R-C.4c3e0765cdb7ab2e73a02e7bb9b25f9a?rik=6cfb63CONUnAQg&riu=http%3a%2f%2fimg.pc841.com%2f2018%2f0323%2f20180323081522198.jpg&ehk=1Ze1QsFRlkT99ef3q7IH68UtKf371gr%2fgYXuirIwySs%3d&risl=&pid=ImgRaw&r=0","thumb_link":null,"descr":null}}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"首先声明！！！\">首先声明！！！</h2>\n<hr>\n<ul>\n<li>1.内容可能有点多，涵盖大部分的基础算法模板。</li>\n<li>2.如有使用注明出处。</li>\n<li>3.如有改进地方欢迎批评指正~</li>\n</ul>\n<hr>\n<h1>* 常用xcpc竞赛模板（数论、计算几何）</h1>\n<h2 id=\"一、二维计算几何：\">一、二维计算几何：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> Geometry</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 点与向量</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">Point</span>(<span class=\"type\">double</span> x = <span class=\"number\">0</span>, <span class=\"type\">double</span> y = <span class=\"number\">0</span>) : <span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">        <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> Point a) <span class=\"type\">const</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> (<span class=\"built_in\">fabs</span>(x - a.x) &lt;= eps &amp;&amp; <span class=\"built_in\">fabs</span>(y - a.y) &lt;= eps);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> Point Vector;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>+(Vector A, Vector B)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(A.x + B.x, A.y + B.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>-(Vector A, Vector B)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(A.x - B.x, A.y - B.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>*(Vector A, <span class=\"type\">double</span> p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(A.x * p, A.y * p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>/(Vector A, <span class=\"type\">double</span> p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(A.x / p, A.y / p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sign</span><span class=\"params\">(<span class=\"type\">double</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 符号函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(x) &lt; eps)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">double</span> x, <span class=\"type\">double</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 比较函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(x - y) &lt; eps)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; y)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">dot</span><span class=\"params\">(Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 向量点积</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x * b.x + a.y * b.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">cross</span><span class=\"params\">(Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 向量叉积</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x * b.y - b.x * a.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">get_length</span><span class=\"params\">(Point a)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 求向量模长</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(<span class=\"built_in\">dot</span>(a, a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">get_angle</span><span class=\"params\">(Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 求A-&gt;B的有向角</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">acos</span>(<span class=\"built_in\">dot</span>(a, b) / <span class=\"built_in\">get_length</span>(a) / <span class=\"built_in\">get_length</span>(b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">area</span><span class=\"params\">(Point a, Point b, Point c)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// A为顶点，向量AB与向量AC的叉积，即三角形ABC的面积的2倍（有向）</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">cross</span>(b - a, c - a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Point <span class=\"title\">rotate</span><span class=\"params\">(Point a, <span class=\"type\">double</span> angle)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 将向量A顺时针旋转angle度</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Point</span>(a.x * <span class=\"built_in\">cos</span>(angle) + a.y * <span class=\"built_in\">sin</span>(angle), -a.x * <span class=\"built_in\">sin</span>(angle) + a.y * <span class=\"built_in\">cos</span>(angle));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Point <span class=\"title\">get_line_intersection</span><span class=\"params\">(Point p, Vector v, Point q, Vector w)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 两直线的交点</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用前提，直线必须有交点</span></span><br><span class=\"line\">        <span class=\"comment\">// cross(v, w) == 0则两直线平行或者重合</span></span><br><span class=\"line\">        Vector u = p - q;</span><br><span class=\"line\">        <span class=\"type\">double</span> t = <span class=\"built_in\">cross</span>(w, u) / <span class=\"built_in\">cross</span>(v, w);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p + v * t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">distance_to_line</span><span class=\"params\">(Point p, Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 点到直线的距离，直线为AB所在直线</span></span><br><span class=\"line\">        Vector v1 = b - a, v2 = p - a;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">fabs</span>(<span class=\"built_in\">cross</span>(v1, v2) / <span class=\"built_in\">get_length</span>(v1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">distance_to_segment</span><span class=\"params\">(Point p, Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 点到线段的距离，线段为线段AB</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">get_length</span>(p - a);</span><br><span class=\"line\"></span><br><span class=\"line\">        Vector v1 = b - a, v2 = p - a, v3 = p - b;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">sign</span>(<span class=\"built_in\">dot</span>(v1, v2)) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">get_length</span>(v2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">sign</span>(<span class=\"built_in\">dot</span>(v1, v3)) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">get_length</span>(v3);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">distance_to_line</span>(p, a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Point <span class=\"title\">get_line_projection</span><span class=\"params\">(Point p, Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 点在直线上的投影，直线为AB所在直线</span></span><br><span class=\"line\">        Vector v = b - a;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + v * (<span class=\"built_in\">dot</span>(v, p - a) / <span class=\"built_in\">dot</span>(v, v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">on_segment</span><span class=\"params\">(Point p, Point a, Point b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 点是否在线段上</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sign</span>(<span class=\"built_in\">cross</span>(p - a, p - b)) == <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">sign</span>(<span class=\"built_in\">dot</span>(p - a, p - b)) &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">segment_intersection</span><span class=\"params\">(Point a1, Point a2, Point b1, Point b2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 判断两个线段是否相交</span></span><br><span class=\"line\">        <span class=\"type\">double</span> c1 = <span class=\"built_in\">cross</span>(a2 - a1, b1 - a1), c2 = <span class=\"built_in\">cross</span>(a2 - a1, b2 - a1);</span><br><span class=\"line\">        <span class=\"type\">double</span> c3 = <span class=\"built_in\">cross</span>(b2 - b1, a2 - b1), c4 = <span class=\"built_in\">cross</span>(b2 - b1, a1 - b1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sign</span>(c1) * <span class=\"built_in\">sign</span>(c2) &lt;= <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">sign</span>(c3) * <span class=\"built_in\">sign</span>(c4) &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多边形</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">polygon_area</span><span class=\"params\">(Point p[], <span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 求多边形面积</span></span><br><span class=\"line\">        <span class=\"type\">double</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i + <span class=\"number\">1</span> &lt; n; i++)</span><br><span class=\"line\">            s += <span class=\"built_in\">cross</span>(p[i] - p[<span class=\"number\">0</span>], p[i + <span class=\"number\">1</span>] - p[i]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s / <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Geometry;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、快速幂-组合数：\">二、快速幂+组合数：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> i64 = <span class=\"type\">int64_t</span>;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> i64 mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\">i64 <span class=\"title\">fpow</span><span class=\"params\">(i64 x, i64 r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    i64 result = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &amp; <span class=\"number\">1</span>)result = result * x % mod;</span><br><span class=\"line\">        r &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        x = x * x % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> binom &#123;</span><br><span class=\"line\">    i64 fac[N], ifac[N];</span><br><span class=\"line\">    <span class=\"type\">int</span> __ = []</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fac[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= N - <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">            fac[i] = fac[i - <span class=\"number\">1</span>] * i % mod;</span><br><span class=\"line\">        ifac[N - <span class=\"number\">5</span>] = <span class=\"built_in\">fpow</span>(fac[N - <span class=\"number\">5</span>], mod - <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = N - <span class=\"number\">5</span>; i; i--)</span><br><span class=\"line\">            ifac[i - <span class=\"number\">1</span>] = ifac[i] * i % mod;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> i64 <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; m || m &lt; <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fac[n] * ifac[m] % mod * ifac[n - m] % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> i64 <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; m || m &lt; <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fac[n] * ifac[n - m] % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> binom;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、卡特兰数-C-2n-n-C-2n-n-1-：\">三、卡特兰数  C(2<em>n,n)-C(2</em>n,n-1) ：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分解质因数求组合数（可适用于mod非质数）</span></span><br><span class=\"line\"><span class=\"type\">int</span> primes[N],cnt;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//筛质数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class=\"line\">            st[primes[j]*i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%primes[j]==<span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">qmi</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k&amp;<span class=\"number\">1</span>)res=res*a%mod;</span><br><span class=\"line\">        a=a*a%mod;</span><br><span class=\"line\">        k&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分解质因数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=n;j;j/=p) s+=j/p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分解质因数的方式求组合数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cnt;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p=primes[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> s=<span class=\"built_in\">get</span>(a,p)-<span class=\"built_in\">get</span>(b,p)-<span class=\"built_in\">get</span>(a-b,p);</span><br><span class=\"line\">        res=res*<span class=\"built_in\">qmi</span>(p,s)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;mod;</span><br><span class=\"line\">    cout&lt;&lt;(<span class=\"built_in\">C</span>(<span class=\"number\">2</span>*n,n)-<span class=\"built_in\">C</span>(<span class=\"number\">2</span>*n,n+<span class=\"number\">1</span>)+mod)%mod&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、欧拉、莫比乌斯函数：\">四、欧拉、莫比乌斯函数：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> primes[N],cnt;</span><br><span class=\"line\"><span class=\"type\">int</span> mobius[N],s[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线性筛求欧拉函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">oula</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    phi[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i])&#123;</span><br><span class=\"line\">            primes[cnt++]=i;</span><br><span class=\"line\">            phi[i]=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class=\"line\">            st[primes[j]*i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%primes[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                phi[i*primes[j]]=phi[i]*primes[j];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            phi[i*primes[j]]=phi[i]*(primes[j]<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线性筛求莫比乌斯函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    mobius[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i])&#123;</span><br><span class=\"line\">            primes[cnt++]=i;</span><br><span class=\"line\">            mobius[i]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class=\"line\">            st[primes[j]*i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%primes[j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                mobius[primes[j]*i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mobius[primes[j]*i]=mobius[i]*<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) s[i]=s[i<span class=\"number\">-1</span>]+mobius[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//除数分块</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,d;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;d;</span><br><span class=\"line\">    a/=d,b/=d;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>,n=<span class=\"built_in\">min</span>(a,b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=<span class=\"number\">1</span>,r;l&lt;=n;l=r+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        r=<span class=\"built_in\">min</span>(n,<span class=\"built_in\">min</span>(a/(a/l),b/(b/l)));</span><br><span class=\"line\">        res+=(s[r]-s[l<span class=\"number\">-1</span>])*(a/l)*(b/l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout&lt;&lt;res&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、矩阵快速幂：\">五、矩阵快速幂：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//矩阵运算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mul</span><span class=\"params\">(<span class=\"type\">int</span> a[][N],<span class=\"type\">int</span> b[][N],<span class=\"type\">int</span> c[][N])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t[N][N]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;N;j++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;N;k++)</span><br><span class=\"line\">                t[i][j]=(t[i][j]+a[i][k]*b[k][j])%m;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(c,t,<span class=\"keyword\">sizeof</span> t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//构造系数矩阵</span></span><br><span class=\"line\">    <span class=\"type\">int</span> f1[N][N]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[N][N]=&#123;</span><br><span class=\"line\">         &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">         &#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">         &#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//快速幂</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k%<span class=\"number\">2</span>) <span class=\"built_in\">mul</span>(f1,a,f1);</span><br><span class=\"line\">        <span class=\"built_in\">mul</span>(a,a,a);</span><br><span class=\"line\">        k&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;f1[<span class=\"number\">2</span>]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、向量叉积应用：\">六、向量叉积应用：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义点结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x,y;</span><br><span class=\"line\">    <span class=\"type\">double</span> angle;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"type\">const</span> point &amp;t)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> angle&lt;t.angle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求叉积</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">cross</span><span class=\"params\">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判定线线的位置关系</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(Point a,Point b,Point c,Point d)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">cross</span>(a,b,c)*<span class=\"built_in\">cross</span>(a,b,d)&lt;=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求两直线的交点</span></span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">getNode</span><span class=\"params\">(Point a,Point u,Point b,Point v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> t=(a-b)*v/(v*u);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+u*t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求三角形面积</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">get_s</span><span class=\"params\">(Point a,Point b,Point c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">cross</span>(a,b,c)/<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//极角排序（atan2函数）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">atan2cmp</span><span class=\"params\">(Point a,Point b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.angle==b.angle) <span class=\"keyword\">return</span> a.x&lt;b.x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> a.angle&lt;a.angle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//极角排序（叉积）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">crosscmp</span><span class=\"params\">(Point a,Point b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> f=<span class=\"built_in\">cross</span>(p[pos],a,b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> a.x-p[pos].x&lt;b.x-p[pos].x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(f&gt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、凸包-旋转卡壳：\">七、凸包+旋转卡壳：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">P</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">&#125;p[N],s[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求叉积</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">cross</span><span class=\"params\">(P a,P b,P c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求两点距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dis</span><span class=\"params\">(P a,P b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(P a,P b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x==b.x) <span class=\"keyword\">return</span> a.y&lt;b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x&lt;b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求凸包的Andrew算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Andrew</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p+<span class=\"number\">1</span>,p+n+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//求上凸包</span></span><br><span class=\"line\">    <span class=\"type\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(top&gt;<span class=\"number\">1</span>&amp;&amp;<span class=\"built_in\">cross</span>(s[top<span class=\"number\">-1</span>],s[top],p[i])&lt;=<span class=\"number\">0</span>) top--</span><br><span class=\"line\">        s[++top]=p[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//求下凸包</span></span><br><span class=\"line\">    <span class=\"type\">int</span> t=top;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">1</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(top&gt;t&amp;&amp;<span class=\"built_in\">cross</span>(s[top<span class=\"number\">-1</span>],s[top],p[i])&lt;=<span class=\"number\">0</span>) top--;</span><br><span class=\"line\">        s[++top]=p[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    n=top<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//旋转卡壳</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">rotating_calipers</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,j=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">cross</span>(s[i],s[i+<span class=\"number\">1</span>],s[j])&lt;<span class=\"built_in\">cross</span>(s[i],s[i+<span class=\"number\">1</span>],s[j+<span class=\"number\">1</span>])) j=j%n+<span class=\"number\">1</span>;</span><br><span class=\"line\">        res=<span class=\"built_in\">max</span>(&#123;res,<span class=\"built_in\">dis</span>(s[i],s[j]),<span class=\"built_in\">dis</span>(s[i+<span class=\"number\">1</span>],s[j])&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"八、自适应辛普森积分：\">八、自适应辛普森积分：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> l,r;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//积分函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">double</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x*x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//辛普森公式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">simpson</span><span class=\"params\">(<span class=\"type\">double</span> l,<span class=\"type\">double</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">f</span>(l)+<span class=\"built_in\">f</span>(r)+<span class=\"number\">4</span>*<span class=\"built_in\">f</span>((l+r)/<span class=\"number\">2</span>))*(r-l)/<span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自适应</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">asr</span><span class=\"params\">(<span class=\"type\">double</span> a,<span class=\"type\">double</span> b,<span class=\"type\">double</span> ans)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> m=(l+r)/<span class=\"number\">2</span>,a=<span class=\"built_in\">simpson</span>(l,m),b=<span class=\"built_in\">simpson</span>(m,r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(a+b-ans)&lt;eps) <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">asr</span>(l,m,a)+<span class=\"built_in\">asr</span>(m,r,b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、记忆化搜索求期望：\">九、记忆化搜索求期望：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;PII&gt; c[N];</span><br><span class=\"line\"><span class=\"type\">int</span> d[N],a[N];</span><br><span class=\"line\"><span class=\"type\">double</span> f[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[u]&gt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> f[u];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> f[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    f[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p:c[u])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i=p.x,j=p.y;</span><br><span class=\"line\">        f[u]+=(<span class=\"built_in\">dfs</span>(i)+j)*<span class=\"number\">1.0</span>/d[u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[u];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">slove</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u,v,w;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class=\"line\">        c[u].<span class=\"built_in\">push_back</span>(&#123;v,w&#125;);</span><br><span class=\"line\">        d[u]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2lf\\n&quot;</span>,<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十、概率dp：\">十、概率dp：</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> w,b;</span><br><span class=\"line\"><span class=\"type\">double</span> f[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;w&gt;&gt;b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=b;i++) f[<span class=\"number\">0</span>][i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=w;i++) f[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=w;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=b;j++)&#123;</span><br><span class=\"line\">            f[i][j]+=(<span class=\"type\">double</span>)i/(i+j);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">1</span>&amp;&amp;j&gt;=<span class=\"number\">2</span>) f[i][j]++(<span class=\"type\">double</span>)j/(i+j)*(j<span class=\"number\">-1</span>)/(i+j<span class=\"number\">-1</span>)*f[i<span class=\"number\">-1</span>][j<span class=\"number\">-2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&gt;=<span class=\"number\">3</span>) f[i][j]+=(<span class=\"type\">double</span>)j/(i+j)*(j<span class=\"number\">-1</span>)/(i+j<span class=\"number\">-1</span>)*(j<span class=\"number\">-2</span>)/(i+j<span class=\"number\">-2</span>)*f[i][j<span class=\"number\">-3</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.9lf\\n&quot;</span>,f[w][b]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>一、基础算法</h1>\n<h2 id=\"1-排序：\">1.排序：</h2>\n<h3 id=\"1-1-冒泡排序：\">1.1 冒泡排序：</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//冒泡排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n-i<span class=\"number\">-1</span>;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(g[j]&gt;g[j+<span class=\"number\">1</span>])</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(g[j],g[j+<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">bubble_sort</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cout&lt;&lt;g[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-选择排序\">1.2 选择排序</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//选择排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">selection_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> min=i;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(g[j]&lt;g[min])</span><br><span class=\"line\">                min=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(g[min],g[i]);</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">selection_sort</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cout&lt;&lt;g[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-插入排序\">1.3 插入排序</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertion_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res=g[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> j=i<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&gt;=<span class=\"number\">0</span>&amp;&amp;g[j]&gt;res)&#123;</span><br><span class=\"line\">            g[j+<span class=\"number\">1</span>]=g[j];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        g[j+<span class=\"number\">1</span>]=res;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">insertion_sort</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cout&lt;&lt;g[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-快速排序\">1.4 快速排序</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> q[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"type\">int</span> q[],<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> x=q[(l+r)&gt;&gt;<span class=\"number\">1</span>],i=l<span class=\"number\">-1</span>,j=r+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++; <span class=\"keyword\">while</span>(q[i]&lt;x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j--; <span class=\"keyword\">while</span>(q[j]&gt;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;j) <span class=\"built_in\">swap</span>(q[i],q[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q,l,j);</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q,j+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[i]);</span><br><span class=\"line\">\t </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-5-归并排序\">1.5 归并排序</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N =<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> q[N],tmp[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//归并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mergesort</span><span class=\"params\">(<span class=\"type\">int</span> q[],<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">mergesort</span>(q,l,mid),<span class=\"built_in\">mergesort</span>(q,mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"number\">0</span>,i=l,j=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i]&lt;=q[j]) tmp[k++]=q[i++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  tmp[k++]=q[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=mid) tmp[k++]= q[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;=r) tmp[k++]=q[j++];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=l,j=<span class=\"number\">0</span>;i&lt;=r;i++,j++) q[i]=tmp[j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++ ) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">mergesort</span>(q,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-二分\">2.二分</h2>\n<h3 id=\"2-1-整数二分\">2.1 整数二分</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> q[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(q[mid]&gt;=x) r=mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[l]!=x) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1 -1\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,l);</span><br><span class=\"line\">            <span class=\"type\">int</span> l=<span class=\"number\">0</span>,r=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;r)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> mid=l+r+<span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(q[mid]&lt;=x) l=mid;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> r=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-小数二分\">2.2 小数二分</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">double</span> l=<span class=\"number\">-10000</span>,r=<span class=\"number\">10000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-l&gt;<span class=\"number\">1e-8</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mid*mid*mid&gt;=n) r=mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  l=mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.6lf&quot;</span>,l);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-前缀和\">3.前缀和</h2>\n<h3 id=\"3-1-线性前缀和\">3.1 线性前缀和</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N],s[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;g[i],s[i]=s[i<span class=\"number\">-1</span>]+g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l,r;</span><br><span class=\"line\">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">        cout&lt;&lt;s[r]-s[l<span class=\"number\">-1</span>]&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-二维前缀和\">3.2 二维前缀和</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m,p;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N],s[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;g[i][j];</span><br><span class=\"line\">            s[i][j]=s[i][j<span class=\"number\">-1</span>]+s[i<span class=\"number\">-1</span>][j]-s[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+g[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x1,x2,y1,y2;</span><br><span class=\"line\">        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class=\"line\">        LL sum=s[x2][y2]-s[x1<span class=\"number\">-1</span>][y2]-s[x2][y1<span class=\"number\">-1</span>]+s[x1<span class=\"number\">-1</span>][y1<span class=\"number\">-1</span>];</span><br><span class=\"line\">        cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"4-差分\">4.差分</h2>\n<h3 id=\"4-1-线性差分\">4.1 线性差分</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        b[i]=a[i]-a[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l,r,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;c);</span><br><span class=\"line\">        b[l]+=c;</span><br><span class=\"line\">        b[r+<span class=\"number\">1</span>]-=c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        a[i]=a[i<span class=\"number\">-1</span>]+b[i];</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-二维差分\">4.2 二维差分</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m,q;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N][N],b[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//差分函数 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> x1,<span class=\"type\">int</span> y1,<span class=\"type\">int</span> x2,<span class=\"type\">int</span> y2,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    b[x1][y1]+=c;</span><br><span class=\"line\">    b[x2+<span class=\"number\">1</span>][y1]-=c;</span><br><span class=\"line\">    b[x1][y2+<span class=\"number\">1</span>]-=c;</span><br><span class=\"line\">    b[x2+<span class=\"number\">1</span>][y2+<span class=\"number\">1</span>]+=c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//预处理出差分 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class=\"line\">            <span class=\"built_in\">insert</span>(i,j,i,j,a[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//查询时操作 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x1,y1,x2,y2,c;</span><br><span class=\"line\">        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;</span><br><span class=\"line\">        <span class=\"built_in\">insert</span>(x1,y1,x2,y2,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//差分还原后输出 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            b[i][j]+=b[i<span class=\"number\">-1</span>][j]+b[i][j<span class=\"number\">-1</span>]-b[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,b[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-双指针\">5.双指针</h2>\n<h3 id=\"5-1-头尾指针\">5.1 头尾指针</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span>  a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,x;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) cin&gt;&gt;b[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> i,j=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&gt;=<span class=\"number\">0</span>&amp;&amp;a[i]+b[j]&gt;x) j--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i]+b[j]==x) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;i&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt;j&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-头双指针\">5.2 头双指针</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N],b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) cin&gt;&gt;b[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[j]==b[i]) j++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==n)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-快慢指针（链表）\">5.3 快慢指针（链表）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListNode</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> val;</span><br><span class=\"line\">     ListNode next;</span><br><span class=\"line\">     <span class=\"built_in\">ListNode</span>() &#123;&#125;</span><br><span class=\"line\">     <span class=\"built_in\">ListNode</span>(<span class=\"type\">int</span> val) &#123; <span class=\"keyword\">this</span>.val = val; &#125;</span><br><span class=\"line\">     <span class=\"built_in\">ListNode</span>(<span class=\"type\">int</span> val, ListNode next) &#123; <span class=\"keyword\">this</span>.val = val; <span class=\"keyword\">this</span>.next = next; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">middleNode</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode p = head, q = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q != null &amp;&amp; q.next != null)&#123;</span><br><span class=\"line\">            q = q.next.next;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-贪心\">6.贪心</h2>\n<h3 id=\"6-1-区间选点\">6.1 区间选点</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Range</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r;</span><br><span class=\"line\">&#125;range[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Range a,Range b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.r==b.r) <span class=\"keyword\">return</span> a.l&lt;b.r;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.r&lt;b.r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;range[i].l&gt;&gt;range[i].r;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(range,range+n,cmp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">1</span>,res=range[<span class=\"number\">0</span>].r;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res&lt;range[i].l)&#123;</span><br><span class=\"line\">            res=range[i].r;</span><br><span class=\"line\">            sum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-区间分组\">6.2 区间分组</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue &lt;<span class=\"type\">int</span>,vector&lt;<span class=\"type\">int</span>&gt;,greater&lt;<span class=\"type\">int</span>&gt; &gt; heap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Range</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r;</span><br><span class=\"line\">&#125;range[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Range a,Range b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.l&lt;b.l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;range[i].l&gt;&gt;range[i].r;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(range,range+n,cmp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        Range r=range[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(heap.<span class=\"built_in\">empty</span>()||heap.<span class=\"built_in\">top</span>()&gt;=r.l) heap.<span class=\"built_in\">push</span>(r.r);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            heap.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            heap.<span class=\"built_in\">push</span>(r.r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;heap.<span class=\"built_in\">size</span>()&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-3-哈夫曼树\">6.3 哈夫曼树</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>,vector&lt;<span class=\"type\">int</span>&gt;,greater&lt;<span class=\"type\">int</span>&gt; &gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,p;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;p);</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        x=q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        y=q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(x+y);</span><br><span class=\"line\">        sum+=x+y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-选址问题\">6.4 选址问题</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(g,g+n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    LL sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) sum+=<span class=\"built_in\">abs</span>(g[i]-g[n/<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-5-推公式\">6.5 推公式</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">LL ct[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">P</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y,z;</span><br><span class=\"line\">&#125;g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(P a,P b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.z&lt;b.z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        g[i].x=a,g[i].y=b,g[i].z=a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(g+<span class=\"number\">1</span>,g+n+<span class=\"number\">1</span>,cmp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) ct[i]=ct[i<span class=\"number\">-1</span>]+g[i].x;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    LL sum=<span class=\"number\">-2e17</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        LL t=ct[i<span class=\"number\">-1</span>]-g[i].y;</span><br><span class=\"line\">        sum=<span class=\"built_in\">max</span>(sum,t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-位运算\">7.位运算</h2>\n<h3 id=\"7-1-朴素版\">7.1 朴素版</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>) sum++;</span><br><span class=\"line\">        n&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,<span class=\"built_in\">check</span>(a[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-x-x\">7.2 x&amp;-x</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x,s=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=x;i;i-=i&amp;-i) s++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1>二、数据结构</h1>\n<h2 id=\"1-线性表\">1.线性表</h2>\n<h3 id=\"1-1-数组\">1.1 数组</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cout&lt;&lt;g[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-哈希表\">1.2 哈希表</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">3</span>,null=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k=(x%N+N)%N;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h[k]!=null&amp;&amp;h[k]!=x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==N) k=<span class=\"number\">0</span>;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,null);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d&quot;</span>,&amp;op,&amp;x);</span><br><span class=\"line\">        <span class=\"type\">int</span> k=<span class=\"built_in\">find</span>(x); </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;I&#x27;</span>) h[k]=x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(h[k]==null) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-链表\">2.链表</h2>\n<h3 id=\"说明：C-里有三种链表的应用方法\">说明：C++里有三种链表的应用方法</h3>\n<ul>\n<li>\n<h4 id=\"1-指针（最基本的链表）\">1.指针（最基本的链表）</h4>\n</li>\n<li>\n<h4 id=\"2-结构体（链表的一个变种）\">2.结构体（链表的一个变种）</h4>\n</li>\n<li>\n<h4 id=\"3-数组模拟（运行速度快，理解起来有点绕）\">3.数组模拟（运行速度快，理解起来有点绕）</h4>\n</li>\n</ul>\n<h3 id=\"这里主要展示数组模拟\">这里主要展示数组模拟~</h3>\n<h3 id=\"2-1-单链表\">2.1 单链表</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//head 表示头结点的下标 </span></span><br><span class=\"line\"><span class=\"comment\">//e[i] 表示节点i的值 </span></span><br><span class=\"line\"><span class=\"comment\">//ne[i] 表示节点i的next指针是多少 </span></span><br><span class=\"line\"><span class=\"comment\">//idx 存储当前已经用到了哪个点 </span></span><br><span class=\"line\"><span class=\"type\">int</span> head,e[N],ne[N],idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    head=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    idx=<span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在头节点后面插入节点 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_to_head</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=x;</span><br><span class=\"line\">    ne[idx]=head;</span><br><span class=\"line\">    head=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在k节点后面插入节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=x;</span><br><span class=\"line\">    ne[idx]=ne[k];</span><br><span class=\"line\">    ne[k]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除节点 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ne[k]=ne[ne[k]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    cin&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k,x;</span><br><span class=\"line\">        <span class=\"type\">char</span> op;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        cin&gt;&gt;op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op==<span class=\"string\">&#x27;H&#x27;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add_to_head</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"string\">&#x27;D&#x27;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!k)  head=ne[head];</span><br><span class=\"line\">            <span class=\"built_in\">remove</span>(k<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cin&gt;&gt;k&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(k<span class=\"number\">-1</span>,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=head;i!=<span class=\"number\">-1</span>;i=ne[i]) </span><br><span class=\"line\">        cout&lt;&lt;e[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-双链表\">2.2 双链表</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> m;</span><br><span class=\"line\"><span class=\"type\">int</span> e[N],l[N],r[N],idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    r[<span class=\"number\">0</span>]=<span class=\"number\">1</span>,l[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    idx=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在第k个点左右插入一个点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=x;</span><br><span class=\"line\">    r[idx]=r[k],l[idx]=k;</span><br><span class=\"line\">    l[r[k]]=idx,r[k]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除第k个点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">removes</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    r[l[k]]=r[k];</span><br><span class=\"line\">    l[r[k]]=l[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;m;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        string op;</span><br><span class=\"line\">        <span class=\"type\">int</span> k,x;</span><br><span class=\"line\">        cin&gt;&gt;op;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op==<span class=\"string\">&quot;L&quot;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(<span class=\"number\">0</span>,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"string\">&quot;R&quot;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(l[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"string\">&quot;D&quot;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;k;</span><br><span class=\"line\">            <span class=\"built_in\">removes</span>(k+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"string\">&quot;IL&quot;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;k&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(l[k+<span class=\"number\">1</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cin&gt;&gt;k&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(k+<span class=\"number\">1</span>,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=r[<span class=\"number\">0</span>];i!=<span class=\"number\">1</span>;i=r[i]) </span><br><span class=\"line\">        cout&lt;&lt;e[i]&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-栈\">3.栈</h2>\n<h3 id=\"3-1-STL容器\">3.1 STL容器</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; st;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;push&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            st.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;empty&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(st.<span class=\"built_in\">size</span>()) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;query&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,st.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">        <span class=\"keyword\">else</span> st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-数组模拟\">3.2 数组模拟</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> st[N],tt=<span class=\"number\">-1</span>;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n; </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;push&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            st[++tt]=x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;empty&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tt!=<span class=\"number\">-1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;query&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,st[tt]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tt--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"4-队列\">4.队列</h2>\n<h3 id=\"4-1-STL容器\">4.1 STL容器</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;push&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;empty&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(q.<span class=\"built_in\">size</span>()) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;query&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,q.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">        <span class=\"keyword\">else</span> q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-数组模拟\">4.2 数组模拟</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N],hh=<span class=\"number\">0</span>,tt=<span class=\"number\">-1</span>;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;push&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            q[++tt]=x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;empty&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tt&lt;hh) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;YES\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NO\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s==<span class=\"string\">&quot;pop&quot;</span>) hh++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,q[hh]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-树\">5.树</h2>\n<h3 id=\"5-1-并查集\">5.1 并查集</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> fa[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[x]!=x) fa[x]=<span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d%d&quot;</span>,&amp;op,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;M&#x27;</span>) fa[<span class=\"built_in\">find</span>(a)]=<span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(a)==<span class=\"built_in\">find</span>(b)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-Trie树\">5.2 Trie树</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下标是0的点，既是根结点，又是空节点</span></span><br><span class=\"line\"><span class=\"comment\">//idx是节点，son[p][u]为指向下一个节点的指针 </span></span><br><span class=\"line\"><span class=\"type\">int</span> son[N][<span class=\"number\">26</span>],cnt[N],idx=<span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"type\">char</span> str[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> str[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;str[i];i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u=str[i]-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!son[p][u]) son[p][u]=++idx;</span><br><span class=\"line\">        p=son[p][u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cnt[p]++;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">char</span> str[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;str[i];i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u=str[i]-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!son[p][u]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        p=son[p][u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt[p];</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%s&quot;</span>,&amp;op,&amp;str);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>]==<span class=\"string\">&#x27;I&#x27;</span>) <span class=\"built_in\">insert</span>(str);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">query</span>(str));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"6-图\">6.图</h2>\n<h3 id=\"6-1-邻接矩阵\">6.1 邻接矩阵</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(g[<span class=\"number\">0</span>],g[<span class=\"number\">0</span>]+N*N,INF);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//有向图</span></span><br><span class=\"line\">        g[a][b]=<span class=\"built_in\">min</span>(g[a][b],c);</span><br><span class=\"line\">        <span class=\"comment\">//无向图</span></span><br><span class=\"line\">        g[a][b]=g[b][a]=<span class=\"built_in\">min</span>(g[a][b],c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-邻接表\">6.2 邻接表</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[N],ne[N],w[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    w[idx]=c;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">//有向图</span></span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b,c);</span><br><span class=\"line\">        <span class=\"comment\">//无向图</span></span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b,c),<span class=\"built_in\">add</span>(b,a,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"7-树状数组-线段树\">7.树状数组+线段树</h2>\n<h3 id=\"7-1-树状数组\">7.1 树状数组</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[N],c[N];</span><br><span class=\"line\">LL T,n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(LL x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x;x-=x&amp;(-x)) s+=c[x];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(LL x,LL s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x&lt;=n;x+=x&amp;(-x)) c[x]+=s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;a[i];</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(i,a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        LL t,x,y;</span><br><span class=\"line\">        cin&gt;&gt;t&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t) <span class=\"built_in\">add</span>(x,y);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"built_in\">query</span>(y)-<span class=\"built_in\">query</span>(x<span class=\"number\">-1</span>)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-线段树\">7.2 线段树</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[N],c[N];</span><br><span class=\"line\">LL T,n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r;</span><br><span class=\"line\">    <span class=\"type\">int</span> v;  <span class=\"comment\">// 区间[l, r]中的最大值</span></span><br><span class=\"line\">&#125;tr[N*<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> u)</span>  <span class=\"comment\">// 由子节点的信息，来计算父节点的信息</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tr[u].v=<span class=\"built_in\">max</span>(tr[u&lt;&lt;<span class=\"number\">1</span>].v,tr[u&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tr[u]=&#123;l,r&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid=l+r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(u&lt;&lt;<span class=\"number\">1</span>,l,mid), <span class=\"built_in\">build</span>(u&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tr[u].l&gt;=l &amp;&amp;tr[u].r&lt;=r) <span class=\"keyword\">return</span> tr[u].v;   <span class=\"comment\">// 树中节点，已经被完全包含在[l,r]中了</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> v=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&lt;=mid) v=<span class=\"built_in\">query</span>(u&lt;&lt;<span class=\"number\">1</span>,l,r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&gt;mid) v=<span class=\"built_in\">max</span>(v,<span class=\"built_in\">query</span>(u&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,l,r));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> x,<span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tr[u].l==x&amp;&amp;tr[u].r== x) tr[u].v=v;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&lt;=mid) <span class=\"built_in\">modify</span>(u&lt;&lt;<span class=\"number\">1</span>,x,v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(u&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,x,v);</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=<span class=\"number\">0</span>,last=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;p);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d&quot;</span>,op,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*op==<span class=\"string\">&#x27;Q&#x27;</span>)&#123;</span><br><span class=\"line\">            last=<span class=\"built_in\">query</span>(<span class=\"number\">1</span>,n-x+<span class=\"number\">1</span>,n);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,last);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,((LL)last+x)%p);</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-C-STL容器及函数（只列出较为常用的）\">8.C++ STL容器及函数（只列出较为常用的）</h2>\n<h3 id=\"8-1-常用函数\">8.1 常用函数*</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span>        <span class=\"comment\">//头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.max()、min()、abs()函数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"comment\">//求最大值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Max = <span class=\"built_in\">max</span>(a,b);</span><br><span class=\"line\">    <span class=\"comment\">//求最小值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Min = <span class=\"built_in\">min</span>(a,b);</span><br><span class=\"line\">    <span class=\"comment\">//求绝对值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> Abs = <span class=\"built_in\">abs</span>(<span class=\"number\">-3</span>);</span><br><span class=\"line\">    cout &lt;&lt; Max &lt;&lt; Min &lt;&lt; Abs;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2.交换函数：swap()</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//3.排序函数：sort()</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">55</span>,<span class=\"number\">44</span>,<span class=\"number\">33</span>,<span class=\"number\">22</span>,<span class=\"number\">11</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a,a+<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//4.填充函数：fill() (很多人都用memset，但是我就喜欢fill)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">11</span>,<span class=\"number\">33</span>,<span class=\"number\">22</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(a+<span class=\"number\">3</span>,a+<span class=\"number\">5</span>,<span class=\"number\">9999</span>);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//5.翻转函数：reverse()</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">11</span>,<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">44</span>,<span class=\"number\">55</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a,a+<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) </span><br><span class=\"line\">        cout &lt;&lt; a[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-2-vector（动态数组）\">8.2 vector（动态数组）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span>           <span class=\"comment\">//头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"comment\">//方式一：初始化一维可变长数组</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; c; <span class=\"comment\">//定义了一个名为num的存int数据的一维数组</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">double</span>&gt; c;<span class=\"comment\">//定义了一个名为num的存double数据的一维数组</span></span><br><span class=\"line\">vector&lt;node&gt; c;<span class=\"comment\">//node是结构体类型</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//方式二：初始化二维可变长数组</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; c[<span class=\"number\">5</span>];<span class=\"comment\">//定义可变长二维数组</span></span><br><span class=\"line\"><span class=\"comment\">//注意：行是不可变的（只有5行），而列可变可以在指定行添加元素</span></span><br><span class=\"line\"><span class=\"comment\">//第一维固定长度为5，第二维长度可以改变</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//方式三:初始化二维均可变长数组</span></span><br><span class=\"line\">vector&lt;vectot&lt;<span class=\"type\">int</span>&gt; &gt; c;<span class=\"comment\">//定义一个行和列均可变的二维数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//访问</span></span><br><span class=\"line\">    <span class=\"comment\">//方式一：单个访问，假设num数组中已经有了5个元素</span></span><br><span class=\"line\">    cout&lt;&lt;c[<span class=\"number\">4</span>]&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;  <span class=\"comment\">//输出第五个数据</span></span><br><span class=\"line\">    <span class=\"comment\">//一二维可变数组和普通数组的访问方法一样</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//方式二:遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;c.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        cout&lt;&lt;c[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//方式三：智能指针</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : c)</span><br><span class=\"line\">        cout&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">相关方法函数如下：c指定为数组名称</span><br><span class=\"line\"></span><br><span class=\"line\">代码\t含义</span><br><span class=\"line\">c.<span class=\"built_in\">front</span>()\t返回第一个数据</span><br><span class=\"line\">c.<span class=\"built_in\">back</span>()\t返回最后一个数据</span><br><span class=\"line\">c.<span class=\"built_in\">push_back</span>(element)\t在尾部加一个数据 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">c.<span class=\"built_in\">pop_back</span>()\t删除最后一个数据 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">c.<span class=\"built_in\">size</span>()\t返回实际数据个数（<span class=\"type\">unsigned</span>类型） <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">c.<span class=\"built_in\">clear</span>()\t清除元素个数 <span class=\"built_in\">O</span>(N),N为元素个数</span><br><span class=\"line\">c.<span class=\"built_in\">resize</span>(n,v)\t改变数组大小为n,n个空间数值赋为v，如果没有默认赋值为<span class=\"number\">0</span></span><br><span class=\"line\">c.<span class=\"built_in\">insert</span>(it,x)\t</span><br><span class=\"line\">向任意迭代器it插入一个元素<span class=\"function\">x <span class=\"title\">O</span><span class=\"params\">(N)</span>，</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">例：c.<span class=\"title\">insert</span><span class=\"params\">(c.begin()+<span class=\"number\">2</span>,<span class=\"number\">-1</span>)</span> 将-1插入c[2]的位置</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">c.<span class=\"title\">erase</span><span class=\"params\">(first,last)</span>\t删除[first,last)的所有元素</span></span><br><span class=\"line\"><span class=\"function\">c.<span class=\"title\">begin</span><span class=\"params\">()</span>\t返回首元素的迭代器（通俗来说就是地址）</span></span><br><span class=\"line\"><span class=\"function\">c.<span class=\"title\">end</span><span class=\"params\">()</span>\t返回最后一个元素后一个位置的迭代器（地址）</span></span><br><span class=\"line\"><span class=\"function\">c.<span class=\"title\">empty</span><span class=\"params\">()</span>\t判断是否为空，为空返回真，反之返回假</span></span><br><span class=\"line\"><span class=\"function\">注意： <span class=\"title\">end</span><span class=\"params\">()</span>返回的是最后一个元素的后一个位置的地址，不是最后一个元素的</span></span><br><span class=\"line\"><span class=\"function\">---</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-3-stack（栈）\">8.3 stack（栈）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span>           <span class=\"comment\">//头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; st;</span><br><span class=\"line\">stack&lt;string&gt; st;</span><br><span class=\"line\">stack&lt;node&gt; st;<span class=\"comment\">//node是结构体类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//访问函数</span></span><br><span class=\"line\">    <span class=\"built_in\">push</span>()\t压栈，增加元素 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">pop</span>()\t移除栈顶元素 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">top</span>()\t取得栈顶元素（但不删除）<span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">empty</span>()\t检测栈内是否为空，空为真 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">size</span>()\t返回stack内元素的个数 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-4-queue（队列）\">8.4 queue（队列）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span>           <span class=\"comment\">//头文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通队列初始化</span></span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">queue&lt;string&gt; q;</span><br><span class=\"line\">queue&lt;node&gt; q;<span class=\"comment\">//node是结构体类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优先队列初始化定义</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\"><span class=\"comment\">//优先队列设置优先级</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt; &gt; q;</span><br><span class=\"line\"><span class=\"comment\">//最后两个&gt;之间要有空格，旧版c++编译器会把&quot;&gt;&gt;&quot;当成右移符！！！</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//普通队列访问函数</span></span><br><span class=\"line\">    <span class=\"built_in\">front</span>()\t返回队首元素 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">back</span>()\t返回队尾元素 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">push</span>()\t尾部添加一个元素副本 进队<span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">pop</span>()\t删除第一个元素 出队 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">size</span>()\t返回队列中元素个数，返回值类型<span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title\">O</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">empty</span><span class=\"params\">()</span>\t判断是否为空，队列为空，返回<span class=\"literal\">true</span> <span class=\"title\">O</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">//优先队列访问函数</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">top</span><span class=\"params\">()</span>\t访问队首元素</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">push</span><span class=\"params\">()</span>\t入队</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">pop</span><span class=\"params\">()</span>\t堆顶（队首）元素出队</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">size</span><span class=\"params\">()</span>\t队列元素个数</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">empty</span><span class=\"params\">()</span>\t是否为空</span></span><br><span class=\"line\"><span class=\"function\">    注意没有<span class=\"title\">clear</span><span class=\"params\">()</span>！\t不提供该方法</span></span><br><span class=\"line\"><span class=\"function\">    优先队列只能通过<span class=\"title\">top</span><span class=\"params\">()</span>访问队首元素（优先级最高的元素）</span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">//注：栈的取第一个元素为top();而普通队列的为front();优先队列为top();</span></span></span><br><span class=\"line\"><span class=\"function\">        </span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">return</span> 0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-5-pair\">8.5 pair</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">pair&lt;string,<span class=\"type\">int</span>&gt;<span class=\"built_in\">p</span>(<span class=\"string\">&quot;wangyaqi&quot;</span>,<span class=\"number\">1</span>);<span class=\"comment\">//带初始值的</span></span><br><span class=\"line\">pair&lt;string,<span class=\"type\">int</span>&gt;p;<span class=\"comment\">//不带初始值的</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//访问函数</span></span><br><span class=\"line\">    pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;p[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//和结构体类似，first代表第一个元素，second代表第二个元素</span></span><br><span class=\"line\">        cout&lt;&lt;p[i].first&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;p[i].second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-6-string字符串\">8.6 string字符串</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span>       <span class=\"comment\">//头文件（可写可不写，iostream里自带）</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\">string s;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">size</span>();i++) </span><br><span class=\"line\">        cout&lt;&lt;s[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//拼接</span></span><br><span class=\"line\">    string s1;</span><br><span class=\"line\">    string s2;</span><br><span class=\"line\">    s1 = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    s2 = <span class=\"string\">&quot;456&quot;</span>;</span><br><span class=\"line\">    string s = s1 + s2;</span><br><span class=\"line\">    cout&lt;&lt;s;   <span class=\"comment\">//123456</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1>三、搜索和图论</h1>\n<h2 id=\"1-DFS深度优先搜索\">1.DFS深度优先搜索</h2>\n<h3 id=\"1-1-基础深搜\">1.1 基础深搜</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> path[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,path[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i])&#123;</span><br><span class=\"line\">            path[u]=i;</span><br><span class=\"line\">            st[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(u+<span class=\"number\">1</span>);</span><br><span class=\"line\">            st[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> col[N],dg[N],udg[N];</span><br><span class=\"line\"><span class=\"type\">char</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">puts</span>(g[i]);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!col[i]&amp;&amp;!dg[u+i]&amp;&amp;!udg[n-u+i])&#123;</span><br><span class=\"line\">            g[u][i]=<span class=\"string\">&#x27;Q&#x27;</span>;</span><br><span class=\"line\">            col[i]=dg[u+i]=udg[n-u+i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(u+<span class=\"number\">1</span>);</span><br><span class=\"line\">            col[i]=dg[u+i]=udg[n-u+i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            g[u][i]=<span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">            g[i][j]=<span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-图的深搜\">1.2 图的深搜</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[<span class=\"number\">2</span>*N],ne[<span class=\"number\">2</span>*N],idx;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> ans=N; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表存储图 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以u为根的子树中点的数量 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">1</span>,res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//sum存当前子树节点节点总个数 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[u];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[j])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> s=<span class=\"built_in\">dfs</span>(j);     </span><br><span class=\"line\">            <span class=\"comment\">//搜索子树节点个数并累加到s中 </span></span><br><span class=\"line\">            res=<span class=\"built_in\">max</span>(res,s);</span><br><span class=\"line\">            <span class=\"comment\">//更新res值 </span></span><br><span class=\"line\">            sum+=s;</span><br><span class=\"line\">            <span class=\"comment\">//累加节点u的子树节点 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//res存当前子树节点最大值 </span></span><br><span class=\"line\">    res=<span class=\"built_in\">max</span>(res,n-sum);</span><br><span class=\"line\">    <span class=\"comment\">//ans存所有节点的res最小值（重心） </span></span><br><span class=\"line\">    ans=<span class=\"built_in\">min</span>(ans,res);</span><br><span class=\"line\">    <span class=\"comment\">//返回子树节点总数 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b),<span class=\"built_in\">add</span>(b,a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"2-BFS广度优先搜索\">2.BFS广度优先搜索</h2>\n<h3 id=\"2-1-基础搜索\">2.1 基础搜索</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N],d[N][N];</span><br><span class=\"line\">PII q[N*N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> s[<span class=\"number\">2</span>][<span class=\"number\">4</span>]=&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> hh=<span class=\"number\">0</span>,tt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    q[<span class=\"number\">0</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(d[<span class=\"number\">0</span>],d[<span class=\"number\">0</span>]+N*N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    d[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(hh&lt;=tt)&#123; </span><br><span class=\"line\">        PII t=q[hh++];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x=t.first+s[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">            <span class=\"type\">int</span> y=t.second+s[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class=\"number\">0</span>&amp;&amp;y&lt;m&amp;&amp;g[x][y]==<span class=\"number\">0</span>&amp;&amp;d[x][y]==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                d[x][y]=d[t.first][t.second]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q[++tt]=&#123;x,y&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[n<span class=\"number\">-1</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)</span><br><span class=\"line\">            cin&gt;&gt;g[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"built_in\">bfs</span>()&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-图的广搜\">2.2 图的广搜</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[N],ne[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N],d[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表存储图 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> hh=<span class=\"number\">0</span>,tt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(d,d+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    q[<span class=\"number\">0</span>]=<span class=\"number\">1</span>,d[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//数组q模拟队列 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(hh&lt;=tt)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=q[hh++];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[t];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[j]==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                d[j]=d[t]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q[++tt]=j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//d[n]记录路径长度+判断</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"comment\">//fill填充h数组</span></span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"built_in\">bfs</span>()&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-有向图拓扑排序\">2.3 有向图拓扑排序</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[N],ne[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N],d[N];   <span class=\"comment\">//d数组存储节点入度 </span></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表存储图（数组模拟单链表） </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拓扑排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">topsort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> hh=<span class=\"number\">0</span>,tt=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//把入度为0的所有节点加进队列 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!d[i]) q[++tt]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//数组模拟队列 </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(hh&lt;=tt)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=q[hh++];</span><br><span class=\"line\">        <span class=\"comment\">//遍历图 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[t];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=e[i]; </span><br><span class=\"line\">            d[j]--;    <span class=\"comment\">//j节点入度-1 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!d[j]) q[++tt]=j;</span><br><span class=\"line\">            <span class=\"comment\">//如果节点入度为0，则加入队列 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否遍历完成 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tt==n<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b);</span><br><span class=\"line\">        d[b]++;    <span class=\"comment\">//节点入度++             </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//遍历队列即为序列 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">topsort</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,q[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"3-最短路径算法\">3.最短路径算法</h2>\n<h3 id=\"3-1-朴素Dijkstra最短路（不存在负权边）\">3.1 朴素Dijkstra最短路（不存在负权边）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> dist[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dist,dist+N,INF);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!st[j]&amp;&amp;(t==<span class=\"number\">-1</span>||dist[t]&gt;dist[j]))</span><br><span class=\"line\">                t=j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            dist[j]=<span class=\"built_in\">min</span>(dist[j],dist[t]+g[t][j]);</span><br><span class=\"line\">        st[t]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(g[<span class=\"number\">0</span>],g[<span class=\"number\">0</span>]+N*N,INF);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">        g[a][b]=<span class=\"built_in\">min</span>(g[a][b],c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"built_in\">dijkstra</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t==INF) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dist[n]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-堆优化Dijkstra最短路\">3.2 堆优化Dijkstra最短路</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],w[N],e[N],ne[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> dist[N],n,m;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    w[idx]=c;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dist,dist+N,INF);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt; &gt; heap;</span><br><span class=\"line\">    heap.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(heap.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">        PII t=heap.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        heap.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"type\">int</span> ver=t.second,distance=t.first;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st[ver]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        st[ver]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[ver];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[j]&gt;distance+w[i])&#123;</span><br><span class=\"line\">                dist[j]=distance+w[i];</span><br><span class=\"line\">                heap.<span class=\"built_in\">push</span>(&#123;dist[j],j&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist[n]==INF) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"built_in\">dijkstra</span>());</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-bellman-ford最短路（有边数限制）\">3.3 bellman-ford最短路（有边数限制）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,M=<span class=\"number\">10010</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> dist[N],backup[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,w;</span><br><span class=\"line\">&#125;edges[M];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bellman_ford</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dist,dist+N,INF);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(backup,dist,<span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a=edges[j].a,b=edges[j].b,w=edges[j].w;</span><br><span class=\"line\">            dist[b]=<span class=\"built_in\">min</span>(dist[b],backup[a]+w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;w);</span><br><span class=\"line\">        edges[i]=&#123;a,b,w&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">bellman_ford</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist[n]&gt;INF/<span class=\"number\">2</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dist[n]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-spfa最短路（存在负权边）\">3.4 spfa最短路（存在负权边）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[N],ne[N],w[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> dist[N],n,m;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    w[idx]=c;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dist,dist+N,INF);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    st[<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t=q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        st[t]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[t];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[j]&gt;dist[t]+w[i])&#123;</span><br><span class=\"line\">                dist[j]=dist[t]+w[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!st[j])&#123;</span><br><span class=\"line\">                    q.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">                    st[j]=<span class=\"literal\">true</span>;\t</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">spfa</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist[n]==INF) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dist[n]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"3-5-Floyd最短路（多源）\">3.5 Floyd最短路（多源）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> p=<span class=\"number\">1</span>;p&lt;=n;p++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">                g[i][j]=<span class=\"built_in\">min</span>(g[i][j],g[i][p]+g[p][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(g[<span class=\"number\">0</span>],g[<span class=\"number\">0</span>]+N*N,INF);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) g[i][i]=<span class=\"number\">0</span>; </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">        g[a][b]=<span class=\"built_in\">min</span>(g[a][b],c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">floyd</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(g[a][b]&gt;=<span class=\"number\">1e6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,g[a][b]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"4-最小生成树\">4.最小生成树</h2>\n<h3 id=\"4-1-Prim算法\">4.1 Prim算法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,INF=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N],dist[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">prim</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化dist数组 </span></span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dist,dist+N,INF);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到距离集合最小权的边并赋予t </span></span><br><span class=\"line\">        <span class=\"type\">int</span> t=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!st[j]&amp;&amp;(t==<span class=\"number\">-1</span>||dist[t]&gt;dist[j]))</span><br><span class=\"line\">                t=j;</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"comment\">//把t加到集合里 </span></span><br><span class=\"line\">        st[t]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//i!=0，把边加到res里 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果最小值为INF，则无边到集合中 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dist[t]==INF) <span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">            res+=dist[t];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//更新节点到集合的最短距离 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            dist[j]=<span class=\"built_in\">min</span>(dist[j],g[t][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(g[<span class=\"number\">0</span>],g[<span class=\"number\">0</span>]+N*N,INF);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">        g[a][b]=g[b][a]=<span class=\"built_in\">min</span>(g[a][b],c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"built_in\">prim</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t==INF) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,t);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-Kruskal算法\">4.2 Kruskal算法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">2e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b,w;</span><br><span class=\"line\">&#125;edges[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Edge a,Edge b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.w&lt;b.w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p[x]!=x) p[x]=<span class=\"built_in\">find</span>(p[x]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,w;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;w);</span><br><span class=\"line\">        edges[i]=&#123;a,b,w&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(edges,edges+m,cmp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a=edges[i].a,b=edges[i].b,w=edges[i].w;</span><br><span class=\"line\">        a=<span class=\"built_in\">find</span>(a),b=<span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a!=b)&#123;</span><br><span class=\"line\">            p[a]=b;</span><br><span class=\"line\">            sum+=w;</span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans&lt;n<span class=\"number\">-1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,sum);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-二分图\">5.二分图</h2>\n<h3 id=\"5-1-染色法判定\">5.1 染色法判定</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>,M=<span class=\"number\">2</span>*N;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[M],ne[M],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> color[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    color[u]=c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[u];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!color[j]&amp;&amp;!<span class=\"built_in\">dfs</span>(j,<span class=\"number\">3</span>-c)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(color[j]==c) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b),<span class=\"built_in\">add</span>(b,a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!color[i]&amp;&amp;!<span class=\"built_in\">dfs</span>(i,<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">            flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-匈牙利算法匹配\">5.2 匈牙利算法匹配</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">510</span>,M=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[M],ne[M],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> match[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n1,n2,m;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[x];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[j])&#123;</span><br><span class=\"line\">            st[j]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!match[j]||<span class=\"built_in\">find</span>(match[j]))&#123;</span><br><span class=\"line\">                match[j]=x;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>,&amp;n1,&amp;n2,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a,b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n1;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">fill</span>(st,st+N,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(i)) res++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,res);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<hr>\n<h1>四、数论</h1>\n<h2 id=\"1-质数（素数）\">1.质数（素数）</h2>\n<h3 id=\"1-1-试除法求质数\">1.1 试除法求质数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">prime</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=x/i;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x%i==<span class=\"number\">0</span>) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">prime</span>(x)) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-分解质因数\">1.2 分解质因数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(x%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    x/=i;</span><br><span class=\"line\">                    ans++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>,i,ans);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>,x,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-筛质数\">1.3 筛质数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_prime</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i]) cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+i;j&lt;=n;j+=i)&#123;</span><br><span class=\"line\">            st[j]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">get_prime</span>(n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,cnt);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-约数（因数）\">2. 约数（因数）</h2>\n<h3 id=\"2-1-试除法求约数\">2.1 试除法求约数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; primes;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">prime</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=x/i;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            p.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x/i!=i) p.<span class=\"built_in\">push_back</span>(x/i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>()); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        primes=<span class=\"built_in\">prime</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;primes.<span class=\"built_in\">size</span>();i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,primes[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-约数个数\">2.2 约数个数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unordered_map&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; primes;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(x%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                x/=i;</span><br><span class=\"line\">                primes[i]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>)  primes[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> t:primes) ans=ans*(t.second+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-约数之和\">2.3 约数之和</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unordered_map&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; primes;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        <span class=\"comment\">//试除法判断约数并累加 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(x%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                x/=i;</span><br><span class=\"line\">                primes[i]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>)  primes[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> t:primes)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//t遍历哈希primes</span></span><br><span class=\"line\">        <span class=\"type\">int</span> p=t.first,s=t.second;</span><br><span class=\"line\">        <span class=\"comment\">//p为n的第k个约数，s为第k个约数的个数</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//求(1+p1^1+p1^2+...+p1^s);</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(s--) sum=(sum*p+<span class=\"number\">1</span>)%mod;</span><br><span class=\"line\">        <span class=\"comment\">//求(1+p2^1+...+p1^s)*(1+p2^1+...+p2^s)*...*(1+pk^1+...+pk^s);</span></span><br><span class=\"line\">        ans=ans*sum%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-大整数运算\">3.大整数运算</h2>\n<h3 id=\"3-1-加法\">3.1 加法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; A,B,C;</span><br><span class=\"line\">string a,b;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">add</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.<span class=\"built_in\">size</span>()&lt;B.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> <span class=\"built_in\">add</span>(B,A);</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>()||i&lt;B.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;A.<span class=\"built_in\">size</span>()) t+=A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;B.<span class=\"built_in\">size</span>()) t+=B[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) C.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=a.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=b.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) B.<span class=\"built_in\">push_back</span>(b[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    C=<span class=\"built_in\">add</span>(A,B);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-减法\">3.2 减法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; A,B,C;</span><br><span class=\"line\">string a,b;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.<span class=\"built_in\">size</span>()!=B.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> A.<span class=\"built_in\">size</span>()&gt;B.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=A.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i]!=B[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[i]&gt;B[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sub</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; c;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>,t=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        t=A[i]-t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;B.<span class=\"built_in\">size</span>()) t-=B[i];</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>((t+<span class=\"number\">10</span>)%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t&lt;<span class=\"number\">0</span>?t=<span class=\"number\">1</span>:t=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>&amp;&amp;c.<span class=\"built_in\">back</span>()==<span class=\"number\">0</span>) c.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=a.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=b.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) B.<span class=\"built_in\">push_back</span>(b[i]-<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">cmp</span>(A,B))&#123;</span><br><span class=\"line\">        C=<span class=\"built_in\">sub</span>(A,B);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        C=<span class=\"built_in\">sub</span>(B,A);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-乘法\">3.3 乘法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; A,C;</span><br><span class=\"line\">string a;</span><br><span class=\"line\"><span class=\"type\">int</span> b;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mul</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; c;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>()||t;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;A.<span class=\"built_in\">size</span>()) t+=A[i]*b;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=a.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    C=<span class=\"built_in\">mul</span>(A,b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-除法\">3.4 除法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">string a;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; A;</span><br><span class=\"line\"><span class=\"type\">int</span> B,r;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">div</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=A.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        r=r*<span class=\"number\">10</span>+A[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(r/b);</span><br><span class=\"line\">        r%=b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(C.<span class=\"built_in\">begin</span>(),C.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(C.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>&amp;&amp;C.<span class=\"built_in\">back</span>()==<span class=\"number\">0</span>) C.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;B;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=a.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) A.<span class=\"built_in\">push_back</span>(a[i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C=<span class=\"built_in\">div</span>(A,B);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) cout&lt;&lt;C[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    cout&lt;&lt;endl&lt;&lt;r&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-最大公约数（最小公倍数）\">4.最大公约数（最小公倍数）</h2>\n<h3 id=\"4-1-欧几里得算法（辗转相除法）\">4.1 欧几里得算法（辗转相除法）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b?<span class=\"built_in\">gcd</span>(b,a%b):a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">//最大公约数</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">gcd</span>(a,b));</span><br><span class=\"line\">        <span class=\"comment\">//最小公倍数</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a*<span class=\"built_in\">gcd</span>(a,b)/b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-扩展欧几里得算法\">4.2 扩展欧几里得算法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 公式ax+by=gcd(ai,bi)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> &amp;x,<span class=\"type\">int</span> &amp;y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!b)&#123;</span><br><span class=\"line\">        x=<span class=\"number\">1</span>,y=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> d=<span class=\"built_in\">exgcd</span>(b,a%b,y,x);</span><br><span class=\"line\">    y-=a/b*x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b,x,y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">exgcd</span>(a,b,x,y);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>,x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-快速幂\">5.快速幂</h2>\n<h3 id=\"5-1-基础快速幂\">5.1 基础快速幂</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">k</span><span class=\"params\">(LL a,LL b,LL mod)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) sum=sum*a%mod;</span><br><span class=\"line\">        a=a*a%mod;</span><br><span class=\"line\">        b&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        LL a,b,p;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld&quot;</span>,&amp;a,&amp;b,&amp;p);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">k</span>(a,b,p));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-快速幂求逆元\">5.2 快速幂求逆元</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">k</span><span class=\"params\">(LL a,LL b,LL mod)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) sum=sum*a%mod;</span><br><span class=\"line\">        a=a*a%mod;</span><br><span class=\"line\">        b&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        LL a,p,t;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>,&amp;a,&amp;p);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a%p) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">k</span>(a,p<span class=\"number\">-2</span>,p));</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;impossible\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-矩阵快速幂\">5.3 矩阵快速幂</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义矩阵结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Matrix</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">3</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"built_in\">Matrix</span>() <span class=\"built_in\">memset</span>(a,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"comment\">//矩阵乘法</span></span><br><span class=\"line\">    Matrix <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> Matrix &amp;b) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Matrix res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">2</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>; j&lt;=<span class=\"number\">2</span>; j++)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>; k&lt;=<span class=\"number\">2</span>; k++)</span><br><span class=\"line\">                    res.a[i][j]=res.a[i][j]+a[i][k]*b.a[k][j];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix base,ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化base,ans</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//矩阵</span></span><br><span class=\"line\">    <span class=\"comment\">//[0，1]</span></span><br><span class=\"line\">    <span class=\"comment\">//[1，1]</span></span><br><span class=\"line\">    base.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">0</span>;<span class=\"comment\">//这个11位置一定要初始化</span></span><br><span class=\"line\">    base.a[<span class=\"number\">2</span>][<span class=\"number\">2</span>]=base.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=base.a[<span class=\"number\">2</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//初始斐波那契数列f1=1,f2=1</span></span><br><span class=\"line\">    ans.a[<span class=\"number\">1</span>][<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    ans.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//快速幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//传入n次幂</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)ans=ans*base;<span class=\"comment\">//n为奇数</span></span><br><span class=\"line\">        base=base*base;</span><br><span class=\"line\">        n&gt;&gt;=<span class=\"number\">1</span>;<span class=\"comment\">// n/=2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();<span class=\"comment\">//每次初始化矩阵</span></span><br><span class=\"line\">        <span class=\"built_in\">qpow</span>(n<span class=\"number\">-2</span>);<span class=\"comment\">//快速幂优化</span></span><br><span class=\"line\">        cout&lt;&lt;ans.a[<span class=\"number\">1</span>][<span class=\"number\">2</span>]&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-组合数\">6.组合数</h2>\n<h3 id=\"6-1-普通递推\">6.1 普通递推</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">10010</span>,mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> c[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">        c[i][<span class=\"number\">1</span>]=i;</span><br><span class=\"line\">        c[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">2</span>;j&lt;=i;j++)&#123;</span><br><span class=\"line\">            c[i][j]=(c[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+c[i<span class=\"number\">-1</span>][j])%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,c[a][b]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-C-a-b-a-b-a-b-（预处理）\">6.2  C(a,b) = a!/(b-a)!*b!（预处理）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>,mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">LL f[N],inf[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">q</span><span class=\"params\">(LL a,LL k,LL p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k&amp;<span class=\"number\">1</span>) sum=(LL)sum*a%p;</span><br><span class=\"line\">        a=(LL)a*a%p;</span><br><span class=\"line\">        k&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    f[<span class=\"number\">0</span>]=inf[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">        f[i]=(LL)f[i<span class=\"number\">-1</span>]*i%mod;</span><br><span class=\"line\">        inf[i]=(LL)inf[i<span class=\"number\">-1</span>]*<span class=\"built_in\">q</span>(i,mod<span class=\"number\">-2</span>,mod)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,(LL)f[a]*inf[a-b]%mod*inf[b]%mod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-3-C-a-b-C-a-p-b-p-C-a-p-b-p-（lucas定理）\">6.3  C(a,b) = C(a%p,b%p)*C(a/p,b/p)（lucas定理）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//快速幂求逆元</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">q</span><span class=\"params\">(LL a,LL k,LL p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k&amp;<span class=\"number\">1</span>) res=(LL)res*a%p;</span><br><span class=\"line\">        a=(LL)a*a%p;</span><br><span class=\"line\">        k&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求组合数 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">c</span><span class=\"params\">(LL a,LL b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,j=a;i&lt;=b;i++,j--)&#123;</span><br><span class=\"line\">        sum=(LL)sum*j%p;</span><br><span class=\"line\">        sum=(LL)sum*<span class=\"built_in\">q</span>(i,p<span class=\"number\">-2</span>,p)%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//卢卡斯定理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lucas</span><span class=\"params\">(LL a,LL b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&lt;p&amp;&amp;b&lt;p) <span class=\"keyword\">return</span> <span class=\"built_in\">c</span>(a,b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (LL)<span class=\"built_in\">c</span>(a%p,b%p)*<span class=\"built_in\">lucas</span>(a/p,b/p)%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        LL a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">lucas</span>(a,b)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-不取模运算C-a-b\">6.4 不取模运算C(a,b)</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">5010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> primes[N],cnt;</span><br><span class=\"line\"><span class=\"type\">int</span> sum[N]; </span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线性筛法 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_primes</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;primes[j]&lt;=n/i;j++)&#123;</span><br><span class=\"line\">            st[primes[j]*i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%primes[j]==<span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求a！里p因子的个数 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        res+=n/p;</span><br><span class=\"line\">        n/=p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//高精度乘法 </span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mul</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; c;</span><br><span class=\"line\">    <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        t+=a[i]*b;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t)&#123;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t/=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">get_primes</span>(a);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cnt;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p=primes[i];</span><br><span class=\"line\">        sum[i]=<span class=\"built_in\">get</span>(a,p)-<span class=\"built_in\">get</span>(b,p)-<span class=\"built_in\">get</span>(a-b,p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; res;</span><br><span class=\"line\">    res.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;cnt;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;sum[i];j++)&#123;</span><br><span class=\"line\">            res=<span class=\"built_in\">mul</span>(res,primes[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=res.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--) </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,res[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-博弈论\">7.博弈论</h2>\n<h3 id=\"7-1-Nim博弈\">7.1 Nim博弈</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x; </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">        sum^=x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum)  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-集合-Nim博弈（sg函数）\">7.2 集合-Nim博弈（sg函数）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unordered_set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">110</span>,M=<span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,k;</span><br><span class=\"line\"><span class=\"type\">int</span> s[N],f[M];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sg</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[x]!=<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> f[x];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    unordered_set&lt;<span class=\"type\">int</span>&gt; S;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i]&lt;=x) </span><br><span class=\"line\">            S.<span class=\"built_in\">insert</span>(<span class=\"built_in\">sg</span>(x-s[i]));</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S.<span class=\"built_in\">count</span>(i))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> f[x]=i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++) cin&gt;&gt;s[i];</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(f,f+M,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a;</span><br><span class=\"line\">        cin&gt;&gt;a;</span><br><span class=\"line\">        res^=<span class=\"built_in\">sg</span>(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1>五、动态规划</h1>\n<h2 id=\"1-背包问题\">1.背包问题</h2>\n<h3 id=\"1-1-01背包\">1.1 01背包</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,V;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N],w[N],v[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;V;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=V;j&gt;=v[i];j--)</span><br><span class=\"line\">            dp[j]=<span class=\"built_in\">max</span>(dp[j],dp[j-v[i]]+w[i]);</span><br><span class=\"line\">            </span><br><span class=\"line\">    cout&lt;&lt;dp[V]&lt;&lt;endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-完全背包\">1.2 完全背包</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> v[N],w[N],dp[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=v[i];j&lt;=m;j++)</span><br><span class=\"line\">            dp[j]=<span class=\"built_in\">max</span>(dp[j],dp[j-v[i]]+w[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;dp[m]&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-多重背包\">1.3 多重背包</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> v[N],w[N],s[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i]&gt;&gt;s[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;=s[i]&amp;&amp;k*v[i]&lt;=j;k++)</span><br><span class=\"line\">                dp[i][j]=<span class=\"built_in\">max</span>(dp[i][j],dp[i<span class=\"number\">-1</span>][j-k*v[i]]+k*w[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;dp[n][m]&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-分组背包\">1.4 分组背包</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> v[N][N],w[N][N],s[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;s[i];j++) cin&gt;&gt;v[i][j]&gt;&gt;w[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=m;j&gt;=<span class=\"number\">0</span>;j--)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;s[i];k++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v[i][k]&lt;=j)</span><br><span class=\"line\">                    dp[j]=<span class=\"built_in\">max</span>(dp[j],dp[j-v[i][k]]+w[i][k]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;dp[m]&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-线性dp\">2.线性dp</h2>\n<h3 id=\"2-1-数字三角形\">2.1 数字三角形</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=i;j++)</span><br><span class=\"line\">            cin&gt;&gt;g[i][j];</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=i;j++)</span><br><span class=\"line\">            dp[i][j]=<span class=\"built_in\">max</span>(dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>],dp[i+<span class=\"number\">1</span>][j])+g[i][j];</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout&lt;&lt;dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]&lt;&lt;endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-最长上升子序列\">2.2 最长上升子序列</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N],dp[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) cin&gt;&gt;g[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dp,dp+n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> res=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(g[i]&gt;g[j])</span><br><span class=\"line\">                dp[i]=<span class=\"built_in\">max</span>(dp[i],dp[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res=<span class=\"built_in\">max</span>(dp[i],res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-最长公共子序列\">2.3 最长公共子序列</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> m,n;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][N];</span><br><span class=\"line\"><span class=\"type\">char</span> a[N],b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%s&quot;</span>,a+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            dp[i][j]=<span class=\"built_in\">max</span>(dp[i<span class=\"number\">-1</span>][j],dp[i][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i]==b[j])</span><br><span class=\"line\">                dp[i][j]=<span class=\"built_in\">max</span>(dp[i][j],dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dp[n][m]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-最短编辑距离\">2.4 最短编辑距离</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> m,n;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][N];</span><br><span class=\"line\"><span class=\"type\">char</span> a[N],b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%s&quot;</span>,&amp;n,a+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%s&quot;</span>,&amp;m,b+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//一定要考虑边界问题！！！</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;i++) dp[<span class=\"number\">0</span>][i]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++) dp[i][<span class=\"number\">0</span>]=i;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//相等即直接转换状态，不相等取所有状态的最小值再+1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i]==b[j])</span><br><span class=\"line\">                dp[i][j]=dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">                dp[i][j]=<span class=\"built_in\">min</span>(<span class=\"built_in\">min</span>(dp[i<span class=\"number\">-1</span>][j],dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]),dp[i][j<span class=\"number\">-1</span>])+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dp[n][m]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-进阶dp\">3.进阶dp</h2>\n<h3 id=\"3-1-区间dp\">3.1 区间dp</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">310</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> s[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a);</span><br><span class=\"line\">        s[i]=s[i<span class=\"number\">-1</span>]+a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> len=<span class=\"number\">1</span>;len&lt;n;len++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i+len&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l=i,r=i+len;</span><br><span class=\"line\">            dp[l][r]=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=l;k&lt;r;k++)&#123;</span><br><span class=\"line\">                dp[l][r]=<span class=\"built_in\">min</span>(dp[l][r],dp[l][k]+dp[k+<span class=\"number\">1</span>][r]+s[r]-s[l<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;dp[<span class=\"number\">1</span>][n]&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2状态压缩dp\">3.2状态压缩dp</h3>\n<h4 id=\"蒙德里安的梦想\">蒙德里安的梦想</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">12</span>,M=<span class=\"number\">1</span>&lt;&lt;N;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> dp[N][M];</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[M];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//预处理</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n&gt;&gt;m,n||m)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">fill</span>(dp[<span class=\"number\">0</span>],dp[<span class=\"number\">0</span>]+N*M,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1</span>&lt;&lt;n;i++)&#123;</span><br><span class=\"line\">            st[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;&gt;j&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt&amp;<span class=\"number\">1</span>) st[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">                    cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> cnt++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cnt&amp;<span class=\"number\">1</span>) st[i]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">1</span>&lt;&lt;n;j++)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">1</span>&lt;&lt;n;k++)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!(j&amp;k)&amp;&amp;st[j|k])</span><br><span class=\"line\">                        dp[i][j]+=dp[i<span class=\"number\">-1</span>][k];</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">        cout&lt;&lt;dp[m][<span class=\"number\">0</span>]&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"状态压缩dp求哈密顿路径\">状态压缩dp求哈密顿路径</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">20</span>,M=<span class=\"number\">1</span>&lt;&lt;N;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> w[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[M][N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">            cin&gt;&gt;w[i][j];</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dp[<span class=\"number\">0</span>],dp[<span class=\"number\">0</span>]+M*N,<span class=\"number\">0x3f3f3f</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1</span>&lt;&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;&gt;j&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;n;k++)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((i-(<span class=\"number\">1</span>&lt;&lt;j))&gt;&gt;k&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">                        dp[i][j]=<span class=\"built_in\">min</span>(dp[i][j],dp[i-(<span class=\"number\">1</span>&lt;&lt;j)][k]+w[k][j]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;dp[(<span class=\"number\">1</span>&lt;&lt;n)<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>]&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-树形dp\">3.3 树形dp</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">6010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> happy[N];</span><br><span class=\"line\"><span class=\"type\">int</span> h[N],e[N],ne[N],idx;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[N][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> father[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx]=b;</span><br><span class=\"line\">    ne[idx]=h[a];</span><br><span class=\"line\">    h[a]=idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dp[u][<span class=\"number\">1</span>]=happy[u];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=h[u];i!=<span class=\"number\">-1</span>;i=ne[i])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=e[i];</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(j);</span><br><span class=\"line\">        dp[u][<span class=\"number\">0</span>]+=<span class=\"built_in\">max</span>(dp[j][<span class=\"number\">0</span>],dp[j][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        dp[u][<span class=\"number\">1</span>]+=dp[j][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;happy[i]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(h,h+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        father[a]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(b,a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> root=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(father[root]) root++;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(root);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,<span class=\"built_in\">max</span>(dp[root][<span class=\"number\">0</span>],dp[root][<span class=\"number\">1</span>]));</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-记忆化搜索\">4.记忆化搜索</h2>\n<h3 id=\"4-1-斐波那契（记录值）\">4.1 斐波那契（记录值）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> dp[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//斐波那契递归写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>||n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dp[n]!=<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> dp[N];</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        dp[n]=<span class=\"built_in\">F</span>(n<span class=\"number\">-1</span>)+<span class=\"built_in\">F</span>(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dp,dp+N,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">F</span>(n);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-滑雪\">4.2 滑雪</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">310</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> f[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> s[<span class=\"number\">2</span>][<span class=\"number\">4</span>]=&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dp</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[x][y]!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> f[x][y];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    f[x][y]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a=x+s[<span class=\"number\">0</span>][i],b=y+s[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a&gt;=<span class=\"number\">1</span>&amp;&amp;a&lt;=n&amp;&amp;b&gt;=<span class=\"number\">1</span>&amp;&amp;b&lt;=m&amp;&amp;g[a][b]&lt;g[x][y])</span><br><span class=\"line\">            f[x][y]=<span class=\"built_in\">max</span>(f[x][y],<span class=\"built_in\">dp</span>(a,b)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[x][y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">            cin&gt;&gt;g[i][j];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">            sum=<span class=\"built_in\">max</span>(sum,<span class=\"built_in\">dp</span>(i,j));</span><br><span class=\"line\">\t</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n"}],"PostAsset":[{"_id":"source/_posts/UE5场景制作/test1.png","slug":"test1.png","post":"clxn9rvnx0003hwtv1ta86jlj","modified":0,"renderable":0},{"_id":"source/_posts/UE5场景制作/test2.png","slug":"test2.png","post":"clxn9rvnx0003hwtv1ta86jlj","modified":0,"renderable":0},{"_id":"source/_posts/UE5场景制作/test3.png","slug":"test3.png","post":"clxn9rvnx0003hwtv1ta86jlj","modified":0,"renderable":0},{"_id":"source/_posts/UE5场景制作/test4.jpg","slug":"test4.jpg","post":"clxn9rvnx0003hwtv1ta86jlj","modified":0,"renderable":0},{"_id":"source/_posts/UE5场景制作/test5.png","slug":"test5.png","post":"clxn9rvnx0003hwtv1ta86jlj","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/1.png","slug":"1.png","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/10.jpg","slug":"10.jpg","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/11.png","slug":"11.png","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/12.png","slug":"12.png","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/2.png","slug":"2.png","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/3.png","slug":"3.png","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/4.png","slug":"4.png","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/5.png","slug":"5.png","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/6.png","slug":"6.png","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/7.png","slug":"7.png","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/8.png","slug":"8.png","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/csp-j1知识点/9.jpg","slug":"9.jpg","post":"clxn9rvo8000phwtvavj847pf","modified":0,"renderable":0},{"_id":"source/_posts/基于Pytorch框架的深度学习语言对话模型/1.png","slug":"1.png","post":"clxn9rvo9000xhwtv3qif4jkv","modified":0,"renderable":0},{"_id":"source/_posts/基于Pytorch框架的深度学习语言对话模型/2.png","slug":"2.png","post":"clxn9rvo9000xhwtv3qif4jkv","modified":0,"renderable":0},{"_id":"source/_posts/基于Pytorch框架的深度学习语言对话模型/3.png","slug":"3.png","post":"clxn9rvo9000xhwtv3qif4jkv","modified":0,"renderable":0},{"_id":"source/_posts/基于Pytorch框架的深度学习语言对话模型/4.png","slug":"4.png","post":"clxn9rvo9000xhwtv3qif4jkv","modified":0,"renderable":0},{"_id":"source/_posts/算法模板/af26922d331d4e20a18842f5b0d4b8d0.png","slug":"af26922d331d4e20a18842f5b0d4b8d0.png","post":"clxn9rvoa0013hwtv34kgd6b2","modified":0,"renderable":0},{"_id":"source/_posts/算法知识点/test1.png","slug":"test1.png","post":"clxn9rvoa0011hwtv1suu4q9u","modified":0,"renderable":0},{"_id":"source/_posts/算法知识点/test2.png","slug":"test2.png","post":"clxn9rvoa0011hwtv1suu4q9u","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clxn9rvnv0001hwtveq3kdsbx","category_id":"clxn9rvny0004hwtv3qpp4qwj","_id":"clxn9rvo2000ghwtv3ier4fks"},{"post_id":"clxn9rvnx0003hwtv1ta86jlj","category_id":"clxn9rvo0000bhwtv2uszhvcz","_id":"clxn9rvo3000lhwtv18gqcd6f"},{"post_id":"clxn9rvnz0007hwtv2og423ke","category_id":"clxn9rvny0004hwtv3qpp4qwj","_id":"clxn9rvo3000mhwtvb6nhbwgd"},{"post_id":"clxn9rvo00009hwtv4gpb7n7y","category_id":"clxn9rvo0000bhwtv2uszhvcz","_id":"clxn9rvo3000nhwtvhqjg8vs6"},{"post_id":"clxn9rvo7000ohwtv76pz2new","category_id":"clxn9rvny0004hwtv3qpp4qwj","_id":"clxn9rvo9000vhwtvdxni4qrm"},{"post_id":"clxn9rvo9000whwtva6liaqy8","category_id":"clxn9rvny0004hwtv3qpp4qwj","_id":"clxn9rvob0014hwtv8gfr33fa"},{"post_id":"clxn9rvo8000phwtvavj847pf","category_id":"clxn9rvo8000shwtv97zve3bd","_id":"clxn9rvob0018hwtv54rk1fo1"},{"post_id":"clxn9rvo8000rhwtv3bvage28","category_id":"clxn9rvoa000yhwtv71kce6lp","_id":"clxn9rvob001bhwtv5lpf96lo"},{"post_id":"clxn9rvo9000uhwtv3fdo7f8a","category_id":"clxn9rvoa000yhwtv71kce6lp","_id":"clxn9rvoc001ghwtv8lkqfioz"},{"post_id":"clxn9rvo9000xhwtv3qif4jkv","category_id":"clxn9rvoa000yhwtv71kce6lp","_id":"clxn9rvoc001ihwtvao2r722f"},{"post_id":"clxn9rvoa0011hwtv1suu4q9u","category_id":"clxn9rvoc001fhwtv8ver3y2o","_id":"clxn9rvoc001khwtv0cstaq31"},{"post_id":"clxn9rvoa0013hwtv34kgd6b2","category_id":"clxn9rvoc001fhwtv8ver3y2o","_id":"clxn9rvoc001lhwtvenxu6y8d"}],"PostTag":[{"post_id":"clxn9rvnv0001hwtveq3kdsbx","tag_id":"clxn9rvny0005hwtvhhacbd7b","_id":"clxn9rvo1000dhwtv7crh55c2"},{"post_id":"clxn9rvnz0007hwtv2og423ke","tag_id":"clxn9rvny0005hwtvhhacbd7b","_id":"clxn9rvo2000ihwtv7ycbc2hg"},{"post_id":"clxn9rvo7000ohwtv76pz2new","tag_id":"clxn9rvny0005hwtvhhacbd7b","_id":"clxn9rvo8000qhwtv8lt1bjzh"},{"post_id":"clxn9rvo9000whwtva6liaqy8","tag_id":"clxn9rvny0005hwtvhhacbd7b","_id":"clxn9rvoa0010hwtv25cs3jf6"},{"post_id":"clxn9rvo8000phwtvavj847pf","tag_id":"clxn9rvo8000thwtv3n2sak24","_id":"clxn9rvoa0012hwtvahth6ryo"},{"post_id":"clxn9rvoa0011hwtv1suu4q9u","tag_id":"clxn9rvo8000thwtv3n2sak24","_id":"clxn9rvob0017hwtvgp6171ur"},{"post_id":"clxn9rvo8000rhwtv3bvage28","tag_id":"clxn9rvoa000zhwtvh0v32c6x","_id":"clxn9rvob0019hwtve6gp5qzg"},{"post_id":"clxn9rvoa0013hwtv34kgd6b2","tag_id":"clxn9rvo8000thwtv3n2sak24","_id":"clxn9rvob001dhwtvach377yp"},{"post_id":"clxn9rvo9000uhwtv3fdo7f8a","tag_id":"clxn9rvoa000zhwtvh0v32c6x","_id":"clxn9rvoc001ehwtv6rc3dsfi"},{"post_id":"clxn9rvo9000xhwtv3qif4jkv","tag_id":"clxn9rvoa000zhwtvh0v32c6x","_id":"clxn9rvoc001hhwtvcxosao95"}],"Tag":[{"name":"题解","_id":"clxn9rvny0005hwtvhhacbd7b"},{"name":"算法","_id":"clxn9rvo8000thwtv3n2sak24"},{"name":"深度学习","_id":"clxn9rvoa000zhwtvh0v32c6x"}]}}